
UniController-OnBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000104e4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000848  08010678  08010678  00020678  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010ec0  08010ec0  00030380  2**0
                  CONTENTS
  4 .ARM          00000008  08010ec0  08010ec0  00020ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010ec8  08010ec8  00030380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010ec8  08010ec8  00020ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010ecc  08010ecc  00020ecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000380  20000000  08010ed0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030380  2**0
                  CONTENTS
 10 .bss          0000ae78  20000380  20000380  00030380  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000b1f8  2000b1f8  00030380  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030380  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d922  00000000  00000000  000303b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000434f  00000000  00000000  0004dcd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001868  00000000  00000000  00052028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000016f8  00000000  00000000  00053890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000237dd  00000000  00000000  00054f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001eed8  00000000  00000000  00078765  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c939f  00000000  00000000  0009763d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001609dc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007b54  00000000  00000000  00160a2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000380 	.word	0x20000380
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801065c 	.word	0x0801065c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000384 	.word	0x20000384
 80001cc:	0801065c 	.word	0x0801065c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <HAL_TIM_PeriodElapsedCallback>:
#define STEP_FREQ 500

// (will take many hours to overflow)
uint32_t scheduler_ctr = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000f4c:	b5b0      	push	{r4, r5, r7, lr}
 8000f4e:	b098      	sub	sp, #96	; 0x60
 8000f50:	af06      	add	r7, sp, #24
 8000f52:	6078      	str	r0, [r7, #4]
	if (htim == &TIM_REALTIME) { // TIM_REALTIME ticks once every us, elapses once every ms
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	4a5d      	ldr	r2, [pc, #372]	; (80010cc <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d106      	bne.n	8000f6a <HAL_TIM_PeriodElapsedCallback+0x1e>
		ms_counter++;
 8000f5c:	4b5c      	ldr	r3, [pc, #368]	; (80010d0 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	3301      	adds	r3, #1
 8000f62:	4a5b      	ldr	r2, [pc, #364]	; (80010d0 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000f64:	6013      	str	r3, [r2, #0]
		dead_mans_switch_update_led();
 8000f66:	f000 f967 	bl	8001238 <dead_mans_switch_update_led>
	}
	if (htim == &TIM_SCHEDULER ) {
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a59      	ldr	r2, [pc, #356]	; (80010d4 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	f040 80a8 	bne.w	80010c4 <HAL_TIM_PeriodElapsedCallback+0x178>
		scheduler_ctr++;
 8000f74:	4b58      	ldr	r3, [pc, #352]	; (80010d8 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	4a57      	ldr	r2, [pc, #348]	; (80010d8 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000f7c:	6013      	str	r3, [r2, #0]

		if (scheduler_ctr % (SCHEDULER_FREQ / ACC_FREQ) == 0) {
 8000f7e:	4b56      	ldr	r3, [pc, #344]	; (80010d8 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	4b56      	ldr	r3, [pc, #344]	; (80010dc <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000f84:	fba3 1302 	umull	r1, r3, r3, r2
 8000f88:	095b      	lsrs	r3, r3, #5
 8000f8a:	2164      	movs	r1, #100	; 0x64
 8000f8c:	fb01 f303 	mul.w	r3, r1, r3
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d116      	bne.n	8000fc4 <HAL_TIM_PeriodElapsedCallback+0x78>
			queue_put(&MAIN_QUEUE, (Message) { .ty = MSG_REQ_ACC });
 8000f96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f9a:	2220      	movs	r2, #32
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f00b fd70 	bl	800ca84 <memset>
 8000fa4:	2305      	movs	r3, #5
 8000fa6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8000faa:	466d      	mov	r5, sp
 8000fac:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8000fb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fb4:	6823      	ldr	r3, [r4, #0]
 8000fb6:	602b      	str	r3, [r5, #0]
 8000fb8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fbc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fbe:	4848      	ldr	r0, [pc, #288]	; (80010e0 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000fc0:	f001 fac5 	bl	800254e <queue_put>
		}
		if (scheduler_ctr % (SCHEDULER_FREQ / VESC_FREQ) == 0) {
 8000fc4:	4b44      	ldr	r3, [pc, #272]	; (80010d8 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	4b44      	ldr	r3, [pc, #272]	; (80010dc <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000fca:	fba3 1302 	umull	r1, r3, r3, r2
 8000fce:	099b      	lsrs	r3, r3, #6
 8000fd0:	21c8      	movs	r1, #200	; 0xc8
 8000fd2:	fb01 f303 	mul.w	r3, r1, r3
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d12c      	bne.n	8001036 <HAL_TIM_PeriodElapsedCallback+0xea>
			queue_put(&MAIN_QUEUE, (Message) { .ty = MSG_REQ_VESC });
 8000fdc:	f107 0308 	add.w	r3, r7, #8
 8000fe0:	2220      	movs	r2, #32
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f00b fd4d 	bl	800ca84 <memset>
 8000fea:	2303      	movs	r3, #3
 8000fec:	723b      	strb	r3, [r7, #8]
 8000fee:	466d      	mov	r5, sp
 8000ff0:	f107 0414 	add.w	r4, r7, #20
 8000ff4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ff6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ff8:	6823      	ldr	r3, [r4, #0]
 8000ffa:	602b      	str	r3, [r5, #0]
 8000ffc:	f107 0308 	add.w	r3, r7, #8
 8001000:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001002:	4837      	ldr	r0, [pc, #220]	; (80010e0 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001004:	f001 faa3 	bl	800254e <queue_put>
			queue_put(&MAIN_QUEUE, (Message) { .ty = MSG_FLUSH_VESC });
 8001008:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800100c:	2220      	movs	r2, #32
 800100e:	2100      	movs	r1, #0
 8001010:	4618      	mov	r0, r3
 8001012:	f00b fd37 	bl	800ca84 <memset>
 8001016:	2304      	movs	r3, #4
 8001018:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800101c:	466d      	mov	r5, sp
 800101e:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8001022:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001024:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001026:	6823      	ldr	r3, [r4, #0]
 8001028:	602b      	str	r3, [r5, #0]
 800102a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800102e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001030:	482b      	ldr	r0, [pc, #172]	; (80010e0 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001032:	f001 fa8c 	bl	800254e <queue_put>
		}
		if (scheduler_ctr % (SCHEDULER_FREQ / DUMP_FREQ) == 0) {
 8001036:	4b28      	ldr	r3, [pc, #160]	; (80010d8 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	4b28      	ldr	r3, [pc, #160]	; (80010dc <HAL_TIM_PeriodElapsedCallback+0x190>)
 800103c:	fba3 1302 	umull	r1, r3, r3, r2
 8001040:	099b      	lsrs	r3, r3, #6
 8001042:	21c8      	movs	r1, #200	; 0xc8
 8001044:	fb01 f303 	mul.w	r3, r1, r3
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	2b00      	cmp	r3, #0
 800104c:	d116      	bne.n	800107c <HAL_TIM_PeriodElapsedCallback+0x130>
			queue_put(&MAIN_QUEUE, (Message) { .ty = MSG_SEND_DEBUG });
 800104e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001052:	2220      	movs	r2, #32
 8001054:	2100      	movs	r1, #0
 8001056:	4618      	mov	r0, r3
 8001058:	f00b fd14 	bl	800ca84 <memset>
 800105c:	2301      	movs	r3, #1
 800105e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8001062:	466d      	mov	r5, sp
 8001064:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8001068:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800106a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800106c:	6823      	ldr	r3, [r4, #0]
 800106e:	602b      	str	r3, [r5, #0]
 8001070:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001074:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001076:	481a      	ldr	r0, [pc, #104]	; (80010e0 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001078:	f001 fa69 	bl	800254e <queue_put>
		}
		if (scheduler_ctr % (SCHEDULER_FREQ / STEP_FREQ) == 0) {
 800107c:	4b16      	ldr	r3, [pc, #88]	; (80010d8 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800107e:	6819      	ldr	r1, [r3, #0]
 8001080:	4b18      	ldr	r3, [pc, #96]	; (80010e4 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001082:	fba3 2301 	umull	r2, r3, r3, r1
 8001086:	091a      	lsrs	r2, r3, #4
 8001088:	4613      	mov	r3, r2
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	4413      	add	r3, r2
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	1aca      	subs	r2, r1, r3
 8001092:	2a00      	cmp	r2, #0
 8001094:	d116      	bne.n	80010c4 <HAL_TIM_PeriodElapsedCallback+0x178>
			queue_put(&MAIN_QUEUE, (Message) { .ty = MSG_TIME_STEP });
 8001096:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800109a:	2220      	movs	r2, #32
 800109c:	2100      	movs	r1, #0
 800109e:	4618      	mov	r0, r3
 80010a0:	f00b fcf0 	bl	800ca84 <memset>
 80010a4:	2302      	movs	r3, #2
 80010a6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 80010aa:	466d      	mov	r5, sp
 80010ac:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80010b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010b4:	6823      	ldr	r3, [r4, #0]
 80010b6:	602b      	str	r3, [r5, #0]
 80010b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010be:	4808      	ldr	r0, [pc, #32]	; (80010e0 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80010c0:	f001 fa45 	bl	800254e <queue_put>
		}
	}
}
 80010c4:	bf00      	nop
 80010c6:	3748      	adds	r7, #72	; 0x48
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bdb0      	pop	{r4, r5, r7, pc}
 80010cc:	200003f0 	.word	0x200003f0
 80010d0:	20009624 	.word	0x20009624
 80010d4:	20000438 	.word	0x20000438
 80010d8:	20009628 	.word	0x20009628
 80010dc:	51eb851f 	.word	0x51eb851f
 80010e0:	20000508 	.word	0x20000508
 80010e4:	cccccccd 	.word	0xcccccccd

080010e8 <us_since_startup>:


// This will overflow after 2^32/10^6s ≈ 4300s ≈ 1h11m
// Overflow should be handled by the get_dt and reset_dt
uint32_t us_since_startup() {
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
	uint32_t us_counter = ms_counter * 1000;
 80010ee:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <us_since_startup+0x30>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010f6:	fb02 f303 	mul.w	r3, r2, r3
 80010fa:	607b      	str	r3, [r7, #4]
	uint32_t us_timer = TIM_REALTIME.Instance->CNT;
 80010fc:	4b07      	ldr	r3, [pc, #28]	; (800111c <us_since_startup+0x34>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001102:	603b      	str	r3, [r7, #0]
	return us_counter + us_timer;
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	4413      	add	r3, r2
}
 800110a:	4618      	mov	r0, r3
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	20009624 	.word	0x20009624
 800111c:	200003f0 	.word	0x200003f0

08001120 <get_and_reset_dt_us>:

uint32_t last_step = 0;
uint32_t get_and_reset_dt_us() {
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
	uint32_t now = us_since_startup();
 8001126:	f7ff ffdf 	bl	80010e8 <us_since_startup>
 800112a:	6078      	str	r0, [r7, #4]
	uint32_t dt = now - last_step; // If now < last_step, then we have overflowed. This should still get the right value
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <get_and_reset_dt_us+0x28>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	603b      	str	r3, [r7, #0]
	last_step = now;
 8001136:	4a04      	ldr	r2, [pc, #16]	; (8001148 <get_and_reset_dt_us+0x28>)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6013      	str	r3, [r2, #0]
	return dt;
 800113c:	683b      	ldr	r3, [r7, #0]
}
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	2000962c 	.word	0x2000962c

0800114c <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
	if (huart == &UART_VESC_PITCH) {
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4a09      	ldr	r2, [pc, #36]	; (800117c <HAL_UART_TxCpltCallback+0x30>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d103      	bne.n	8001164 <HAL_UART_TxCpltCallback+0x18>
		vesc_uart_cb_txcplt(&vesc_pitch, huart);
 800115c:	6879      	ldr	r1, [r7, #4]
 800115e:	4808      	ldr	r0, [pc, #32]	; (8001180 <HAL_UART_TxCpltCallback+0x34>)
 8001160:	f001 fddc 	bl	8002d1c <vesc_uart_cb_txcplt>
	}
	if (huart == &UART_VESC_ROLL) {
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a07      	ldr	r2, [pc, #28]	; (8001184 <HAL_UART_TxCpltCallback+0x38>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d103      	bne.n	8001174 <HAL_UART_TxCpltCallback+0x28>
		vesc_uart_cb_txcplt(&vesc_roll, huart);
 800116c:	6879      	ldr	r1, [r7, #4]
 800116e:	4806      	ldr	r0, [pc, #24]	; (8001188 <HAL_UART_TxCpltCallback+0x3c>)
 8001170:	f001 fdd4 	bl	8002d1c <vesc_uart_cb_txcplt>
	}
}
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20000480 	.word	0x20000480
 8001180:	20008514 	.word	0x20008514
 8001184:	200004c4 	.word	0x200004c4
 8001188:	20008d9c 	.word	0x20008d9c

0800118c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
	if (huart == &UART_VESC_PITCH) {
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4a09      	ldr	r2, [pc, #36]	; (80011bc <HAL_UART_RxCpltCallback+0x30>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d103      	bne.n	80011a4 <HAL_UART_RxCpltCallback+0x18>
		vesc_uart_cb_rxcplt(&vesc_pitch, huart);
 800119c:	6879      	ldr	r1, [r7, #4]
 800119e:	4808      	ldr	r0, [pc, #32]	; (80011c0 <HAL_UART_RxCpltCallback+0x34>)
 80011a0:	f001 fddd 	bl	8002d5e <vesc_uart_cb_rxcplt>
	}
	if (huart == &UART_VESC_ROLL) {
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4a07      	ldr	r2, [pc, #28]	; (80011c4 <HAL_UART_RxCpltCallback+0x38>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d103      	bne.n	80011b4 <HAL_UART_RxCpltCallback+0x28>
		vesc_uart_cb_rxcplt(&vesc_roll, huart);
 80011ac:	6879      	ldr	r1, [r7, #4]
 80011ae:	4806      	ldr	r0, [pc, #24]	; (80011c8 <HAL_UART_RxCpltCallback+0x3c>)
 80011b0:	f001 fdd5 	bl	8002d5e <vesc_uart_cb_rxcplt>
	}
}
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000480 	.word	0x20000480
 80011c0:	20008514 	.word	0x20008514
 80011c4:	200004c4 	.word	0x200004c4
 80011c8:	20008d9c 	.word	0x20008d9c

080011cc <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
	if (huart == &UART_VESC_PITCH) {
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4a09      	ldr	r2, [pc, #36]	; (80011fc <HAL_UART_ErrorCallback+0x30>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d103      	bne.n	80011e4 <HAL_UART_ErrorCallback+0x18>
		vesc_uart_cb_rxcplt(&vesc_pitch, huart);
 80011dc:	6879      	ldr	r1, [r7, #4]
 80011de:	4808      	ldr	r0, [pc, #32]	; (8001200 <HAL_UART_ErrorCallback+0x34>)
 80011e0:	f001 fdbd 	bl	8002d5e <vesc_uart_cb_rxcplt>
	}
	if (huart == &UART_VESC_ROLL) {
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4a07      	ldr	r2, [pc, #28]	; (8001204 <HAL_UART_ErrorCallback+0x38>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d103      	bne.n	80011f4 <HAL_UART_ErrorCallback+0x28>
		vesc_uart_cb_rxcplt(&vesc_roll, huart);
 80011ec:	6879      	ldr	r1, [r7, #4]
 80011ee:	4806      	ldr	r0, [pc, #24]	; (8001208 <HAL_UART_ErrorCallback+0x3c>)
 80011f0:	f001 fdb5 	bl	8002d5e <vesc_uart_cb_rxcplt>
	}
}
 80011f4:	bf00      	nop
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000480 	.word	0x20000480
 8001200:	20008514 	.word	0x20008514
 8001204:	200004c4 	.word	0x200004c4
 8001208:	20008d9c 	.word	0x20008d9c

0800120c <dead_mans_switch_activated>:

bool dead_mans_switch_activated() {
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DEADMAN_GND_GPIO_Port, DEADMAN_GND_Pin, GPIO_PIN_RESET);
 8001210:	2200      	movs	r2, #0
 8001212:	2101      	movs	r1, #1
 8001214:	4807      	ldr	r0, [pc, #28]	; (8001234 <dead_mans_switch_activated+0x28>)
 8001216:	f003 fcb5 	bl	8004b84 <HAL_GPIO_WritePin>
	return HAL_GPIO_ReadPin(DEADMAN_SW_GPIO_Port, DEADMAN_SW_Pin) == GPIO_PIN_RESET;
 800121a:	2102      	movs	r1, #2
 800121c:	4805      	ldr	r0, [pc, #20]	; (8001234 <dead_mans_switch_activated+0x28>)
 800121e:	f003 fc99 	bl	8004b54 <HAL_GPIO_ReadPin>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	bf0c      	ite	eq
 8001228:	2301      	moveq	r3, #1
 800122a:	2300      	movne	r3, #0
 800122c:	b2db      	uxtb	r3, r3
}
 800122e:	4618      	mov	r0, r3
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40020800 	.word	0x40020800

08001238 <dead_mans_switch_update_led>:
	1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0,
	1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0,
	0, 0, 0, 0, 0
};

void dead_mans_switch_update_led() {
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
	// bool blink_on = (ms_counter % 600 < 300) && ((ms_counter & 3) == 1);
	bool blink_on = morse_table[(ms_counter / 83) % sizeof(morse_table)];
 800123e:	4b1b      	ldr	r3, [pc, #108]	; (80012ac <dead_mans_switch_update_led+0x74>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a1b      	ldr	r2, [pc, #108]	; (80012b0 <dead_mans_switch_update_led+0x78>)
 8001244:	fba2 2303 	umull	r2, r3, r2, r3
 8001248:	091a      	lsrs	r2, r3, #4
 800124a:	4b1a      	ldr	r3, [pc, #104]	; (80012b4 <dead_mans_switch_update_led+0x7c>)
 800124c:	fba3 1302 	umull	r1, r3, r3, r2
 8001250:	095b      	lsrs	r3, r3, #5
 8001252:	212c      	movs	r1, #44	; 0x2c
 8001254:	fb01 f303 	mul.w	r3, r1, r3
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	4a17      	ldr	r2, [pc, #92]	; (80012b8 <dead_mans_switch_update_led+0x80>)
 800125c:	5cd3      	ldrb	r3, [r2, r3]
 800125e:	71fb      	strb	r3, [r7, #7]
	blink_on &= (ms_counter & 3) == 1;
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	4a12      	ldr	r2, [pc, #72]	; (80012ac <dead_mans_switch_update_led+0x74>)
 8001264:	6812      	ldr	r2, [r2, #0]
 8001266:	f002 0203 	and.w	r2, r2, #3
 800126a:	2a01      	cmp	r2, #1
 800126c:	bf0c      	ite	eq
 800126e:	2201      	moveq	r2, #1
 8001270:	2200      	movne	r2, #0
 8001272:	b2d2      	uxtb	r2, r2
 8001274:	4013      	ands	r3, r2
 8001276:	2b00      	cmp	r3, #0
 8001278:	bf14      	ite	ne
 800127a:	2301      	movne	r3, #1
 800127c:	2300      	moveq	r3, #0
 800127e:	71fb      	strb	r3, [r7, #7]
	blink_on |= dead_mans_switch_activated();
 8001280:	f7ff ffc4 	bl	800120c <dead_mans_switch_activated>
 8001284:	4603      	mov	r3, r0
 8001286:	461a      	mov	r2, r3
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	4313      	orrs	r3, r2
 800128c:	b2db      	uxtb	r3, r3
 800128e:	2b00      	cmp	r3, #0
 8001290:	bf14      	ite	ne
 8001292:	2301      	movne	r3, #1
 8001294:	2300      	moveq	r3, #0
 8001296:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(DEADMAN_LED_GPIO_Port, DEADMAN_LED_Pin, blink_on ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	461a      	mov	r2, r3
 800129c:	2104      	movs	r1, #4
 800129e:	4807      	ldr	r0, [pc, #28]	; (80012bc <dead_mans_switch_update_led+0x84>)
 80012a0:	f003 fc70 	bl	8004b84 <HAL_GPIO_WritePin>
}
 80012a4:	bf00      	nop
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	20009624 	.word	0x20009624
 80012b0:	3159721f 	.word	0x3159721f
 80012b4:	ba2e8ba3 	.word	0xba2e8ba3
 80012b8:	0801086c 	.word	0x0801086c
 80012bc:	40020800 	.word	0x40020800

080012c0 <setup_mpu>:

#define I2C_TIMEOUT 20

// Puts the MPU6050 into active mode, with the appropriate CFGs from main.h set
void setup_mpu(I2C_HandleTypeDef *i2c, uint16_t acc_addr) {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b08a      	sub	sp, #40	; 0x28
 80012c4:	af04      	add	r7, sp, #16
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	460b      	mov	r3, r1
 80012ca:	807b      	strh	r3, [r7, #2]
	uint8_t pwr_mgnt_data[1] = {0x00}; // sleep = 0, cycle = 0
 80012cc:	2300      	movs	r3, #0
 80012ce:	753b      	strb	r3, [r7, #20]
	HAL_I2C_Mem_Write(i2c, acc_addr << 1, 0x6b, 1, pwr_mgnt_data, 1, I2C_TIMEOUT); // Disable sleep
 80012d0:	887b      	ldrh	r3, [r7, #2]
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	b299      	uxth	r1, r3
 80012d6:	2314      	movs	r3, #20
 80012d8:	9302      	str	r3, [sp, #8]
 80012da:	2301      	movs	r3, #1
 80012dc:	9301      	str	r3, [sp, #4]
 80012de:	f107 0314 	add.w	r3, r7, #20
 80012e2:	9300      	str	r3, [sp, #0]
 80012e4:	2301      	movs	r3, #1
 80012e6:	226b      	movs	r2, #107	; 0x6b
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f003 fda9 	bl	8004e40 <HAL_I2C_Mem_Write>

	uint8_t config[1] = {(0x0 << 3) | DLPF_CFG}; // fsync = 0, dlpf = 6 (5Hz)
 80012ee:	2306      	movs	r3, #6
 80012f0:	743b      	strb	r3, [r7, #16]
	HAL_I2C_Mem_Write(i2c, acc_addr << 1, 0x1a, 1, config, 1, I2C_TIMEOUT);
 80012f2:	887b      	ldrh	r3, [r7, #2]
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	b299      	uxth	r1, r3
 80012f8:	2314      	movs	r3, #20
 80012fa:	9302      	str	r3, [sp, #8]
 80012fc:	2301      	movs	r3, #1
 80012fe:	9301      	str	r3, [sp, #4]
 8001300:	f107 0310 	add.w	r3, r7, #16
 8001304:	9300      	str	r3, [sp, #0]
 8001306:	2301      	movs	r3, #1
 8001308:	221a      	movs	r2, #26
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f003 fd98 	bl	8004e40 <HAL_I2C_Mem_Write>

	uint8_t gyro_config[1] = {(0x0 << 5) | (GYRO_FS_CFG << 3)}; // no self-test
 8001310:	2318      	movs	r3, #24
 8001312:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Mem_Write(i2c, acc_addr << 1, 0x1b, 1, gyro_config, 1, I2C_TIMEOUT);
 8001314:	887b      	ldrh	r3, [r7, #2]
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	b299      	uxth	r1, r3
 800131a:	2314      	movs	r3, #20
 800131c:	9302      	str	r3, [sp, #8]
 800131e:	2301      	movs	r3, #1
 8001320:	9301      	str	r3, [sp, #4]
 8001322:	f107 030c 	add.w	r3, r7, #12
 8001326:	9300      	str	r3, [sp, #0]
 8001328:	2301      	movs	r3, #1
 800132a:	221b      	movs	r2, #27
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f003 fd87 	bl	8004e40 <HAL_I2C_Mem_Write>

	uint8_t acc_config[1] = {(0x0 << 5) | (ACC_FS_CFG << 3)}; // no self-test
 8001332:	2318      	movs	r3, #24
 8001334:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Mem_Write(i2c, acc_addr << 1, 0x1c, 1, acc_config, 1, I2C_TIMEOUT);
 8001336:	887b      	ldrh	r3, [r7, #2]
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	b299      	uxth	r1, r3
 800133c:	2314      	movs	r3, #20
 800133e:	9302      	str	r3, [sp, #8]
 8001340:	2301      	movs	r3, #1
 8001342:	9301      	str	r3, [sp, #4]
 8001344:	f107 0308 	add.w	r3, r7, #8
 8001348:	9300      	str	r3, [sp, #0]
 800134a:	2301      	movs	r3, #1
 800134c:	221c      	movs	r2, #28
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f003 fd76 	bl	8004e40 <HAL_I2C_Mem_Write>
}
 8001354:	bf00      	nop
 8001356:	3718      	adds	r7, #24
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	0000      	movs	r0, r0
	...

08001360 <get_accelerometer_data>:

// TODO: Do this with interrupt
AccData get_accelerometer_data(I2C_HandleTypeDef *i2c, uint16_t acc_addr) {
 8001360:	b580      	push	{r7, lr}
 8001362:	b0b2      	sub	sp, #200	; 0xc8
 8001364:	af04      	add	r7, sp, #16
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	4613      	mov	r3, r2
 800136c:	80fb      	strh	r3, [r7, #6]
	// 0x43 = gyro_xout_h
	// 0x44 = gyro_xout_
	uint8_t gyro_data[6] = {0x69, 0x69, 0x69, 0x69, 0x69, 0x69};
 800136e:	4ac0      	ldr	r2, [pc, #768]	; (8001670 <get_accelerometer_data+0x310>)
 8001370:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001374:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001378:	6018      	str	r0, [r3, #0]
 800137a:	3304      	adds	r3, #4
 800137c:	8019      	strh	r1, [r3, #0]

	if (HAL_I2C_Mem_Read(&hi2c2, acc_addr << 1, 0x43, 1, gyro_data, 6, I2C_TIMEOUT) == HAL_ERROR) {
 800137e:	88fb      	ldrh	r3, [r7, #6]
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	b299      	uxth	r1, r3
 8001384:	2314      	movs	r3, #20
 8001386:	9302      	str	r3, [sp, #8]
 8001388:	2306      	movs	r3, #6
 800138a:	9301      	str	r3, [sp, #4]
 800138c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001390:	9300      	str	r3, [sp, #0]
 8001392:	2301      	movs	r3, #1
 8001394:	2243      	movs	r2, #67	; 0x43
 8001396:	48b7      	ldr	r0, [pc, #732]	; (8001674 <get_accelerometer_data+0x314>)
 8001398:	f003 fe4c 	bl	8005034 <HAL_I2C_Mem_Read>
 800139c:	4603      	mov	r3, r0
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d10a      	bne.n	80013b8 <get_accelerometer_data+0x58>
		return (AccData) { .success = false };
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	461a      	mov	r2, r3
 80013a6:	2300      	movs	r3, #0
 80013a8:	6013      	str	r3, [r2, #0]
 80013aa:	6053      	str	r3, [r2, #4]
 80013ac:	6093      	str	r3, [r2, #8]
 80013ae:	60d3      	str	r3, [r2, #12]
 80013b0:	6113      	str	r3, [r2, #16]
 80013b2:	6153      	str	r3, [r2, #20]
 80013b4:	6193      	str	r3, [r2, #24]
	return (AccData) {
		.success = true,
		.gx = gx, .gy = gy, .gz = gz,
		.ax = ax, .ay = ay, .az = az
	};
}
 80013b6:	e148      	b.n	800164a <get_accelerometer_data+0x2ea>
	int16_t gx_i = (int16_t) ((gyro_data[0] << 8) | gyro_data[1]);
 80013b8:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 80013bc:	021b      	lsls	r3, r3, #8
 80013be:	b21a      	sxth	r2, r3
 80013c0:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 80013c4:	b21b      	sxth	r3, r3
 80013c6:	4313      	orrs	r3, r2
 80013c8:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
	int16_t gy_i = (int16_t) ((gyro_data[2] << 8) | gyro_data[3]);
 80013cc:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 80013d0:	021b      	lsls	r3, r3, #8
 80013d2:	b21a      	sxth	r2, r3
 80013d4:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80013d8:	b21b      	sxth	r3, r3
 80013da:	4313      	orrs	r3, r2
 80013dc:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
	int16_t gz_i = (int16_t) ((gyro_data[4] << 8) | gyro_data[5]);
 80013e0:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 80013e4:	021b      	lsls	r3, r3, #8
 80013e6:	b21a      	sxth	r2, r3
 80013e8:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 80013ec:	b21b      	sxth	r3, r3
 80013ee:	4313      	orrs	r3, r2
 80013f0:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
	float gx = gx_i * 0.01745329/ 131;
 80013f4:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff f893 	bl	8000524 <__aeabi_i2d>
 80013fe:	a396      	add	r3, pc, #600	; (adr r3, 8001658 <get_accelerometer_data+0x2f8>)
 8001400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001404:	f7ff f8f8 	bl	80005f8 <__aeabi_dmul>
 8001408:	4602      	mov	r2, r0
 800140a:	460b      	mov	r3, r1
 800140c:	4610      	mov	r0, r2
 800140e:	4619      	mov	r1, r3
 8001410:	a393      	add	r3, pc, #588	; (adr r3, 8001660 <get_accelerometer_data+0x300>)
 8001412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001416:	f7ff fa19 	bl	800084c <__aeabi_ddiv>
 800141a:	4602      	mov	r2, r0
 800141c:	460b      	mov	r3, r1
 800141e:	4610      	mov	r0, r2
 8001420:	4619      	mov	r1, r3
 8001422:	f7ff fbc1 	bl	8000ba8 <__aeabi_d2f>
 8001426:	4603      	mov	r3, r0
 8001428:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	float gy = gy_i * 0.01745329/ 131;
 800142c:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	; 0xb4
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff f877 	bl	8000524 <__aeabi_i2d>
 8001436:	a388      	add	r3, pc, #544	; (adr r3, 8001658 <get_accelerometer_data+0x2f8>)
 8001438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800143c:	f7ff f8dc 	bl	80005f8 <__aeabi_dmul>
 8001440:	4602      	mov	r2, r0
 8001442:	460b      	mov	r3, r1
 8001444:	4610      	mov	r0, r2
 8001446:	4619      	mov	r1, r3
 8001448:	a385      	add	r3, pc, #532	; (adr r3, 8001660 <get_accelerometer_data+0x300>)
 800144a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144e:	f7ff f9fd 	bl	800084c <__aeabi_ddiv>
 8001452:	4602      	mov	r2, r0
 8001454:	460b      	mov	r3, r1
 8001456:	4610      	mov	r0, r2
 8001458:	4619      	mov	r1, r3
 800145a:	f7ff fba5 	bl	8000ba8 <__aeabi_d2f>
 800145e:	4603      	mov	r3, r0
 8001460:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	float gz = gz_i * 0.01745329/ 131;
 8001464:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff f85b 	bl	8000524 <__aeabi_i2d>
 800146e:	a37a      	add	r3, pc, #488	; (adr r3, 8001658 <get_accelerometer_data+0x2f8>)
 8001470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001474:	f7ff f8c0 	bl	80005f8 <__aeabi_dmul>
 8001478:	4602      	mov	r2, r0
 800147a:	460b      	mov	r3, r1
 800147c:	4610      	mov	r0, r2
 800147e:	4619      	mov	r1, r3
 8001480:	a377      	add	r3, pc, #476	; (adr r3, 8001660 <get_accelerometer_data+0x300>)
 8001482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001486:	f7ff f9e1 	bl	800084c <__aeabi_ddiv>
 800148a:	4602      	mov	r2, r0
 800148c:	460b      	mov	r3, r1
 800148e:	4610      	mov	r0, r2
 8001490:	4619      	mov	r1, r3
 8001492:	f7ff fb89 	bl	8000ba8 <__aeabi_d2f>
 8001496:	4603      	mov	r3, r0
 8001498:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	uint8_t acc_data[6] = {0x69, 0x69, 0x69, 0x69, 0x69, 0x69};
 800149c:	4a74      	ldr	r2, [pc, #464]	; (8001670 <get_accelerometer_data+0x310>)
 800149e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80014a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014a6:	6018      	str	r0, [r3, #0]
 80014a8:	3304      	adds	r3, #4
 80014aa:	8019      	strh	r1, [r3, #0]
	if (HAL_I2C_Mem_Read(&hi2c2, acc_addr << 1, 0x3b, 1, acc_data, 6, I2C_TIMEOUT) == HAL_ERROR) {
 80014ac:	88fb      	ldrh	r3, [r7, #6]
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	b299      	uxth	r1, r3
 80014b2:	2314      	movs	r3, #20
 80014b4:	9302      	str	r3, [sp, #8]
 80014b6:	2306      	movs	r3, #6
 80014b8:	9301      	str	r3, [sp, #4]
 80014ba:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80014be:	9300      	str	r3, [sp, #0]
 80014c0:	2301      	movs	r3, #1
 80014c2:	223b      	movs	r2, #59	; 0x3b
 80014c4:	486b      	ldr	r0, [pc, #428]	; (8001674 <get_accelerometer_data+0x314>)
 80014c6:	f003 fdb5 	bl	8005034 <HAL_I2C_Mem_Read>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d10a      	bne.n	80014e6 <get_accelerometer_data+0x186>
		return (AccData) { .success = false };
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	461a      	mov	r2, r3
 80014d4:	2300      	movs	r3, #0
 80014d6:	6013      	str	r3, [r2, #0]
 80014d8:	6053      	str	r3, [r2, #4]
 80014da:	6093      	str	r3, [r2, #8]
 80014dc:	60d3      	str	r3, [r2, #12]
 80014de:	6113      	str	r3, [r2, #16]
 80014e0:	6153      	str	r3, [r2, #20]
 80014e2:	6193      	str	r3, [r2, #24]
}
 80014e4:	e0b1      	b.n	800164a <get_accelerometer_data+0x2ea>
	int16_t ax_i = (int16_t) ((acc_data[0] << 8) | acc_data[1]);
 80014e6:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80014ea:	021b      	lsls	r3, r3, #8
 80014ec:	b21a      	sxth	r2, r3
 80014ee:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 80014f2:	b21b      	sxth	r3, r3
 80014f4:	4313      	orrs	r3, r2
 80014f6:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
	int16_t ay_i = (int16_t) ((acc_data[2] << 8) | acc_data[3]);
 80014fa:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 80014fe:	021b      	lsls	r3, r3, #8
 8001500:	b21a      	sxth	r2, r3
 8001502:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8001506:	b21b      	sxth	r3, r3
 8001508:	4313      	orrs	r3, r2
 800150a:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
	int16_t az_i = (int16_t) ((acc_data[4] << 8) | acc_data[5]);
 800150e:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8001512:	021b      	lsls	r3, r3, #8
 8001514:	b21a      	sxth	r2, r3
 8001516:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800151a:	b21b      	sxth	r3, r3
 800151c:	4313      	orrs	r3, r2
 800151e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
	float ax = ax_i / 16384;
 8001522:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	; 0xa2
 8001526:	2b00      	cmp	r3, #0
 8001528:	da02      	bge.n	8001530 <get_accelerometer_data+0x1d0>
 800152a:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 800152e:	333f      	adds	r3, #63	; 0x3f
 8001530:	139b      	asrs	r3, r3, #14
 8001532:	b21b      	sxth	r3, r3
 8001534:	ee07 3a90 	vmov	s15, r3
 8001538:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800153c:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
	float ay = ay_i / 16384;
 8001540:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	; 0xa0
 8001544:	2b00      	cmp	r3, #0
 8001546:	da02      	bge.n	800154e <get_accelerometer_data+0x1ee>
 8001548:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 800154c:	333f      	adds	r3, #63	; 0x3f
 800154e:	139b      	asrs	r3, r3, #14
 8001550:	b21b      	sxth	r3, r3
 8001552:	ee07 3a90 	vmov	s15, r3
 8001556:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800155a:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
	float az = az_i / 16384;
 800155e:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	; 0x9e
 8001562:	2b00      	cmp	r3, #0
 8001564:	da02      	bge.n	800156c <get_accelerometer_data+0x20c>
 8001566:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 800156a:	333f      	adds	r3, #63	; 0x3f
 800156c:	139b      	asrs	r3, r3, #14
 800156e:	b21b      	sxth	r3, r3
 8001570:	ee07 3a90 	vmov	s15, r3
 8001574:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001578:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
    float az_mid = (13.45 + -6.7) / 2;
 800157c:	4b3e      	ldr	r3, [pc, #248]	; (8001678 <get_accelerometer_data+0x318>)
 800157e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float az_range = (13.45 - -6.7) / 2;
 8001582:	4b3e      	ldr	r3, [pc, #248]	; (800167c <get_accelerometer_data+0x31c>)
 8001584:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float ay_mid = (9.6 + -10.1) / 2;
 8001588:	4b3d      	ldr	r3, [pc, #244]	; (8001680 <get_accelerometer_data+0x320>)
 800158a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    float ay_range = (9.6 - -10.1) / 2;
 800158e:	4b3d      	ldr	r3, [pc, #244]	; (8001684 <get_accelerometer_data+0x324>)
 8001590:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float az_adj = (az - az_mid) / az_range * 9.82;
 8001594:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8001598:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800159c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015a0:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80015a4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80015a8:	ee16 0a90 	vmov	r0, s13
 80015ac:	f7fe ffcc 	bl	8000548 <__aeabi_f2d>
 80015b0:	a32d      	add	r3, pc, #180	; (adr r3, 8001668 <get_accelerometer_data+0x308>)
 80015b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b6:	f7ff f81f 	bl	80005f8 <__aeabi_dmul>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	4610      	mov	r0, r2
 80015c0:	4619      	mov	r1, r3
 80015c2:	f7ff faf1 	bl	8000ba8 <__aeabi_d2f>
 80015c6:	4603      	mov	r3, r0
 80015c8:	67fb      	str	r3, [r7, #124]	; 0x7c
    float ay_adj = (ay - ay_mid) / ay_range * 9.82;
 80015ca:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80015ce:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80015d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015d6:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80015da:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80015de:	ee16 0a90 	vmov	r0, s13
 80015e2:	f7fe ffb1 	bl	8000548 <__aeabi_f2d>
 80015e6:	a320      	add	r3, pc, #128	; (adr r3, 8001668 <get_accelerometer_data+0x308>)
 80015e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ec:	f7ff f804 	bl	80005f8 <__aeabi_dmul>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	4610      	mov	r0, r2
 80015f6:	4619      	mov	r1, r3
 80015f8:	f7ff fad6 	bl	8000ba8 <__aeabi_d2f>
 80015fc:	4603      	mov	r3, r0
 80015fe:	67bb      	str	r3, [r7, #120]	; 0x78
	return (AccData) {
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	461a      	mov	r2, r3
 8001604:	2300      	movs	r3, #0
 8001606:	6013      	str	r3, [r2, #0]
 8001608:	6053      	str	r3, [r2, #4]
 800160a:	6093      	str	r3, [r2, #8]
 800160c:	60d3      	str	r3, [r2, #12]
 800160e:	6113      	str	r3, [r2, #16]
 8001610:	6153      	str	r3, [r2, #20]
 8001612:	6193      	str	r3, [r2, #24]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2201      	movs	r2, #1
 8001618:	701a      	strb	r2, [r3, #0]
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001628:	609a      	str	r2, [r3, #8]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001630:	60da      	str	r2, [r3, #12]
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001638:	611a      	str	r2, [r3, #16]
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001640:	615a      	str	r2, [r3, #20]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001648:	619a      	str	r2, [r3, #24]
}
 800164a:	68f8      	ldr	r0, [r7, #12]
 800164c:	37b8      	adds	r7, #184	; 0xb8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	f3af 8000 	nop.w
 8001658:	7707c94d 	.word	0x7707c94d
 800165c:	3f91df46 	.word	0x3f91df46
 8001660:	00000000 	.word	0x00000000
 8001664:	40606000 	.word	0x40606000
 8001668:	0a3d70a4 	.word	0x0a3d70a4
 800166c:	4023a3d7 	.word	0x4023a3d7
 8001670:	08010678 	.word	0x08010678
 8001674:	2000039c 	.word	0x2000039c
 8001678:	40580000 	.word	0x40580000
 800167c:	41213333 	.word	0x41213333
 8001680:	be800000 	.word	0xbe800000
 8001684:	411d999a 	.word	0x411d999a

08001688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800168c:	f5ad 7d7d 	sub.w	sp, sp, #1012	; 0x3f4
 8001690:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001692:	f002 fe57 	bl	8004344 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001696:	f000 fd19 	bl	80020cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800169a:	f000 fe9f 	bl	80023dc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800169e:	f000 fe49 	bl	8002334 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 80016a2:	f000 fd7d 	bl	80021a0 <MX_I2C2_Init>
  MX_USB_DEVICE_Init();
 80016a6:	f00a fc8f 	bl	800bfc8 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 80016aa:	f000 fda7 	bl	80021fc <MX_TIM1_Init>
  MX_TIM2_Init();
 80016ae:	f000 fdf5 	bl	800229c <MX_TIM2_Init>
  MX_USART3_UART_Init();
 80016b2:	f000 fe69 	bl	8002388 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, SET);
 80016b6:	2201      	movs	r2, #1
 80016b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016bc:	4882      	ldr	r0, [pc, #520]	; (80018c8 <main+0x240>)
 80016be:	f003 fa61 	bl	8004b84 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80016c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016c6:	f002 feaf 	bl	8004428 <HAL_Delay>
    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, SET);
 80016ca:	2201      	movs	r2, #1
 80016cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016d0:	487d      	ldr	r0, [pc, #500]	; (80018c8 <main+0x240>)
 80016d2:	f003 fa57 	bl	8004b84 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80016d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016da:	f002 fea5 	bl	8004428 <HAL_Delay>
    HAL_GPIO_WritePin(LDERROR_GPIO_Port, LDERROR_Pin, SET);
 80016de:	2201      	movs	r2, #1
 80016e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016e4:	4878      	ldr	r0, [pc, #480]	; (80018c8 <main+0x240>)
 80016e6:	f003 fa4d 	bl	8004b84 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80016ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016ee:	f002 fe9b 	bl	8004428 <HAL_Delay>
  	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, RESET);
 80016f2:	2200      	movs	r2, #0
 80016f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016f8:	4873      	ldr	r0, [pc, #460]	; (80018c8 <main+0x240>)
 80016fa:	f003 fa43 	bl	8004b84 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80016fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001702:	f002 fe91 	bl	8004428 <HAL_Delay>
    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, RESET);
 8001706:	2200      	movs	r2, #0
 8001708:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800170c:	486e      	ldr	r0, [pc, #440]	; (80018c8 <main+0x240>)
 800170e:	f003 fa39 	bl	8004b84 <HAL_GPIO_WritePin>
  	HAL_Delay(500);
 8001712:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001716:	f002 fe87 	bl	8004428 <HAL_Delay>
    HAL_GPIO_WritePin(LDERROR_GPIO_Port, LDERROR_Pin, RESET);
 800171a:	2200      	movs	r2, #0
 800171c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001720:	4869      	ldr	r0, [pc, #420]	; (80018c8 <main+0x240>)
 8001722:	f003 fa2f 	bl	8004b84 <HAL_GPIO_WritePin>

  	char *msg = "\r\nhiiii we are started :3\r\n\r\n";
 8001726:	4b69      	ldr	r3, [pc, #420]	; (80018cc <main+0x244>)
 8001728:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
	CDC_Transmit_FS((uint8_t *) msg, strlen(msg));
 800172c:	f8d7 0390 	ldr.w	r0, [r7, #912]	; 0x390
 8001730:	f7fe fd4e 	bl	80001d0 <strlen>
 8001734:	4603      	mov	r3, r0
 8001736:	b29b      	uxth	r3, r3
 8001738:	4619      	mov	r1, r3
 800173a:	f8d7 0390 	ldr.w	r0, [r7, #912]	; 0x390
 800173e:	f00a fd01 	bl	800c144 <CDC_Transmit_FS>

	queue_init(&MAIN_QUEUE);
 8001742:	4863      	ldr	r0, [pc, #396]	; (80018d0 <main+0x248>)
 8001744:	f000 febb 	bl	80024be <queue_init>

	HAL_TIM_Base_Start_IT(&TIM_REALTIME);
 8001748:	4862      	ldr	r0, [pc, #392]	; (80018d4 <main+0x24c>)
 800174a:	f006 f85d 	bl	8007808 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&TIM_SCHEDULER);
 800174e:	4862      	ldr	r0, [pc, #392]	; (80018d8 <main+0x250>)
 8001750:	f006 f85a 	bl	8007808 <HAL_TIM_Base_Start_IT>

	vesc_init(&vesc_pitch, VESC_PITCH_ID, &UART_VESC_PITCH, UART_IRQ_VESC_PITCH, &MAIN_QUEUE);
 8001754:	4b5e      	ldr	r3, [pc, #376]	; (80018d0 <main+0x248>)
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	2326      	movs	r3, #38	; 0x26
 800175a:	4a60      	ldr	r2, [pc, #384]	; (80018dc <main+0x254>)
 800175c:	2101      	movs	r1, #1
 800175e:	4860      	ldr	r0, [pc, #384]	; (80018e0 <main+0x258>)
 8001760:	f001 fab4 	bl	8002ccc <vesc_init>
	vesc_init(&vesc_roll, VESC_ROLL_ID, &UART_VESC_ROLL, UART_IRQ_VESC_ROLL, &MAIN_QUEUE);
 8001764:	4b5a      	ldr	r3, [pc, #360]	; (80018d0 <main+0x248>)
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	2327      	movs	r3, #39	; 0x27
 800176a:	4a5e      	ldr	r2, [pc, #376]	; (80018e4 <main+0x25c>)
 800176c:	2102      	movs	r1, #2
 800176e:	485e      	ldr	r0, [pc, #376]	; (80018e8 <main+0x260>)
 8001770:	f001 faac 	bl	8002ccc <vesc_init>

	setup_mpu(&I2C_MPU, MPU_ADDR);
 8001774:	4b5d      	ldr	r3, [pc, #372]	; (80018ec <main+0x264>)
 8001776:	881b      	ldrh	r3, [r3, #0]
 8001778:	4619      	mov	r1, r3
 800177a:	485d      	ldr	r0, [pc, #372]	; (80018f0 <main+0x268>)
 800177c:	f7ff fda0 	bl	80012c0 <setup_mpu>
		unsigned int msgs_since_last;

		int msg_idx, n_time_steps_since_last;
	} dbg_values;

	dbg_values.msgs_since_last = 0;
 8001780:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8001784:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8001788:	2200      	movs	r2, #0
 800178a:	619a      	str	r2, [r3, #24]
	dbg_values.msg_idx = 0;
 800178c:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8001790:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8001794:	2200      	movs	r2, #0
 8001796:	61da      	str	r2, [r3, #28]
	dbg_values.n_time_steps_since_last = 0;
 8001798:	f507 7366 	add.w	r3, r7, #920	; 0x398
 800179c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80017a0:	2200      	movs	r2, #0
 80017a2:	621a      	str	r2, [r3, #32]


	// For Kalman + control system

	CTRL.covs = (Covariances) {.pitch.m11 = 10.0, .pitch.m12 = 0.0, .pitch.m21 = 10.0, .pitch.m22 = 0.0,
 80017a4:	4b53      	ldr	r3, [pc, #332]	; (80018f4 <main+0x26c>)
 80017a6:	4a54      	ldr	r2, [pc, #336]	; (80018f8 <main+0x270>)
 80017a8:	f103 0474 	add.w	r4, r3, #116	; 0x74
 80017ac:	4615      	mov	r5, r2
 80017ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017b6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80017ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	                      .roll.m11 = 10.0, .roll.m12 = 0.0, .roll.m21 = 10.0, .roll.m22 = 0.0,
	                      .wheel.m11 = 10.0, .wheel.m12 = 0.0, .wheel.m21 = 0.0, .wheel.m22 = 10.0};


	//Measurement error
	CTRL.r_vals = (R_error) {.pitch = 0.3, .roll = 0.3, .wheel = 20};
 80017be:	4b4d      	ldr	r3, [pc, #308]	; (80018f4 <main+0x26c>)
 80017c0:	4a4e      	ldr	r2, [pc, #312]	; (80018fc <main+0x274>)
 80017c2:	33a4      	adds	r3, #164	; 0xa4
 80017c4:	ca07      	ldmia	r2, {r0, r1, r2}
 80017c6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	CTRL.st = (States) { .x1 = 0, .x2 = 0, .x3 = 0, .x4 = 0 };
 80017ca:	4b4a      	ldr	r3, [pc, #296]	; (80018f4 <main+0x26c>)
 80017cc:	333c      	adds	r3, #60	; 0x3c
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	605a      	str	r2, [r3, #4]
 80017d4:	609a      	str	r2, [r3, #8]
 80017d6:	60da      	str	r2, [r3, #12]
 80017d8:	611a      	str	r2, [r3, #16]
 80017da:	615a      	str	r2, [r3, #20]


	queue_put(&MAIN_QUEUE, (Message) { .ty = MSG_SEND_DEBUG });
 80017dc:	f507 7366 	add.w	r3, r7, #920	; 0x398
 80017e0:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80017e4:	4618      	mov	r0, r3
 80017e6:	2320      	movs	r3, #32
 80017e8:	461a      	mov	r2, r3
 80017ea:	2100      	movs	r1, #0
 80017ec:	f00b f94a 	bl	800ca84 <memset>
 80017f0:	f507 7366 	add.w	r3, r7, #920	; 0x398
 80017f4:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80017f8:	2201      	movs	r2, #1
 80017fa:	701a      	strb	r2, [r3, #0]
 80017fc:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8001800:	f5a3 7636 	sub.w	r6, r3, #728	; 0x2d8
 8001804:	466d      	mov	r5, sp
 8001806:	f106 040c 	add.w	r4, r6, #12
 800180a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800180c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800180e:	6823      	ldr	r3, [r4, #0]
 8001810:	602b      	str	r3, [r5, #0]
 8001812:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001816:	482e      	ldr	r0, [pc, #184]	; (80018d0 <main+0x248>)
 8001818:	f000 fe99 	bl	800254e <queue_put>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		if (!queue_has(&MAIN_QUEUE)) {
 800181c:	482c      	ldr	r0, [pc, #176]	; (80018d0 <main+0x248>)
 800181e:	f000 fee3 	bl	80025e8 <queue_has>
 8001822:	4603      	mov	r3, r0
 8001824:	f083 0301 	eor.w	r3, r3, #1
 8001828:	b2db      	uxtb	r3, r3
 800182a:	2b00      	cmp	r3, #0
 800182c:	f040 842b 	bne.w	8002086 <main+0x9fe>
			continue;
		}

		Message msg = queue_pop(&MAIN_QUEUE);
 8001830:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8001834:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8001838:	4925      	ldr	r1, [pc, #148]	; (80018d0 <main+0x248>)
 800183a:	4618      	mov	r0, r3
 800183c:	f000 fee5 	bl	800260a <queue_pop>
		dbg_values.msgs_since_last++;
 8001840:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8001844:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8001848:	699b      	ldr	r3, [r3, #24]
 800184a:	1c5a      	adds	r2, r3, #1
 800184c:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8001850:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8001854:	619a      	str	r2, [r3, #24]

		switch (msg.ty) {
 8001856:	f507 7366 	add.w	r3, r7, #920	; 0x398
 800185a:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b08      	cmp	r3, #8
 8001862:	d8db      	bhi.n	800181c <main+0x194>
 8001864:	a201      	add	r2, pc, #4	; (adr r2, 800186c <main+0x1e4>)
 8001866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800186a:	bf00      	nop
 800186c:	0800181d 	.word	0x0800181d
 8001870:	08001891 	.word	0x08001891
 8001874:	08001a85 	.word	0x08001a85
 8001878:	08001fdd 	.word	0x08001fdd
 800187c:	08001f27 	.word	0x08001f27
 8001880:	08001f43 	.word	0x08001f43
 8001884:	08001f35 	.word	0x08001f35
 8001888:	08001feb 	.word	0x08001feb
 800188c:	08002029 	.word	0x08002029
				write_hex(&ctrl_hex[2*i], ctrl_data[i]);
			}
			ctrl_hex[2 * sizeof(CTRL)] = 0;
			*/

			bool dead_mans = dead_mans_switch_activated();
 8001890:	f7ff fcbc 	bl	800120c <dead_mans_switch_activated>
 8001894:	4603      	mov	r3, r0
 8001896:	f887 3353 	strb.w	r3, [r7, #851]	; 0x353

			int dbglen = sprintf(
 800189a:	f507 7366 	add.w	r3, r7, #920	; 0x398
 800189e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80018a2:	69db      	ldr	r3, [r3, #28]
 80018a4:	637b      	str	r3, [r7, #52]	; 0x34
 80018a6:	f507 7366 	add.w	r3, r7, #920	; 0x398
 80018aa:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80018ae:	6a1b      	ldr	r3, [r3, #32]
 80018b0:	633b      	str	r3, [r7, #48]	; 0x30
 80018b2:	4807      	ldr	r0, [pc, #28]	; (80018d0 <main+0x248>)
 80018b4:	f000 fe23 	bl	80024fe <queue_nelem>
 80018b8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80018ba:	f897 3353 	ldrb.w	r3, [r7, #851]	; 0x353
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d020      	beq.n	8001904 <main+0x27c>
 80018c2:	4e0f      	ldr	r6, [pc, #60]	; (8001900 <main+0x278>)
 80018c4:	e01f      	b.n	8001906 <main+0x27e>
 80018c6:	bf00      	nop
 80018c8:	40020800 	.word	0x40020800
 80018cc:	08010680 	.word	0x08010680
 80018d0:	20000508 	.word	0x20000508
 80018d4:	200003f0 	.word	0x200003f0
 80018d8:	20000438 	.word	0x20000438
 80018dc:	20000480 	.word	0x20000480
 80018e0:	20008514 	.word	0x20008514
 80018e4:	200004c4 	.word	0x200004c4
 80018e8:	20008d9c 	.word	0x20008d9c
 80018ec:	20000000 	.word	0x20000000
 80018f0:	2000039c 	.word	0x2000039c
 80018f4:	20009630 	.word	0x20009630
 80018f8:	080107d4 	.word	0x080107d4
 80018fc:	08010804 	.word	0x08010804
 8001900:	080106a0 	.word	0x080106a0
 8001904:	4e58      	ldr	r6, [pc, #352]	; (8001a68 <main+0x3e0>)
				//"theta_pitch = %7.5fmrad, theta_d_pitch = %7.5fmrad/s, "
				// "theta_roll = %7.5fmrad, theta_d_roll = %7.5fmrad/s "
				"theta_roll(comp) = %7.5fmrad, "
				//"I (filtered) = %6ld mA, I (out) = %6ld mA"
				"\r\n",
				dbg_values.msg_idx, dbg_values.n_time_steps_since_last, queue_nelem(&MAIN_QUEUE), dead_mans ? "on" : "off", (int32_t) (us_since_startup() / 1000),
 8001906:	f7ff fbef 	bl	80010e8 <us_since_startup>
 800190a:	4603      	mov	r3, r0
 800190c:	4a57      	ldr	r2, [pc, #348]	; (8001a6c <main+0x3e4>)
 800190e:	fba2 2303 	umull	r2, r3, r2, r3
 8001912:	099b      	lsrs	r3, r3, #6
			int dbglen = sprintf(
 8001914:	62bb      	str	r3, [r7, #40]	; 0x28
				(int) CTRL.last_esc_pitch.erpm, (int) CTRL.last_esc_roll.erpm,
 8001916:	4b56      	ldr	r3, [pc, #344]	; (8001a70 <main+0x3e8>)
 8001918:	edd3 7a02 	vldr	s15, [r3, #8]
			int dbglen = sprintf(
 800191c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001920:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
				(int) CTRL.last_esc_pitch.erpm, (int) CTRL.last_esc_roll.erpm,
 8001924:	4b52      	ldr	r3, [pc, #328]	; (8001a70 <main+0x3e8>)
 8001926:	edd3 7a06 	vldr	s15, [r3, #24]
			int dbglen = sprintf(
 800192a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800192e:	edc7 7a08 	vstr	s15, [r7, #32]
				dbg_values.current_wanted_pitch, dbg_values.current_wanted_roll,
 8001932:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8001936:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800193a:	685b      	ldr	r3, [r3, #4]
			int dbglen = sprintf(
 800193c:	4618      	mov	r0, r3
 800193e:	f7fe fe03 	bl	8000548 <__aeabi_f2d>
 8001942:	e9c7 0106 	strd	r0, r1, [r7, #24]
				dbg_values.current_wanted_pitch, dbg_values.current_wanted_roll,
 8001946:	f507 7366 	add.w	r3, r7, #920	; 0x398
 800194a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800194e:	68db      	ldr	r3, [r3, #12]
			int dbglen = sprintf(
 8001950:	4618      	mov	r0, r3
 8001952:	f7fe fdf9 	bl	8000548 <__aeabi_f2d>
 8001956:	e9c7 0104 	strd	r0, r1, [r7, #16]
				(int32_t) (1000 * CTRL.last_acc.ax), (int32_t) (1000 * CTRL.last_acc.ay), (int32_t) (1000 * CTRL.last_acc.az),
 800195a:	4b45      	ldr	r3, [pc, #276]	; (8001a70 <main+0x3e8>)
 800195c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001960:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8001a74 <main+0x3ec>
 8001964:	ee67 7a87 	vmul.f32	s15, s15, s14
			int dbglen = sprintf(
 8001968:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800196c:	edc7 7a03 	vstr	s15, [r7, #12]
				(int32_t) (1000 * CTRL.last_acc.ax), (int32_t) (1000 * CTRL.last_acc.ay), (int32_t) (1000 * CTRL.last_acc.az),
 8001970:	4b3f      	ldr	r3, [pc, #252]	; (8001a70 <main+0x3e8>)
 8001972:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001976:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8001a74 <main+0x3ec>
 800197a:	ee67 7a87 	vmul.f32	s15, s15, s14
			int dbglen = sprintf(
 800197e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001982:	edc7 7a02 	vstr	s15, [r7, #8]
				(int32_t) (1000 * CTRL.last_acc.ax), (int32_t) (1000 * CTRL.last_acc.ay), (int32_t) (1000 * CTRL.last_acc.az),
 8001986:	4b3a      	ldr	r3, [pc, #232]	; (8001a70 <main+0x3e8>)
 8001988:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800198c:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8001a74 <main+0x3ec>
 8001990:	ee67 7a87 	vmul.f32	s15, s15, s14
			int dbglen = sprintf(
 8001994:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001998:	edc7 7a01 	vstr	s15, [r7, #4]
				CTRL.last_acc.gx, CTRL.last_acc.gy, CTRL.last_acc.gz,
 800199c:	4b34      	ldr	r3, [pc, #208]	; (8001a70 <main+0x3e8>)
 800199e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
			int dbglen = sprintf(
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7fe fdd1 	bl	8000548 <__aeabi_f2d>
 80019a6:	4682      	mov	sl, r0
 80019a8:	468b      	mov	fp, r1
				CTRL.last_acc.gx, CTRL.last_acc.gy, CTRL.last_acc.gz,
 80019aa:	4b31      	ldr	r3, [pc, #196]	; (8001a70 <main+0x3e8>)
 80019ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
			int dbglen = sprintf(
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7fe fdca 	bl	8000548 <__aeabi_f2d>
 80019b4:	4680      	mov	r8, r0
 80019b6:	4689      	mov	r9, r1
				CTRL.last_acc.gx, CTRL.last_acc.gy, CTRL.last_acc.gz,
 80019b8:	4b2d      	ldr	r3, [pc, #180]	; (8001a70 <main+0x3e8>)
 80019ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
			int dbglen = sprintf(
 80019bc:	4618      	mov	r0, r3
 80019be:	f7fe fdc3 	bl	8000548 <__aeabi_f2d>
 80019c2:	4604      	mov	r4, r0
 80019c4:	460d      	mov	r5, r1
				//1000 * CTRL.st.x1, 1000 * CTRL.st.x2,
				// 1000 * CTRL.st.x5, 1000 * CTRL.st.x6
				1000 * roll_angle
 80019c6:	4b2c      	ldr	r3, [pc, #176]	; (8001a78 <main+0x3f0>)
 80019c8:	edd3 7a00 	vldr	s15, [r3]
 80019cc:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001a74 <main+0x3ec>
 80019d0:	ee67 7a87 	vmul.f32	s15, s15, s14
			int dbglen = sprintf(
 80019d4:	ee17 0a90 	vmov	r0, s15
 80019d8:	f7fe fdb6 	bl	8000548 <__aeabi_f2d>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 80019e4:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80019e8:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
 80019ec:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80019f0:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	920c      	str	r2, [sp, #48]	; 0x30
 80019f8:	68ba      	ldr	r2, [r7, #8]
 80019fa:	920b      	str	r2, [sp, #44]	; 0x2c
 80019fc:	68fa      	ldr	r2, [r7, #12]
 80019fe:	920a      	str	r2, [sp, #40]	; 0x28
 8001a00:	ed97 7b04 	vldr	d7, [r7, #16]
 8001a04:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001a08:	ed97 7b06 	vldr	d7, [r7, #24]
 8001a0c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001a10:	6a3a      	ldr	r2, [r7, #32]
 8001a12:	9204      	str	r2, [sp, #16]
 8001a14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a16:	9203      	str	r2, [sp, #12]
 8001a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a1a:	9302      	str	r3, [sp, #8]
 8001a1c:	9601      	str	r6, [sp, #4]
 8001a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a20:	9300      	str	r3, [sp, #0]
 8001a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a26:	4915      	ldr	r1, [pc, #84]	; (8001a7c <main+0x3f4>)
 8001a28:	f00b fc9e 	bl	800d368 <siprintf>
 8001a2c:	f8c7 034c 	str.w	r0, [r7, #844]	; 0x34c
				//(int32_t) (1000 * vcr.input_filtered), (int32_t) (1000 * dbg_values.current_o)
			);
			dbg_values.msg_idx++;
 8001a30:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8001a34:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8001a38:	69db      	ldr	r3, [r3, #28]
 8001a3a:	1c5a      	adds	r2, r3, #1
 8001a3c:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8001a40:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8001a44:	61da      	str	r2, [r3, #28]
			dbg_values.n_time_steps_since_last = 0;
 8001a46:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8001a4a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8001a4e:	2200      	movs	r2, #0
 8001a50:	621a      	str	r2, [r3, #32]


			CDC_Transmit_FS((uint8_t *) dbgbuf, dbglen);
 8001a52:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8001a56:	b29a      	uxth	r2, r3
 8001a58:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001a5c:	4611      	mov	r1, r2
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f00a fb70 	bl	800c144 <CDC_Transmit_FS>
			// Use below if you are debug printing other things
			// HAL_UART_Transmit(&huart3, (uint8_t *) dbgbuf, dbglen, 10000);

			break;
 8001a64:	e313      	b.n	800208e <main+0xa06>
 8001a66:	bf00      	nop
 8001a68:	080106a4 	.word	0x080106a4
 8001a6c:	10624dd3 	.word	0x10624dd3
 8001a70:	20009630 	.word	0x20009630
 8001a74:	447a0000 	.word	0x447a0000
 8001a78:	200096e0 	.word	0x200096e0
 8001a7c:	080106a8 	.word	0x080106a8
 8001a80:	49742400 	.word	0x49742400
		}

		case MSG_TIME_STEP: {
			uint32_t dt_us = get_and_reset_dt_us();
 8001a84:	f7ff fb4c 	bl	8001120 <get_and_reset_dt_us>
 8001a88:	f8c7 0388 	str.w	r0, [r7, #904]	; 0x388
			float dt = (float) dt_us / 1000000.0;
 8001a8c:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 8001a90:	ee07 3a90 	vmov	s15, r3
 8001a94:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a98:	ed5f 6a07 	vldr	s13, [pc, #-28]	; 8001a80 <main+0x3f8>
 8001a9c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001aa0:	edc7 7ae1 	vstr	s15, [r7, #900]	; 0x384
			);

			CDC_Transmit_FS((uint8_t *) dbgbuf, dbglen);
#endif

			dbg_values.dt = dt;
 8001aa4:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8001aa8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8001aac:	f8d7 2384 	ldr.w	r2, [r7, #900]	; 0x384
 8001ab0:	601a      	str	r2, [r3, #0]

#if MOTOR_DIRECTION == MOTOR_CW
			float wheel_rpm_pitch = CTRL.last_esc_pitch.erpm / 22.9;
#elif MOTOR_DIRECTION == MOTOR_CCW
			float wheel_rpm_pitch = CTRL.last_esc_pitch.erpm / -22.9;
 8001ab2:	4be1      	ldr	r3, [pc, #900]	; (8001e38 <main+0x7b0>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7fe fd46 	bl	8000548 <__aeabi_f2d>
 8001abc:	a3d0      	add	r3, pc, #832	; (adr r3, 8001e00 <main+0x778>)
 8001abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac2:	f7fe fec3 	bl	800084c <__aeabi_ddiv>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	460b      	mov	r3, r1
 8001aca:	4610      	mov	r0, r2
 8001acc:	4619      	mov	r1, r3
 8001ace:	f7ff f86b 	bl	8000ba8 <__aeabi_d2f>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
#else
#error "Invalid motor direction"
#endif

			float wheel_rpm_roll = CTRL.last_esc_pitch.erpm / 29.92;
 8001ad8:	4bd7      	ldr	r3, [pc, #860]	; (8001e38 <main+0x7b0>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7fe fd33 	bl	8000548 <__aeabi_f2d>
 8001ae2:	a3c9      	add	r3, pc, #804	; (adr r3, 8001e08 <main+0x780>)
 8001ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae8:	f7fe feb0 	bl	800084c <__aeabi_ddiv>
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	4610      	mov	r0, r2
 8001af2:	4619      	mov	r1, r3
 8001af4:	f7ff f858 	bl	8000ba8 <__aeabi_d2f>
 8001af8:	4603      	mov	r3, r0
 8001afa:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c

			CTRL.q_t.m11 = Q_T * dt*dt*dt*dt / 4;
 8001afe:	ed9f 7acf 	vldr	s14, [pc, #828]	; 8001e3c <main+0x7b4>
 8001b02:	edd7 7ae1 	vldr	s15, [r7, #900]	; 0x384
 8001b06:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b0a:	edd7 7ae1 	vldr	s15, [r7, #900]	; 0x384
 8001b0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b12:	edd7 7ae1 	vldr	s15, [r7, #900]	; 0x384
 8001b16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b1a:	edd7 7ae1 	vldr	s15, [r7, #900]	; 0x384
 8001b1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b22:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001b26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b2a:	4bc3      	ldr	r3, [pc, #780]	; (8001e38 <main+0x7b0>)
 8001b2c:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
			CTRL.q_t.m12 = Q_T * dt*dt*dt / 2;
 8001b30:	ed9f 7ac2 	vldr	s14, [pc, #776]	; 8001e3c <main+0x7b4>
 8001b34:	edd7 7ae1 	vldr	s15, [r7, #900]	; 0x384
 8001b38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b3c:	edd7 7ae1 	vldr	s15, [r7, #900]	; 0x384
 8001b40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b44:	edd7 7ae1 	vldr	s15, [r7, #900]	; 0x384
 8001b48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b4c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001b50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b54:	4bb8      	ldr	r3, [pc, #736]	; (8001e38 <main+0x7b0>)
 8001b56:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
			CTRL.q_t.m21 = Q_T * dt*dt*dt / 2;
 8001b5a:	ed9f 7ab8 	vldr	s14, [pc, #736]	; 8001e3c <main+0x7b4>
 8001b5e:	edd7 7ae1 	vldr	s15, [r7, #900]	; 0x384
 8001b62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b66:	edd7 7ae1 	vldr	s15, [r7, #900]	; 0x384
 8001b6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b6e:	edd7 7ae1 	vldr	s15, [r7, #900]	; 0x384
 8001b72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b76:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001b7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b7e:	4bae      	ldr	r3, [pc, #696]	; (8001e38 <main+0x7b0>)
 8001b80:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
			CTRL.q_t.m22 = Q_T * dt*dt / 2;
 8001b84:	ed9f 7aad 	vldr	s14, [pc, #692]	; 8001e3c <main+0x7b4>
 8001b88:	edd7 7ae1 	vldr	s15, [r7, #900]	; 0x384
 8001b8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b90:	edd7 7ae1 	vldr	s15, [r7, #900]	; 0x384
 8001b94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b98:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001b9c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ba0:	4ba5      	ldr	r3, [pc, #660]	; (8001e38 <main+0x7b0>)
 8001ba2:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70

			CTRL.q_w.m11 = Q_W * dt*dt*dt*dt / 4;
 8001ba6:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8001e40 <main+0x7b8>
 8001baa:	edd7 7ae1 	vldr	s15, [r7, #900]	; 0x384
 8001bae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bb2:	edd7 7ae1 	vldr	s15, [r7, #900]	; 0x384
 8001bb6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bba:	edd7 7ae1 	vldr	s15, [r7, #900]	; 0x384
 8001bbe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bc2:	edd7 7ae1 	vldr	s15, [r7, #900]	; 0x384
 8001bc6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bca:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001bce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bd2:	4b99      	ldr	r3, [pc, #612]	; (8001e38 <main+0x7b0>)
 8001bd4:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
			CTRL.q_w.m12 = Q_W * dt*dt*dt / 2;
 8001bd8:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8001e40 <main+0x7b8>
 8001bdc:	edd7 7ae1 	vldr	s15, [r7, #900]	; 0x384
 8001be0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001be4:	edd7 7ae1 	vldr	s15, [r7, #900]	; 0x384
 8001be8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bec:	edd7 7ae1 	vldr	s15, [r7, #900]	; 0x384
 8001bf0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bf4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001bf8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bfc:	4b8e      	ldr	r3, [pc, #568]	; (8001e38 <main+0x7b0>)
 8001bfe:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			CTRL.q_w.m21 = Q_W * dt*dt*dt / 2;
 8001c02:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 8001e40 <main+0x7b8>
 8001c06:	edd7 7ae1 	vldr	s15, [r7, #900]	; 0x384
 8001c0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c0e:	edd7 7ae1 	vldr	s15, [r7, #900]	; 0x384
 8001c12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c16:	edd7 7ae1 	vldr	s15, [r7, #900]	; 0x384
 8001c1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c1e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001c22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c26:	4b84      	ldr	r3, [pc, #528]	; (8001e38 <main+0x7b0>)
 8001c28:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			CTRL.q_w.m22 = Q_W * dt*dt / 2;
 8001c2c:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8001e40 <main+0x7b8>
 8001c30:	edd7 7ae1 	vldr	s15, [r7, #900]	; 0x384
 8001c34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c38:	edd7 7ae1 	vldr	s15, [r7, #900]	; 0x384
 8001c3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c40:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001c44:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c48:	4b7b      	ldr	r3, [pc, #492]	; (8001e38 <main+0x7b0>)
 8001c4a:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60

			float sensor_gyro_pitch = CTRL.last_acc.gy;
 8001c4e:	4b7a      	ldr	r3, [pc, #488]	; (8001e38 <main+0x7b0>)
 8001c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c52:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
			float sensor_gyro_roll = CTRL.last_acc.gx;
 8001c56:	4b78      	ldr	r3, [pc, #480]	; (8001e38 <main+0x7b0>)
 8001c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5a:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374

			float sensor_acc_roll = CTRL.last_acc.ay;
 8001c5e:	4b76      	ldr	r3, [pc, #472]	; (8001e38 <main+0x7b0>)
 8001c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c62:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
			float acc_predicted_angle = -sensor_acc_roll / 9.82 * (3.14 / 2);
 8001c66:	edd7 7adc 	vldr	s15, [r7, #880]	; 0x370
 8001c6a:	eef1 7a67 	vneg.f32	s15, s15
 8001c6e:	ee17 3a90 	vmov	r3, s15
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7fe fc68 	bl	8000548 <__aeabi_f2d>
 8001c78:	a365      	add	r3, pc, #404	; (adr r3, 8001e10 <main+0x788>)
 8001c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c7e:	f7fe fde5 	bl	800084c <__aeabi_ddiv>
 8001c82:	4602      	mov	r2, r0
 8001c84:	460b      	mov	r3, r1
 8001c86:	4610      	mov	r0, r2
 8001c88:	4619      	mov	r1, r3
 8001c8a:	a363      	add	r3, pc, #396	; (adr r3, 8001e18 <main+0x790>)
 8001c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c90:	f7fe fcb2 	bl	80005f8 <__aeabi_dmul>
 8001c94:	4602      	mov	r2, r0
 8001c96:	460b      	mov	r3, r1
 8001c98:	4610      	mov	r0, r2
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	f7fe ff84 	bl	8000ba8 <__aeabi_d2f>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
			float gain = 10 * dt;
 8001ca6:	edd7 7ae1 	vldr	s15, [r7, #900]	; 0x384
 8001caa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001cae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cb2:	edc7 7ada 	vstr	s15, [r7, #872]	; 0x368
			roll_angle = (0.98) * roll_angle + dt * sensor_gyro_roll + 0.02 * sensor_acc_roll;
 8001cb6:	4b63      	ldr	r3, [pc, #396]	; (8001e44 <main+0x7bc>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7fe fc44 	bl	8000548 <__aeabi_f2d>
 8001cc0:	a357      	add	r3, pc, #348	; (adr r3, 8001e20 <main+0x798>)
 8001cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc6:	f7fe fc97 	bl	80005f8 <__aeabi_dmul>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	460b      	mov	r3, r1
 8001cce:	4614      	mov	r4, r2
 8001cd0:	461d      	mov	r5, r3
 8001cd2:	ed97 7ae1 	vldr	s14, [r7, #900]	; 0x384
 8001cd6:	edd7 7add 	vldr	s15, [r7, #884]	; 0x374
 8001cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cde:	ee17 0a90 	vmov	r0, s15
 8001ce2:	f7fe fc31 	bl	8000548 <__aeabi_f2d>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	460b      	mov	r3, r1
 8001cea:	4620      	mov	r0, r4
 8001cec:	4629      	mov	r1, r5
 8001cee:	f7fe facd 	bl	800028c <__adddf3>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	4614      	mov	r4, r2
 8001cf8:	461d      	mov	r5, r3
 8001cfa:	f8d7 0370 	ldr.w	r0, [r7, #880]	; 0x370
 8001cfe:	f7fe fc23 	bl	8000548 <__aeabi_f2d>
 8001d02:	a349      	add	r3, pc, #292	; (adr r3, 8001e28 <main+0x7a0>)
 8001d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d08:	f7fe fc76 	bl	80005f8 <__aeabi_dmul>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	4620      	mov	r0, r4
 8001d12:	4629      	mov	r1, r5
 8001d14:	f7fe faba 	bl	800028c <__adddf3>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	4610      	mov	r0, r2
 8001d1e:	4619      	mov	r1, r3
 8001d20:	f7fe ff42 	bl	8000ba8 <__aeabi_d2f>
 8001d24:	4603      	mov	r3, r0
 8001d26:	4a47      	ldr	r2, [pc, #284]	; (8001e44 <main+0x7bc>)
 8001d28:	6013      	str	r3, [r2, #0]

			kalman_filter_predict(0, dt, &CTRL.st, &CTRL.q_t, &CTRL.q_w, &CTRL.covs);
 8001d2a:	4b47      	ldr	r3, [pc, #284]	; (8001e48 <main+0x7c0>)
 8001d2c:	4a47      	ldr	r2, [pc, #284]	; (8001e4c <main+0x7c4>)
 8001d2e:	4948      	ldr	r1, [pc, #288]	; (8001e50 <main+0x7c8>)
 8001d30:	4848      	ldr	r0, [pc, #288]	; (8001e54 <main+0x7cc>)
 8001d32:	edd7 0ae1 	vldr	s1, [r7, #900]	; 0x384
 8001d36:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8001e58 <main+0x7d0>
 8001d3a:	f001 fadd 	bl	80032f8 <kalman_filter_predict>
			roll_kalman_filter_predict(0, dt, &CTRL.st, &CTRL.q_t, &CTRL.q_w, &CTRL.covs);
 8001d3e:	4b42      	ldr	r3, [pc, #264]	; (8001e48 <main+0x7c0>)
 8001d40:	4a42      	ldr	r2, [pc, #264]	; (8001e4c <main+0x7c4>)
 8001d42:	4943      	ldr	r1, [pc, #268]	; (8001e50 <main+0x7c8>)
 8001d44:	4843      	ldr	r0, [pc, #268]	; (8001e54 <main+0x7cc>)
 8001d46:	edd7 0ae1 	vldr	s1, [r7, #900]	; 0x384
 8001d4a:	ed9f 0a43 	vldr	s0, [pc, #268]	; 8001e58 <main+0x7d0>
 8001d4e:	f002 f858 	bl	8003e02 <roll_kalman_filter_predict>

			float tau_pitch = LookaheadSpeedRegulator(0, CTRL.st.x1, CTRL.st.x2, CTRL.st.x4, dt);
 8001d52:	4b39      	ldr	r3, [pc, #228]	; (8001e38 <main+0x7b0>)
 8001d54:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001d58:	4b37      	ldr	r3, [pc, #220]	; (8001e38 <main+0x7b0>)
 8001d5a:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8001d5e:	4b36      	ldr	r3, [pc, #216]	; (8001e38 <main+0x7b0>)
 8001d60:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 8001d64:	ed97 2ae1 	vldr	s4, [r7, #900]	; 0x384
 8001d68:	eef0 1a66 	vmov.f32	s3, s13
 8001d6c:	eeb0 1a47 	vmov.f32	s2, s14
 8001d70:	eef0 0a67 	vmov.f32	s1, s15
 8001d74:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8001e58 <main+0x7d0>
 8001d78:	f002 f90e 	bl	8003f98 <LookaheadSpeedRegulator>
 8001d7c:	ed87 0ad9 	vstr	s0, [r7, #868]	; 0x364
			float tau_roll = roll_reg_step(&roll_reg, dt, roll_angle, sensor_gyro_roll, wheel_rpm_roll);
 8001d80:	4b30      	ldr	r3, [pc, #192]	; (8001e44 <main+0x7bc>)
 8001d82:	edd3 7a00 	vldr	s15, [r3]
 8001d86:	edd7 1adf 	vldr	s3, [r7, #892]	; 0x37c
 8001d8a:	ed97 1add 	vldr	s2, [r7, #884]	; 0x374
 8001d8e:	eef0 0a67 	vmov.f32	s1, s15
 8001d92:	ed97 0ae1 	vldr	s0, [r7, #900]	; 0x384
 8001d96:	4831      	ldr	r0, [pc, #196]	; (8001e5c <main+0x7d4>)
 8001d98:	f002 fa4e 	bl	8004238 <roll_reg_step>
 8001d9c:	ed87 0ad8 	vstr	s0, [r7, #864]	; 0x360

#if MOTOR_DIRECTION == MOTOR_CW
			float current_wanted_pitch = tau_pitch / 0.59; // see notes
			float current_wanted_roll = tau_roll / 0.5; // TODO: guh
#elif MOTOR_DIRECTION == MOTOR_CCW
			float current_wanted_pitch = tau_pitch / -0.59; // see notes
 8001da0:	f8d7 0364 	ldr.w	r0, [r7, #868]	; 0x364
 8001da4:	f7fe fbd0 	bl	8000548 <__aeabi_f2d>
 8001da8:	a321      	add	r3, pc, #132	; (adr r3, 8001e30 <main+0x7a8>)
 8001daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dae:	f7fe fd4d 	bl	800084c <__aeabi_ddiv>
 8001db2:	4602      	mov	r2, r0
 8001db4:	460b      	mov	r3, r1
 8001db6:	4610      	mov	r0, r2
 8001db8:	4619      	mov	r1, r3
 8001dba:	f7fe fef5 	bl	8000ba8 <__aeabi_d2f>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
			float current_wanted_roll = tau_roll / -0.5; // TODO: guh
 8001dc4:	ed97 7ad8 	vldr	s14, [r7, #864]	; 0x360
 8001dc8:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 8001dcc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dd0:	edc7 7ad6 	vstr	s15, [r7, #856]	; 0x358
#else
#error "Invalid motor direction"
#endif


			dbg_values.current_wanted_pitch = current_wanted_pitch;
 8001dd4:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8001dd8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8001ddc:	f8d7 235c 	ldr.w	r2, [r7, #860]	; 0x35c
 8001de0:	605a      	str	r2, [r3, #4]
			dbg_values.current_wanted_roll = current_wanted_roll;
 8001de2:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8001de6:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8001dea:	f8d7 2358 	ldr.w	r2, [r7, #856]	; 0x358
 8001dee:	60da      	str	r2, [r3, #12]

			kalman_filter_update(sensor_gyro_pitch, wheel_rpm_pitch, dt, &CTRL.st, &CTRL.q_t, &CTRL.q_w, &CTRL.covs, &CTRL.r_vals);
 8001df0:	4b1b      	ldr	r3, [pc, #108]	; (8001e60 <main+0x7d8>)
 8001df2:	9300      	str	r3, [sp, #0]
 8001df4:	4b14      	ldr	r3, [pc, #80]	; (8001e48 <main+0x7c0>)
 8001df6:	4a15      	ldr	r2, [pc, #84]	; (8001e4c <main+0x7c4>)
 8001df8:	e034      	b.n	8001e64 <main+0x7dc>
 8001dfa:	bf00      	nop
 8001dfc:	f3af 8000 	nop.w
 8001e00:	66666666 	.word	0x66666666
 8001e04:	c036e666 	.word	0xc036e666
 8001e08:	1eb851ec 	.word	0x1eb851ec
 8001e0c:	403deb85 	.word	0x403deb85
 8001e10:	0a3d70a4 	.word	0x0a3d70a4
 8001e14:	4023a3d7 	.word	0x4023a3d7
 8001e18:	51eb851f 	.word	0x51eb851f
 8001e1c:	3ff91eb8 	.word	0x3ff91eb8
 8001e20:	f5c28f5c 	.word	0xf5c28f5c
 8001e24:	3fef5c28 	.word	0x3fef5c28
 8001e28:	47ae147b 	.word	0x47ae147b
 8001e2c:	3f947ae1 	.word	0x3f947ae1
 8001e30:	ae147ae1 	.word	0xae147ae1
 8001e34:	bfe2e147 	.word	0xbfe2e147
 8001e38:	20009630 	.word	0x20009630
 8001e3c:	42a00000 	.word	0x42a00000
 8001e40:	42c80000 	.word	0x42c80000
 8001e44:	200096e0 	.word	0x200096e0
 8001e48:	200096a4 	.word	0x200096a4
 8001e4c:	20009684 	.word	0x20009684
 8001e50:	20009694 	.word	0x20009694
 8001e54:	2000966c 	.word	0x2000966c
 8001e58:	00000000 	.word	0x00000000
 8001e5c:	20000024 	.word	0x20000024
 8001e60:	200096d4 	.word	0x200096d4
 8001e64:	498b      	ldr	r1, [pc, #556]	; (8002094 <main+0xa0c>)
 8001e66:	488c      	ldr	r0, [pc, #560]	; (8002098 <main+0xa10>)
 8001e68:	ed97 1ae1 	vldr	s2, [r7, #900]	; 0x384
 8001e6c:	edd7 0ae0 	vldr	s1, [r7, #896]	; 0x380
 8001e70:	ed97 0ade 	vldr	s0, [r7, #888]	; 0x378
 8001e74:	f001 fb3c 	bl	80034f0 <kalman_filter_update>
			roll_kalman_filter_update(sensor_gyro_roll, dt, &CTRL.st, &CTRL.q_t, &CTRL.q_w, &CTRL.covs, &CTRL.r_vals);
 8001e78:	4b88      	ldr	r3, [pc, #544]	; (800209c <main+0xa14>)
 8001e7a:	9300      	str	r3, [sp, #0]
 8001e7c:	4b88      	ldr	r3, [pc, #544]	; (80020a0 <main+0xa18>)
 8001e7e:	4a89      	ldr	r2, [pc, #548]	; (80020a4 <main+0xa1c>)
 8001e80:	4984      	ldr	r1, [pc, #528]	; (8002094 <main+0xa0c>)
 8001e82:	4885      	ldr	r0, [pc, #532]	; (8002098 <main+0xa10>)
 8001e84:	edd7 0ae1 	vldr	s1, [r7, #900]	; 0x384
 8001e88:	ed97 0add 	vldr	s0, [r7, #884]	; 0x374
 8001e8c:	f001 fef0 	bl	8003c70 <roll_kalman_filter_update>

			float current_out_pitch, current_out_roll;
			if (dead_mans_switch_activated()) {
 8001e90:	f7ff f9bc 	bl	800120c <dead_mans_switch_activated>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d020      	beq.n	8001edc <main+0x854>
				vcr_pitch.setpoint = current_wanted_pitch;
 8001e9a:	4a83      	ldr	r2, [pc, #524]	; (80020a8 <main+0xa20>)
 8001e9c:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 8001ea0:	6053      	str	r3, [r2, #4]
				vcr_roll.setpoint = current_wanted_roll;
 8001ea2:	4a82      	ldr	r2, [pc, #520]	; (80020ac <main+0xa24>)
 8001ea4:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 8001ea8:	6053      	str	r3, [r2, #4]

				current_out_pitch = vcr_step(&vcr_pitch, dt, CTRL.last_esc_pitch.current_motor);
 8001eaa:	4b81      	ldr	r3, [pc, #516]	; (80020b0 <main+0xa28>)
 8001eac:	edd3 7a03 	vldr	s15, [r3, #12]
 8001eb0:	eef0 0a67 	vmov.f32	s1, s15
 8001eb4:	ed97 0ae1 	vldr	s0, [r7, #900]	; 0x384
 8001eb8:	487b      	ldr	r0, [pc, #492]	; (80020a8 <main+0xa20>)
 8001eba:	f001 f9d5 	bl	8003268 <vcr_step>
 8001ebe:	ed87 0ad5 	vstr	s0, [r7, #852]	; 0x354
				current_out_roll = vcr_step(&vcr_roll, dt, CTRL.last_esc_roll.current_motor);
 8001ec2:	4b7b      	ldr	r3, [pc, #492]	; (80020b0 <main+0xa28>)
 8001ec4:	edd3 7a07 	vldr	s15, [r3, #28]
 8001ec8:	eef0 0a67 	vmov.f32	s1, s15
 8001ecc:	ed97 0ae1 	vldr	s0, [r7, #900]	; 0x384
 8001ed0:	4876      	ldr	r0, [pc, #472]	; (80020ac <main+0xa24>)
 8001ed2:	f001 f9c9 	bl	8003268 <vcr_step>
 8001ed6:	ed87 0ae5 	vstr	s0, [r7, #916]	; 0x394
 8001eda:	e013      	b.n	8001f04 <main+0x87c>
			} else {
				vcr_pitch.input_filtered = 0;
 8001edc:	4b72      	ldr	r3, [pc, #456]	; (80020a8 <main+0xa20>)
 8001ede:	f04f 0200 	mov.w	r2, #0
 8001ee2:	609a      	str	r2, [r3, #8]
				vcr_pitch.setpoint = 0;
 8001ee4:	4b70      	ldr	r3, [pc, #448]	; (80020a8 <main+0xa20>)
 8001ee6:	f04f 0200 	mov.w	r2, #0
 8001eea:	605a      	str	r2, [r3, #4]
				vcr_roll.input_filtered = 0;
 8001eec:	4b6f      	ldr	r3, [pc, #444]	; (80020ac <main+0xa24>)
 8001eee:	f04f 0200 	mov.w	r2, #0
 8001ef2:	609a      	str	r2, [r3, #8]
				vcr_roll.setpoint = 0;
 8001ef4:	4b6d      	ldr	r3, [pc, #436]	; (80020ac <main+0xa24>)
 8001ef6:	f04f 0200 	mov.w	r2, #0
 8001efa:	605a      	str	r2, [r3, #4]

				current_out_pitch = 0;
 8001efc:	f04f 0300 	mov.w	r3, #0
 8001f00:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
			}


			//vesc_set_current(&vesc_pitch, current_out_pitch);
			vesc_set_current(&vesc_roll, current_out_roll);
 8001f04:	ed97 0ae5 	vldr	s0, [r7, #916]	; 0x394
 8001f08:	486a      	ldr	r0, [pc, #424]	; (80020b4 <main+0xa2c>)
 8001f0a:	f001 f95b 	bl	80031c4 <vesc_set_current>

			dbg_values.n_time_steps_since_last++;
 8001f0e:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8001f12:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8001f16:	6a1b      	ldr	r3, [r3, #32]
 8001f18:	1c5a      	adds	r2, r3, #1
 8001f1a:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8001f1e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8001f22:	621a      	str	r2, [r3, #32]

			break;
 8001f24:	e0b3      	b.n	800208e <main+0xa06>
			);

			CDC_Transmit_FS((uint8_t *) dbgbuf, dbglen);
#endif

			vesc_transmit_and_recv(&vesc_pitch);
 8001f26:	4864      	ldr	r0, [pc, #400]	; (80020b8 <main+0xa30>)
 8001f28:	f001 f8fe 	bl	8003128 <vesc_transmit_and_recv>
			vesc_transmit_and_recv(&vesc_roll);
 8001f2c:	4861      	ldr	r0, [pc, #388]	; (80020b4 <main+0xa2c>)
 8001f2e:	f001 f8fb 	bl	8003128 <vesc_transmit_and_recv>
			break;
 8001f32:	e0ac      	b.n	800208e <main+0xa06>
			);

			CDC_Transmit_FS((uint8_t *) dbgbuf, dbglen);
#endif

			vesc_got_data(&vesc_pitch);
 8001f34:	4860      	ldr	r0, [pc, #384]	; (80020b8 <main+0xa30>)
 8001f36:	f000 ff6c 	bl	8002e12 <vesc_got_data>
			vesc_got_data(&vesc_roll);
 8001f3a:	485e      	ldr	r0, [pc, #376]	; (80020b4 <main+0xa2c>)
 8001f3c:	f000 ff69 	bl	8002e12 <vesc_got_data>
			break;
 8001f40:	e0a5      	b.n	800208e <main+0xa06>
				"{Q: REQ_ACC}\r\n"
			);

			CDC_Transmit_FS((uint8_t *) dbgbuf, dbglen);
#endif
			AccData acc_data = get_accelerometer_data(&hi2c2, MPU_ADDR);
 8001f42:	4b5e      	ldr	r3, [pc, #376]	; (80020bc <main+0xa34>)
 8001f44:	881a      	ldrh	r2, [r3, #0]
 8001f46:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8001f4a:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8001f4e:	495c      	ldr	r1, [pc, #368]	; (80020c0 <main+0xa38>)
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff fa05 	bl	8001360 <get_accelerometer_data>
			if (acc_data.success == false) {
 8001f56:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8001f5a:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	f083 0301 	eor.w	r3, r3, #1
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d011      	beq.n	8001f8e <main+0x906>
				int dbglen = sprintf(
 8001f6a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001f6e:	4955      	ldr	r1, [pc, #340]	; (80020c4 <main+0xa3c>)
 8001f70:	4618      	mov	r0, r3
 8001f72:	f00b f9f9 	bl	800d368 <siprintf>
 8001f76:	f8c7 038c 	str.w	r0, [r7, #908]	; 0x38c
					dbgbuf,
					"[ACC I2C FAIL]\r\n"
				);

				CDC_Transmit_FS((uint8_t *) dbgbuf, dbglen);
 8001f7a:	f8d7 338c 	ldr.w	r3, [r7, #908]	; 0x38c
 8001f7e:	b29a      	uxth	r2, r3
 8001f80:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001f84:	4611      	mov	r1, r2
 8001f86:	4618      	mov	r0, r3
 8001f88:	f00a f8dc 	bl	800c144 <CDC_Transmit_FS>
			} else {
				queue_put(&MAIN_QUEUE, (Message) { .ty = MSG_GOT_ACC_DATA, .acc_data = acc_data });
			}

			break;
 8001f8c:	e07f      	b.n	800208e <main+0xa06>
				queue_put(&MAIN_QUEUE, (Message) { .ty = MSG_GOT_ACC_DATA, .acc_data = acc_data });
 8001f8e:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8001f92:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 8001f96:	2207      	movs	r2, #7
 8001f98:	701a      	strb	r2, [r3, #0]
 8001f9a:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8001f9e:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 8001fa2:	f507 7266 	add.w	r2, r7, #920	; 0x398
 8001fa6:	f5a2 723d 	sub.w	r2, r2, #756	; 0x2f4
 8001faa:	1d1c      	adds	r4, r3, #4
 8001fac:	4615      	mov	r5, r2
 8001fae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fb2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001fb6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001fba:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8001fbe:	f5a3 7650 	sub.w	r6, r3, #832	; 0x340
 8001fc2:	466d      	mov	r5, sp
 8001fc4:	f106 040c 	add.w	r4, r6, #12
 8001fc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fcc:	6823      	ldr	r3, [r4, #0]
 8001fce:	602b      	str	r3, [r5, #0]
 8001fd0:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001fd4:	483c      	ldr	r0, [pc, #240]	; (80020c8 <main+0xa40>)
 8001fd6:	f000 faba 	bl	800254e <queue_put>
			break;
 8001fda:	e058      	b.n	800208e <main+0xa06>
			);

			CDC_Transmit_FS((uint8_t *) dbgbuf, dbglen);
#endif

			vesc_request_data(&vesc_pitch);
 8001fdc:	4836      	ldr	r0, [pc, #216]	; (80020b8 <main+0xa30>)
 8001fde:	f001 f931 	bl	8003244 <vesc_request_data>
			vesc_request_data(&vesc_roll);
 8001fe2:	4834      	ldr	r0, [pc, #208]	; (80020b4 <main+0xa2c>)
 8001fe4:	f001 f92e 	bl	8003244 <vesc_request_data>

			break;
 8001fe8:	e051      	b.n	800208e <main+0xa06>
			);

			CDC_Transmit_FS((uint8_t *) dbgbuf, dbglen);
#endif

			AccData acc_data = msg.acc_data;
 8001fea:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8001fee:	f5a3 7244 	sub.w	r2, r3, #784	; 0x310
 8001ff2:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8001ff6:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8001ffa:	4615      	mov	r5, r2
 8001ffc:	1d1c      	adds	r4, r3, #4
 8001ffe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002000:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002002:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002006:	e885 0007 	stmia.w	r5, {r0, r1, r2}
			CTRL.last_acc = acc_data;
 800200a:	4a29      	ldr	r2, [pc, #164]	; (80020b0 <main+0xa28>)
 800200c:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8002010:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8002014:	f102 0420 	add.w	r4, r2, #32
 8002018:	461d      	mov	r5, r3
 800201a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800201c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800201e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002022:	e884 0007 	stmia.w	r4, {r0, r1, r2}

			break;
 8002026:	e032      	b.n	800208e <main+0xa06>
			);

			CDC_Transmit_FS((uint8_t *) dbgbuf, dbglen);
#endif

			EscData esc_data = msg.esc_data;
 8002028:	f507 7366 	add.w	r3, r7, #920	; 0x398
 800202c:	f5a3 7248 	sub.w	r2, r3, #800	; 0x320
 8002030:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8002034:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8002038:	4614      	mov	r4, r2
 800203a:	3304      	adds	r3, #4
 800203c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800203e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			if (esc_data.vesc_id == VESC_PITCH_ID) {
 8002042:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8002046:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d108      	bne.n	8002062 <main+0x9da>
				CTRL.last_esc_pitch = esc_data;
 8002050:	4a17      	ldr	r2, [pc, #92]	; (80020b0 <main+0xa28>)
 8002052:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8002056:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 800205a:	4614      	mov	r4, r2
 800205c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800205e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			}
			if (esc_data.vesc_id == VESC_ROLL_ID) {
 8002062:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8002066:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	2b02      	cmp	r3, #2
 800206e:	d10d      	bne.n	800208c <main+0xa04>
				CTRL.last_esc_roll = esc_data;
 8002070:	4a0f      	ldr	r2, [pc, #60]	; (80020b0 <main+0xa28>)
 8002072:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8002076:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 800207a:	f102 0410 	add.w	r4, r2, #16
 800207e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002080:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			}

			break;
 8002084:	e002      	b.n	800208c <main+0xa04>
			continue;
 8002086:	bf00      	nop
 8002088:	f7ff bbc8 	b.w	800181c <main+0x194>
			break;
 800208c:	bf00      	nop
  {
 800208e:	f7ff bbc5 	b.w	800181c <main+0x194>
 8002092:	bf00      	nop
 8002094:	20009694 	.word	0x20009694
 8002098:	2000966c 	.word	0x2000966c
 800209c:	200096d4 	.word	0x200096d4
 80020a0:	200096a4 	.word	0x200096a4
 80020a4:	20009684 	.word	0x20009684
 80020a8:	20000004 	.word	0x20000004
 80020ac:	20000014 	.word	0x20000014
 80020b0:	20009630 	.word	0x20009630
 80020b4:	20008d9c 	.word	0x20008d9c
 80020b8:	20008514 	.word	0x20008514
 80020bc:	20000000 	.word	0x20000000
 80020c0:	2000039c 	.word	0x2000039c
 80020c4:	080107c0 	.word	0x080107c0
 80020c8:	20000508 	.word	0x20000508

080020cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b094      	sub	sp, #80	; 0x50
 80020d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020d2:	f107 0320 	add.w	r3, r7, #32
 80020d6:	2230      	movs	r2, #48	; 0x30
 80020d8:	2100      	movs	r1, #0
 80020da:	4618      	mov	r0, r3
 80020dc:	f00a fcd2 	bl	800ca84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020e0:	f107 030c 	add.w	r3, r7, #12
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	605a      	str	r2, [r3, #4]
 80020ea:	609a      	str	r2, [r3, #8]
 80020ec:	60da      	str	r2, [r3, #12]
 80020ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020f0:	2300      	movs	r3, #0
 80020f2:	60bb      	str	r3, [r7, #8]
 80020f4:	4b28      	ldr	r3, [pc, #160]	; (8002198 <SystemClock_Config+0xcc>)
 80020f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f8:	4a27      	ldr	r2, [pc, #156]	; (8002198 <SystemClock_Config+0xcc>)
 80020fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020fe:	6413      	str	r3, [r2, #64]	; 0x40
 8002100:	4b25      	ldr	r3, [pc, #148]	; (8002198 <SystemClock_Config+0xcc>)
 8002102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002104:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002108:	60bb      	str	r3, [r7, #8]
 800210a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800210c:	2300      	movs	r3, #0
 800210e:	607b      	str	r3, [r7, #4]
 8002110:	4b22      	ldr	r3, [pc, #136]	; (800219c <SystemClock_Config+0xd0>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a21      	ldr	r2, [pc, #132]	; (800219c <SystemClock_Config+0xd0>)
 8002116:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800211a:	6013      	str	r3, [r2, #0]
 800211c:	4b1f      	ldr	r3, [pc, #124]	; (800219c <SystemClock_Config+0xd0>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002124:	607b      	str	r3, [r7, #4]
 8002126:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002128:	2301      	movs	r3, #1
 800212a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800212c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002130:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002132:	2302      	movs	r3, #2
 8002134:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002136:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800213a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800213c:	2308      	movs	r3, #8
 800213e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002140:	23c0      	movs	r3, #192	; 0xc0
 8002142:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002144:	2304      	movs	r3, #4
 8002146:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8002148:	2308      	movs	r3, #8
 800214a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800214c:	f107 0320 	add.w	r3, r7, #32
 8002150:	4618      	mov	r0, r3
 8002152:	f004 fe73 	bl	8006e3c <HAL_RCC_OscConfig>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800215c:	f000 f9aa 	bl	80024b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002160:	230f      	movs	r3, #15
 8002162:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002164:	2302      	movs	r3, #2
 8002166:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002168:	2300      	movs	r3, #0
 800216a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800216c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002170:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002172:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002176:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002178:	f107 030c 	add.w	r3, r7, #12
 800217c:	2103      	movs	r1, #3
 800217e:	4618      	mov	r0, r3
 8002180:	f005 f8d4 	bl	800732c <HAL_RCC_ClockConfig>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800218a:	f000 f993 	bl	80024b4 <Error_Handler>
  }
}
 800218e:	bf00      	nop
 8002190:	3750      	adds	r7, #80	; 0x50
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	40023800 	.word	0x40023800
 800219c:	40007000 	.word	0x40007000

080021a0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80021a4:	4b12      	ldr	r3, [pc, #72]	; (80021f0 <MX_I2C2_Init+0x50>)
 80021a6:	4a13      	ldr	r2, [pc, #76]	; (80021f4 <MX_I2C2_Init+0x54>)
 80021a8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80021aa:	4b11      	ldr	r3, [pc, #68]	; (80021f0 <MX_I2C2_Init+0x50>)
 80021ac:	4a12      	ldr	r2, [pc, #72]	; (80021f8 <MX_I2C2_Init+0x58>)
 80021ae:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80021b0:	4b0f      	ldr	r3, [pc, #60]	; (80021f0 <MX_I2C2_Init+0x50>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80021b6:	4b0e      	ldr	r3, [pc, #56]	; (80021f0 <MX_I2C2_Init+0x50>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021bc:	4b0c      	ldr	r3, [pc, #48]	; (80021f0 <MX_I2C2_Init+0x50>)
 80021be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021c2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021c4:	4b0a      	ldr	r3, [pc, #40]	; (80021f0 <MX_I2C2_Init+0x50>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80021ca:	4b09      	ldr	r3, [pc, #36]	; (80021f0 <MX_I2C2_Init+0x50>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021d0:	4b07      	ldr	r3, [pc, #28]	; (80021f0 <MX_I2C2_Init+0x50>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021d6:	4b06      	ldr	r3, [pc, #24]	; (80021f0 <MX_I2C2_Init+0x50>)
 80021d8:	2200      	movs	r2, #0
 80021da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80021dc:	4804      	ldr	r0, [pc, #16]	; (80021f0 <MX_I2C2_Init+0x50>)
 80021de:	f002 fceb 	bl	8004bb8 <HAL_I2C_Init>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80021e8:	f000 f964 	bl	80024b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80021ec:	bf00      	nop
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	2000039c 	.word	0x2000039c
 80021f4:	40005800 	.word	0x40005800
 80021f8:	000186a0 	.word	0x000186a0

080021fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002202:	f107 0308 	add.w	r3, r7, #8
 8002206:	2200      	movs	r2, #0
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	605a      	str	r2, [r3, #4]
 800220c:	609a      	str	r2, [r3, #8]
 800220e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002210:	463b      	mov	r3, r7
 8002212:	2200      	movs	r2, #0
 8002214:	601a      	str	r2, [r3, #0]
 8002216:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002218:	4b1e      	ldr	r3, [pc, #120]	; (8002294 <MX_TIM1_Init+0x98>)
 800221a:	4a1f      	ldr	r2, [pc, #124]	; (8002298 <MX_TIM1_Init+0x9c>)
 800221c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48;
 800221e:	4b1d      	ldr	r3, [pc, #116]	; (8002294 <MX_TIM1_Init+0x98>)
 8002220:	2230      	movs	r2, #48	; 0x30
 8002222:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002224:	4b1b      	ldr	r3, [pc, #108]	; (8002294 <MX_TIM1_Init+0x98>)
 8002226:	2200      	movs	r2, #0
 8002228:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800222a:	4b1a      	ldr	r3, [pc, #104]	; (8002294 <MX_TIM1_Init+0x98>)
 800222c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002230:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002232:	4b18      	ldr	r3, [pc, #96]	; (8002294 <MX_TIM1_Init+0x98>)
 8002234:	2200      	movs	r2, #0
 8002236:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002238:	4b16      	ldr	r3, [pc, #88]	; (8002294 <MX_TIM1_Init+0x98>)
 800223a:	2200      	movs	r2, #0
 800223c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800223e:	4b15      	ldr	r3, [pc, #84]	; (8002294 <MX_TIM1_Init+0x98>)
 8002240:	2280      	movs	r2, #128	; 0x80
 8002242:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002244:	4813      	ldr	r0, [pc, #76]	; (8002294 <MX_TIM1_Init+0x98>)
 8002246:	f005 fa8f 	bl	8007768 <HAL_TIM_Base_Init>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002250:	f000 f930 	bl	80024b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002254:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002258:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800225a:	f107 0308 	add.w	r3, r7, #8
 800225e:	4619      	mov	r1, r3
 8002260:	480c      	ldr	r0, [pc, #48]	; (8002294 <MX_TIM1_Init+0x98>)
 8002262:	f005 fc49 	bl	8007af8 <HAL_TIM_ConfigClockSource>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800226c:	f000 f922 	bl	80024b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002270:	2300      	movs	r3, #0
 8002272:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002274:	2300      	movs	r3, #0
 8002276:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002278:	463b      	mov	r3, r7
 800227a:	4619      	mov	r1, r3
 800227c:	4805      	ldr	r0, [pc, #20]	; (8002294 <MX_TIM1_Init+0x98>)
 800227e:	f005 fe65 	bl	8007f4c <HAL_TIMEx_MasterConfigSynchronization>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002288:	f000 f914 	bl	80024b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800228c:	bf00      	nop
 800228e:	3718      	adds	r7, #24
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	200003f0 	.word	0x200003f0
 8002298:	40010000 	.word	0x40010000

0800229c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022a2:	f107 0308 	add.w	r3, r7, #8
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	605a      	str	r2, [r3, #4]
 80022ac:	609a      	str	r2, [r3, #8]
 80022ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022b0:	463b      	mov	r3, r7
 80022b2:	2200      	movs	r2, #0
 80022b4:	601a      	str	r2, [r3, #0]
 80022b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80022b8:	4b1d      	ldr	r3, [pc, #116]	; (8002330 <MX_TIM2_Init+0x94>)
 80022ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48;
 80022c0:	4b1b      	ldr	r3, [pc, #108]	; (8002330 <MX_TIM2_Init+0x94>)
 80022c2:	2230      	movs	r2, #48	; 0x30
 80022c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022c6:	4b1a      	ldr	r3, [pc, #104]	; (8002330 <MX_TIM2_Init+0x94>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80022cc:	4b18      	ldr	r3, [pc, #96]	; (8002330 <MX_TIM2_Init+0x94>)
 80022ce:	2263      	movs	r2, #99	; 0x63
 80022d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022d2:	4b17      	ldr	r3, [pc, #92]	; (8002330 <MX_TIM2_Init+0x94>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80022d8:	4b15      	ldr	r3, [pc, #84]	; (8002330 <MX_TIM2_Init+0x94>)
 80022da:	2280      	movs	r2, #128	; 0x80
 80022dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80022de:	4814      	ldr	r0, [pc, #80]	; (8002330 <MX_TIM2_Init+0x94>)
 80022e0:	f005 fa42 	bl	8007768 <HAL_TIM_Base_Init>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80022ea:	f000 f8e3 	bl	80024b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80022f4:	f107 0308 	add.w	r3, r7, #8
 80022f8:	4619      	mov	r1, r3
 80022fa:	480d      	ldr	r0, [pc, #52]	; (8002330 <MX_TIM2_Init+0x94>)
 80022fc:	f005 fbfc 	bl	8007af8 <HAL_TIM_ConfigClockSource>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8002306:	f000 f8d5 	bl	80024b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800230a:	2300      	movs	r3, #0
 800230c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800230e:	2300      	movs	r3, #0
 8002310:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002312:	463b      	mov	r3, r7
 8002314:	4619      	mov	r1, r3
 8002316:	4806      	ldr	r0, [pc, #24]	; (8002330 <MX_TIM2_Init+0x94>)
 8002318:	f005 fe18 	bl	8007f4c <HAL_TIMEx_MasterConfigSynchronization>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8002322:	f000 f8c7 	bl	80024b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002326:	bf00      	nop
 8002328:	3718      	adds	r7, #24
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	20000438 	.word	0x20000438

08002334 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002338:	4b11      	ldr	r3, [pc, #68]	; (8002380 <MX_USART2_UART_Init+0x4c>)
 800233a:	4a12      	ldr	r2, [pc, #72]	; (8002384 <MX_USART2_UART_Init+0x50>)
 800233c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800233e:	4b10      	ldr	r3, [pc, #64]	; (8002380 <MX_USART2_UART_Init+0x4c>)
 8002340:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002344:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002346:	4b0e      	ldr	r3, [pc, #56]	; (8002380 <MX_USART2_UART_Init+0x4c>)
 8002348:	2200      	movs	r2, #0
 800234a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800234c:	4b0c      	ldr	r3, [pc, #48]	; (8002380 <MX_USART2_UART_Init+0x4c>)
 800234e:	2200      	movs	r2, #0
 8002350:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002352:	4b0b      	ldr	r3, [pc, #44]	; (8002380 <MX_USART2_UART_Init+0x4c>)
 8002354:	2200      	movs	r2, #0
 8002356:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002358:	4b09      	ldr	r3, [pc, #36]	; (8002380 <MX_USART2_UART_Init+0x4c>)
 800235a:	220c      	movs	r2, #12
 800235c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800235e:	4b08      	ldr	r3, [pc, #32]	; (8002380 <MX_USART2_UART_Init+0x4c>)
 8002360:	2200      	movs	r2, #0
 8002362:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002364:	4b06      	ldr	r3, [pc, #24]	; (8002380 <MX_USART2_UART_Init+0x4c>)
 8002366:	2200      	movs	r2, #0
 8002368:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800236a:	4805      	ldr	r0, [pc, #20]	; (8002380 <MX_USART2_UART_Init+0x4c>)
 800236c:	f005 fe7e 	bl	800806c <HAL_UART_Init>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002376:	f000 f89d 	bl	80024b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800237a:	bf00      	nop
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	20000480 	.word	0x20000480
 8002384:	40004400 	.word	0x40004400

08002388 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800238c:	4b11      	ldr	r3, [pc, #68]	; (80023d4 <MX_USART3_UART_Init+0x4c>)
 800238e:	4a12      	ldr	r2, [pc, #72]	; (80023d8 <MX_USART3_UART_Init+0x50>)
 8002390:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002392:	4b10      	ldr	r3, [pc, #64]	; (80023d4 <MX_USART3_UART_Init+0x4c>)
 8002394:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002398:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800239a:	4b0e      	ldr	r3, [pc, #56]	; (80023d4 <MX_USART3_UART_Init+0x4c>)
 800239c:	2200      	movs	r2, #0
 800239e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80023a0:	4b0c      	ldr	r3, [pc, #48]	; (80023d4 <MX_USART3_UART_Init+0x4c>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80023a6:	4b0b      	ldr	r3, [pc, #44]	; (80023d4 <MX_USART3_UART_Init+0x4c>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80023ac:	4b09      	ldr	r3, [pc, #36]	; (80023d4 <MX_USART3_UART_Init+0x4c>)
 80023ae:	220c      	movs	r2, #12
 80023b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023b2:	4b08      	ldr	r3, [pc, #32]	; (80023d4 <MX_USART3_UART_Init+0x4c>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80023b8:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <MX_USART3_UART_Init+0x4c>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80023be:	4805      	ldr	r0, [pc, #20]	; (80023d4 <MX_USART3_UART_Init+0x4c>)
 80023c0:	f005 fe54 	bl	800806c <HAL_UART_Init>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80023ca:	f000 f873 	bl	80024b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80023ce:	bf00      	nop
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	200004c4 	.word	0x200004c4
 80023d8:	40004800 	.word	0x40004800

080023dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b08a      	sub	sp, #40	; 0x28
 80023e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e2:	f107 0314 	add.w	r3, r7, #20
 80023e6:	2200      	movs	r2, #0
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	605a      	str	r2, [r3, #4]
 80023ec:	609a      	str	r2, [r3, #8]
 80023ee:	60da      	str	r2, [r3, #12]
 80023f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023f2:	2300      	movs	r3, #0
 80023f4:	613b      	str	r3, [r7, #16]
 80023f6:	4b2d      	ldr	r3, [pc, #180]	; (80024ac <MX_GPIO_Init+0xd0>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	4a2c      	ldr	r2, [pc, #176]	; (80024ac <MX_GPIO_Init+0xd0>)
 80023fc:	f043 0304 	orr.w	r3, r3, #4
 8002400:	6313      	str	r3, [r2, #48]	; 0x30
 8002402:	4b2a      	ldr	r3, [pc, #168]	; (80024ac <MX_GPIO_Init+0xd0>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	f003 0304 	and.w	r3, r3, #4
 800240a:	613b      	str	r3, [r7, #16]
 800240c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800240e:	2300      	movs	r3, #0
 8002410:	60fb      	str	r3, [r7, #12]
 8002412:	4b26      	ldr	r3, [pc, #152]	; (80024ac <MX_GPIO_Init+0xd0>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002416:	4a25      	ldr	r2, [pc, #148]	; (80024ac <MX_GPIO_Init+0xd0>)
 8002418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800241c:	6313      	str	r3, [r2, #48]	; 0x30
 800241e:	4b23      	ldr	r3, [pc, #140]	; (80024ac <MX_GPIO_Init+0xd0>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800242a:	2300      	movs	r3, #0
 800242c:	60bb      	str	r3, [r7, #8]
 800242e:	4b1f      	ldr	r3, [pc, #124]	; (80024ac <MX_GPIO_Init+0xd0>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002432:	4a1e      	ldr	r2, [pc, #120]	; (80024ac <MX_GPIO_Init+0xd0>)
 8002434:	f043 0301 	orr.w	r3, r3, #1
 8002438:	6313      	str	r3, [r2, #48]	; 0x30
 800243a:	4b1c      	ldr	r3, [pc, #112]	; (80024ac <MX_GPIO_Init+0xd0>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	60bb      	str	r3, [r7, #8]
 8002444:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002446:	2300      	movs	r3, #0
 8002448:	607b      	str	r3, [r7, #4]
 800244a:	4b18      	ldr	r3, [pc, #96]	; (80024ac <MX_GPIO_Init+0xd0>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244e:	4a17      	ldr	r2, [pc, #92]	; (80024ac <MX_GPIO_Init+0xd0>)
 8002450:	f043 0302 	orr.w	r3, r3, #2
 8002454:	6313      	str	r3, [r2, #48]	; 0x30
 8002456:	4b15      	ldr	r3, [pc, #84]	; (80024ac <MX_GPIO_Init+0xd0>)
 8002458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	607b      	str	r3, [r7, #4]
 8002460:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED2_Pin|LED3_Pin|LDERROR_Pin|DEADMAN_GND_Pin
 8002462:	2200      	movs	r2, #0
 8002464:	f24f 0105 	movw	r1, #61445	; 0xf005
 8002468:	4811      	ldr	r0, [pc, #68]	; (80024b0 <MX_GPIO_Init+0xd4>)
 800246a:	f002 fb8b 	bl	8004b84 <HAL_GPIO_WritePin>
                          |DEADMAN_LED_Pin|LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED2_Pin LED3_Pin LDERROR_Pin DEADMAN_GND_Pin
                           DEADMAN_LED_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED3_Pin|LDERROR_Pin|DEADMAN_GND_Pin
 800246e:	f24f 0305 	movw	r3, #61445	; 0xf005
 8002472:	617b      	str	r3, [r7, #20]
                          |DEADMAN_LED_Pin|LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002474:	2301      	movs	r3, #1
 8002476:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002478:	2300      	movs	r3, #0
 800247a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800247c:	2300      	movs	r3, #0
 800247e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002480:	f107 0314 	add.w	r3, r7, #20
 8002484:	4619      	mov	r1, r3
 8002486:	480a      	ldr	r0, [pc, #40]	; (80024b0 <MX_GPIO_Init+0xd4>)
 8002488:	f002 f9c8 	bl	800481c <HAL_GPIO_Init>

  /*Configure GPIO pin : DEADMAN_SW_Pin */
  GPIO_InitStruct.Pin = DEADMAN_SW_Pin;
 800248c:	2302      	movs	r3, #2
 800248e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002490:	2300      	movs	r3, #0
 8002492:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002494:	2301      	movs	r3, #1
 8002496:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DEADMAN_SW_GPIO_Port, &GPIO_InitStruct);
 8002498:	f107 0314 	add.w	r3, r7, #20
 800249c:	4619      	mov	r1, r3
 800249e:	4804      	ldr	r0, [pc, #16]	; (80024b0 <MX_GPIO_Init+0xd4>)
 80024a0:	f002 f9bc 	bl	800481c <HAL_GPIO_Init>

}
 80024a4:	bf00      	nop
 80024a6:	3728      	adds	r7, #40	; 0x28
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	40023800 	.word	0x40023800
 80024b0:	40020800 	.word	0x40020800

080024b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024b8:	b672      	cpsid	i
}
 80024ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024bc:	e7fe      	b.n	80024bc <Error_Handler+0x8>

080024be <queue_init>:


#include "queue.h"
#include "cmsis_gcc.h"

void queue_init(Queue *q) {
 80024be:	b480      	push	{r7}
 80024c0:	b083      	sub	sp, #12
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
	q->read_idx = 0;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80024cc:	461a      	mov	r2, r3
 80024ce:	2300      	movs	r3, #0
 80024d0:	6013      	str	r3, [r2, #0]
	q->write_idx = 0;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80024d8:	461a      	mov	r2, r3
 80024da:	2300      	movs	r3, #0
 80024dc:	6053      	str	r3, [r2, #4]
	q->is_reading = false;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80024e4:	2200      	movs	r2, #0
 80024e6:	725a      	strb	r2, [r3, #9]
	q->is_writing = false;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80024ee:	2200      	movs	r2, #0
 80024f0:	721a      	strb	r2, [r3, #8]
}
 80024f2:	bf00      	nop
 80024f4:	370c      	adds	r7, #12
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr

080024fe <queue_nelem>:

size_t queue_nelem(Queue *q) {
 80024fe:	b480      	push	{r7}
 8002500:	b083      	sub	sp, #12
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
	return (q->write_idx - q->read_idx) % CHANNEL_SIZE;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800250c:	685a      	ldr	r2, [r3, #4]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 800251c:	4618      	mov	r0, r3
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <queue_can_put>:

bool queue_can_put(Queue *q) {
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
	return queue_nelem(q) < CHANNEL_SIZE - 1;
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f7ff ffe4 	bl	80024fe <queue_nelem>
 8002536:	4603      	mov	r3, r0
 8002538:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800253c:	4293      	cmp	r3, r2
 800253e:	bf94      	ite	ls
 8002540:	2301      	movls	r3, #1
 8002542:	2300      	movhi	r3, #0
 8002544:	b2db      	uxtb	r3, r3
}
 8002546:	4618      	mov	r0, r3
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <queue_put>:

// Returns false if value cannot be put (queue is full)
bool queue_put(Queue *q, Message msg) {
 800254e:	b084      	sub	sp, #16
 8002550:	b5b0      	push	{r4, r5, r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	f107 001c 	add.w	r0, r7, #28
 800255c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (!queue_can_put(q)) {
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f7ff ffe1 	bl	8002528 <queue_can_put>
 8002566:	4603      	mov	r3, r0
 8002568:	f083 0301 	eor.w	r3, r3, #1
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <queue_put+0x28>
		return false;
 8002572:	2300      	movs	r3, #0
 8002574:	e031      	b.n	80025da <queue_put+0x8c>
	}

	while (q->is_writing) { }
 8002576:	bf00      	nop
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800257e:	7a1b      	ldrb	r3, [r3, #8]
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1f8      	bne.n	8002578 <queue_put+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002586:	b672      	cpsid	i
}
 8002588:	bf00      	nop
	__disable_irq();

	q->is_writing = true;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002590:	2201      	movs	r2, #1
 8002592:	721a      	strb	r2, [r3, #8]

	q->messages[q->write_idx] = msg;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	015b      	lsls	r3, r3, #5
 80025a0:	4413      	add	r3, r2
 80025a2:	461d      	mov	r5, r3
 80025a4:	f107 041c 	add.w	r4, r7, #28
 80025a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025ac:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80025b0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	q->write_idx = (q->write_idx + 1) % CHANNEL_SIZE;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	3301      	adds	r3, #1
 80025be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80025c8:	6053      	str	r3, [r2, #4]

	q->is_writing = false;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80025d0:	2200      	movs	r2, #0
 80025d2:	721a      	strb	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 80025d4:	b662      	cpsie	i
}
 80025d6:	bf00      	nop
	__enable_irq();

	return true;
 80025d8:	2301      	movs	r3, #1
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80025e4:	b004      	add	sp, #16
 80025e6:	4770      	bx	lr

080025e8 <queue_has>:

bool queue_has(Queue *q) {
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
	return queue_nelem(q) != 0;
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f7ff ff84 	bl	80024fe <queue_nelem>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	bf14      	ite	ne
 80025fc:	2301      	movne	r3, #1
 80025fe:	2300      	moveq	r3, #0
 8002600:	b2db      	uxtb	r3, r3
}
 8002602:	4618      	mov	r0, r3
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <queue_pop>:

// Returns a MSG_NONE if the queue is empty
Message queue_pop(Queue *q) {
 800260a:	b5b0      	push	{r4, r5, r7, lr}
 800260c:	b092      	sub	sp, #72	; 0x48
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
 8002612:	6039      	str	r1, [r7, #0]
	if (!queue_has(q)) {
 8002614:	6838      	ldr	r0, [r7, #0]
 8002616:	f7ff ffe7 	bl	80025e8 <queue_has>
 800261a:	4603      	mov	r3, r0
 800261c:	f083 0301 	eor.w	r3, r3, #1
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b00      	cmp	r3, #0
 8002624:	d007      	beq.n	8002636 <queue_pop+0x2c>
		return (Message) { .ty = MSG_NONE };
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4618      	mov	r0, r3
 800262a:	2320      	movs	r3, #32
 800262c:	461a      	mov	r2, r3
 800262e:	2100      	movs	r1, #0
 8002630:	f00a fa28 	bl	800ca84 <memset>

	q->is_reading = false;
	__enable_irq();

	return msg;
}
 8002634:	e03a      	b.n	80026ac <queue_pop+0xa2>
	while (q->is_reading) { }
 8002636:	bf00      	nop
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800263e:	7a5b      	ldrb	r3, [r3, #9]
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1f8      	bne.n	8002638 <queue_pop+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 8002646:	b672      	cpsid	i
}
 8002648:	bf00      	nop
	q->is_reading = true;
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002650:	2201      	movs	r2, #1
 8002652:	725a      	strb	r2, [r3, #9]
	Message msg = q->messages[q->read_idx];
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	683a      	ldr	r2, [r7, #0]
 800265e:	015b      	lsls	r3, r3, #5
 8002660:	4413      	add	r3, r2
 8002662:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002666:	461d      	mov	r5, r3
 8002668:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800266a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800266c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002670:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	q->read_idx = (q->read_idx + 1) % CHANNEL_SIZE;
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	3301      	adds	r3, #1
 800267e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002682:	683a      	ldr	r2, [r7, #0]
 8002684:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8002688:	6013      	str	r3, [r2, #0]
	q->is_reading = false;
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002690:	2200      	movs	r2, #0
 8002692:	725a      	strb	r2, [r3, #9]
  __ASM volatile ("cpsie i" : : : "memory");
 8002694:	b662      	cpsie	i
}
 8002696:	bf00      	nop
	return msg;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	461d      	mov	r5, r3
 800269c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80026a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026a4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80026a8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	3748      	adds	r7, #72	; 0x48
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bdb0      	pop	{r4, r5, r7, pc}

080026b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ba:	2300      	movs	r3, #0
 80026bc:	607b      	str	r3, [r7, #4]
 80026be:	4b10      	ldr	r3, [pc, #64]	; (8002700 <HAL_MspInit+0x4c>)
 80026c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c2:	4a0f      	ldr	r2, [pc, #60]	; (8002700 <HAL_MspInit+0x4c>)
 80026c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026c8:	6453      	str	r3, [r2, #68]	; 0x44
 80026ca:	4b0d      	ldr	r3, [pc, #52]	; (8002700 <HAL_MspInit+0x4c>)
 80026cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026d2:	607b      	str	r3, [r7, #4]
 80026d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026d6:	2300      	movs	r3, #0
 80026d8:	603b      	str	r3, [r7, #0]
 80026da:	4b09      	ldr	r3, [pc, #36]	; (8002700 <HAL_MspInit+0x4c>)
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	4a08      	ldr	r2, [pc, #32]	; (8002700 <HAL_MspInit+0x4c>)
 80026e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026e4:	6413      	str	r3, [r2, #64]	; 0x40
 80026e6:	4b06      	ldr	r3, [pc, #24]	; (8002700 <HAL_MspInit+0x4c>)
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ee:	603b      	str	r3, [r7, #0]
 80026f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026f2:	bf00      	nop
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	40023800 	.word	0x40023800

08002704 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b08a      	sub	sp, #40	; 0x28
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800270c:	f107 0314 	add.w	r3, r7, #20
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	605a      	str	r2, [r3, #4]
 8002716:	609a      	str	r2, [r3, #8]
 8002718:	60da      	str	r2, [r3, #12]
 800271a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a19      	ldr	r2, [pc, #100]	; (8002788 <HAL_I2C_MspInit+0x84>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d12c      	bne.n	8002780 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002726:	2300      	movs	r3, #0
 8002728:	613b      	str	r3, [r7, #16]
 800272a:	4b18      	ldr	r3, [pc, #96]	; (800278c <HAL_I2C_MspInit+0x88>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272e:	4a17      	ldr	r2, [pc, #92]	; (800278c <HAL_I2C_MspInit+0x88>)
 8002730:	f043 0302 	orr.w	r3, r3, #2
 8002734:	6313      	str	r3, [r2, #48]	; 0x30
 8002736:	4b15      	ldr	r3, [pc, #84]	; (800278c <HAL_I2C_MspInit+0x88>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	613b      	str	r3, [r7, #16]
 8002740:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002742:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002746:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002748:	2312      	movs	r3, #18
 800274a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274c:	2300      	movs	r3, #0
 800274e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002750:	2303      	movs	r3, #3
 8002752:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002754:	2304      	movs	r3, #4
 8002756:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002758:	f107 0314 	add.w	r3, r7, #20
 800275c:	4619      	mov	r1, r3
 800275e:	480c      	ldr	r0, [pc, #48]	; (8002790 <HAL_I2C_MspInit+0x8c>)
 8002760:	f002 f85c 	bl	800481c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002764:	2300      	movs	r3, #0
 8002766:	60fb      	str	r3, [r7, #12]
 8002768:	4b08      	ldr	r3, [pc, #32]	; (800278c <HAL_I2C_MspInit+0x88>)
 800276a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276c:	4a07      	ldr	r2, [pc, #28]	; (800278c <HAL_I2C_MspInit+0x88>)
 800276e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002772:	6413      	str	r3, [r2, #64]	; 0x40
 8002774:	4b05      	ldr	r3, [pc, #20]	; (800278c <HAL_I2C_MspInit+0x88>)
 8002776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002778:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800277c:	60fb      	str	r3, [r7, #12]
 800277e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002780:	bf00      	nop
 8002782:	3728      	adds	r7, #40	; 0x28
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	40005800 	.word	0x40005800
 800278c:	40023800 	.word	0x40023800
 8002790:	40020400 	.word	0x40020400

08002794 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a1c      	ldr	r2, [pc, #112]	; (8002814 <HAL_TIM_Base_MspInit+0x80>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d116      	bne.n	80027d4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027a6:	2300      	movs	r3, #0
 80027a8:	60fb      	str	r3, [r7, #12]
 80027aa:	4b1b      	ldr	r3, [pc, #108]	; (8002818 <HAL_TIM_Base_MspInit+0x84>)
 80027ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ae:	4a1a      	ldr	r2, [pc, #104]	; (8002818 <HAL_TIM_Base_MspInit+0x84>)
 80027b0:	f043 0301 	orr.w	r3, r3, #1
 80027b4:	6453      	str	r3, [r2, #68]	; 0x44
 80027b6:	4b18      	ldr	r3, [pc, #96]	; (8002818 <HAL_TIM_Base_MspInit+0x84>)
 80027b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80027c2:	2200      	movs	r2, #0
 80027c4:	2100      	movs	r1, #0
 80027c6:	2019      	movs	r0, #25
 80027c8:	f001 ff51 	bl	800466e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80027cc:	2019      	movs	r0, #25
 80027ce:	f001 ff6a 	bl	80046a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80027d2:	e01a      	b.n	800280a <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM2)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027dc:	d115      	bne.n	800280a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027de:	2300      	movs	r3, #0
 80027e0:	60bb      	str	r3, [r7, #8]
 80027e2:	4b0d      	ldr	r3, [pc, #52]	; (8002818 <HAL_TIM_Base_MspInit+0x84>)
 80027e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e6:	4a0c      	ldr	r2, [pc, #48]	; (8002818 <HAL_TIM_Base_MspInit+0x84>)
 80027e8:	f043 0301 	orr.w	r3, r3, #1
 80027ec:	6413      	str	r3, [r2, #64]	; 0x40
 80027ee:	4b0a      	ldr	r3, [pc, #40]	; (8002818 <HAL_TIM_Base_MspInit+0x84>)
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	60bb      	str	r3, [r7, #8]
 80027f8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80027fa:	2200      	movs	r2, #0
 80027fc:	2100      	movs	r1, #0
 80027fe:	201c      	movs	r0, #28
 8002800:	f001 ff35 	bl	800466e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002804:	201c      	movs	r0, #28
 8002806:	f001 ff4e 	bl	80046a6 <HAL_NVIC_EnableIRQ>
}
 800280a:	bf00      	nop
 800280c:	3710      	adds	r7, #16
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	40010000 	.word	0x40010000
 8002818:	40023800 	.word	0x40023800

0800281c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b08c      	sub	sp, #48	; 0x30
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002824:	f107 031c 	add.w	r3, r7, #28
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	605a      	str	r2, [r3, #4]
 800282e:	609a      	str	r2, [r3, #8]
 8002830:	60da      	str	r2, [r3, #12]
 8002832:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a3a      	ldr	r2, [pc, #232]	; (8002924 <HAL_UART_MspInit+0x108>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d134      	bne.n	80028a8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800283e:	2300      	movs	r3, #0
 8002840:	61bb      	str	r3, [r7, #24]
 8002842:	4b39      	ldr	r3, [pc, #228]	; (8002928 <HAL_UART_MspInit+0x10c>)
 8002844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002846:	4a38      	ldr	r2, [pc, #224]	; (8002928 <HAL_UART_MspInit+0x10c>)
 8002848:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800284c:	6413      	str	r3, [r2, #64]	; 0x40
 800284e:	4b36      	ldr	r3, [pc, #216]	; (8002928 <HAL_UART_MspInit+0x10c>)
 8002850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002856:	61bb      	str	r3, [r7, #24]
 8002858:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800285a:	2300      	movs	r3, #0
 800285c:	617b      	str	r3, [r7, #20]
 800285e:	4b32      	ldr	r3, [pc, #200]	; (8002928 <HAL_UART_MspInit+0x10c>)
 8002860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002862:	4a31      	ldr	r2, [pc, #196]	; (8002928 <HAL_UART_MspInit+0x10c>)
 8002864:	f043 0301 	orr.w	r3, r3, #1
 8002868:	6313      	str	r3, [r2, #48]	; 0x30
 800286a:	4b2f      	ldr	r3, [pc, #188]	; (8002928 <HAL_UART_MspInit+0x10c>)
 800286c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	617b      	str	r3, [r7, #20]
 8002874:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002876:	230c      	movs	r3, #12
 8002878:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287a:	2302      	movs	r3, #2
 800287c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287e:	2300      	movs	r3, #0
 8002880:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002882:	2303      	movs	r3, #3
 8002884:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002886:	2307      	movs	r3, #7
 8002888:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800288a:	f107 031c 	add.w	r3, r7, #28
 800288e:	4619      	mov	r1, r3
 8002890:	4826      	ldr	r0, [pc, #152]	; (800292c <HAL_UART_MspInit+0x110>)
 8002892:	f001 ffc3 	bl	800481c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002896:	2200      	movs	r2, #0
 8002898:	2100      	movs	r1, #0
 800289a:	2026      	movs	r0, #38	; 0x26
 800289c:	f001 fee7 	bl	800466e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80028a0:	2026      	movs	r0, #38	; 0x26
 80028a2:	f001 ff00 	bl	80046a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80028a6:	e039      	b.n	800291c <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART3)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a20      	ldr	r2, [pc, #128]	; (8002930 <HAL_UART_MspInit+0x114>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d134      	bne.n	800291c <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART3_CLK_ENABLE();
 80028b2:	2300      	movs	r3, #0
 80028b4:	613b      	str	r3, [r7, #16]
 80028b6:	4b1c      	ldr	r3, [pc, #112]	; (8002928 <HAL_UART_MspInit+0x10c>)
 80028b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ba:	4a1b      	ldr	r2, [pc, #108]	; (8002928 <HAL_UART_MspInit+0x10c>)
 80028bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028c0:	6413      	str	r3, [r2, #64]	; 0x40
 80028c2:	4b19      	ldr	r3, [pc, #100]	; (8002928 <HAL_UART_MspInit+0x10c>)
 80028c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028ca:	613b      	str	r3, [r7, #16]
 80028cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028ce:	2300      	movs	r3, #0
 80028d0:	60fb      	str	r3, [r7, #12]
 80028d2:	4b15      	ldr	r3, [pc, #84]	; (8002928 <HAL_UART_MspInit+0x10c>)
 80028d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d6:	4a14      	ldr	r2, [pc, #80]	; (8002928 <HAL_UART_MspInit+0x10c>)
 80028d8:	f043 0304 	orr.w	r3, r3, #4
 80028dc:	6313      	str	r3, [r2, #48]	; 0x30
 80028de:	4b12      	ldr	r3, [pc, #72]	; (8002928 <HAL_UART_MspInit+0x10c>)
 80028e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e2:	f003 0304 	and.w	r3, r3, #4
 80028e6:	60fb      	str	r3, [r7, #12]
 80028e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80028ea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80028ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f0:	2302      	movs	r3, #2
 80028f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f4:	2300      	movs	r3, #0
 80028f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028f8:	2303      	movs	r3, #3
 80028fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80028fc:	2307      	movs	r3, #7
 80028fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002900:	f107 031c 	add.w	r3, r7, #28
 8002904:	4619      	mov	r1, r3
 8002906:	480b      	ldr	r0, [pc, #44]	; (8002934 <HAL_UART_MspInit+0x118>)
 8002908:	f001 ff88 	bl	800481c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800290c:	2200      	movs	r2, #0
 800290e:	2100      	movs	r1, #0
 8002910:	2027      	movs	r0, #39	; 0x27
 8002912:	f001 feac 	bl	800466e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002916:	2027      	movs	r0, #39	; 0x27
 8002918:	f001 fec5 	bl	80046a6 <HAL_NVIC_EnableIRQ>
}
 800291c:	bf00      	nop
 800291e:	3730      	adds	r7, #48	; 0x30
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40004400 	.word	0x40004400
 8002928:	40023800 	.word	0x40023800
 800292c:	40020000 	.word	0x40020000
 8002930:	40004800 	.word	0x40004800
 8002934:	40020800 	.word	0x40020800

08002938 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800293c:	e7fe      	b.n	800293c <NMI_Handler+0x4>

0800293e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800293e:	b480      	push	{r7}
 8002940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002942:	e7fe      	b.n	8002942 <HardFault_Handler+0x4>

08002944 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002948:	e7fe      	b.n	8002948 <MemManage_Handler+0x4>

0800294a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800294a:	b480      	push	{r7}
 800294c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800294e:	e7fe      	b.n	800294e <BusFault_Handler+0x4>

08002950 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002954:	e7fe      	b.n	8002954 <UsageFault_Handler+0x4>

08002956 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002956:	b480      	push	{r7}
 8002958:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800295a:	bf00      	nop
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002968:	bf00      	nop
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr

08002972 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002972:	b480      	push	{r7}
 8002974:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002976:	bf00      	nop
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002984:	f001 fd30 	bl	80043e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002988:	bf00      	nop
 800298a:	bd80      	pop	{r7, pc}

0800298c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002990:	4802      	ldr	r0, [pc, #8]	; (800299c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002992:	f004 ffa9 	bl	80078e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002996:	bf00      	nop
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	200003f0 	.word	0x200003f0

080029a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80029a4:	4802      	ldr	r0, [pc, #8]	; (80029b0 <TIM2_IRQHandler+0x10>)
 80029a6:	f004 ff9f 	bl	80078e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80029aa:	bf00      	nop
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	20000438 	.word	0x20000438

080029b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80029b8:	4802      	ldr	r0, [pc, #8]	; (80029c4 <USART2_IRQHandler+0x10>)
 80029ba:	f005 fc19 	bl	80081f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80029be:	bf00      	nop
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	20000480 	.word	0x20000480

080029c8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80029cc:	4802      	ldr	r0, [pc, #8]	; (80029d8 <USART3_IRQHandler+0x10>)
 80029ce:	f005 fc0f 	bl	80081f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80029d2:	bf00      	nop
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	200004c4 	.word	0x200004c4

080029dc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80029e0:	4802      	ldr	r0, [pc, #8]	; (80029ec <OTG_FS_IRQHandler+0x10>)
 80029e2:	f003 f9f8 	bl	8005dd6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80029e6:	bf00      	nop
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	2000abc0 	.word	0x2000abc0

080029f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
	return 1;
 80029f4:	2301      	movs	r3, #1
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <_kill>:

int _kill(int pid, int sig)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002a0a:	f009 fff7 	bl	800c9fc <__errno>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2216      	movs	r2, #22
 8002a12:	601a      	str	r2, [r3, #0]
	return -1;
 8002a14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3708      	adds	r7, #8
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <_exit>:

void _exit (int status)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002a28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f7ff ffe7 	bl	8002a00 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002a32:	e7fe      	b.n	8002a32 <_exit+0x12>

08002a34 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b086      	sub	sp, #24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a40:	2300      	movs	r3, #0
 8002a42:	617b      	str	r3, [r7, #20]
 8002a44:	e00a      	b.n	8002a5c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002a46:	f3af 8000 	nop.w
 8002a4a:	4601      	mov	r1, r0
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	1c5a      	adds	r2, r3, #1
 8002a50:	60ba      	str	r2, [r7, #8]
 8002a52:	b2ca      	uxtb	r2, r1
 8002a54:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	617b      	str	r3, [r7, #20]
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	dbf0      	blt.n	8002a46 <_read+0x12>
	}

return len;
 8002a64:	687b      	ldr	r3, [r7, #4]
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3718      	adds	r7, #24
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b086      	sub	sp, #24
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	60f8      	str	r0, [r7, #12]
 8002a76:	60b9      	str	r1, [r7, #8]
 8002a78:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	617b      	str	r3, [r7, #20]
 8002a7e:	e009      	b.n	8002a94 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	1c5a      	adds	r2, r3, #1
 8002a84:	60ba      	str	r2, [r7, #8]
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	3301      	adds	r3, #1
 8002a92:	617b      	str	r3, [r7, #20]
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	dbf1      	blt.n	8002a80 <_write+0x12>
	}
	return len;
 8002a9c:	687b      	ldr	r3, [r7, #4]
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3718      	adds	r7, #24
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <_close>:

int _close(int file)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b083      	sub	sp, #12
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
	return -1;
 8002aae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr

08002abe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	b083      	sub	sp, #12
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
 8002ac6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ace:	605a      	str	r2, [r3, #4]
	return 0;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr

08002ade <_isatty>:

int _isatty(int file)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	b083      	sub	sp, #12
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
	return 1;
 8002ae6:	2301      	movs	r3, #1
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b085      	sub	sp, #20
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
	return 0;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3714      	adds	r7, #20
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
	...

08002b10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b18:	4a14      	ldr	r2, [pc, #80]	; (8002b6c <_sbrk+0x5c>)
 8002b1a:	4b15      	ldr	r3, [pc, #84]	; (8002b70 <_sbrk+0x60>)
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b24:	4b13      	ldr	r3, [pc, #76]	; (8002b74 <_sbrk+0x64>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d102      	bne.n	8002b32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b2c:	4b11      	ldr	r3, [pc, #68]	; (8002b74 <_sbrk+0x64>)
 8002b2e:	4a12      	ldr	r2, [pc, #72]	; (8002b78 <_sbrk+0x68>)
 8002b30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b32:	4b10      	ldr	r3, [pc, #64]	; (8002b74 <_sbrk+0x64>)
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4413      	add	r3, r2
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d207      	bcs.n	8002b50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b40:	f009 ff5c 	bl	800c9fc <__errno>
 8002b44:	4603      	mov	r3, r0
 8002b46:	220c      	movs	r2, #12
 8002b48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b4e:	e009      	b.n	8002b64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b50:	4b08      	ldr	r3, [pc, #32]	; (8002b74 <_sbrk+0x64>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b56:	4b07      	ldr	r3, [pc, #28]	; (8002b74 <_sbrk+0x64>)
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	4a05      	ldr	r2, [pc, #20]	; (8002b74 <_sbrk+0x64>)
 8002b60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b62:	68fb      	ldr	r3, [r7, #12]
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3718      	adds	r7, #24
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	20020000 	.word	0x20020000
 8002b70:	00000400 	.word	0x00000400
 8002b74:	200096e4 	.word	0x200096e4
 8002b78:	2000b1f8 	.word	0x2000b1f8

08002b7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b80:	4b06      	ldr	r3, [pc, #24]	; (8002b9c <SystemInit+0x20>)
 8002b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b86:	4a05      	ldr	r2, [pc, #20]	; (8002b9c <SystemInit+0x20>)
 8002b88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b90:	bf00      	nop
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	e000ed00 	.word	0xe000ed00

08002ba0 <read_u8>:

//#define DEBUG_COMM 1
//#define DEBUG_VERBOSE 1


static inline uint8_t read_u8(uint8_t **data) {
 8002ba0:	b480      	push	{r7}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
	uint8_t val = **data;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	73fb      	strb	r3, [r7, #15]
	(*data)++;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	1c5a      	adds	r2, r3, #1
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	601a      	str	r2, [r3, #0]
	return val;
 8002bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3714      	adds	r7, #20
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <read_u16>:

static inline uint16_t read_u16(uint8_t **data) {
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
	uint8_t hi = read_u8(data);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f7ff ffe5 	bl	8002ba0 <read_u8>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	73fb      	strb	r3, [r7, #15]
	uint8_t lo = read_u8(data);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f7ff ffe0 	bl	8002ba0 <read_u8>
 8002be0:	4603      	mov	r3, r0
 8002be2:	73bb      	strb	r3, [r7, #14]
	return (uint16_t) lo | ((uint16_t) hi << 8);
 8002be4:	7bbb      	ldrb	r3, [r7, #14]
 8002be6:	b21a      	sxth	r2, r3
 8002be8:	7bfb      	ldrb	r3, [r7, #15]
 8002bea:	021b      	lsls	r3, r3, #8
 8002bec:	b21b      	sxth	r3, r3
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	b21b      	sxth	r3, r3
 8002bf2:	b29b      	uxth	r3, r3
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3710      	adds	r7, #16
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <read_u32>:

static inline uint32_t read_u32(uint8_t **data) {
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
	uint16_t hi = read_u16(data);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f7ff ffdf 	bl	8002bc8 <read_u16>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	81fb      	strh	r3, [r7, #14]
	uint16_t lo = read_u16(data);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f7ff ffda 	bl	8002bc8 <read_u16>
 8002c14:	4603      	mov	r3, r0
 8002c16:	81bb      	strh	r3, [r7, #12]
	return (uint32_t) lo | ((uint32_t) hi << 16);
 8002c18:	89ba      	ldrh	r2, [r7, #12]
 8002c1a:	89fb      	ldrh	r3, [r7, #14]
 8002c1c:	041b      	lsls	r3, r3, #16
 8002c1e:	4313      	orrs	r3, r2
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3710      	adds	r7, #16
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <read_f16>:

static inline float read_f16(uint8_t **data, uint16_t scale) {
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	460b      	mov	r3, r1
 8002c32:	807b      	strh	r3, [r7, #2]
	uint16_t uval = read_u16(data);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f7ff ffc7 	bl	8002bc8 <read_u16>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	81fb      	strh	r3, [r7, #14]
	int16_t val = uval < INT16_MAX ? uval : (int16_t) (uval - INT16_MAX) - INT16_MAX;
 8002c3e:	89fb      	ldrh	r3, [r7, #14]
 8002c40:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d904      	bls.n	8002c52 <read_f16+0x2a>
 8002c48:	89fb      	ldrh	r3, [r7, #14]
 8002c4a:	3302      	adds	r3, #2
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	b21b      	sxth	r3, r3
 8002c50:	e001      	b.n	8002c56 <read_f16+0x2e>
 8002c52:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c56:	81bb      	strh	r3, [r7, #12]

	return (float) val / (float) scale;
 8002c58:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002c5c:	ee07 3a90 	vmov	s15, r3
 8002c60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c64:	887b      	ldrh	r3, [r7, #2]
 8002c66:	ee07 3a90 	vmov	s15, r3
 8002c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c6e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002c72:	eef0 7a66 	vmov.f32	s15, s13
}
 8002c76:	eeb0 0a67 	vmov.f32	s0, s15
 8002c7a:	3710      	adds	r7, #16
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <read_f32>:

static inline float read_f32(uint8_t **data, uint32_t scale) {
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
	uint32_t uval = read_u32(data);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f7ff ffb6 	bl	8002bfc <read_u32>
 8002c90:	60f8      	str	r0, [r7, #12]
	int32_t val = uval < INT32_MAX ? uval : (int32_t) (uval - INT32_MAX) - INT32_MAX;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d302      	bcc.n	8002ca2 <read_f32+0x22>
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	3302      	adds	r3, #2
 8002ca0:	e000      	b.n	8002ca4 <read_f32+0x24>
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	60bb      	str	r3, [r7, #8]

	return (float) val / (float) scale;
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	ee07 3a90 	vmov	s15, r3
 8002cac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	ee07 3a90 	vmov	s15, r3
 8002cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cba:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002cbe:	eef0 7a66 	vmov.f32	s15, s13
}
 8002cc2:	eeb0 0a67 	vmov.f32	s0, s15
 8002cc6:	3710      	adds	r7, #16
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <vesc_init>:


void vesc_init(VESC *vesc, uint8_t vesc_id, UART_HandleTypeDef *vesc_uart, IRQn_Type uart_irq, Queue *q) {
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	607a      	str	r2, [r7, #4]
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	460b      	mov	r3, r1
 8002cda:	72fb      	strb	r3, [r7, #11]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	72bb      	strb	r3, [r7, #10]
	vesc->vesc_id = vesc_id;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	7afa      	ldrb	r2, [r7, #11]
 8002ce4:	701a      	strb	r2, [r3, #0]
	vesc->vesc_uart = vesc_uart;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	f8c3 248c 	str.w	r2, [r3, #1164]	; 0x48c
	vesc->uart_irq = uart_irq;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	7aba      	ldrb	r2, [r7, #10]
 8002cf2:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490

	vesc->tx_waiting = 0;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
	vesc->rx_queued = false;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 2884 	strb.w	r2, [r3, #2180]	; 0x884

	vesc->q = q;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494

	vesc_start_recv(vesc);
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	f000 f813 	bl	8002d3a <vesc_start_recv>
}
 8002d14:	bf00      	nop
 8002d16:	3710      	adds	r7, #16
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <vesc_uart_cb_txcplt>:

void vesc_uart_cb_txcplt(VESC *vesc, UART_HandleTypeDef *huart) {
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
#ifdef DEBUG_VERBOSE
	char *msg = "[TX DONE]\r\n";
	CDC_Transmit_FS((uint8_t *) msg, strlen(msg));
#endif

	vesc->tx_waiting = false;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
}
 8002d2e:	bf00      	nop
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr

08002d3a <vesc_start_recv>:

void vesc_start_recv(VESC *vesc) {
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b082      	sub	sp, #8
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(vesc->vesc_uart, vesc->rx_buf, UART_RXSZ);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f8d3 048c 	ldr.w	r0, [r3, #1164]	; 0x48c
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f203 4309 	addw	r3, r3, #1033	; 0x409
 8002d4e:	2280      	movs	r2, #128	; 0x80
 8002d50:	4619      	mov	r1, r3
 8002d52:	f005 fa1d 	bl	8008190 <HAL_UART_Receive_IT>
}
 8002d56:	bf00      	nop
 8002d58:	3708      	adds	r7, #8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <vesc_uart_cb_rxcplt>:

void vesc_uart_cb_rxcplt(VESC *vesc, UART_HandleTypeDef *_huart) {
 8002d5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d60:	b093      	sub	sp, #76	; 0x4c
 8002d62:	af06      	add	r7, sp, #24
 8002d64:	6078      	str	r0, [r7, #4]
 8002d66:	6039      	str	r1, [r7, #0]
	if (vesc->rx_offset + UART_RXSZ < RX_DATA_LEN) {
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
 8002d6e:	3380      	adds	r3, #128	; 0x80
 8002d70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d74:	d220      	bcs.n	8002db8 <vesc_uart_cb_rxcplt+0x5a>
		// TODO: handle if we are out of bounds?
		// memcpy(VESC.rx_data + VESC.rx_offset, VESC.rx_buf, UART_RXSZ);
		for (int i = 0; i < UART_RXSZ; i++) {
 8002d76:	2300      	movs	r3, #0
 8002d78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d7a:	e012      	b.n	8002da2 <vesc_uart_cb_rxcplt+0x44>
			vesc->rx_data[vesc->rx_offset + i] = vesc->rx_buf[i];
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f8d3 2880 	ldr.w	r2, [r3, #2176]	; 0x880
 8002d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d84:	4413      	add	r3, r2
 8002d86:	6879      	ldr	r1, [r7, #4]
 8002d88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d8a:	440a      	add	r2, r1
 8002d8c:	f202 4209 	addw	r2, r2, #1033	; 0x409
 8002d90:	7811      	ldrb	r1, [r2, #0]
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	4413      	add	r3, r2
 8002d96:	460a      	mov	r2, r1
 8002d98:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498
		for (int i = 0; i < UART_RXSZ; i++) {
 8002d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d9e:	3301      	adds	r3, #1
 8002da0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da4:	2b7f      	cmp	r3, #127	; 0x7f
 8002da6:	dde9      	ble.n	8002d7c <vesc_uart_cb_rxcplt+0x1e>
		}
		vesc->rx_offset += UART_RXSZ;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
 8002dae:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f8c3 2880 	str.w	r2, [r3, #2176]	; 0x880
	}

	if (!vesc->rx_queued) {
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f893 3884 	ldrb.w	r3, [r3, #2180]	; 0x884
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	f083 0301 	eor.w	r3, r3, #1
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d01c      	beq.n	8002e04 <vesc_uart_cb_rxcplt+0xa6>
		queue_put(vesc->q, (Message) { .ty = MSG_VESC_UART_GOT_DATA });
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f8d3 6494 	ldr.w	r6, [r3, #1172]	; 0x494
 8002dd0:	f107 030c 	add.w	r3, r7, #12
 8002dd4:	2220      	movs	r2, #32
 8002dd6:	2100      	movs	r1, #0
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f009 fe53 	bl	800ca84 <memset>
 8002dde:	2306      	movs	r3, #6
 8002de0:	733b      	strb	r3, [r7, #12]
 8002de2:	466d      	mov	r5, sp
 8002de4:	f107 0418 	add.w	r4, r7, #24
 8002de8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dec:	6823      	ldr	r3, [r4, #0]
 8002dee:	602b      	str	r3, [r5, #0]
 8002df0:	f107 030c 	add.w	r3, r7, #12
 8002df4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002df6:	4630      	mov	r0, r6
 8002df8:	f7ff fba9 	bl	800254e <queue_put>
		vesc->rx_queued = true;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2884 	strb.w	r2, [r3, #2180]	; 0x884
	}

	vesc_start_recv(vesc);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f7ff ff98 	bl	8002d3a <vesc_start_recv>
}
 8002e0a:	bf00      	nop
 8002e0c:	3734      	adds	r7, #52	; 0x34
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e12 <vesc_got_data>:

void vesc_got_data(VESC *vesc) {
 8002e12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e14:	b099      	sub	sp, #100	; 0x64
 8002e16:	af06      	add	r7, sp, #24
 8002e18:	6078      	str	r0, [r7, #4]
	vesc->rx_queued = false;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 2884 	strb.w	r2, [r3, #2180]	; 0x884

	if (vesc->rx_offset == 0) {
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f000 80f6 	beq.w	800301a <vesc_got_data+0x208>

	CDC_Transmit_FS((uint8_t *) dbgbuf, dbglen);
#endif

	// parse message
	size_t offset = 0;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	647b      	str	r3, [r7, #68]	; 0x44
	while (offset < vesc->rx_offset) {
 8002e32:	e0c4      	b.n	8002fbe <vesc_got_data+0x1ac>
		if (vesc->rx_data[offset] != 2) {
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e38:	4413      	add	r3, r2
 8002e3a:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d003      	beq.n	8002e4e <vesc_got_data+0x3c>
				offset, vesc->rx_offset
			);

			CDC_Transmit_FS((uint8_t *) dbgbuf, dbglen);
#endif
			offset++;
 8002e46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e48:	3301      	adds	r3, #1
 8002e4a:	647b      	str	r3, [r7, #68]	; 0x44
			continue;
 8002e4c:	e0b7      	b.n	8002fbe <vesc_got_data+0x1ac>
		}

		uint8_t msg_size = vesc->rx_data[offset + 1];
 8002e4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e50:	3301      	adds	r3, #1
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	4413      	add	r3, r2
 8002e56:	f893 3498 	ldrb.w	r3, [r3, #1176]	; 0x498
 8002e5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		if (offset + msg_size + 5 > vesc->rx_offset) {
 8002e5e:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8002e62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e64:	4413      	add	r3, r2
 8002e66:	1d5a      	adds	r2, r3, #5
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	f200 80ad 	bhi.w	8002fce <vesc_got_data+0x1bc>
#endif

			break;
		}

		if (vesc->rx_data[offset + msg_size + 4] != 0x3) {
 8002e74:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8002e78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e7a:	4413      	add	r3, r2
 8002e7c:	3304      	adds	r3, #4
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	4413      	add	r3, r2
 8002e82:	f893 3498 	ldrb.w	r3, [r3, #1176]	; 0x498
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	2b03      	cmp	r3, #3
 8002e8a:	d003      	beq.n	8002e94 <vesc_got_data+0x82>

			CDC_Transmit_FS((uint8_t *) dbgbuf, dbglen);
#endif


			offset++;
 8002e8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e8e:	3301      	adds	r3, #1
 8002e90:	647b      	str	r3, [r7, #68]	; 0x44
			continue;
 8002e92:	e094      	b.n	8002fbe <vesc_got_data+0x1ac>
		);

		CDC_Transmit_FS((uint8_t *) dbgbuf, dbglen);
#endif

		uint8_t *packet = &vesc->rx_data[offset + 2];
 8002e94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e96:	3302      	adds	r3, #2
 8002e98:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	63fb      	str	r3, [r7, #60]	; 0x3c

		uint8_t msg_type = packet[0];
 8002ea2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		switch (msg_type) {
 8002eaa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002eae:	2b04      	cmp	r3, #4
 8002eb0:	d17e      	bne.n	8002fb0 <vesc_got_data+0x19e>
		case COMM_GET_VALUES: {
			uint8_t *pkt_ptr = &packet[1];
 8002eb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	62bb      	str	r3, [r7, #40]	; 0x28

			float temp_mos = read_f16(&pkt_ptr, 1e1);
 8002eb8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ebc:	210a      	movs	r1, #10
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7ff feb2 	bl	8002c28 <read_f16>
 8002ec4:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
			/*float temp_motor = */read_f16(&pkt_ptr, 1e1);
 8002ec8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ecc:	210a      	movs	r1, #10
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7ff feaa 	bl	8002c28 <read_f16>
			float current_motor = read_f32(&pkt_ptr, 1e2);
 8002ed4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ed8:	2164      	movs	r1, #100	; 0x64
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7ff fed0 	bl	8002c80 <read_f32>
 8002ee0:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
			/*float current_in = */read_f32(&pkt_ptr, 1e2);
 8002ee4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ee8:	2164      	movs	r1, #100	; 0x64
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7ff fec8 	bl	8002c80 <read_f32>
			/*float id = */read_f32(&pkt_ptr, 1e2);
 8002ef0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ef4:	2164      	movs	r1, #100	; 0x64
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7ff fec2 	bl	8002c80 <read_f32>
			/*float iq = */read_f32(&pkt_ptr, 1e2);
 8002efc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f00:	2164      	movs	r1, #100	; 0x64
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7ff febc 	bl	8002c80 <read_f32>
			/*float duty_now = */read_f16(&pkt_ptr, 1e3);
 8002f08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f0c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7ff fe89 	bl	8002c28 <read_f16>
			float rpm = read_f32(&pkt_ptr, 1e0);
 8002f16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f1a:	2101      	movs	r1, #1
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7ff feaf 	bl	8002c80 <read_f32>
 8002f22:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
			/*float v_in = */read_f16(&pkt_ptr, 1e1);
 8002f26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f2a:	210a      	movs	r1, #10
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7ff fe7b 	bl	8002c28 <read_f16>
			/*float amp_hours = */read_f32(&pkt_ptr, 1e4);
 8002f32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f36:	f242 7110 	movw	r1, #10000	; 0x2710
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7ff fea0 	bl	8002c80 <read_f32>
			/*float amp_hours_charged = */read_f32(&pkt_ptr, 1e4);
 8002f40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f44:	f242 7110 	movw	r1, #10000	; 0x2710
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7ff fe99 	bl	8002c80 <read_f32>
			/*float watt_hours = */read_f32(&pkt_ptr, 1e4);
 8002f4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f52:	f242 7110 	movw	r1, #10000	; 0x2710
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7ff fe92 	bl	8002c80 <read_f32>
			/*float watt_hours_charged = */read_f32(&pkt_ptr, 1e4);
 8002f5c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f60:	f242 7110 	movw	r1, #10000	; 0x2710
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7ff fe8b 	bl	8002c80 <read_f32>

			Message msg = (Message) {
 8002f6a:	f107 0308 	add.w	r3, r7, #8
 8002f6e:	2220      	movs	r2, #32
 8002f70:	2100      	movs	r1, #0
 8002f72:	4618      	mov	r0, r3
 8002f74:	f009 fd86 	bl	800ca84 <memset>
 8002f78:	2308      	movs	r3, #8
 8002f7a:	723b      	strb	r3, [r7, #8]
				.ty = MSG_GOT_ESC_DATA,
				.esc_data = {
					.vesc_id = vesc->vesc_id,
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	781b      	ldrb	r3, [r3, #0]
			Message msg = (Message) {
 8002f80:	733b      	strb	r3, [r7, #12]
 8002f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f84:	613b      	str	r3, [r7, #16]
 8002f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f88:	617b      	str	r3, [r7, #20]
 8002f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f8c:	61bb      	str	r3, [r7, #24]
					.erpm = rpm,
					.current_motor = current_motor
				}
			};

			queue_put(vesc->q, msg);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f8d3 6494 	ldr.w	r6, [r3, #1172]	; 0x494
 8002f94:	466d      	mov	r5, sp
 8002f96:	f107 0414 	add.w	r4, r7, #20
 8002f9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f9e:	6823      	ldr	r3, [r4, #0]
 8002fa0:	602b      	str	r3, [r5, #0]
 8002fa2:	f107 0308 	add.w	r3, r7, #8
 8002fa6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fa8:	4630      	mov	r0, r6
 8002faa:	f7ff fad0 	bl	800254e <queue_put>
			);

			CDC_Transmit_FS((uint8_t *) dbgbuf, dbglen);
#endif

			break;
 8002fae:	e000      	b.n	8002fb2 <vesc_got_data+0x1a0>
		}
		default: {
			break;
 8002fb0:	bf00      	nop
#endif
			break;
		}
		}

		offset += 5 + msg_size;
 8002fb2:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8002fb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fb8:	4413      	add	r3, r2
 8002fba:	3305      	adds	r3, #5
 8002fbc:	647b      	str	r3, [r7, #68]	; 0x44
	while (offset < vesc->rx_offset) {
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
 8002fc4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	f4ff af34 	bcc.w	8002e34 <vesc_got_data+0x22>
 8002fcc:	e000      	b.n	8002fd0 <vesc_got_data+0x1be>
			break;
 8002fce:	bf00      	nop
	}

	HAL_NVIC_DisableIRQ(vesc->uart_irq);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f993 3490 	ldrsb.w	r3, [r3, #1168]	; 0x490
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f001 fb73 	bl	80046c2 <HAL_NVIC_DisableIRQ>

	// Go back
	memmove((void*) vesc->rx_data, (void*) &vesc->rx_data[offset], vesc->rx_offset - offset);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f503 6093 	add.w	r0, r3, #1176	; 0x498
 8002fe2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fe4:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	18d1      	adds	r1, r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f8d3 2880 	ldr.w	r2, [r3, #2176]	; 0x880
 8002ff2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	f009 fd2a 	bl	800ca50 <memmove>
	vesc->rx_offset = vesc->rx_offset - offset;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f8d3 2880 	ldr.w	r2, [r3, #2176]	; 0x880
 8003002:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003004:	1ad2      	subs	r2, r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f8c3 2880 	str.w	r2, [r3, #2176]	; 0x880

	HAL_NVIC_EnableIRQ(vesc->uart_irq);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f993 3490 	ldrsb.w	r3, [r3, #1168]	; 0x490
 8003012:	4618      	mov	r0, r3
 8003014:	f001 fb47 	bl	80046a6 <HAL_NVIC_EnableIRQ>
 8003018:	e000      	b.n	800301c <vesc_got_data+0x20a>
		return;
 800301a:	bf00      	nop
		"<RX DONE>\r\n"
	);

	CDC_Transmit_FS((uint8_t *) dbgbuf, dbglen);
#endif
}
 800301c:	374c      	adds	r7, #76	; 0x4c
 800301e:	46bd      	mov	sp, r7
 8003020:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003024 <vesc_queue_packet>:

// If response_size == 0, then we don't expected a response.
void vesc_queue_packet(VESC *vesc, uint8_t *content, size_t len, size_t response_size) {
 8003024:	b480      	push	{r7}
 8003026:	b087      	sub	sp, #28
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]
 8003030:	603b      	str	r3, [r7, #0]
	if (len > 256) {
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003038:	d86e      	bhi.n	8003118 <vesc_queue_packet+0xf4>
		// TODO: Not yet implemented
		return;
	}

	vesc->tx_data[vesc->current_offset++] = 0x2; // short (<256 bytes) packet
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003040:	1c59      	adds	r1, r3, #1
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
 8003048:	68fa      	ldr	r2, [r7, #12]
 800304a:	4413      	add	r3, r2
 800304c:	2202      	movs	r2, #2
 800304e:	705a      	strb	r2, [r3, #1]
	vesc->tx_data[vesc->current_offset++] = (uint8_t) (len & 0xff);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003056:	1c59      	adds	r1, r3, #1
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	b2d1      	uxtb	r1, r2
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	4413      	add	r3, r2
 8003066:	460a      	mov	r2, r1
 8003068:	705a      	strb	r2, [r3, #1]

	uint16_t crc16 = 0;
 800306a:	2300      	movs	r3, #0
 800306c:	82fb      	strh	r3, [r7, #22]
	for (size_t i = 0; i < len; i++) {
 800306e:	2300      	movs	r3, #0
 8003070:	613b      	str	r3, [r7, #16]
 8003072:	e025      	b.n	80030c0 <vesc_queue_packet+0x9c>
		vesc->tx_data[vesc->current_offset++] = content[i];
 8003074:	68ba      	ldr	r2, [r7, #8]
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	441a      	add	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003080:	1c58      	adds	r0, r3, #1
 8003082:	68f9      	ldr	r1, [r7, #12]
 8003084:	f8c1 0404 	str.w	r0, [r1, #1028]	; 0x404
 8003088:	7811      	ldrb	r1, [r2, #0]
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	4413      	add	r3, r2
 800308e:	460a      	mov	r2, r1
 8003090:	705a      	strb	r2, [r3, #1]
		crc16 = (crc16 << 8) ^ crc16_tab[0xff & ((crc16 >> 8) ^ content[i])];
 8003092:	8afb      	ldrh	r3, [r7, #22]
 8003094:	021b      	lsls	r3, r3, #8
 8003096:	b21a      	sxth	r2, r3
 8003098:	8afb      	ldrh	r3, [r7, #22]
 800309a:	0a1b      	lsrs	r3, r3, #8
 800309c:	b29b      	uxth	r3, r3
 800309e:	4618      	mov	r0, r3
 80030a0:	68b9      	ldr	r1, [r7, #8]
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	440b      	add	r3, r1
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	4043      	eors	r3, r0
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	491d      	ldr	r1, [pc, #116]	; (8003124 <vesc_queue_packet+0x100>)
 80030ae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80030b2:	b21b      	sxth	r3, r3
 80030b4:	4053      	eors	r3, r2
 80030b6:	b21b      	sxth	r3, r3
 80030b8:	82fb      	strh	r3, [r7, #22]
	for (size_t i = 0; i < len; i++) {
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	3301      	adds	r3, #1
 80030be:	613b      	str	r3, [r7, #16]
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d3d5      	bcc.n	8003074 <vesc_queue_packet+0x50>
	}
	vesc->tx_data[vesc->current_offset++] = (uint8_t) ((crc16 >> 8) & 0xff);
 80030c8:	8afb      	ldrh	r3, [r7, #22]
 80030ca:	0a1b      	lsrs	r3, r3, #8
 80030cc:	b298      	uxth	r0, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80030d4:	1c59      	adds	r1, r3, #1
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
 80030dc:	b2c1      	uxtb	r1, r0
 80030de:	68fa      	ldr	r2, [r7, #12]
 80030e0:	4413      	add	r3, r2
 80030e2:	460a      	mov	r2, r1
 80030e4:	705a      	strb	r2, [r3, #1]
	vesc->tx_data[vesc->current_offset++] = (uint8_t) (crc16 & 0xff);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80030ec:	1c59      	adds	r1, r3, #1
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
 80030f4:	8afa      	ldrh	r2, [r7, #22]
 80030f6:	b2d1      	uxtb	r1, r2
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	4413      	add	r3, r2
 80030fc:	460a      	mov	r2, r1
 80030fe:	705a      	strb	r2, [r3, #1]
	vesc->tx_data[vesc->current_offset++] = 0x3;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003106:	1c59      	adds	r1, r3, #1
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	4413      	add	r3, r2
 8003112:	2203      	movs	r2, #3
 8003114:	705a      	strb	r2, [r3, #1]
 8003116:	e000      	b.n	800311a <vesc_queue_packet+0xf6>
		return;
 8003118:	bf00      	nop

}
 800311a:	371c      	adds	r7, #28
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr
 8003124:	080108b0 	.word	0x080108b0

08003128 <vesc_transmit_and_recv>:

void vesc_transmit_and_recv(VESC *vesc) {
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
	if (vesc->current_offset == 0) {
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003136:	2b00      	cmp	r3, #0
 8003138:	d03c      	beq.n	80031b4 <vesc_transmit_and_recv+0x8c>
		return;
	}
	if (vesc->tx_waiting) {
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b00      	cmp	r3, #0
 8003144:	d01e      	beq.n	8003184 <vesc_transmit_and_recv+0x5c>

		char *msg = "BLOCK_TX_WAITING\r\n";
 8003146:	4b1d      	ldr	r3, [pc, #116]	; (80031bc <vesc_transmit_and_recv+0x94>)
 8003148:	60fb      	str	r3, [r7, #12]
		CDC_Transmit_FS((uint8_t*) msg, strlen(msg));
 800314a:	68f8      	ldr	r0, [r7, #12]
 800314c:	f7fd f840 	bl	80001d0 <strlen>
 8003150:	4603      	mov	r3, r0
 8003152:	b29b      	uxth	r3, r3
 8003154:	4619      	mov	r1, r3
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f008 fff4 	bl	800c144 <CDC_Transmit_FS>

		HAL_GPIO_WritePin(LDERROR_GPIO_Port, LDERROR_Pin, GPIO_PIN_SET);
 800315c:	2201      	movs	r2, #1
 800315e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003162:	4817      	ldr	r0, [pc, #92]	; (80031c0 <vesc_transmit_and_recv+0x98>)
 8003164:	f001 fd0e 	bl	8004b84 <HAL_GPIO_WritePin>

		while (vesc->tx_waiting) {
 8003168:	e000      	b.n	800316c <vesc_transmit_and_recv+0x44>
			__asm("nop");
 800316a:	bf00      	nop
		while (vesc->tx_waiting) {
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 8003172:	b2db      	uxtb	r3, r3
 8003174:	2b00      	cmp	r3, #0
 8003176:	d1f8      	bne.n	800316a <vesc_transmit_and_recv+0x42>
		}
		HAL_GPIO_WritePin(LDERROR_GPIO_Port, LDERROR_Pin, GPIO_PIN_RESET);
 8003178:	2200      	movs	r2, #0
 800317a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800317e:	4810      	ldr	r0, [pc, #64]	; (80031c0 <vesc_transmit_and_recv+0x98>)
 8003180:	f001 fd00 	bl	8004b84 <HAL_GPIO_WritePin>
		vesc->current_offset
	);
	CDC_Transmit_FS((uint8_t *) dbgbuf, dbglen);
#endif

	vesc->tx_waiting = true;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
	HAL_UART_Transmit_IT(vesc->vesc_uart, vesc->tx_data, vesc->current_offset);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f8d3 048c 	ldr.w	r0, [r3, #1164]	; 0x48c
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	1c59      	adds	r1, r3, #1
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800319c:	b29b      	uxth	r3, r3
 800319e:	461a      	mov	r2, r3
 80031a0:	f004 ffb1 	bl	8008106 <HAL_UART_Transmit_IT>
	vesc->current_offset = 0;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

	vesc_start_recv(vesc);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f7ff fdc4 	bl	8002d3a <vesc_start_recv>
 80031b2:	e000      	b.n	80031b6 <vesc_transmit_and_recv+0x8e>
		return;
 80031b4:	bf00      	nop
}
 80031b6:	3710      	adds	r7, #16
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	08010810 	.word	0x08010810
 80031c0:	40020800 	.word	0x40020800

080031c4 <vesc_set_current>:

void vesc_set_current(VESC *vesc, float current) {
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b086      	sub	sp, #24
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	ed87 0a00 	vstr	s0, [r7]
	if (!dead_mans_switch_activated()) {
 80031d0:	f7fe f81c 	bl	800120c <dead_mans_switch_activated>
 80031d4:	4603      	mov	r3, r0
 80031d6:	f083 0301 	eor.w	r3, r3, #1
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d002      	beq.n	80031e6 <vesc_set_current+0x22>
		current = 0.0;
 80031e0:	f04f 0300 	mov.w	r3, #0
 80031e4:	603b      	str	r3, [r7, #0]
	}

	uint8_t buf[5];
	buf[0] = COMM_SET_CURRENT;
 80031e6:	2306      	movs	r3, #6
 80031e8:	733b      	strb	r3, [r7, #12]
	int32_t current_i = (int32_t) (current * 1000.0);
 80031ea:	6838      	ldr	r0, [r7, #0]
 80031ec:	f7fd f9ac 	bl	8000548 <__aeabi_f2d>
 80031f0:	f04f 0200 	mov.w	r2, #0
 80031f4:	4b12      	ldr	r3, [pc, #72]	; (8003240 <vesc_set_current+0x7c>)
 80031f6:	f7fd f9ff 	bl	80005f8 <__aeabi_dmul>
 80031fa:	4602      	mov	r2, r0
 80031fc:	460b      	mov	r3, r1
 80031fe:	4610      	mov	r0, r2
 8003200:	4619      	mov	r1, r3
 8003202:	f7fd fca9 	bl	8000b58 <__aeabi_d2iz>
 8003206:	4603      	mov	r3, r0
 8003208:	617b      	str	r3, [r7, #20]
	// copy to big endian
	buf[1] = (current_i >> 24) & 0xff;
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	0e1b      	lsrs	r3, r3, #24
 800320e:	b2db      	uxtb	r3, r3
 8003210:	737b      	strb	r3, [r7, #13]
	buf[2] = (current_i >> 16) & 0xff;
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	141b      	asrs	r3, r3, #16
 8003216:	b2db      	uxtb	r3, r3
 8003218:	73bb      	strb	r3, [r7, #14]
	buf[3] = (current_i >> 8) & 0xff;
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	121b      	asrs	r3, r3, #8
 800321e:	b2db      	uxtb	r3, r3
 8003220:	73fb      	strb	r3, [r7, #15]
	buf[4] = (current_i >> 0) & 0xff;
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	b2db      	uxtb	r3, r3
 8003226:	743b      	strb	r3, [r7, #16]
#ifdef DEBUG_COMM
	char *msg = "[QUEUE setting current]\r\n";
	CDC_Transmit_FS((uint8_t*) msg, strlen(msg));
#endif

	vesc_queue_packet(vesc, buf, 5, 0);
 8003228:	f107 010c 	add.w	r1, r7, #12
 800322c:	2300      	movs	r3, #0
 800322e:	2205      	movs	r2, #5
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f7ff fef7 	bl	8003024 <vesc_queue_packet>
}
 8003236:	bf00      	nop
 8003238:	3718      	adds	r7, #24
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	408f4000 	.word	0x408f4000

08003244 <vesc_request_data>:

void vesc_request_data(VESC *vesc) {
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
	uint8_t buf[1];
	buf[0] = COMM_GET_VALUES;
 800324c:	2304      	movs	r3, #4
 800324e:	733b      	strb	r3, [r7, #12]
#ifdef DEBUG_COMM
	char *msg = "[QUEUE requesting data]\r\n";
	CDC_Transmit_FS((uint8_t*) msg, strlen(msg));
#endif

	vesc_queue_packet(vesc, buf, 1, 0x29);
 8003250:	f107 010c 	add.w	r1, r7, #12
 8003254:	2329      	movs	r3, #41	; 0x29
 8003256:	2201      	movs	r2, #1
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f7ff fee3 	bl	8003024 <vesc_queue_packet>
}
 800325e:	bf00      	nop
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
	...

08003268 <vcr_step>:
 */


#include "vesc_current_reg.h"

float vcr_step(VESC_Current_Reg *vcr, float dt, float current_input) {
 8003268:	b480      	push	{r7}
 800326a:	b089      	sub	sp, #36	; 0x24
 800326c:	af00      	add	r7, sp, #0
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	ed87 0a02 	vstr	s0, [r7, #8]
 8003274:	edc7 0a01 	vstr	s1, [r7, #4]
	float tau = 1 / (FILTER_FREQ * 6.28);
 8003278:	4b1e      	ldr	r3, [pc, #120]	; (80032f4 <vcr_step+0x8c>)
 800327a:	61fb      	str	r3, [r7, #28]
	float alpha = dt / tau;
 800327c:	edd7 6a02 	vldr	s13, [r7, #8]
 8003280:	ed97 7a07 	vldr	s14, [r7, #28]
 8003284:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003288:	edc7 7a06 	vstr	s15, [r7, #24]

	vcr->input_filtered = vcr->input_filtered * (1 - alpha) + alpha * current_input;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	ed93 7a02 	vldr	s14, [r3, #8]
 8003292:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003296:	edd7 7a06 	vldr	s15, [r7, #24]
 800329a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800329e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032a2:	edd7 6a06 	vldr	s13, [r7, #24]
 80032a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80032aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	edc3 7a02 	vstr	s15, [r3, #8]

	float error = vcr->setpoint - vcr->input_filtered;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	ed93 7a01 	vldr	s14, [r3, #4]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	edd3 7a02 	vldr	s15, [r3, #8]
 80032c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032c8:	edc7 7a05 	vstr	s15, [r7, #20]

	return vcr->setpoint + vcr->k_p * error;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	ed93 7a01 	vldr	s14, [r3, #4]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	edd3 6a00 	vldr	s13, [r3]
 80032d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80032dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032e0:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80032e4:	eeb0 0a67 	vmov.f32	s0, s15
 80032e8:	3724      	adds	r7, #36	; 0x24
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	3ea30ead 	.word	0x3ea30ead

080032f8 <kalman_filter_predict>:
#include <math.h>
#include "ctrl/common.h"


void kalman_filter_predict(float input, float dt, States *s, Matrix *q_t, Matrix *q_w, Covariances *covs)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b099      	sub	sp, #100	; 0x64
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	ed87 0a05 	vstr	s0, [r7, #20]
 8003302:	edc7 0a04 	vstr	s1, [r7, #16]
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
 800330c:	603b      	str	r3, [r7, #0]
    float X11 = s->x1 + dt * s->x2;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	ed93 7a00 	vldr	s14, [r3]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	edd3 6a01 	vldr	s13, [r3, #4]
 800331a:	edd7 7a04 	vldr	s15, [r7, #16]
 800331e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003322:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003326:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    //float X21 = s->x2;
    float X31 = s->x3 + dt * s->x4;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	ed93 7a02 	vldr	s14, [r3, #8]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	edd3 6a03 	vldr	s13, [r3, #12]
 8003336:	edd7 7a04 	vldr	s15, [r7, #16]
 800333a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800333e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003342:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    //float X41 = s->x4; 

    //printf("Us: %0.10f %0.10f\n", U1, U2);
    s->x1 = X11;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800334a:	601a      	str	r2, [r3, #0]
    //s->x2 = X21;
    s->x3 = X31;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003350:	609a      	str	r2, [r3, #8]
    //s->X4 = X41; 

    /* Dot product covariance and state transistion model*/
    //printf("Covs: %0.15f %0.15f %0.15f %0.15f\n", covs->pitch.m11, covs->pitch.m12, covs->pitch.m21, covs->pitch.m22);
    float c11 = covs->pitch.m11 + (dt * covs->pitch.m21);
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	ed93 7a00 	vldr	s14, [r3]
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	edd3 6a02 	vldr	s13, [r3, #8]
 800335e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003362:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003366:	ee77 7a27 	vadd.f32	s15, s14, s15
 800336a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    float c12 = covs->pitch.m12 + (dt * covs->pitch.m22);
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	ed93 7a01 	vldr	s14, [r3, #4]
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	edd3 6a03 	vldr	s13, [r3, #12]
 800337a:	edd7 7a04 	vldr	s15, [r7, #16]
 800337e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003382:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003386:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    float c21 = covs->pitch.m21;
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	64fb      	str	r3, [r7, #76]	; 0x4c
    float c22 = covs->pitch.m22;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	64bb      	str	r3, [r7, #72]	; 0x48

    float c33 = covs->wheel.m11 + (dt * covs->wheel.m21);
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	ed93 7a08 	vldr	s14, [r3, #32]
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 80033a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80033a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033ae:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    float c34 = covs->wheel.m12 + (dt * covs->wheel.m22);
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 80033be:	edd7 7a04 	vldr	s15, [r7, #16]
 80033c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033ca:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    float c43 = covs->wheel.m21;
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d2:	63fb      	str	r3, [r7, #60]	; 0x3c
    float c44 = covs->wheel.m22;
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d8:	63bb      	str	r3, [r7, #56]	; 0x38
    //printf("Cs: %0.15f %0.15f %0.15f %0.15f\n", c11, c12, c21, c22);
    /* c matrix transposed with state transistion model
    Fm11 Fm12    Fm11 Fm21
    Fm21 Fm22 => Fm12 Fm22
    */
    float p11 = c11 + c12 * dt;
 80033da:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80033de:	edd7 7a04 	vldr	s15, [r7, #16]
 80033e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033e6:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80033ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033ee:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    float p12 = c12;
 80033f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033f4:	633b      	str	r3, [r7, #48]	; 0x30
    float p21 = c21 + c22;
 80033f6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80033fa:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80033fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003402:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    float p22 = c22;
 8003406:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003408:	62bb      	str	r3, [r7, #40]	; 0x28

    float p33 = c33 + c34 * dt;
 800340a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800340e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003416:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800341a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800341e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float p34 = c34;
 8003422:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003424:	623b      	str	r3, [r7, #32]
    float p43 = c43 + c44 * dt;
 8003426:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800342a:	edd7 7a04 	vldr	s15, [r7, #16]
 800342e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003432:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003436:	ee77 7a27 	vadd.f32	s15, s14, s15
 800343a:	edc7 7a07 	vstr	s15, [r7, #28]
    float p44 = c44;
 800343e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003440:	61bb      	str	r3, [r7, #24]

    //printf("Ps: %0.15f %0.15f %0.15f %0.15f \n", p11, p12, p21, p22);
 
    covs->pitch.m11 = p11 + q_t->m11;  
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	ed93 7a00 	vldr	s14, [r3]
 8003448:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800344c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	edc3 7a00 	vstr	s15, [r3]
    covs->pitch.m12 = p12 + q_t->m12;
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	ed93 7a01 	vldr	s14, [r3, #4]
 800345c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003460:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	edc3 7a01 	vstr	s15, [r3, #4]
    covs->pitch.m21 = p21 + q_t->m21;
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	ed93 7a02 	vldr	s14, [r3, #8]
 8003470:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003474:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	edc3 7a02 	vstr	s15, [r3, #8]
    covs->pitch.m22 = p22 + q_t->m22;
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	ed93 7a03 	vldr	s14, [r3, #12]
 8003484:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003488:	ee77 7a27 	vadd.f32	s15, s14, s15
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	edc3 7a03 	vstr	s15, [r3, #12]

    covs->wheel.m11 = p33 + q_w->m11;  
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	ed93 7a00 	vldr	s14, [r3]
 8003498:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800349c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	edc3 7a08 	vstr	s15, [r3, #32]
    covs->wheel.m12 = p34 + q_w->m12;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	ed93 7a01 	vldr	s14, [r3, #4]
 80034ac:	edd7 7a08 	vldr	s15, [r7, #32]
 80034b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    covs->wheel.m21 = p43 + q_w->m21;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	ed93 7a02 	vldr	s14, [r3, #8]
 80034c0:	edd7 7a07 	vldr	s15, [r7, #28]
 80034c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    covs->wheel.m22 = p44 + q_w->m22;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	ed93 7a03 	vldr	s14, [r3, #12]
 80034d4:	edd7 7a06 	vldr	s15, [r7, #24]
 80034d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    //printf("Covs: %0.15f %0.15f %0.15f %0.15f\n", covs->pitch.m11, covs->pitch.m12, covs->pitch.m21, covs->pitch.m22);
}
 80034e2:	bf00      	nop
 80034e4:	3764      	adds	r7, #100	; 0x64
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
	...

080034f0 <kalman_filter_update>:



void kalman_filter_update(float sensor_t, float sensor_w, float dt, States *s, Matrix *q_t, Matrix *q_w, Covariances *covs, R_error *r_vals)
{   
 80034f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80034f4:	b098      	sub	sp, #96	; 0x60
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	ed87 0a07 	vstr	s0, [r7, #28]
 80034fc:	edc7 0a06 	vstr	s1, [r7, #24]
 8003500:	ed87 1a05 	vstr	s2, [r7, #20]
 8003504:	6138      	str	r0, [r7, #16]
 8003506:	60f9      	str	r1, [r7, #12]
 8003508:	60ba      	str	r2, [r7, #8]
 800350a:	607b      	str	r3, [r7, #4]
    //Sensor_t is top angluar velocity, senors_w is wheel velocity
    /* sensor is angular velocity */
    float diff_t = sensor_t - s->x2;
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003512:	ed97 7a07 	vldr	s14, [r7, #28]
 8003516:	ee77 7a67 	vsub.f32	s15, s14, s15
 800351a:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    float diff_w = sensor_w - ((1/WHEEL_RAD)*RPM_TO_RADS*s->x4);
 800351e:	69b8      	ldr	r0, [r7, #24]
 8003520:	f7fd f812 	bl	8000548 <__aeabi_f2d>
 8003524:	4604      	mov	r4, r0
 8003526:	460d      	mov	r5, r1
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	4618      	mov	r0, r3
 800352e:	f7fd f80b 	bl	8000548 <__aeabi_f2d>
 8003532:	a3f6      	add	r3, pc, #984	; (adr r3, 800390c <kalman_filter_update+0x41c>)
 8003534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003538:	f7fd f85e 	bl	80005f8 <__aeabi_dmul>
 800353c:	4602      	mov	r2, r0
 800353e:	460b      	mov	r3, r1
 8003540:	4620      	mov	r0, r4
 8003542:	4629      	mov	r1, r5
 8003544:	f7fc fea0 	bl	8000288 <__aeabi_dsub>
 8003548:	4602      	mov	r2, r0
 800354a:	460b      	mov	r3, r1
 800354c:	4610      	mov	r0, r2
 800354e:	4619      	mov	r1, r3
 8003550:	f7fd fb2a 	bl	8000ba8 <__aeabi_d2f>
 8003554:	4603      	mov	r3, r0
 8003556:	65bb      	str	r3, [r7, #88]	; 0x58

    //printf("Diff: %f\n", diff);

    /* Gain calculation */
    float gain1_t = covs->pitch.m12 * (1 / (covs->pitch.m22 + r_vals->pitch));
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	ed93 7a01 	vldr	s14, [r3, #4]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	edd3 6a03 	vldr	s13, [r3, #12]
 8003564:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003566:	edd3 7a00 	vldr	s15, [r3]
 800356a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800356e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8003572:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800357a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    float gain2_t = covs->pitch.m22 * (1 / (covs->pitch.m22 + r_vals->pitch));
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	ed93 7a03 	vldr	s14, [r3, #12]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	edd3 6a03 	vldr	s13, [r3, #12]
 800358a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800358c:	edd3 7a00 	vldr	s15, [r3]
 8003590:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003594:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8003598:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800359c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035a0:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    float k = WHEEL_RAD * RPM_TO_RADS;
 80035a4:	4bd8      	ldr	r3, [pc, #864]	; (8003908 <kalman_filter_update+0x418>)
 80035a6:	64fb      	str	r3, [r7, #76]	; 0x4c
    float gain1_w = (covs->wheel.m12 * k) / (covs->wheel.m22 * pow(k,2) + r_vals->wheel);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80035ae:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80035b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035b6:	ee17 0a90 	vmov	r0, s15
 80035ba:	f7fc ffc5 	bl	8000548 <__aeabi_f2d>
 80035be:	4604      	mov	r4, r0
 80035c0:	460d      	mov	r5, r1
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7fc ffbe 	bl	8000548 <__aeabi_f2d>
 80035cc:	4680      	mov	r8, r0
 80035ce:	4689      	mov	r9, r1
 80035d0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80035d2:	f7fc ffb9 	bl	8000548 <__aeabi_f2d>
 80035d6:	4602      	mov	r2, r0
 80035d8:	460b      	mov	r3, r1
 80035da:	ed9f 1bc9 	vldr	d1, [pc, #804]	; 8003900 <kalman_filter_update+0x410>
 80035de:	ec43 2b10 	vmov	d0, r2, r3
 80035e2:	f00c f91f 	bl	800f824 <pow>
 80035e6:	ec53 2b10 	vmov	r2, r3, d0
 80035ea:	4640      	mov	r0, r8
 80035ec:	4649      	mov	r1, r9
 80035ee:	f7fd f803 	bl	80005f8 <__aeabi_dmul>
 80035f2:	4602      	mov	r2, r0
 80035f4:	460b      	mov	r3, r1
 80035f6:	4690      	mov	r8, r2
 80035f8:	4699      	mov	r9, r3
 80035fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	4618      	mov	r0, r3
 8003600:	f7fc ffa2 	bl	8000548 <__aeabi_f2d>
 8003604:	4602      	mov	r2, r0
 8003606:	460b      	mov	r3, r1
 8003608:	4640      	mov	r0, r8
 800360a:	4649      	mov	r1, r9
 800360c:	f7fc fe3e 	bl	800028c <__adddf3>
 8003610:	4602      	mov	r2, r0
 8003612:	460b      	mov	r3, r1
 8003614:	4620      	mov	r0, r4
 8003616:	4629      	mov	r1, r5
 8003618:	f7fd f918 	bl	800084c <__aeabi_ddiv>
 800361c:	4602      	mov	r2, r0
 800361e:	460b      	mov	r3, r1
 8003620:	4610      	mov	r0, r2
 8003622:	4619      	mov	r1, r3
 8003624:	f7fd fac0 	bl	8000ba8 <__aeabi_d2f>
 8003628:	4603      	mov	r3, r0
 800362a:	64bb      	str	r3, [r7, #72]	; 0x48
    float gain2_w = (covs->wheel.m22 * k) / (covs->wheel.m22 * pow(k,2) + r_vals->wheel);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8003632:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800363a:	ee17 0a90 	vmov	r0, s15
 800363e:	f7fc ff83 	bl	8000548 <__aeabi_f2d>
 8003642:	4604      	mov	r4, r0
 8003644:	460d      	mov	r5, r1
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364a:	4618      	mov	r0, r3
 800364c:	f7fc ff7c 	bl	8000548 <__aeabi_f2d>
 8003650:	4680      	mov	r8, r0
 8003652:	4689      	mov	r9, r1
 8003654:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003656:	f7fc ff77 	bl	8000548 <__aeabi_f2d>
 800365a:	4602      	mov	r2, r0
 800365c:	460b      	mov	r3, r1
 800365e:	ed9f 1ba8 	vldr	d1, [pc, #672]	; 8003900 <kalman_filter_update+0x410>
 8003662:	ec43 2b10 	vmov	d0, r2, r3
 8003666:	f00c f8dd 	bl	800f824 <pow>
 800366a:	ec53 2b10 	vmov	r2, r3, d0
 800366e:	4640      	mov	r0, r8
 8003670:	4649      	mov	r1, r9
 8003672:	f7fc ffc1 	bl	80005f8 <__aeabi_dmul>
 8003676:	4602      	mov	r2, r0
 8003678:	460b      	mov	r3, r1
 800367a:	4690      	mov	r8, r2
 800367c:	4699      	mov	r9, r3
 800367e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	4618      	mov	r0, r3
 8003684:	f7fc ff60 	bl	8000548 <__aeabi_f2d>
 8003688:	4602      	mov	r2, r0
 800368a:	460b      	mov	r3, r1
 800368c:	4640      	mov	r0, r8
 800368e:	4649      	mov	r1, r9
 8003690:	f7fc fdfc 	bl	800028c <__adddf3>
 8003694:	4602      	mov	r2, r0
 8003696:	460b      	mov	r3, r1
 8003698:	4620      	mov	r0, r4
 800369a:	4629      	mov	r1, r5
 800369c:	f7fd f8d6 	bl	800084c <__aeabi_ddiv>
 80036a0:	4602      	mov	r2, r0
 80036a2:	460b      	mov	r3, r1
 80036a4:	4610      	mov	r0, r2
 80036a6:	4619      	mov	r1, r3
 80036a8:	f7fd fa7e 	bl	8000ba8 <__aeabi_d2f>
 80036ac:	4603      	mov	r3, r0
 80036ae:	647b      	str	r3, [r7, #68]	; 0x44


    //printf("Gain1: %f Gain2: %f\n", gain1, gain2);
    /* Update states */
    s->x1 = s->x1 + gain1_t * diff_t;
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	ed93 7a00 	vldr	s14, [r3]
 80036b6:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80036ba:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80036be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	edc3 7a00 	vstr	s15, [r3]
    s->x2 = s->x2 + gain2_t * diff_t;
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	ed93 7a01 	vldr	s14, [r3, #4]
 80036d2:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80036d6:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80036da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	edc3 7a01 	vstr	s15, [r3, #4]
    s->x3 = s->x3 + gain1_w * diff_w;
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	ed93 7a02 	vldr	s14, [r3, #8]
 80036ee:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 80036f2:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80036f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	edc3 7a02 	vstr	s15, [r3, #8]
    s->x4 = s->x4 + gain2_w * diff_w;
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	ed93 7a03 	vldr	s14, [r3, #12]
 800370a:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800370e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8003712:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003716:	ee77 7a27 	vadd.f32	s15, s14, s15
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	edc3 7a03 	vstr	s15, [r3, #12]

    //printf("New states: x1 = %f x2 = %f\n", s->x1, s->x2);

    /* Covariance update */
    //printf("Update covs: %0.15f %0.15f %0.15f %0.15f\n", covs->pitch.m11, covs->pitch.m12, covs->pitch.m21, covs->pitch.m22);
    float c11 = (-covs->pitch.m12*covs->pitch.m21 + covs->pitch.m11*(covs->pitch.m22+r_vals->pitch))/(covs->pitch.m22 + r_vals->pitch);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	edd3 7a01 	vldr	s15, [r3, #4]
 8003726:	eeb1 7a67 	vneg.f32	s14, s15
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003730:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	edd3 6a00 	vldr	s13, [r3]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	ed93 6a03 	vldr	s12, [r3, #12]
 8003740:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003742:	edd3 7a00 	vldr	s15, [r3]
 8003746:	ee76 7a27 	vadd.f32	s15, s12, s15
 800374a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800374e:	ee77 6a27 	vadd.f32	s13, s14, s15
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	ed93 7a03 	vldr	s14, [r3, #12]
 8003758:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800375a:	edd3 7a00 	vldr	s15, [r3]
 800375e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003762:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003766:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    float c12 = (covs->pitch.m12*r_vals->pitch)/(covs->pitch.m22 + r_vals->pitch);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	ed93 7a01 	vldr	s14, [r3, #4]
 8003770:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003772:	edd3 7a00 	vldr	s15, [r3]
 8003776:	ee67 6a27 	vmul.f32	s13, s14, s15
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	ed93 7a03 	vldr	s14, [r3, #12]
 8003780:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003782:	edd3 7a00 	vldr	s15, [r3]
 8003786:	ee37 7a27 	vadd.f32	s14, s14, s15
 800378a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800378e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    float c21 = (covs->pitch.m21*r_vals->pitch)/(covs->pitch.m22 + r_vals->pitch);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	ed93 7a02 	vldr	s14, [r3, #8]
 8003798:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800379a:	edd3 7a00 	vldr	s15, [r3]
 800379e:	ee67 6a27 	vmul.f32	s13, s14, s15
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	ed93 7a03 	vldr	s14, [r3, #12]
 80037a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037aa:	edd3 7a00 	vldr	s15, [r3]
 80037ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037b6:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    float c22 = (covs->pitch.m22*r_vals->pitch)/(covs->pitch.m22 + r_vals->pitch);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	ed93 7a03 	vldr	s14, [r3, #12]
 80037c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037c2:	edd3 7a00 	vldr	s15, [r3]
 80037c6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	ed93 7a03 	vldr	s14, [r3, #12]
 80037d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037d2:	edd3 7a00 	vldr	s15, [r3]
 80037d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037de:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    covs->pitch.m11 = c11;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80037e6:	601a      	str	r2, [r3, #0]
    covs->pitch.m12 = c12;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80037ec:	605a      	str	r2, [r3, #4]
    covs->pitch.m21 = c21;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037f2:	609a      	str	r2, [r3, #8]
    covs->pitch.m22 = c22;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037f8:	60da      	str	r2, [r3, #12]

    float c33 = covs->wheel.m11 + covs->wheel.m22 * pow(gain1_w,2) * pow(k,2) - covs->wheel.m12*gain1_w*k - covs->wheel.m21*gain1_w*k + pow(gain1_w,2)*r_vals->wheel;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	4618      	mov	r0, r3
 8003800:	f7fc fea2 	bl	8000548 <__aeabi_f2d>
 8003804:	4604      	mov	r4, r0
 8003806:	460d      	mov	r5, r1
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380c:	4618      	mov	r0, r3
 800380e:	f7fc fe9b 	bl	8000548 <__aeabi_f2d>
 8003812:	4680      	mov	r8, r0
 8003814:	4689      	mov	r9, r1
 8003816:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003818:	f7fc fe96 	bl	8000548 <__aeabi_f2d>
 800381c:	4602      	mov	r2, r0
 800381e:	460b      	mov	r3, r1
 8003820:	ed9f 1b37 	vldr	d1, [pc, #220]	; 8003900 <kalman_filter_update+0x410>
 8003824:	ec43 2b10 	vmov	d0, r2, r3
 8003828:	f00b fffc 	bl	800f824 <pow>
 800382c:	ec53 2b10 	vmov	r2, r3, d0
 8003830:	4640      	mov	r0, r8
 8003832:	4649      	mov	r1, r9
 8003834:	f7fc fee0 	bl	80005f8 <__aeabi_dmul>
 8003838:	4602      	mov	r2, r0
 800383a:	460b      	mov	r3, r1
 800383c:	4690      	mov	r8, r2
 800383e:	4699      	mov	r9, r3
 8003840:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003842:	f7fc fe81 	bl	8000548 <__aeabi_f2d>
 8003846:	4602      	mov	r2, r0
 8003848:	460b      	mov	r3, r1
 800384a:	ed9f 1b2d 	vldr	d1, [pc, #180]	; 8003900 <kalman_filter_update+0x410>
 800384e:	ec43 2b10 	vmov	d0, r2, r3
 8003852:	f00b ffe7 	bl	800f824 <pow>
 8003856:	ec53 2b10 	vmov	r2, r3, d0
 800385a:	4640      	mov	r0, r8
 800385c:	4649      	mov	r1, r9
 800385e:	f7fc fecb 	bl	80005f8 <__aeabi_dmul>
 8003862:	4602      	mov	r2, r0
 8003864:	460b      	mov	r3, r1
 8003866:	4620      	mov	r0, r4
 8003868:	4629      	mov	r1, r5
 800386a:	f7fc fd0f 	bl	800028c <__adddf3>
 800386e:	4602      	mov	r2, r0
 8003870:	460b      	mov	r3, r1
 8003872:	4614      	mov	r4, r2
 8003874:	461d      	mov	r5, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800387c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003880:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003884:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003888:	ee67 7a27 	vmul.f32	s15, s14, s15
 800388c:	ee17 0a90 	vmov	r0, s15
 8003890:	f7fc fe5a 	bl	8000548 <__aeabi_f2d>
 8003894:	4602      	mov	r2, r0
 8003896:	460b      	mov	r3, r1
 8003898:	4620      	mov	r0, r4
 800389a:	4629      	mov	r1, r5
 800389c:	f7fc fcf4 	bl	8000288 <__aeabi_dsub>
 80038a0:	4602      	mov	r2, r0
 80038a2:	460b      	mov	r3, r1
 80038a4:	4614      	mov	r4, r2
 80038a6:	461d      	mov	r5, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80038ae:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80038b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038b6:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80038ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038be:	ee17 0a90 	vmov	r0, s15
 80038c2:	f7fc fe41 	bl	8000548 <__aeabi_f2d>
 80038c6:	4602      	mov	r2, r0
 80038c8:	460b      	mov	r3, r1
 80038ca:	4620      	mov	r0, r4
 80038cc:	4629      	mov	r1, r5
 80038ce:	f7fc fcdb 	bl	8000288 <__aeabi_dsub>
 80038d2:	4602      	mov	r2, r0
 80038d4:	460b      	mov	r3, r1
 80038d6:	4614      	mov	r4, r2
 80038d8:	461d      	mov	r5, r3
 80038da:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80038dc:	f7fc fe34 	bl	8000548 <__aeabi_f2d>
 80038e0:	4602      	mov	r2, r0
 80038e2:	460b      	mov	r3, r1
 80038e4:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8003900 <kalman_filter_update+0x410>
 80038e8:	ec43 2b10 	vmov	d0, r2, r3
 80038ec:	f00b ff9a 	bl	800f824 <pow>
 80038f0:	ec59 8b10 	vmov	r8, r9, d0
 80038f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	4618      	mov	r0, r3
 80038fa:	e00f      	b.n	800391c <kalman_filter_update+0x42c>
 80038fc:	f3af 8000 	nop.w
 8003900:	00000000 	.word	0x00000000
 8003904:	40000000 	.word	0x40000000
 8003908:	402b1f97 	.word	0x402b1f97
 800390c:	899ce744 	.word	0x899ce744
 8003910:	40410d64 	.word	0x40410d64
 8003914:	00000000 	.word	0x00000000
 8003918:	40000000 	.word	0x40000000
 800391c:	f7fc fe14 	bl	8000548 <__aeabi_f2d>
 8003920:	4602      	mov	r2, r0
 8003922:	460b      	mov	r3, r1
 8003924:	4640      	mov	r0, r8
 8003926:	4649      	mov	r1, r9
 8003928:	f7fc fe66 	bl	80005f8 <__aeabi_dmul>
 800392c:	4602      	mov	r2, r0
 800392e:	460b      	mov	r3, r1
 8003930:	4620      	mov	r0, r4
 8003932:	4629      	mov	r1, r5
 8003934:	f7fc fcaa 	bl	800028c <__adddf3>
 8003938:	4602      	mov	r2, r0
 800393a:	460b      	mov	r3, r1
 800393c:	4610      	mov	r0, r2
 800393e:	4619      	mov	r1, r3
 8003940:	f7fd f932 	bl	8000ba8 <__aeabi_d2f>
 8003944:	4603      	mov	r3, r0
 8003946:	633b      	str	r3, [r7, #48]	; 0x30
    float c34 = covs->wheel.m12 + covs->wheel.m22 *gain1_w*gain2_w * pow(k,2) - covs->wheel.m22*gain1_w*k - covs->wheel.m12*gain2_w*k + gain1_w*gain2_w*r_vals->wheel;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394c:	4618      	mov	r0, r3
 800394e:	f7fc fdfb 	bl	8000548 <__aeabi_f2d>
 8003952:	4604      	mov	r4, r0
 8003954:	460d      	mov	r5, r1
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800395c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003960:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003964:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003968:	ee67 7a27 	vmul.f32	s15, s14, s15
 800396c:	ee17 0a90 	vmov	r0, s15
 8003970:	f7fc fdea 	bl	8000548 <__aeabi_f2d>
 8003974:	4680      	mov	r8, r0
 8003976:	4689      	mov	r9, r1
 8003978:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800397a:	f7fc fde5 	bl	8000548 <__aeabi_f2d>
 800397e:	4602      	mov	r2, r0
 8003980:	460b      	mov	r3, r1
 8003982:	ed1f 1b1c 	vldr	d1, [pc, #-112]	; 8003914 <kalman_filter_update+0x424>
 8003986:	ec43 2b10 	vmov	d0, r2, r3
 800398a:	f00b ff4b 	bl	800f824 <pow>
 800398e:	ec53 2b10 	vmov	r2, r3, d0
 8003992:	4640      	mov	r0, r8
 8003994:	4649      	mov	r1, r9
 8003996:	f7fc fe2f 	bl	80005f8 <__aeabi_dmul>
 800399a:	4602      	mov	r2, r0
 800399c:	460b      	mov	r3, r1
 800399e:	4620      	mov	r0, r4
 80039a0:	4629      	mov	r1, r5
 80039a2:	f7fc fc73 	bl	800028c <__adddf3>
 80039a6:	4602      	mov	r2, r0
 80039a8:	460b      	mov	r3, r1
 80039aa:	4614      	mov	r4, r2
 80039ac:	461d      	mov	r5, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80039b4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80039b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80039bc:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80039c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039c4:	ee17 0a90 	vmov	r0, s15
 80039c8:	f7fc fdbe 	bl	8000548 <__aeabi_f2d>
 80039cc:	4602      	mov	r2, r0
 80039ce:	460b      	mov	r3, r1
 80039d0:	4620      	mov	r0, r4
 80039d2:	4629      	mov	r1, r5
 80039d4:	f7fc fc58 	bl	8000288 <__aeabi_dsub>
 80039d8:	4602      	mov	r2, r0
 80039da:	460b      	mov	r3, r1
 80039dc:	4614      	mov	r4, r2
 80039de:	461d      	mov	r5, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80039e6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80039ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80039ee:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80039f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039f6:	ee17 0a90 	vmov	r0, s15
 80039fa:	f7fc fda5 	bl	8000548 <__aeabi_f2d>
 80039fe:	4602      	mov	r2, r0
 8003a00:	460b      	mov	r3, r1
 8003a02:	4620      	mov	r0, r4
 8003a04:	4629      	mov	r1, r5
 8003a06:	f7fc fc3f 	bl	8000288 <__aeabi_dsub>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	4614      	mov	r4, r2
 8003a10:	461d      	mov	r5, r3
 8003a12:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8003a16:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003a1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a20:	edd3 7a02 	vldr	s15, [r3, #8]
 8003a24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a28:	ee17 0a90 	vmov	r0, s15
 8003a2c:	f7fc fd8c 	bl	8000548 <__aeabi_f2d>
 8003a30:	4602      	mov	r2, r0
 8003a32:	460b      	mov	r3, r1
 8003a34:	4620      	mov	r0, r4
 8003a36:	4629      	mov	r1, r5
 8003a38:	f7fc fc28 	bl	800028c <__adddf3>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	460b      	mov	r3, r1
 8003a40:	4610      	mov	r0, r2
 8003a42:	4619      	mov	r1, r3
 8003a44:	f7fd f8b0 	bl	8000ba8 <__aeabi_d2f>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    float c43 = covs->wheel.m21 + covs->wheel.m22 * gain1_w*gain2_w * pow(k,2) - covs->wheel.m22*gain1_w*k - covs->wheel.m21*gain2_w*k + gain1_w*gain2_w*r_vals->wheel;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7fc fd79 	bl	8000548 <__aeabi_f2d>
 8003a56:	4604      	mov	r4, r0
 8003a58:	460d      	mov	r5, r1
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8003a60:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003a64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a68:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003a6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a70:	ee17 0a90 	vmov	r0, s15
 8003a74:	f7fc fd68 	bl	8000548 <__aeabi_f2d>
 8003a78:	4680      	mov	r8, r0
 8003a7a:	4689      	mov	r9, r1
 8003a7c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003a7e:	f7fc fd63 	bl	8000548 <__aeabi_f2d>
 8003a82:	4602      	mov	r2, r0
 8003a84:	460b      	mov	r3, r1
 8003a86:	ed1f 1b5d 	vldr	d1, [pc, #-372]	; 8003914 <kalman_filter_update+0x424>
 8003a8a:	ec43 2b10 	vmov	d0, r2, r3
 8003a8e:	f00b fec9 	bl	800f824 <pow>
 8003a92:	ec53 2b10 	vmov	r2, r3, d0
 8003a96:	4640      	mov	r0, r8
 8003a98:	4649      	mov	r1, r9
 8003a9a:	f7fc fdad 	bl	80005f8 <__aeabi_dmul>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	4620      	mov	r0, r4
 8003aa4:	4629      	mov	r1, r5
 8003aa6:	f7fc fbf1 	bl	800028c <__adddf3>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	460b      	mov	r3, r1
 8003aae:	4614      	mov	r4, r2
 8003ab0:	461d      	mov	r5, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8003ab8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003abc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ac0:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003ac4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ac8:	ee17 0a90 	vmov	r0, s15
 8003acc:	f7fc fd3c 	bl	8000548 <__aeabi_f2d>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	4620      	mov	r0, r4
 8003ad6:	4629      	mov	r1, r5
 8003ad8:	f7fc fbd6 	bl	8000288 <__aeabi_dsub>
 8003adc:	4602      	mov	r2, r0
 8003ade:	460b      	mov	r3, r1
 8003ae0:	4614      	mov	r4, r2
 8003ae2:	461d      	mov	r5, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8003aea:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003aee:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003af2:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003af6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003afa:	ee17 0a90 	vmov	r0, s15
 8003afe:	f7fc fd23 	bl	8000548 <__aeabi_f2d>
 8003b02:	4602      	mov	r2, r0
 8003b04:	460b      	mov	r3, r1
 8003b06:	4620      	mov	r0, r4
 8003b08:	4629      	mov	r1, r5
 8003b0a:	f7fc fbbd 	bl	8000288 <__aeabi_dsub>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	460b      	mov	r3, r1
 8003b12:	4614      	mov	r4, r2
 8003b14:	461d      	mov	r5, r3
 8003b16:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8003b1a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003b1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b24:	edd3 7a02 	vldr	s15, [r3, #8]
 8003b28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b2c:	ee17 0a90 	vmov	r0, s15
 8003b30:	f7fc fd0a 	bl	8000548 <__aeabi_f2d>
 8003b34:	4602      	mov	r2, r0
 8003b36:	460b      	mov	r3, r1
 8003b38:	4620      	mov	r0, r4
 8003b3a:	4629      	mov	r1, r5
 8003b3c:	f7fc fba6 	bl	800028c <__adddf3>
 8003b40:	4602      	mov	r2, r0
 8003b42:	460b      	mov	r3, r1
 8003b44:	4610      	mov	r0, r2
 8003b46:	4619      	mov	r1, r3
 8003b48:	f7fd f82e 	bl	8000ba8 <__aeabi_d2f>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	62bb      	str	r3, [r7, #40]	; 0x28
    float c44 = covs->wheel.m22 + covs->wheel.m22*pow(gain2_w,2) * pow(k,2) - 2*covs->wheel.m22*gain2_w*k + pow(gain2_w,2)*r_vals->wheel;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7fc fcf7 	bl	8000548 <__aeabi_f2d>
 8003b5a:	4604      	mov	r4, r0
 8003b5c:	460d      	mov	r5, r1
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7fc fcf0 	bl	8000548 <__aeabi_f2d>
 8003b68:	4680      	mov	r8, r0
 8003b6a:	4689      	mov	r9, r1
 8003b6c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003b6e:	f7fc fceb 	bl	8000548 <__aeabi_f2d>
 8003b72:	4602      	mov	r2, r0
 8003b74:	460b      	mov	r3, r1
 8003b76:	ed1f 1b99 	vldr	d1, [pc, #-612]	; 8003914 <kalman_filter_update+0x424>
 8003b7a:	ec43 2b10 	vmov	d0, r2, r3
 8003b7e:	f00b fe51 	bl	800f824 <pow>
 8003b82:	ec53 2b10 	vmov	r2, r3, d0
 8003b86:	4640      	mov	r0, r8
 8003b88:	4649      	mov	r1, r9
 8003b8a:	f7fc fd35 	bl	80005f8 <__aeabi_dmul>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	460b      	mov	r3, r1
 8003b92:	4690      	mov	r8, r2
 8003b94:	4699      	mov	r9, r3
 8003b96:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003b98:	f7fc fcd6 	bl	8000548 <__aeabi_f2d>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	ed1f 1ba4 	vldr	d1, [pc, #-656]	; 8003914 <kalman_filter_update+0x424>
 8003ba4:	ec43 2b10 	vmov	d0, r2, r3
 8003ba8:	f00b fe3c 	bl	800f824 <pow>
 8003bac:	ec53 2b10 	vmov	r2, r3, d0
 8003bb0:	4640      	mov	r0, r8
 8003bb2:	4649      	mov	r1, r9
 8003bb4:	f7fc fd20 	bl	80005f8 <__aeabi_dmul>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	460b      	mov	r3, r1
 8003bbc:	4620      	mov	r0, r4
 8003bbe:	4629      	mov	r1, r5
 8003bc0:	f7fc fb64 	bl	800028c <__adddf3>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	4614      	mov	r4, r2
 8003bca:	461d      	mov	r5, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003bd2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003bd6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003bda:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003bde:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003be2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003be6:	ee17 0a90 	vmov	r0, s15
 8003bea:	f7fc fcad 	bl	8000548 <__aeabi_f2d>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	4620      	mov	r0, r4
 8003bf4:	4629      	mov	r1, r5
 8003bf6:	f7fc fb47 	bl	8000288 <__aeabi_dsub>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	4614      	mov	r4, r2
 8003c00:	461d      	mov	r5, r3
 8003c02:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003c04:	f7fc fca0 	bl	8000548 <__aeabi_f2d>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	ed1f 1bbf 	vldr	d1, [pc, #-764]	; 8003914 <kalman_filter_update+0x424>
 8003c10:	ec43 2b10 	vmov	d0, r2, r3
 8003c14:	f00b fe06 	bl	800f824 <pow>
 8003c18:	ec59 8b10 	vmov	r8, r9, d0
 8003c1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7fc fc91 	bl	8000548 <__aeabi_f2d>
 8003c26:	4602      	mov	r2, r0
 8003c28:	460b      	mov	r3, r1
 8003c2a:	4640      	mov	r0, r8
 8003c2c:	4649      	mov	r1, r9
 8003c2e:	f7fc fce3 	bl	80005f8 <__aeabi_dmul>
 8003c32:	4602      	mov	r2, r0
 8003c34:	460b      	mov	r3, r1
 8003c36:	4620      	mov	r0, r4
 8003c38:	4629      	mov	r1, r5
 8003c3a:	f7fc fb27 	bl	800028c <__adddf3>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	460b      	mov	r3, r1
 8003c42:	4610      	mov	r0, r2
 8003c44:	4619      	mov	r1, r3
 8003c46:	f7fc ffaf 	bl	8000ba8 <__aeabi_d2f>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	627b      	str	r3, [r7, #36]	; 0x24

    covs->wheel.m11 = c33;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c52:	621a      	str	r2, [r3, #32]
    covs->wheel.m12 = c34;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c58:	625a      	str	r2, [r3, #36]	; 0x24
    covs->wheel.m21 = c43;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c5e:	629a      	str	r2, [r3, #40]	; 0x28
    covs->wheel.m22 = c44;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c64:	62da      	str	r2, [r3, #44]	; 0x2c
    
    //printf("Update after covs: %0.15f %0.15f %0.15f %0.15f\n", covs->pitch.m11, covs->pitch.m12, covs->pitch.m21, covs->pitch.m22);

}
 8003c66:	bf00      	nop
 8003c68:	3760      	adds	r7, #96	; 0x60
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08003c70 <roll_kalman_filter_update>:


//Kalman filter for roll, essentially the same as for pitch

void roll_kalman_filter_update(float sensor, float dt, States *s, Matrix *q_t, Matrix *q_w, Covariances *covs, R_error *r_vals)
{   
 8003c70:	b480      	push	{r7}
 8003c72:	b08f      	sub	sp, #60	; 0x3c
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	ed87 0a05 	vstr	s0, [r7, #20]
 8003c7a:	edc7 0a04 	vstr	s1, [r7, #16]
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]
 8003c84:	603b      	str	r3, [r7, #0]
    /* sensor is angular velocity */
    float diff = sensor - s->x6;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	edd3 7a05 	vldr	s15, [r3, #20]
 8003c8c:	ed97 7a05 	vldr	s14, [r7, #20]
 8003c90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c94:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    /* Gain calculation */
    float gain1 = covs->roll.m12 * (1 / (covs->roll.m22 + r_vals->roll));
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	ed93 7a05 	vldr	s14, [r3, #20]
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	edd3 6a07 	vldr	s13, [r3, #28]
 8003ca4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ca6:	edd3 7a01 	vldr	s15, [r3, #4]
 8003caa:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003cae:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8003cb2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cba:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    float gain2 = covs->roll.m22 * (1 / (covs->roll.m22 + r_vals->roll));
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	ed93 7a07 	vldr	s14, [r3, #28]
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	edd3 6a07 	vldr	s13, [r3, #28]
 8003cca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ccc:	edd3 7a01 	vldr	s15, [r3, #4]
 8003cd0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003cd4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8003cd8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003cdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ce0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

    /* Update states */
    s->x5 = s->x5 + gain1 * diff;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	ed93 7a04 	vldr	s14, [r3, #16]
 8003cea:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8003cee:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003cf2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003cf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	edc3 7a04 	vstr	s15, [r3, #16]
    s->x6 = s->x6 + gain2 * diff;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	ed93 7a05 	vldr	s14, [r3, #20]
 8003d06:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8003d0a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003d0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	edc3 7a05 	vstr	s15, [r3, #20]

    /* Covariance update */
    float c11 = (-covs->roll.m12*covs->roll.m21 + covs->roll.m11*(covs->roll.m22+r_vals->roll))/(covs->roll.m22 + r_vals->roll);
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	edd3 7a05 	vldr	s15, [r3, #20]
 8003d22:	eeb1 7a67 	vneg.f32	s14, s15
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	edd3 7a06 	vldr	s15, [r3, #24]
 8003d2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	edd3 6a04 	vldr	s13, [r3, #16]
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	ed93 6a07 	vldr	s12, [r3, #28]
 8003d3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d3e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003d42:	ee76 7a27 	vadd.f32	s15, s12, s15
 8003d46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d4a:	ee77 6a27 	vadd.f32	s13, s14, s15
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	ed93 7a07 	vldr	s14, [r3, #28]
 8003d54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d56:	edd3 7a01 	vldr	s15, [r3, #4]
 8003d5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d62:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    float c12 = (covs->roll.m12*r_vals->roll)/(covs->roll.m22 + r_vals->roll);
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	ed93 7a05 	vldr	s14, [r3, #20]
 8003d6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d6e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003d72:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	ed93 7a07 	vldr	s14, [r3, #28]
 8003d7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d7e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003d82:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d8a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float c21 = (covs->roll.m21*r_vals->roll)/(covs->roll.m22 + r_vals->roll);
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	ed93 7a06 	vldr	s14, [r3, #24]
 8003d94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d96:	edd3 7a01 	vldr	s15, [r3, #4]
 8003d9a:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	ed93 7a07 	vldr	s14, [r3, #28]
 8003da4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003da6:	edd3 7a01 	vldr	s15, [r3, #4]
 8003daa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003dae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003db2:	edc7 7a08 	vstr	s15, [r7, #32]
    float c22 = (covs->roll.m22*r_vals->roll)/(covs->roll.m22 + r_vals->roll);
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	ed93 7a07 	vldr	s14, [r3, #28]
 8003dbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dbe:	edd3 7a01 	vldr	s15, [r3, #4]
 8003dc2:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	ed93 7a07 	vldr	s14, [r3, #28]
 8003dcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dce:	edd3 7a01 	vldr	s15, [r3, #4]
 8003dd2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003dd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dda:	edc7 7a07 	vstr	s15, [r7, #28]

    covs->roll.m11 = c11;
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003de2:	611a      	str	r2, [r3, #16]
    covs->roll.m12 = c12;
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003de8:	615a      	str	r2, [r3, #20]
    covs->roll.m21 = c21;
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	6a3a      	ldr	r2, [r7, #32]
 8003dee:	619a      	str	r2, [r3, #24]
    covs->roll.m22 = c22;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	69fa      	ldr	r2, [r7, #28]
 8003df4:	61da      	str	r2, [r3, #28]

}
 8003df6:	bf00      	nop
 8003df8:	373c      	adds	r7, #60	; 0x3c
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr

08003e02 <roll_kalman_filter_predict>:

void roll_kalman_filter_predict(float input, float dt, States *s, Matrix *q_t, Matrix *q_w, Covariances *covs)
{
 8003e02:	b480      	push	{r7}
 8003e04:	b091      	sub	sp, #68	; 0x44
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	ed87 0a05 	vstr	s0, [r7, #20]
 8003e0c:	edc7 0a04 	vstr	s1, [r7, #16]
 8003e10:	60f8      	str	r0, [r7, #12]
 8003e12:	60b9      	str	r1, [r7, #8]
 8003e14:	607a      	str	r2, [r7, #4]
 8003e16:	603b      	str	r3, [r7, #0]
    float X11 = s->x5 + dt * s->x6;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	ed93 7a04 	vldr	s14, [r3, #16]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	edd3 6a05 	vldr	s13, [r3, #20]
 8003e24:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e30:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    s->x5 = X11;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e38:	611a      	str	r2, [r3, #16]

    /* Dot product covariance and state transistion model*/
    float c11 = covs->roll.m11 + (dt * covs->roll.m21);
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	ed93 7a04 	vldr	s14, [r3, #16]
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	edd3 6a06 	vldr	s13, [r3, #24]
 8003e46:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e52:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    float c12 = covs->roll.m12 + (dt * covs->roll.m22);
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	ed93 7a05 	vldr	s14, [r3, #20]
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	edd3 6a07 	vldr	s13, [r3, #28]
 8003e62:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e6e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    float c21 = covs->roll.m21;
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	633b      	str	r3, [r7, #48]	; 0x30
    float c22 = covs->roll.m22;
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	69db      	ldr	r3, [r3, #28]
 8003e7c:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* c matrix transposed with state transistion model
    Fm11 Fm12    Fm11 Fm21
    Fm21 Fm22 => Fm12 Fm22
    */
    float p11 = c11 + c12 * dt;
 8003e7e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003e82:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e8a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003e8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e92:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    float p12 = c12;
 8003e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e98:	627b      	str	r3, [r7, #36]	; 0x24
    float p21 = c21 + c22;
 8003e9a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8003e9e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003ea2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ea6:	edc7 7a08 	vstr	s15, [r7, #32]
    float p22 = c22;
 8003eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eac:	61fb      	str	r3, [r7, #28]

    covs->roll.m11 = p11 + q_t->m11;  
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	ed93 7a00 	vldr	s14, [r3]
 8003eb4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003eb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	edc3 7a04 	vstr	s15, [r3, #16]
    covs->roll.m12 = p12 + q_t->m12;
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	ed93 7a01 	vldr	s14, [r3, #4]
 8003ec8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003ecc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	edc3 7a05 	vstr	s15, [r3, #20]
    covs->roll.m21 = p21 + q_t->m21;
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	ed93 7a02 	vldr	s14, [r3, #8]
 8003edc:	edd7 7a08 	vldr	s15, [r7, #32]
 8003ee0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	edc3 7a06 	vstr	s15, [r3, #24]
    covs->roll.m22 = p22 + q_t->m22;
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	ed93 7a03 	vldr	s14, [r3, #12]
 8003ef0:	edd7 7a07 	vldr	s15, [r7, #28]
 8003ef4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8003efe:	bf00      	nop
 8003f00:	3744      	adds	r7, #68	; 0x44
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
	...

08003f0c <stop_time_x_d>:
#include <stdbool.h>
#include <stdlib.h>
//#include <stdio.h>

float stop_time_x_d(float setpoint_x_d, float theta, float theta_d, float x_d)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b086      	sub	sp, #24
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	ed87 0a03 	vstr	s0, [r7, #12]
 8003f16:	edc7 0a02 	vstr	s1, [r7, #8]
 8003f1a:	ed87 1a01 	vstr	s2, [r7, #4]
 8003f1e:	edc7 1a00 	vstr	s3, [r7]
    float x_d_diff = abs(x_d - setpoint_x_d);
 8003f22:	ed97 7a00 	vldr	s14, [r7]
 8003f26:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f32:	ee17 3a90 	vmov	r3, s15
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	bfb8      	it	lt
 8003f3a:	425b      	neglt	r3, r3
 8003f3c:	ee07 3a90 	vmov	s15, r3
 8003f40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f44:	edc7 7a05 	vstr	s15, [r7, #20]
    float out = x_d_diff * 0.5 + 1.2;
 8003f48:	6978      	ldr	r0, [r7, #20]
 8003f4a:	f7fc fafd 	bl	8000548 <__aeabi_f2d>
 8003f4e:	f04f 0200 	mov.w	r2, #0
 8003f52:	4b0e      	ldr	r3, [pc, #56]	; (8003f8c <stop_time_x_d+0x80>)
 8003f54:	f7fc fb50 	bl	80005f8 <__aeabi_dmul>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	4610      	mov	r0, r2
 8003f5e:	4619      	mov	r1, r3
 8003f60:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8003f64:	4b0a      	ldr	r3, [pc, #40]	; (8003f90 <stop_time_x_d+0x84>)
 8003f66:	f7fc f991 	bl	800028c <__adddf3>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	4610      	mov	r0, r2
 8003f70:	4619      	mov	r1, r3
 8003f72:	f7fc fe19 	bl	8000ba8 <__aeabi_d2f>
 8003f76:	4603      	mov	r3, r0
 8003f78:	613b      	str	r3, [r7, #16]
    //printf("Stop time x_d: %f\n", out);
    return out;
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	ee07 3a90 	vmov	s15, r3
}
 8003f80:	eeb0 0a67 	vmov.f32	s0, s15
 8003f84:	3718      	adds	r7, #24
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	3fe00000 	.word	0x3fe00000
 8003f90:	3ff33333 	.word	0x3ff33333
 8003f94:	00000000 	.word	0x00000000

08003f98 <LookaheadSpeedRegulator>:

float LookaheadSpeedRegulator(float setpoint_x_d, float theta, float theta_d, float x_d, float dt)
{
 8003f98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f9c:	b08e      	sub	sp, #56	; 0x38
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	ed87 0a05 	vstr	s0, [r7, #20]
 8003fa4:	edc7 0a04 	vstr	s1, [r7, #16]
 8003fa8:	ed87 1a03 	vstr	s2, [r7, #12]
 8003fac:	edc7 1a02 	vstr	s3, [r7, #8]
 8003fb0:	ed87 2a01 	vstr	s4, [r7, #4]
    //printf("Setpoint: %f\n Top angle: %f\n Top angle_d %f\n Velocity %f\n Delta time %f\n", setpoint_x_d, theta, theta_d, x_d, dt);
    float t_theta = 2.0;
 8003fb4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003fb8:	637b      	str	r3, [r7, #52]	; 0x34
    float t_x_d = stop_time_x_d(setpoint_x_d, theta, theta_d, x_d);
 8003fba:	edd7 1a02 	vldr	s3, [r7, #8]
 8003fbe:	ed97 1a03 	vldr	s2, [r7, #12]
 8003fc2:	edd7 0a04 	vldr	s1, [r7, #16]
 8003fc6:	ed97 0a05 	vldr	s0, [r7, #20]
 8003fca:	f7ff ff9f 	bl	8003f0c <stop_time_x_d>
 8003fce:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30

    float delta_tau_theta = 1 / (pow(t_theta,2) / 2 * param_D) * (0 - theta - theta_d * t_theta);
 8003fd2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003fd4:	f7fc fab8 	bl	8000548 <__aeabi_f2d>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	460b      	mov	r3, r1
 8003fdc:	ed9f 1b86 	vldr	d1, [pc, #536]	; 80041f8 <LookaheadSpeedRegulator+0x260>
 8003fe0:	ec43 2b10 	vmov	d0, r2, r3
 8003fe4:	f00b fc1e 	bl	800f824 <pow>
 8003fe8:	ec51 0b10 	vmov	r0, r1, d0
 8003fec:	f04f 0200 	mov.w	r2, #0
 8003ff0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003ff4:	f7fc fc2a 	bl	800084c <__aeabi_ddiv>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	4610      	mov	r0, r2
 8003ffe:	4619      	mov	r1, r3
 8004000:	a383      	add	r3, pc, #524	; (adr r3, 8004210 <LookaheadSpeedRegulator+0x278>)
 8004002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004006:	f7fc faf7 	bl	80005f8 <__aeabi_dmul>
 800400a:	4602      	mov	r2, r0
 800400c:	460b      	mov	r3, r1
 800400e:	f04f 0000 	mov.w	r0, #0
 8004012:	4981      	ldr	r1, [pc, #516]	; (8004218 <LookaheadSpeedRegulator+0x280>)
 8004014:	f7fc fc1a 	bl	800084c <__aeabi_ddiv>
 8004018:	4602      	mov	r2, r0
 800401a:	460b      	mov	r3, r1
 800401c:	4614      	mov	r4, r2
 800401e:	461d      	mov	r5, r3
 8004020:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800421c <LookaheadSpeedRegulator+0x284>
 8004024:	edd7 7a04 	vldr	s15, [r7, #16]
 8004028:	ee37 7a67 	vsub.f32	s14, s14, s15
 800402c:	edd7 6a03 	vldr	s13, [r7, #12]
 8004030:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8004034:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004038:	ee77 7a67 	vsub.f32	s15, s14, s15
 800403c:	ee17 0a90 	vmov	r0, s15
 8004040:	f7fc fa82 	bl	8000548 <__aeabi_f2d>
 8004044:	4602      	mov	r2, r0
 8004046:	460b      	mov	r3, r1
 8004048:	4620      	mov	r0, r4
 800404a:	4629      	mov	r1, r5
 800404c:	f7fc fad4 	bl	80005f8 <__aeabi_dmul>
 8004050:	4602      	mov	r2, r0
 8004052:	460b      	mov	r3, r1
 8004054:	4610      	mov	r0, r2
 8004056:	4619      	mov	r1, r3
 8004058:	f7fc fda6 	bl	8000ba8 <__aeabi_d2f>
 800405c:	4603      	mov	r3, r0
 800405e:	62fb      	str	r3, [r7, #44]	; 0x2c
    //printf("delta_tau_theta: %f\n", delta_tau_theta);
    float delta_tau_theta_d = 1 / (t_theta * param_D) * -theta_d;
 8004060:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8004064:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8004220 <LookaheadSpeedRegulator+0x288>
 8004068:	ee67 7a87 	vmul.f32	s15, s15, s14
 800406c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004070:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004074:	edd7 7a03 	vldr	s15, [r7, #12]
 8004078:	eef1 7a67 	vneg.f32	s15, s15
 800407c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004080:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    //printf("delta_tau_theta_d: %f\n", delta_tau_theta_d);
    float delta_tau_x_d = 1 / (t_x_d * param_B + pow(t_x_d, 3) / 6 * param_E * param_D) * (setpoint_x_d - x_d - t_x_d * param_E * theta - pow(t_x_d, 2) / 2 * param_E * theta_d);  
 8004084:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8004088:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8004224 <LookaheadSpeedRegulator+0x28c>
 800408c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004090:	ee17 0a90 	vmov	r0, s15
 8004094:	f7fc fa58 	bl	8000548 <__aeabi_f2d>
 8004098:	4604      	mov	r4, r0
 800409a:	460d      	mov	r5, r1
 800409c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800409e:	f7fc fa53 	bl	8000548 <__aeabi_f2d>
 80040a2:	4602      	mov	r2, r0
 80040a4:	460b      	mov	r3, r1
 80040a6:	ed9f 1b56 	vldr	d1, [pc, #344]	; 8004200 <LookaheadSpeedRegulator+0x268>
 80040aa:	ec43 2b10 	vmov	d0, r2, r3
 80040ae:	f00b fbb9 	bl	800f824 <pow>
 80040b2:	ec51 0b10 	vmov	r0, r1, d0
 80040b6:	f04f 0200 	mov.w	r2, #0
 80040ba:	4b5b      	ldr	r3, [pc, #364]	; (8004228 <LookaheadSpeedRegulator+0x290>)
 80040bc:	f7fc fbc6 	bl	800084c <__aeabi_ddiv>
 80040c0:	4602      	mov	r2, r0
 80040c2:	460b      	mov	r3, r1
 80040c4:	4610      	mov	r0, r2
 80040c6:	4619      	mov	r1, r3
 80040c8:	a34f      	add	r3, pc, #316	; (adr r3, 8004208 <LookaheadSpeedRegulator+0x270>)
 80040ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ce:	f7fc fa93 	bl	80005f8 <__aeabi_dmul>
 80040d2:	4602      	mov	r2, r0
 80040d4:	460b      	mov	r3, r1
 80040d6:	4610      	mov	r0, r2
 80040d8:	4619      	mov	r1, r3
 80040da:	a34d      	add	r3, pc, #308	; (adr r3, 8004210 <LookaheadSpeedRegulator+0x278>)
 80040dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e0:	f7fc fa8a 	bl	80005f8 <__aeabi_dmul>
 80040e4:	4602      	mov	r2, r0
 80040e6:	460b      	mov	r3, r1
 80040e8:	4620      	mov	r0, r4
 80040ea:	4629      	mov	r1, r5
 80040ec:	f7fc f8ce 	bl	800028c <__adddf3>
 80040f0:	4602      	mov	r2, r0
 80040f2:	460b      	mov	r3, r1
 80040f4:	f04f 0000 	mov.w	r0, #0
 80040f8:	4947      	ldr	r1, [pc, #284]	; (8004218 <LookaheadSpeedRegulator+0x280>)
 80040fa:	f7fc fba7 	bl	800084c <__aeabi_ddiv>
 80040fe:	4602      	mov	r2, r0
 8004100:	460b      	mov	r3, r1
 8004102:	4690      	mov	r8, r2
 8004104:	4699      	mov	r9, r3
 8004106:	ed97 7a05 	vldr	s14, [r7, #20]
 800410a:	edd7 7a02 	vldr	s15, [r7, #8]
 800410e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004112:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8004116:	eddf 6a45 	vldr	s13, [pc, #276]	; 800422c <LookaheadSpeedRegulator+0x294>
 800411a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800411e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004122:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004126:	ee77 7a67 	vsub.f32	s15, s14, s15
 800412a:	ee17 0a90 	vmov	r0, s15
 800412e:	f7fc fa0b 	bl	8000548 <__aeabi_f2d>
 8004132:	4604      	mov	r4, r0
 8004134:	460d      	mov	r5, r1
 8004136:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004138:	f7fc fa06 	bl	8000548 <__aeabi_f2d>
 800413c:	4602      	mov	r2, r0
 800413e:	460b      	mov	r3, r1
 8004140:	ed9f 1b2d 	vldr	d1, [pc, #180]	; 80041f8 <LookaheadSpeedRegulator+0x260>
 8004144:	ec43 2b10 	vmov	d0, r2, r3
 8004148:	f00b fb6c 	bl	800f824 <pow>
 800414c:	ec51 0b10 	vmov	r0, r1, d0
 8004150:	f04f 0200 	mov.w	r2, #0
 8004154:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004158:	f7fc fb78 	bl	800084c <__aeabi_ddiv>
 800415c:	4602      	mov	r2, r0
 800415e:	460b      	mov	r3, r1
 8004160:	4610      	mov	r0, r2
 8004162:	4619      	mov	r1, r3
 8004164:	a328      	add	r3, pc, #160	; (adr r3, 8004208 <LookaheadSpeedRegulator+0x270>)
 8004166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800416a:	f7fc fa45 	bl	80005f8 <__aeabi_dmul>
 800416e:	4602      	mov	r2, r0
 8004170:	460b      	mov	r3, r1
 8004172:	4692      	mov	sl, r2
 8004174:	469b      	mov	fp, r3
 8004176:	68f8      	ldr	r0, [r7, #12]
 8004178:	f7fc f9e6 	bl	8000548 <__aeabi_f2d>
 800417c:	4602      	mov	r2, r0
 800417e:	460b      	mov	r3, r1
 8004180:	4650      	mov	r0, sl
 8004182:	4659      	mov	r1, fp
 8004184:	f7fc fa38 	bl	80005f8 <__aeabi_dmul>
 8004188:	4602      	mov	r2, r0
 800418a:	460b      	mov	r3, r1
 800418c:	4620      	mov	r0, r4
 800418e:	4629      	mov	r1, r5
 8004190:	f7fc f87a 	bl	8000288 <__aeabi_dsub>
 8004194:	4602      	mov	r2, r0
 8004196:	460b      	mov	r3, r1
 8004198:	4640      	mov	r0, r8
 800419a:	4649      	mov	r1, r9
 800419c:	f7fc fa2c 	bl	80005f8 <__aeabi_dmul>
 80041a0:	4602      	mov	r2, r0
 80041a2:	460b      	mov	r3, r1
 80041a4:	4610      	mov	r0, r2
 80041a6:	4619      	mov	r1, r3
 80041a8:	f7fc fcfe 	bl	8000ba8 <__aeabi_d2f>
 80041ac:	4603      	mov	r3, r0
 80041ae:	627b      	str	r3, [r7, #36]	; 0x24
    //printf("delta_tau_x_d: %f\n", delta_tau_x_d);
    float last_delta_tau = delta_tau_theta + delta_tau_theta_d + delta_tau_x_d;
 80041b0:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80041b4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80041b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041bc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80041c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041c4:	edc7 7a08 	vstr	s15, [r7, #32]
    //printf("last_delta_tau: %f\n", last_delta_tau);
    float tau = - param_C / param_D * theta + last_delta_tau;
 80041c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80041cc:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004230 <LookaheadSpeedRegulator+0x298>
 80041d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041d4:	ed97 7a08 	vldr	s14, [r7, #32]
 80041d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041dc:	edc7 7a07 	vstr	s15, [r7, #28]
    //printf("tau: %f\n",tau);
    return tau;
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	ee07 3a90 	vmov	s15, r3
}
 80041e6:	eeb0 0a67 	vmov.f32	s0, s15
 80041ea:	3738      	adds	r7, #56	; 0x38
 80041ec:	46bd      	mov	sp, r7
 80041ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041f2:	bf00      	nop
 80041f4:	f3af 8000 	nop.w
 80041f8:	00000000 	.word	0x00000000
 80041fc:	40000000 	.word	0x40000000
 8004200:	00000000 	.word	0x00000000
 8004204:	40080000 	.word	0x40080000
 8004208:	60000000 	.word	0x60000000
 800420c:	400d1079 	.word	0x400d1079
 8004210:	60000000 	.word	0x60000000
 8004214:	3fe865ee 	.word	0x3fe865ee
 8004218:	3ff00000 	.word	0x3ff00000
 800421c:	00000000 	.word	0x00000000
 8004220:	3f432f73 	.word	0x3f432f73
 8004224:	bea466ca 	.word	0xbea466ca
 8004228:	40180000 	.word	0x40180000
 800422c:	406883cb 	.word	0x406883cb
 8004230:	c1947ca9 	.word	0xc1947ca9
 8004234:	00000000 	.word	0x00000000

08004238 <roll_reg_step>:


float roll_reg_step(RollRegulator *roll_reg, float dt, float theta, float theta_d, float wheel_rpm) {
 8004238:	b580      	push	{r7, lr}
 800423a:	b08a      	sub	sp, #40	; 0x28
 800423c:	af00      	add	r7, sp, #0
 800423e:	6178      	str	r0, [r7, #20]
 8004240:	ed87 0a04 	vstr	s0, [r7, #16]
 8004244:	edc7 0a03 	vstr	s1, [r7, #12]
 8004248:	ed87 1a02 	vstr	s2, [r7, #8]
 800424c:	edc7 1a01 	vstr	s3, [r7, #4]
	float phi_d = wheel_rpm / 60 * 6.28;
 8004250:	edd7 7a01 	vldr	s15, [r7, #4]
 8004254:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80042e8 <roll_reg_step+0xb0>
 8004258:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800425c:	ee16 0a90 	vmov	r0, s13
 8004260:	f7fc f972 	bl	8000548 <__aeabi_f2d>
 8004264:	a31e      	add	r3, pc, #120	; (adr r3, 80042e0 <roll_reg_step+0xa8>)
 8004266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800426a:	f7fc f9c5 	bl	80005f8 <__aeabi_dmul>
 800426e:	4602      	mov	r2, r0
 8004270:	460b      	mov	r3, r1
 8004272:	4610      	mov	r0, r2
 8004274:	4619      	mov	r1, r3
 8004276:	f7fc fc97 	bl	8000ba8 <__aeabi_d2f>
 800427a:	4603      	mov	r3, r0
 800427c:	627b      	str	r3, [r7, #36]	; 0x24
	float setpoint_theta = roll_reg->kp2 * (0 - phi_d);
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	ed93 7a02 	vldr	s14, [r3, #8]
 8004284:	eddf 6a19 	vldr	s13, [pc, #100]	; 80042ec <roll_reg_step+0xb4>
 8004288:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800428c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004290:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004294:	edc7 7a08 	vstr	s15, [r7, #32]
	float error = setpoint_theta - theta;
 8004298:	ed97 7a08 	vldr	s14, [r7, #32]
 800429c:	edd7 7a03 	vldr	s15, [r7, #12]
 80042a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042a4:	edc7 7a07 	vstr	s15, [r7, #28]

	return error * roll_reg->kp1 + (0 - theta_d) * roll_reg->kd1;
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	ed93 7a00 	vldr	s14, [r3]
 80042ae:	edd7 7a07 	vldr	s15, [r7, #28]
 80042b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80042b6:	eddf 6a0d 	vldr	s13, [pc, #52]	; 80042ec <roll_reg_step+0xb4>
 80042ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80042be:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80042c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042cc:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80042d0:	eeb0 0a67 	vmov.f32	s0, s15
 80042d4:	3728      	adds	r7, #40	; 0x28
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	f3af 8000 	nop.w
 80042e0:	51eb851f 	.word	0x51eb851f
 80042e4:	40191eb8 	.word	0x40191eb8
 80042e8:	42700000 	.word	0x42700000
 80042ec:	00000000 	.word	0x00000000

080042f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80042f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004328 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80042f4:	480d      	ldr	r0, [pc, #52]	; (800432c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80042f6:	490e      	ldr	r1, [pc, #56]	; (8004330 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80042f8:	4a0e      	ldr	r2, [pc, #56]	; (8004334 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80042fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80042fc:	e002      	b.n	8004304 <LoopCopyDataInit>

080042fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80042fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004300:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004302:	3304      	adds	r3, #4

08004304 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004304:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004306:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004308:	d3f9      	bcc.n	80042fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800430a:	4a0b      	ldr	r2, [pc, #44]	; (8004338 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800430c:	4c0b      	ldr	r4, [pc, #44]	; (800433c <LoopFillZerobss+0x26>)
  movs r3, #0
 800430e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004310:	e001      	b.n	8004316 <LoopFillZerobss>

08004312 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004312:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004314:	3204      	adds	r2, #4

08004316 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004316:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004318:	d3fb      	bcc.n	8004312 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800431a:	f7fe fc2f 	bl	8002b7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800431e:	f008 fb73 	bl	800ca08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004322:	f7fd f9b1 	bl	8001688 <main>
  bx  lr    
 8004326:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004328:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800432c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004330:	20000380 	.word	0x20000380
  ldr r2, =_sidata
 8004334:	08010ed0 	.word	0x08010ed0
  ldr r2, =_sbss
 8004338:	20000380 	.word	0x20000380
  ldr r4, =_ebss
 800433c:	2000b1f8 	.word	0x2000b1f8

08004340 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004340:	e7fe      	b.n	8004340 <ADC_IRQHandler>
	...

08004344 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004348:	4b0e      	ldr	r3, [pc, #56]	; (8004384 <HAL_Init+0x40>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a0d      	ldr	r2, [pc, #52]	; (8004384 <HAL_Init+0x40>)
 800434e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004352:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004354:	4b0b      	ldr	r3, [pc, #44]	; (8004384 <HAL_Init+0x40>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a0a      	ldr	r2, [pc, #40]	; (8004384 <HAL_Init+0x40>)
 800435a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800435e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004360:	4b08      	ldr	r3, [pc, #32]	; (8004384 <HAL_Init+0x40>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a07      	ldr	r2, [pc, #28]	; (8004384 <HAL_Init+0x40>)
 8004366:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800436a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800436c:	2003      	movs	r0, #3
 800436e:	f000 f973 	bl	8004658 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004372:	200f      	movs	r0, #15
 8004374:	f000 f808 	bl	8004388 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004378:	f7fe f99c 	bl	80026b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	40023c00 	.word	0x40023c00

08004388 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004390:	4b12      	ldr	r3, [pc, #72]	; (80043dc <HAL_InitTick+0x54>)
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	4b12      	ldr	r3, [pc, #72]	; (80043e0 <HAL_InitTick+0x58>)
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	4619      	mov	r1, r3
 800439a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800439e:	fbb3 f3f1 	udiv	r3, r3, r1
 80043a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a6:	4618      	mov	r0, r3
 80043a8:	f000 f999 	bl	80046de <HAL_SYSTICK_Config>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d001      	beq.n	80043b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e00e      	b.n	80043d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2b0f      	cmp	r3, #15
 80043ba:	d80a      	bhi.n	80043d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80043bc:	2200      	movs	r2, #0
 80043be:	6879      	ldr	r1, [r7, #4]
 80043c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80043c4:	f000 f953 	bl	800466e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80043c8:	4a06      	ldr	r2, [pc, #24]	; (80043e4 <HAL_InitTick+0x5c>)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80043ce:	2300      	movs	r3, #0
 80043d0:	e000      	b.n	80043d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3708      	adds	r7, #8
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	20000030 	.word	0x20000030
 80043e0:	20000038 	.word	0x20000038
 80043e4:	20000034 	.word	0x20000034

080043e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043e8:	b480      	push	{r7}
 80043ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80043ec:	4b06      	ldr	r3, [pc, #24]	; (8004408 <HAL_IncTick+0x20>)
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	461a      	mov	r2, r3
 80043f2:	4b06      	ldr	r3, [pc, #24]	; (800440c <HAL_IncTick+0x24>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4413      	add	r3, r2
 80043f8:	4a04      	ldr	r2, [pc, #16]	; (800440c <HAL_IncTick+0x24>)
 80043fa:	6013      	str	r3, [r2, #0]
}
 80043fc:	bf00      	nop
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	20000038 	.word	0x20000038
 800440c:	200096e8 	.word	0x200096e8

08004410 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004410:	b480      	push	{r7}
 8004412:	af00      	add	r7, sp, #0
  return uwTick;
 8004414:	4b03      	ldr	r3, [pc, #12]	; (8004424 <HAL_GetTick+0x14>)
 8004416:	681b      	ldr	r3, [r3, #0]
}
 8004418:	4618      	mov	r0, r3
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	200096e8 	.word	0x200096e8

08004428 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004430:	f7ff ffee 	bl	8004410 <HAL_GetTick>
 8004434:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004440:	d005      	beq.n	800444e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004442:	4b0a      	ldr	r3, [pc, #40]	; (800446c <HAL_Delay+0x44>)
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	461a      	mov	r2, r3
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	4413      	add	r3, r2
 800444c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800444e:	bf00      	nop
 8004450:	f7ff ffde 	bl	8004410 <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	429a      	cmp	r2, r3
 800445e:	d8f7      	bhi.n	8004450 <HAL_Delay+0x28>
  {
  }
}
 8004460:	bf00      	nop
 8004462:	bf00      	nop
 8004464:	3710      	adds	r7, #16
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	20000038 	.word	0x20000038

08004470 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004470:	b480      	push	{r7}
 8004472:	b085      	sub	sp, #20
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f003 0307 	and.w	r3, r3, #7
 800447e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004480:	4b0c      	ldr	r3, [pc, #48]	; (80044b4 <__NVIC_SetPriorityGrouping+0x44>)
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004486:	68ba      	ldr	r2, [r7, #8]
 8004488:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800448c:	4013      	ands	r3, r2
 800448e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004498:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800449c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044a2:	4a04      	ldr	r2, [pc, #16]	; (80044b4 <__NVIC_SetPriorityGrouping+0x44>)
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	60d3      	str	r3, [r2, #12]
}
 80044a8:	bf00      	nop
 80044aa:	3714      	adds	r7, #20
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr
 80044b4:	e000ed00 	.word	0xe000ed00

080044b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044b8:	b480      	push	{r7}
 80044ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044bc:	4b04      	ldr	r3, [pc, #16]	; (80044d0 <__NVIC_GetPriorityGrouping+0x18>)
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	0a1b      	lsrs	r3, r3, #8
 80044c2:	f003 0307 	and.w	r3, r3, #7
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr
 80044d0:	e000ed00 	.word	0xe000ed00

080044d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	4603      	mov	r3, r0
 80044dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	db0b      	blt.n	80044fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044e6:	79fb      	ldrb	r3, [r7, #7]
 80044e8:	f003 021f 	and.w	r2, r3, #31
 80044ec:	4907      	ldr	r1, [pc, #28]	; (800450c <__NVIC_EnableIRQ+0x38>)
 80044ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044f2:	095b      	lsrs	r3, r3, #5
 80044f4:	2001      	movs	r0, #1
 80044f6:	fa00 f202 	lsl.w	r2, r0, r2
 80044fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80044fe:	bf00      	nop
 8004500:	370c      	adds	r7, #12
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	e000e100 	.word	0xe000e100

08004510 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	4603      	mov	r3, r0
 8004518:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800451a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800451e:	2b00      	cmp	r3, #0
 8004520:	db12      	blt.n	8004548 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004522:	79fb      	ldrb	r3, [r7, #7]
 8004524:	f003 021f 	and.w	r2, r3, #31
 8004528:	490a      	ldr	r1, [pc, #40]	; (8004554 <__NVIC_DisableIRQ+0x44>)
 800452a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800452e:	095b      	lsrs	r3, r3, #5
 8004530:	2001      	movs	r0, #1
 8004532:	fa00 f202 	lsl.w	r2, r0, r2
 8004536:	3320      	adds	r3, #32
 8004538:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800453c:	f3bf 8f4f 	dsb	sy
}
 8004540:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004542:	f3bf 8f6f 	isb	sy
}
 8004546:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004548:	bf00      	nop
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr
 8004554:	e000e100 	.word	0xe000e100

08004558 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	4603      	mov	r3, r0
 8004560:	6039      	str	r1, [r7, #0]
 8004562:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004568:	2b00      	cmp	r3, #0
 800456a:	db0a      	blt.n	8004582 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	b2da      	uxtb	r2, r3
 8004570:	490c      	ldr	r1, [pc, #48]	; (80045a4 <__NVIC_SetPriority+0x4c>)
 8004572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004576:	0112      	lsls	r2, r2, #4
 8004578:	b2d2      	uxtb	r2, r2
 800457a:	440b      	add	r3, r1
 800457c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004580:	e00a      	b.n	8004598 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	b2da      	uxtb	r2, r3
 8004586:	4908      	ldr	r1, [pc, #32]	; (80045a8 <__NVIC_SetPriority+0x50>)
 8004588:	79fb      	ldrb	r3, [r7, #7]
 800458a:	f003 030f 	and.w	r3, r3, #15
 800458e:	3b04      	subs	r3, #4
 8004590:	0112      	lsls	r2, r2, #4
 8004592:	b2d2      	uxtb	r2, r2
 8004594:	440b      	add	r3, r1
 8004596:	761a      	strb	r2, [r3, #24]
}
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr
 80045a4:	e000e100 	.word	0xe000e100
 80045a8:	e000ed00 	.word	0xe000ed00

080045ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b089      	sub	sp, #36	; 0x24
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f003 0307 	and.w	r3, r3, #7
 80045be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	f1c3 0307 	rsb	r3, r3, #7
 80045c6:	2b04      	cmp	r3, #4
 80045c8:	bf28      	it	cs
 80045ca:	2304      	movcs	r3, #4
 80045cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	3304      	adds	r3, #4
 80045d2:	2b06      	cmp	r3, #6
 80045d4:	d902      	bls.n	80045dc <NVIC_EncodePriority+0x30>
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	3b03      	subs	r3, #3
 80045da:	e000      	b.n	80045de <NVIC_EncodePriority+0x32>
 80045dc:	2300      	movs	r3, #0
 80045de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ea:	43da      	mvns	r2, r3
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	401a      	ands	r2, r3
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	fa01 f303 	lsl.w	r3, r1, r3
 80045fe:	43d9      	mvns	r1, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004604:	4313      	orrs	r3, r2
         );
}
 8004606:	4618      	mov	r0, r3
 8004608:	3724      	adds	r7, #36	; 0x24
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
	...

08004614 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	3b01      	subs	r3, #1
 8004620:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004624:	d301      	bcc.n	800462a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004626:	2301      	movs	r3, #1
 8004628:	e00f      	b.n	800464a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800462a:	4a0a      	ldr	r2, [pc, #40]	; (8004654 <SysTick_Config+0x40>)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	3b01      	subs	r3, #1
 8004630:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004632:	210f      	movs	r1, #15
 8004634:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004638:	f7ff ff8e 	bl	8004558 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800463c:	4b05      	ldr	r3, [pc, #20]	; (8004654 <SysTick_Config+0x40>)
 800463e:	2200      	movs	r2, #0
 8004640:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004642:	4b04      	ldr	r3, [pc, #16]	; (8004654 <SysTick_Config+0x40>)
 8004644:	2207      	movs	r2, #7
 8004646:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	3708      	adds	r7, #8
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	e000e010 	.word	0xe000e010

08004658 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f7ff ff05 	bl	8004470 <__NVIC_SetPriorityGrouping>
}
 8004666:	bf00      	nop
 8004668:	3708      	adds	r7, #8
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800466e:	b580      	push	{r7, lr}
 8004670:	b086      	sub	sp, #24
 8004672:	af00      	add	r7, sp, #0
 8004674:	4603      	mov	r3, r0
 8004676:	60b9      	str	r1, [r7, #8]
 8004678:	607a      	str	r2, [r7, #4]
 800467a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800467c:	2300      	movs	r3, #0
 800467e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004680:	f7ff ff1a 	bl	80044b8 <__NVIC_GetPriorityGrouping>
 8004684:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	68b9      	ldr	r1, [r7, #8]
 800468a:	6978      	ldr	r0, [r7, #20]
 800468c:	f7ff ff8e 	bl	80045ac <NVIC_EncodePriority>
 8004690:	4602      	mov	r2, r0
 8004692:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004696:	4611      	mov	r1, r2
 8004698:	4618      	mov	r0, r3
 800469a:	f7ff ff5d 	bl	8004558 <__NVIC_SetPriority>
}
 800469e:	bf00      	nop
 80046a0:	3718      	adds	r7, #24
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b082      	sub	sp, #8
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	4603      	mov	r3, r0
 80046ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046b4:	4618      	mov	r0, r3
 80046b6:	f7ff ff0d 	bl	80044d4 <__NVIC_EnableIRQ>
}
 80046ba:	bf00      	nop
 80046bc:	3708      	adds	r7, #8
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}

080046c2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b082      	sub	sp, #8
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	4603      	mov	r3, r0
 80046ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80046cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7ff ff1d 	bl	8004510 <__NVIC_DisableIRQ>
}
 80046d6:	bf00      	nop
 80046d8:	3708      	adds	r7, #8
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}

080046de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046de:	b580      	push	{r7, lr}
 80046e0:	b082      	sub	sp, #8
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f7ff ff94 	bl	8004614 <SysTick_Config>
 80046ec:	4603      	mov	r3, r0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3708      	adds	r7, #8
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}

080046f6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80046f6:	b580      	push	{r7, lr}
 80046f8:	b084      	sub	sp, #16
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004702:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004704:	f7ff fe84 	bl	8004410 <HAL_GetTick>
 8004708:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004710:	b2db      	uxtb	r3, r3
 8004712:	2b02      	cmp	r3, #2
 8004714:	d008      	beq.n	8004728 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2280      	movs	r2, #128	; 0x80
 800471a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e052      	b.n	80047ce <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f022 0216 	bic.w	r2, r2, #22
 8004736:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	695a      	ldr	r2, [r3, #20]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004746:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474c:	2b00      	cmp	r3, #0
 800474e:	d103      	bne.n	8004758 <HAL_DMA_Abort+0x62>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004754:	2b00      	cmp	r3, #0
 8004756:	d007      	beq.n	8004768 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f022 0208 	bic.w	r2, r2, #8
 8004766:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f022 0201 	bic.w	r2, r2, #1
 8004776:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004778:	e013      	b.n	80047a2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800477a:	f7ff fe49 	bl	8004410 <HAL_GetTick>
 800477e:	4602      	mov	r2, r0
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	2b05      	cmp	r3, #5
 8004786:	d90c      	bls.n	80047a2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2220      	movs	r2, #32
 800478c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2203      	movs	r2, #3
 8004792:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e015      	b.n	80047ce <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0301 	and.w	r3, r3, #1
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d1e4      	bne.n	800477a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047b4:	223f      	movs	r2, #63	; 0x3f
 80047b6:	409a      	lsls	r2, r3
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3710      	adds	r7, #16
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80047d6:	b480      	push	{r7}
 80047d8:	b083      	sub	sp, #12
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d004      	beq.n	80047f4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2280      	movs	r2, #128	; 0x80
 80047ee:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e00c      	b.n	800480e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2205      	movs	r2, #5
 80047f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f022 0201 	bic.w	r2, r2, #1
 800480a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	370c      	adds	r7, #12
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
	...

0800481c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800481c:	b480      	push	{r7}
 800481e:	b089      	sub	sp, #36	; 0x24
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004826:	2300      	movs	r3, #0
 8004828:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800482a:	2300      	movs	r3, #0
 800482c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800482e:	2300      	movs	r3, #0
 8004830:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004832:	2300      	movs	r3, #0
 8004834:	61fb      	str	r3, [r7, #28]
 8004836:	e16b      	b.n	8004b10 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004838:	2201      	movs	r2, #1
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	fa02 f303 	lsl.w	r3, r2, r3
 8004840:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	697a      	ldr	r2, [r7, #20]
 8004848:	4013      	ands	r3, r2
 800484a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	429a      	cmp	r2, r3
 8004852:	f040 815a 	bne.w	8004b0a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f003 0303 	and.w	r3, r3, #3
 800485e:	2b01      	cmp	r3, #1
 8004860:	d005      	beq.n	800486e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800486a:	2b02      	cmp	r3, #2
 800486c:	d130      	bne.n	80048d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	005b      	lsls	r3, r3, #1
 8004878:	2203      	movs	r2, #3
 800487a:	fa02 f303 	lsl.w	r3, r2, r3
 800487e:	43db      	mvns	r3, r3
 8004880:	69ba      	ldr	r2, [r7, #24]
 8004882:	4013      	ands	r3, r2
 8004884:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	68da      	ldr	r2, [r3, #12]
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	005b      	lsls	r3, r3, #1
 800488e:	fa02 f303 	lsl.w	r3, r2, r3
 8004892:	69ba      	ldr	r2, [r7, #24]
 8004894:	4313      	orrs	r3, r2
 8004896:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	69ba      	ldr	r2, [r7, #24]
 800489c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80048a4:	2201      	movs	r2, #1
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	fa02 f303 	lsl.w	r3, r2, r3
 80048ac:	43db      	mvns	r3, r3
 80048ae:	69ba      	ldr	r2, [r7, #24]
 80048b0:	4013      	ands	r3, r2
 80048b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	091b      	lsrs	r3, r3, #4
 80048ba:	f003 0201 	and.w	r2, r3, #1
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	fa02 f303 	lsl.w	r3, r2, r3
 80048c4:	69ba      	ldr	r2, [r7, #24]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	69ba      	ldr	r2, [r7, #24]
 80048ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f003 0303 	and.w	r3, r3, #3
 80048d8:	2b03      	cmp	r3, #3
 80048da:	d017      	beq.n	800490c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	005b      	lsls	r3, r3, #1
 80048e6:	2203      	movs	r2, #3
 80048e8:	fa02 f303 	lsl.w	r3, r2, r3
 80048ec:	43db      	mvns	r3, r3
 80048ee:	69ba      	ldr	r2, [r7, #24]
 80048f0:	4013      	ands	r3, r2
 80048f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	689a      	ldr	r2, [r3, #8]
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	005b      	lsls	r3, r3, #1
 80048fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004900:	69ba      	ldr	r2, [r7, #24]
 8004902:	4313      	orrs	r3, r2
 8004904:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	69ba      	ldr	r2, [r7, #24]
 800490a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	f003 0303 	and.w	r3, r3, #3
 8004914:	2b02      	cmp	r3, #2
 8004916:	d123      	bne.n	8004960 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	08da      	lsrs	r2, r3, #3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	3208      	adds	r2, #8
 8004920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004924:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	f003 0307 	and.w	r3, r3, #7
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	220f      	movs	r2, #15
 8004930:	fa02 f303 	lsl.w	r3, r2, r3
 8004934:	43db      	mvns	r3, r3
 8004936:	69ba      	ldr	r2, [r7, #24]
 8004938:	4013      	ands	r3, r2
 800493a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	691a      	ldr	r2, [r3, #16]
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	f003 0307 	and.w	r3, r3, #7
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	fa02 f303 	lsl.w	r3, r2, r3
 800494c:	69ba      	ldr	r2, [r7, #24]
 800494e:	4313      	orrs	r3, r2
 8004950:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	08da      	lsrs	r2, r3, #3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	3208      	adds	r2, #8
 800495a:	69b9      	ldr	r1, [r7, #24]
 800495c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	005b      	lsls	r3, r3, #1
 800496a:	2203      	movs	r2, #3
 800496c:	fa02 f303 	lsl.w	r3, r2, r3
 8004970:	43db      	mvns	r3, r3
 8004972:	69ba      	ldr	r2, [r7, #24]
 8004974:	4013      	ands	r3, r2
 8004976:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	f003 0203 	and.w	r2, r3, #3
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	005b      	lsls	r3, r3, #1
 8004984:	fa02 f303 	lsl.w	r3, r2, r3
 8004988:	69ba      	ldr	r2, [r7, #24]
 800498a:	4313      	orrs	r3, r2
 800498c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	69ba      	ldr	r2, [r7, #24]
 8004992:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800499c:	2b00      	cmp	r3, #0
 800499e:	f000 80b4 	beq.w	8004b0a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049a2:	2300      	movs	r3, #0
 80049a4:	60fb      	str	r3, [r7, #12]
 80049a6:	4b60      	ldr	r3, [pc, #384]	; (8004b28 <HAL_GPIO_Init+0x30c>)
 80049a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049aa:	4a5f      	ldr	r2, [pc, #380]	; (8004b28 <HAL_GPIO_Init+0x30c>)
 80049ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80049b0:	6453      	str	r3, [r2, #68]	; 0x44
 80049b2:	4b5d      	ldr	r3, [pc, #372]	; (8004b28 <HAL_GPIO_Init+0x30c>)
 80049b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049ba:	60fb      	str	r3, [r7, #12]
 80049bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80049be:	4a5b      	ldr	r2, [pc, #364]	; (8004b2c <HAL_GPIO_Init+0x310>)
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	089b      	lsrs	r3, r3, #2
 80049c4:	3302      	adds	r3, #2
 80049c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	f003 0303 	and.w	r3, r3, #3
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	220f      	movs	r2, #15
 80049d6:	fa02 f303 	lsl.w	r3, r2, r3
 80049da:	43db      	mvns	r3, r3
 80049dc:	69ba      	ldr	r2, [r7, #24]
 80049de:	4013      	ands	r3, r2
 80049e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a52      	ldr	r2, [pc, #328]	; (8004b30 <HAL_GPIO_Init+0x314>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d02b      	beq.n	8004a42 <HAL_GPIO_Init+0x226>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a51      	ldr	r2, [pc, #324]	; (8004b34 <HAL_GPIO_Init+0x318>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d025      	beq.n	8004a3e <HAL_GPIO_Init+0x222>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a50      	ldr	r2, [pc, #320]	; (8004b38 <HAL_GPIO_Init+0x31c>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d01f      	beq.n	8004a3a <HAL_GPIO_Init+0x21e>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a4f      	ldr	r2, [pc, #316]	; (8004b3c <HAL_GPIO_Init+0x320>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d019      	beq.n	8004a36 <HAL_GPIO_Init+0x21a>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a4e      	ldr	r2, [pc, #312]	; (8004b40 <HAL_GPIO_Init+0x324>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d013      	beq.n	8004a32 <HAL_GPIO_Init+0x216>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a4d      	ldr	r2, [pc, #308]	; (8004b44 <HAL_GPIO_Init+0x328>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d00d      	beq.n	8004a2e <HAL_GPIO_Init+0x212>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a4c      	ldr	r2, [pc, #304]	; (8004b48 <HAL_GPIO_Init+0x32c>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d007      	beq.n	8004a2a <HAL_GPIO_Init+0x20e>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a4b      	ldr	r2, [pc, #300]	; (8004b4c <HAL_GPIO_Init+0x330>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d101      	bne.n	8004a26 <HAL_GPIO_Init+0x20a>
 8004a22:	2307      	movs	r3, #7
 8004a24:	e00e      	b.n	8004a44 <HAL_GPIO_Init+0x228>
 8004a26:	2308      	movs	r3, #8
 8004a28:	e00c      	b.n	8004a44 <HAL_GPIO_Init+0x228>
 8004a2a:	2306      	movs	r3, #6
 8004a2c:	e00a      	b.n	8004a44 <HAL_GPIO_Init+0x228>
 8004a2e:	2305      	movs	r3, #5
 8004a30:	e008      	b.n	8004a44 <HAL_GPIO_Init+0x228>
 8004a32:	2304      	movs	r3, #4
 8004a34:	e006      	b.n	8004a44 <HAL_GPIO_Init+0x228>
 8004a36:	2303      	movs	r3, #3
 8004a38:	e004      	b.n	8004a44 <HAL_GPIO_Init+0x228>
 8004a3a:	2302      	movs	r3, #2
 8004a3c:	e002      	b.n	8004a44 <HAL_GPIO_Init+0x228>
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e000      	b.n	8004a44 <HAL_GPIO_Init+0x228>
 8004a42:	2300      	movs	r3, #0
 8004a44:	69fa      	ldr	r2, [r7, #28]
 8004a46:	f002 0203 	and.w	r2, r2, #3
 8004a4a:	0092      	lsls	r2, r2, #2
 8004a4c:	4093      	lsls	r3, r2
 8004a4e:	69ba      	ldr	r2, [r7, #24]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a54:	4935      	ldr	r1, [pc, #212]	; (8004b2c <HAL_GPIO_Init+0x310>)
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	089b      	lsrs	r3, r3, #2
 8004a5a:	3302      	adds	r3, #2
 8004a5c:	69ba      	ldr	r2, [r7, #24]
 8004a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a62:	4b3b      	ldr	r3, [pc, #236]	; (8004b50 <HAL_GPIO_Init+0x334>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	43db      	mvns	r3, r3
 8004a6c:	69ba      	ldr	r2, [r7, #24]
 8004a6e:	4013      	ands	r3, r2
 8004a70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d003      	beq.n	8004a86 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004a7e:	69ba      	ldr	r2, [r7, #24]
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a86:	4a32      	ldr	r2, [pc, #200]	; (8004b50 <HAL_GPIO_Init+0x334>)
 8004a88:	69bb      	ldr	r3, [r7, #24]
 8004a8a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004a8c:	4b30      	ldr	r3, [pc, #192]	; (8004b50 <HAL_GPIO_Init+0x334>)
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	43db      	mvns	r3, r3
 8004a96:	69ba      	ldr	r2, [r7, #24]
 8004a98:	4013      	ands	r3, r2
 8004a9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d003      	beq.n	8004ab0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004aa8:	69ba      	ldr	r2, [r7, #24]
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004ab0:	4a27      	ldr	r2, [pc, #156]	; (8004b50 <HAL_GPIO_Init+0x334>)
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004ab6:	4b26      	ldr	r3, [pc, #152]	; (8004b50 <HAL_GPIO_Init+0x334>)
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	43db      	mvns	r3, r3
 8004ac0:	69ba      	ldr	r2, [r7, #24]
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d003      	beq.n	8004ada <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004ad2:	69ba      	ldr	r2, [r7, #24]
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004ada:	4a1d      	ldr	r2, [pc, #116]	; (8004b50 <HAL_GPIO_Init+0x334>)
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004ae0:	4b1b      	ldr	r3, [pc, #108]	; (8004b50 <HAL_GPIO_Init+0x334>)
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	43db      	mvns	r3, r3
 8004aea:	69ba      	ldr	r2, [r7, #24]
 8004aec:	4013      	ands	r3, r2
 8004aee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d003      	beq.n	8004b04 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004afc:	69ba      	ldr	r2, [r7, #24]
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004b04:	4a12      	ldr	r2, [pc, #72]	; (8004b50 <HAL_GPIO_Init+0x334>)
 8004b06:	69bb      	ldr	r3, [r7, #24]
 8004b08:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	61fb      	str	r3, [r7, #28]
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	2b0f      	cmp	r3, #15
 8004b14:	f67f ae90 	bls.w	8004838 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004b18:	bf00      	nop
 8004b1a:	bf00      	nop
 8004b1c:	3724      	adds	r7, #36	; 0x24
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr
 8004b26:	bf00      	nop
 8004b28:	40023800 	.word	0x40023800
 8004b2c:	40013800 	.word	0x40013800
 8004b30:	40020000 	.word	0x40020000
 8004b34:	40020400 	.word	0x40020400
 8004b38:	40020800 	.word	0x40020800
 8004b3c:	40020c00 	.word	0x40020c00
 8004b40:	40021000 	.word	0x40021000
 8004b44:	40021400 	.word	0x40021400
 8004b48:	40021800 	.word	0x40021800
 8004b4c:	40021c00 	.word	0x40021c00
 8004b50:	40013c00 	.word	0x40013c00

08004b54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b085      	sub	sp, #20
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	691a      	ldr	r2, [r3, #16]
 8004b64:	887b      	ldrh	r3, [r7, #2]
 8004b66:	4013      	ands	r3, r2
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d002      	beq.n	8004b72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	73fb      	strb	r3, [r7, #15]
 8004b70:	e001      	b.n	8004b76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004b72:	2300      	movs	r3, #0
 8004b74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3714      	adds	r7, #20
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	807b      	strh	r3, [r7, #2]
 8004b90:	4613      	mov	r3, r2
 8004b92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b94:	787b      	ldrb	r3, [r7, #1]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d003      	beq.n	8004ba2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b9a:	887a      	ldrh	r2, [r7, #2]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004ba0:	e003      	b.n	8004baa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004ba2:	887b      	ldrh	r3, [r7, #2]
 8004ba4:	041a      	lsls	r2, r3, #16
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	619a      	str	r2, [r3, #24]
}
 8004baa:	bf00      	nop
 8004bac:	370c      	adds	r7, #12
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
	...

08004bb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d101      	bne.n	8004bca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e12b      	b.n	8004e22 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d106      	bne.n	8004be4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f7fd fd90 	bl	8002704 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2224      	movs	r2, #36	; 0x24
 8004be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f022 0201 	bic.w	r2, r2, #1
 8004bfa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c1a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004c1c:	f002 fd7c 	bl	8007718 <HAL_RCC_GetPCLK1Freq>
 8004c20:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	4a81      	ldr	r2, [pc, #516]	; (8004e2c <HAL_I2C_Init+0x274>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d807      	bhi.n	8004c3c <HAL_I2C_Init+0x84>
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	4a80      	ldr	r2, [pc, #512]	; (8004e30 <HAL_I2C_Init+0x278>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	bf94      	ite	ls
 8004c34:	2301      	movls	r3, #1
 8004c36:	2300      	movhi	r3, #0
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	e006      	b.n	8004c4a <HAL_I2C_Init+0x92>
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	4a7d      	ldr	r2, [pc, #500]	; (8004e34 <HAL_I2C_Init+0x27c>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	bf94      	ite	ls
 8004c44:	2301      	movls	r3, #1
 8004c46:	2300      	movhi	r3, #0
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d001      	beq.n	8004c52 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e0e7      	b.n	8004e22 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	4a78      	ldr	r2, [pc, #480]	; (8004e38 <HAL_I2C_Init+0x280>)
 8004c56:	fba2 2303 	umull	r2, r3, r2, r3
 8004c5a:	0c9b      	lsrs	r3, r3, #18
 8004c5c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68ba      	ldr	r2, [r7, #8]
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	6a1b      	ldr	r3, [r3, #32]
 8004c78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	4a6a      	ldr	r2, [pc, #424]	; (8004e2c <HAL_I2C_Init+0x274>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d802      	bhi.n	8004c8c <HAL_I2C_Init+0xd4>
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	3301      	adds	r3, #1
 8004c8a:	e009      	b.n	8004ca0 <HAL_I2C_Init+0xe8>
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004c92:	fb02 f303 	mul.w	r3, r2, r3
 8004c96:	4a69      	ldr	r2, [pc, #420]	; (8004e3c <HAL_I2C_Init+0x284>)
 8004c98:	fba2 2303 	umull	r2, r3, r2, r3
 8004c9c:	099b      	lsrs	r3, r3, #6
 8004c9e:	3301      	adds	r3, #1
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	6812      	ldr	r2, [r2, #0]
 8004ca4:	430b      	orrs	r3, r1
 8004ca6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	69db      	ldr	r3, [r3, #28]
 8004cae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004cb2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	495c      	ldr	r1, [pc, #368]	; (8004e2c <HAL_I2C_Init+0x274>)
 8004cbc:	428b      	cmp	r3, r1
 8004cbe:	d819      	bhi.n	8004cf4 <HAL_I2C_Init+0x13c>
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	1e59      	subs	r1, r3, #1
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	005b      	lsls	r3, r3, #1
 8004cca:	fbb1 f3f3 	udiv	r3, r1, r3
 8004cce:	1c59      	adds	r1, r3, #1
 8004cd0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004cd4:	400b      	ands	r3, r1
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00a      	beq.n	8004cf0 <HAL_I2C_Init+0x138>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	1e59      	subs	r1, r3, #1
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	005b      	lsls	r3, r3, #1
 8004ce4:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ce8:	3301      	adds	r3, #1
 8004cea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cee:	e051      	b.n	8004d94 <HAL_I2C_Init+0x1dc>
 8004cf0:	2304      	movs	r3, #4
 8004cf2:	e04f      	b.n	8004d94 <HAL_I2C_Init+0x1dc>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d111      	bne.n	8004d20 <HAL_I2C_Init+0x168>
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	1e58      	subs	r0, r3, #1
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6859      	ldr	r1, [r3, #4]
 8004d04:	460b      	mov	r3, r1
 8004d06:	005b      	lsls	r3, r3, #1
 8004d08:	440b      	add	r3, r1
 8004d0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d0e:	3301      	adds	r3, #1
 8004d10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	bf0c      	ite	eq
 8004d18:	2301      	moveq	r3, #1
 8004d1a:	2300      	movne	r3, #0
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	e012      	b.n	8004d46 <HAL_I2C_Init+0x18e>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	1e58      	subs	r0, r3, #1
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6859      	ldr	r1, [r3, #4]
 8004d28:	460b      	mov	r3, r1
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	440b      	add	r3, r1
 8004d2e:	0099      	lsls	r1, r3, #2
 8004d30:	440b      	add	r3, r1
 8004d32:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d36:	3301      	adds	r3, #1
 8004d38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	bf0c      	ite	eq
 8004d40:	2301      	moveq	r3, #1
 8004d42:	2300      	movne	r3, #0
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d001      	beq.n	8004d4e <HAL_I2C_Init+0x196>
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e022      	b.n	8004d94 <HAL_I2C_Init+0x1dc>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d10e      	bne.n	8004d74 <HAL_I2C_Init+0x1bc>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	1e58      	subs	r0, r3, #1
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6859      	ldr	r1, [r3, #4]
 8004d5e:	460b      	mov	r3, r1
 8004d60:	005b      	lsls	r3, r3, #1
 8004d62:	440b      	add	r3, r1
 8004d64:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d68:	3301      	adds	r3, #1
 8004d6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d72:	e00f      	b.n	8004d94 <HAL_I2C_Init+0x1dc>
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	1e58      	subs	r0, r3, #1
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6859      	ldr	r1, [r3, #4]
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	440b      	add	r3, r1
 8004d82:	0099      	lsls	r1, r3, #2
 8004d84:	440b      	add	r3, r1
 8004d86:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d94:	6879      	ldr	r1, [r7, #4]
 8004d96:	6809      	ldr	r1, [r1, #0]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	69da      	ldr	r2, [r3, #28]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a1b      	ldr	r3, [r3, #32]
 8004dae:	431a      	orrs	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	430a      	orrs	r2, r1
 8004db6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004dc2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	6911      	ldr	r1, [r2, #16]
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	68d2      	ldr	r2, [r2, #12]
 8004dce:	4311      	orrs	r1, r2
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	6812      	ldr	r2, [r2, #0]
 8004dd4:	430b      	orrs	r3, r1
 8004dd6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	695a      	ldr	r2, [r3, #20]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	699b      	ldr	r3, [r3, #24]
 8004dea:	431a      	orrs	r2, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	430a      	orrs	r2, r1
 8004df2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f042 0201 	orr.w	r2, r2, #1
 8004e02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2220      	movs	r2, #32
 8004e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3710      	adds	r7, #16
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	000186a0 	.word	0x000186a0
 8004e30:	001e847f 	.word	0x001e847f
 8004e34:	003d08ff 	.word	0x003d08ff
 8004e38:	431bde83 	.word	0x431bde83
 8004e3c:	10624dd3 	.word	0x10624dd3

08004e40 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b088      	sub	sp, #32
 8004e44:	af02      	add	r7, sp, #8
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	4608      	mov	r0, r1
 8004e4a:	4611      	mov	r1, r2
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	4603      	mov	r3, r0
 8004e50:	817b      	strh	r3, [r7, #10]
 8004e52:	460b      	mov	r3, r1
 8004e54:	813b      	strh	r3, [r7, #8]
 8004e56:	4613      	mov	r3, r2
 8004e58:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e5a:	f7ff fad9 	bl	8004410 <HAL_GetTick>
 8004e5e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	2b20      	cmp	r3, #32
 8004e6a:	f040 80d9 	bne.w	8005020 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	9300      	str	r3, [sp, #0]
 8004e72:	2319      	movs	r3, #25
 8004e74:	2201      	movs	r2, #1
 8004e76:	496d      	ldr	r1, [pc, #436]	; (800502c <HAL_I2C_Mem_Write+0x1ec>)
 8004e78:	68f8      	ldr	r0, [r7, #12]
 8004e7a:	f000 fc7f 	bl	800577c <I2C_WaitOnFlagUntilTimeout>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d001      	beq.n	8004e88 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004e84:	2302      	movs	r3, #2
 8004e86:	e0cc      	b.n	8005022 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d101      	bne.n	8004e96 <HAL_I2C_Mem_Write+0x56>
 8004e92:	2302      	movs	r3, #2
 8004e94:	e0c5      	b.n	8005022 <HAL_I2C_Mem_Write+0x1e2>
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0301 	and.w	r3, r3, #1
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d007      	beq.n	8004ebc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f042 0201 	orr.w	r2, r2, #1
 8004eba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004eca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2221      	movs	r2, #33	; 0x21
 8004ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2240      	movs	r2, #64	; 0x40
 8004ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6a3a      	ldr	r2, [r7, #32]
 8004ee6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004eec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ef2:	b29a      	uxth	r2, r3
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	4a4d      	ldr	r2, [pc, #308]	; (8005030 <HAL_I2C_Mem_Write+0x1f0>)
 8004efc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004efe:	88f8      	ldrh	r0, [r7, #6]
 8004f00:	893a      	ldrh	r2, [r7, #8]
 8004f02:	8979      	ldrh	r1, [r7, #10]
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	9301      	str	r3, [sp, #4]
 8004f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0a:	9300      	str	r3, [sp, #0]
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	68f8      	ldr	r0, [r7, #12]
 8004f10:	f000 fab6 	bl	8005480 <I2C_RequestMemoryWrite>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d052      	beq.n	8004fc0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e081      	b.n	8005022 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f1e:	697a      	ldr	r2, [r7, #20]
 8004f20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f22:	68f8      	ldr	r0, [r7, #12]
 8004f24:	f000 fd00 	bl	8005928 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d00d      	beq.n	8004f4a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f32:	2b04      	cmp	r3, #4
 8004f34:	d107      	bne.n	8004f46 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f44:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e06b      	b.n	8005022 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4e:	781a      	ldrb	r2, [r3, #0]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5a:	1c5a      	adds	r2, r3, #1
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f64:	3b01      	subs	r3, #1
 8004f66:	b29a      	uxth	r2, r3
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	3b01      	subs	r3, #1
 8004f74:	b29a      	uxth	r2, r3
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	695b      	ldr	r3, [r3, #20]
 8004f80:	f003 0304 	and.w	r3, r3, #4
 8004f84:	2b04      	cmp	r3, #4
 8004f86:	d11b      	bne.n	8004fc0 <HAL_I2C_Mem_Write+0x180>
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d017      	beq.n	8004fc0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f94:	781a      	ldrb	r2, [r3, #0]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa0:	1c5a      	adds	r2, r3, #1
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004faa:	3b01      	subs	r3, #1
 8004fac:	b29a      	uxth	r2, r3
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	b29a      	uxth	r2, r3
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d1aa      	bne.n	8004f1e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fc8:	697a      	ldr	r2, [r7, #20]
 8004fca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fcc:	68f8      	ldr	r0, [r7, #12]
 8004fce:	f000 fcec 	bl	80059aa <I2C_WaitOnBTFFlagUntilTimeout>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d00d      	beq.n	8004ff4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fdc:	2b04      	cmp	r3, #4
 8004fde:	d107      	bne.n	8004ff0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fee:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e016      	b.n	8005022 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005002:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2220      	movs	r2, #32
 8005008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2200      	movs	r2, #0
 8005010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800501c:	2300      	movs	r3, #0
 800501e:	e000      	b.n	8005022 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005020:	2302      	movs	r3, #2
  }
}
 8005022:	4618      	mov	r0, r3
 8005024:	3718      	adds	r7, #24
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	00100002 	.word	0x00100002
 8005030:	ffff0000 	.word	0xffff0000

08005034 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b08c      	sub	sp, #48	; 0x30
 8005038:	af02      	add	r7, sp, #8
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	4608      	mov	r0, r1
 800503e:	4611      	mov	r1, r2
 8005040:	461a      	mov	r2, r3
 8005042:	4603      	mov	r3, r0
 8005044:	817b      	strh	r3, [r7, #10]
 8005046:	460b      	mov	r3, r1
 8005048:	813b      	strh	r3, [r7, #8]
 800504a:	4613      	mov	r3, r2
 800504c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800504e:	f7ff f9df 	bl	8004410 <HAL_GetTick>
 8005052:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800505a:	b2db      	uxtb	r3, r3
 800505c:	2b20      	cmp	r3, #32
 800505e:	f040 8208 	bne.w	8005472 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005064:	9300      	str	r3, [sp, #0]
 8005066:	2319      	movs	r3, #25
 8005068:	2201      	movs	r2, #1
 800506a:	497b      	ldr	r1, [pc, #492]	; (8005258 <HAL_I2C_Mem_Read+0x224>)
 800506c:	68f8      	ldr	r0, [r7, #12]
 800506e:	f000 fb85 	bl	800577c <I2C_WaitOnFlagUntilTimeout>
 8005072:	4603      	mov	r3, r0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d001      	beq.n	800507c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005078:	2302      	movs	r3, #2
 800507a:	e1fb      	b.n	8005474 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005082:	2b01      	cmp	r3, #1
 8005084:	d101      	bne.n	800508a <HAL_I2C_Mem_Read+0x56>
 8005086:	2302      	movs	r3, #2
 8005088:	e1f4      	b.n	8005474 <HAL_I2C_Mem_Read+0x440>
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2201      	movs	r2, #1
 800508e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0301 	and.w	r3, r3, #1
 800509c:	2b01      	cmp	r3, #1
 800509e:	d007      	beq.n	80050b0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f042 0201 	orr.w	r2, r2, #1
 80050ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2222      	movs	r2, #34	; 0x22
 80050c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2240      	movs	r2, #64	; 0x40
 80050cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2200      	movs	r2, #0
 80050d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80050e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050e6:	b29a      	uxth	r2, r3
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	4a5b      	ldr	r2, [pc, #364]	; (800525c <HAL_I2C_Mem_Read+0x228>)
 80050f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80050f2:	88f8      	ldrh	r0, [r7, #6]
 80050f4:	893a      	ldrh	r2, [r7, #8]
 80050f6:	8979      	ldrh	r1, [r7, #10]
 80050f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fa:	9301      	str	r3, [sp, #4]
 80050fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050fe:	9300      	str	r3, [sp, #0]
 8005100:	4603      	mov	r3, r0
 8005102:	68f8      	ldr	r0, [r7, #12]
 8005104:	f000 fa52 	bl	80055ac <I2C_RequestMemoryRead>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d001      	beq.n	8005112 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e1b0      	b.n	8005474 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005116:	2b00      	cmp	r3, #0
 8005118:	d113      	bne.n	8005142 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800511a:	2300      	movs	r3, #0
 800511c:	623b      	str	r3, [r7, #32]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	695b      	ldr	r3, [r3, #20]
 8005124:	623b      	str	r3, [r7, #32]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	699b      	ldr	r3, [r3, #24]
 800512c:	623b      	str	r3, [r7, #32]
 800512e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800513e:	601a      	str	r2, [r3, #0]
 8005140:	e184      	b.n	800544c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005146:	2b01      	cmp	r3, #1
 8005148:	d11b      	bne.n	8005182 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005158:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800515a:	2300      	movs	r3, #0
 800515c:	61fb      	str	r3, [r7, #28]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	695b      	ldr	r3, [r3, #20]
 8005164:	61fb      	str	r3, [r7, #28]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	699b      	ldr	r3, [r3, #24]
 800516c:	61fb      	str	r3, [r7, #28]
 800516e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800517e:	601a      	str	r2, [r3, #0]
 8005180:	e164      	b.n	800544c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005186:	2b02      	cmp	r3, #2
 8005188:	d11b      	bne.n	80051c2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005198:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051aa:	2300      	movs	r3, #0
 80051ac:	61bb      	str	r3, [r7, #24]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	695b      	ldr	r3, [r3, #20]
 80051b4:	61bb      	str	r3, [r7, #24]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	699b      	ldr	r3, [r3, #24]
 80051bc:	61bb      	str	r3, [r7, #24]
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	e144      	b.n	800544c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051c2:	2300      	movs	r3, #0
 80051c4:	617b      	str	r3, [r7, #20]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	695b      	ldr	r3, [r3, #20]
 80051cc:	617b      	str	r3, [r7, #20]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	699b      	ldr	r3, [r3, #24]
 80051d4:	617b      	str	r3, [r7, #20]
 80051d6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80051d8:	e138      	b.n	800544c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051de:	2b03      	cmp	r3, #3
 80051e0:	f200 80f1 	bhi.w	80053c6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d123      	bne.n	8005234 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80051f0:	68f8      	ldr	r0, [r7, #12]
 80051f2:	f000 fc1b 	bl	8005a2c <I2C_WaitOnRXNEFlagUntilTimeout>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d001      	beq.n	8005200 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e139      	b.n	8005474 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	691a      	ldr	r2, [r3, #16]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520a:	b2d2      	uxtb	r2, r2
 800520c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005212:	1c5a      	adds	r2, r3, #1
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800521c:	3b01      	subs	r3, #1
 800521e:	b29a      	uxth	r2, r3
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005228:	b29b      	uxth	r3, r3
 800522a:	3b01      	subs	r3, #1
 800522c:	b29a      	uxth	r2, r3
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005232:	e10b      	b.n	800544c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005238:	2b02      	cmp	r3, #2
 800523a:	d14e      	bne.n	80052da <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800523c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523e:	9300      	str	r3, [sp, #0]
 8005240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005242:	2200      	movs	r2, #0
 8005244:	4906      	ldr	r1, [pc, #24]	; (8005260 <HAL_I2C_Mem_Read+0x22c>)
 8005246:	68f8      	ldr	r0, [r7, #12]
 8005248:	f000 fa98 	bl	800577c <I2C_WaitOnFlagUntilTimeout>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d008      	beq.n	8005264 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e10e      	b.n	8005474 <HAL_I2C_Mem_Read+0x440>
 8005256:	bf00      	nop
 8005258:	00100002 	.word	0x00100002
 800525c:	ffff0000 	.word	0xffff0000
 8005260:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005272:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	691a      	ldr	r2, [r3, #16]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527e:	b2d2      	uxtb	r2, r2
 8005280:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005286:	1c5a      	adds	r2, r3, #1
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005290:	3b01      	subs	r3, #1
 8005292:	b29a      	uxth	r2, r3
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800529c:	b29b      	uxth	r3, r3
 800529e:	3b01      	subs	r3, #1
 80052a0:	b29a      	uxth	r2, r3
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	691a      	ldr	r2, [r3, #16]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b0:	b2d2      	uxtb	r2, r2
 80052b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b8:	1c5a      	adds	r2, r3, #1
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052c2:	3b01      	subs	r3, #1
 80052c4:	b29a      	uxth	r2, r3
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	3b01      	subs	r3, #1
 80052d2:	b29a      	uxth	r2, r3
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80052d8:	e0b8      	b.n	800544c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80052da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052dc:	9300      	str	r3, [sp, #0]
 80052de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e0:	2200      	movs	r2, #0
 80052e2:	4966      	ldr	r1, [pc, #408]	; (800547c <HAL_I2C_Mem_Read+0x448>)
 80052e4:	68f8      	ldr	r0, [r7, #12]
 80052e6:	f000 fa49 	bl	800577c <I2C_WaitOnFlagUntilTimeout>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d001      	beq.n	80052f4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e0bf      	b.n	8005474 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005302:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	691a      	ldr	r2, [r3, #16]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530e:	b2d2      	uxtb	r2, r2
 8005310:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005316:	1c5a      	adds	r2, r3, #1
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005320:	3b01      	subs	r3, #1
 8005322:	b29a      	uxth	r2, r3
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800532c:	b29b      	uxth	r3, r3
 800532e:	3b01      	subs	r3, #1
 8005330:	b29a      	uxth	r2, r3
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005338:	9300      	str	r3, [sp, #0]
 800533a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800533c:	2200      	movs	r2, #0
 800533e:	494f      	ldr	r1, [pc, #316]	; (800547c <HAL_I2C_Mem_Read+0x448>)
 8005340:	68f8      	ldr	r0, [r7, #12]
 8005342:	f000 fa1b 	bl	800577c <I2C_WaitOnFlagUntilTimeout>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d001      	beq.n	8005350 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e091      	b.n	8005474 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800535e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	691a      	ldr	r2, [r3, #16]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536a:	b2d2      	uxtb	r2, r2
 800536c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005372:	1c5a      	adds	r2, r3, #1
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800537c:	3b01      	subs	r3, #1
 800537e:	b29a      	uxth	r2, r3
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005388:	b29b      	uxth	r3, r3
 800538a:	3b01      	subs	r3, #1
 800538c:	b29a      	uxth	r2, r3
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	691a      	ldr	r2, [r3, #16]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539c:	b2d2      	uxtb	r2, r2
 800539e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a4:	1c5a      	adds	r2, r3, #1
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053ae:	3b01      	subs	r3, #1
 80053b0:	b29a      	uxth	r2, r3
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	3b01      	subs	r3, #1
 80053be:	b29a      	uxth	r2, r3
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80053c4:	e042      	b.n	800544c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80053ca:	68f8      	ldr	r0, [r7, #12]
 80053cc:	f000 fb2e 	bl	8005a2c <I2C_WaitOnRXNEFlagUntilTimeout>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d001      	beq.n	80053da <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e04c      	b.n	8005474 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	691a      	ldr	r2, [r3, #16]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e4:	b2d2      	uxtb	r2, r2
 80053e6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ec:	1c5a      	adds	r2, r3, #1
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053f6:	3b01      	subs	r3, #1
 80053f8:	b29a      	uxth	r2, r3
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005402:	b29b      	uxth	r3, r3
 8005404:	3b01      	subs	r3, #1
 8005406:	b29a      	uxth	r2, r3
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	f003 0304 	and.w	r3, r3, #4
 8005416:	2b04      	cmp	r3, #4
 8005418:	d118      	bne.n	800544c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	691a      	ldr	r2, [r3, #16]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005424:	b2d2      	uxtb	r2, r2
 8005426:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542c:	1c5a      	adds	r2, r3, #1
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005436:	3b01      	subs	r3, #1
 8005438:	b29a      	uxth	r2, r3
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005442:	b29b      	uxth	r3, r3
 8005444:	3b01      	subs	r3, #1
 8005446:	b29a      	uxth	r2, r3
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005450:	2b00      	cmp	r3, #0
 8005452:	f47f aec2 	bne.w	80051da <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2220      	movs	r2, #32
 800545a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800546e:	2300      	movs	r3, #0
 8005470:	e000      	b.n	8005474 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005472:	2302      	movs	r3, #2
  }
}
 8005474:	4618      	mov	r0, r3
 8005476:	3728      	adds	r7, #40	; 0x28
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}
 800547c:	00010004 	.word	0x00010004

08005480 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b088      	sub	sp, #32
 8005484:	af02      	add	r7, sp, #8
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	4608      	mov	r0, r1
 800548a:	4611      	mov	r1, r2
 800548c:	461a      	mov	r2, r3
 800548e:	4603      	mov	r3, r0
 8005490:	817b      	strh	r3, [r7, #10]
 8005492:	460b      	mov	r3, r1
 8005494:	813b      	strh	r3, [r7, #8]
 8005496:	4613      	mov	r3, r2
 8005498:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80054aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ac:	9300      	str	r3, [sp, #0]
 80054ae:	6a3b      	ldr	r3, [r7, #32]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80054b6:	68f8      	ldr	r0, [r7, #12]
 80054b8:	f000 f960 	bl	800577c <I2C_WaitOnFlagUntilTimeout>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00d      	beq.n	80054de <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054d0:	d103      	bne.n	80054da <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054d8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	e05f      	b.n	800559e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80054de:	897b      	ldrh	r3, [r7, #10]
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	461a      	mov	r2, r3
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80054ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f0:	6a3a      	ldr	r2, [r7, #32]
 80054f2:	492d      	ldr	r1, [pc, #180]	; (80055a8 <I2C_RequestMemoryWrite+0x128>)
 80054f4:	68f8      	ldr	r0, [r7, #12]
 80054f6:	f000 f998 	bl	800582a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d001      	beq.n	8005504 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	e04c      	b.n	800559e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005504:	2300      	movs	r3, #0
 8005506:	617b      	str	r3, [r7, #20]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	695b      	ldr	r3, [r3, #20]
 800550e:	617b      	str	r3, [r7, #20]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	617b      	str	r3, [r7, #20]
 8005518:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800551a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800551c:	6a39      	ldr	r1, [r7, #32]
 800551e:	68f8      	ldr	r0, [r7, #12]
 8005520:	f000 fa02 	bl	8005928 <I2C_WaitOnTXEFlagUntilTimeout>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00d      	beq.n	8005546 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552e:	2b04      	cmp	r3, #4
 8005530:	d107      	bne.n	8005542 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005540:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e02b      	b.n	800559e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005546:	88fb      	ldrh	r3, [r7, #6]
 8005548:	2b01      	cmp	r3, #1
 800554a:	d105      	bne.n	8005558 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800554c:	893b      	ldrh	r3, [r7, #8]
 800554e:	b2da      	uxtb	r2, r3
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	611a      	str	r2, [r3, #16]
 8005556:	e021      	b.n	800559c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005558:	893b      	ldrh	r3, [r7, #8]
 800555a:	0a1b      	lsrs	r3, r3, #8
 800555c:	b29b      	uxth	r3, r3
 800555e:	b2da      	uxtb	r2, r3
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005568:	6a39      	ldr	r1, [r7, #32]
 800556a:	68f8      	ldr	r0, [r7, #12]
 800556c:	f000 f9dc 	bl	8005928 <I2C_WaitOnTXEFlagUntilTimeout>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d00d      	beq.n	8005592 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557a:	2b04      	cmp	r3, #4
 800557c:	d107      	bne.n	800558e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800558c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e005      	b.n	800559e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005592:	893b      	ldrh	r3, [r7, #8]
 8005594:	b2da      	uxtb	r2, r3
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800559c:	2300      	movs	r3, #0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3718      	adds	r7, #24
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	00010002 	.word	0x00010002

080055ac <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b088      	sub	sp, #32
 80055b0:	af02      	add	r7, sp, #8
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	4608      	mov	r0, r1
 80055b6:	4611      	mov	r1, r2
 80055b8:	461a      	mov	r2, r3
 80055ba:	4603      	mov	r3, r0
 80055bc:	817b      	strh	r3, [r7, #10]
 80055be:	460b      	mov	r3, r1
 80055c0:	813b      	strh	r3, [r7, #8]
 80055c2:	4613      	mov	r3, r2
 80055c4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80055d4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80055e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e8:	9300      	str	r3, [sp, #0]
 80055ea:	6a3b      	ldr	r3, [r7, #32]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80055f2:	68f8      	ldr	r0, [r7, #12]
 80055f4:	f000 f8c2 	bl	800577c <I2C_WaitOnFlagUntilTimeout>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00d      	beq.n	800561a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005608:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800560c:	d103      	bne.n	8005616 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005614:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e0aa      	b.n	8005770 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800561a:	897b      	ldrh	r3, [r7, #10]
 800561c:	b2db      	uxtb	r3, r3
 800561e:	461a      	mov	r2, r3
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005628:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800562a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562c:	6a3a      	ldr	r2, [r7, #32]
 800562e:	4952      	ldr	r1, [pc, #328]	; (8005778 <I2C_RequestMemoryRead+0x1cc>)
 8005630:	68f8      	ldr	r0, [r7, #12]
 8005632:	f000 f8fa 	bl	800582a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005636:	4603      	mov	r3, r0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d001      	beq.n	8005640 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e097      	b.n	8005770 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005640:	2300      	movs	r3, #0
 8005642:	617b      	str	r3, [r7, #20]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	695b      	ldr	r3, [r3, #20]
 800564a:	617b      	str	r3, [r7, #20]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	699b      	ldr	r3, [r3, #24]
 8005652:	617b      	str	r3, [r7, #20]
 8005654:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005656:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005658:	6a39      	ldr	r1, [r7, #32]
 800565a:	68f8      	ldr	r0, [r7, #12]
 800565c:	f000 f964 	bl	8005928 <I2C_WaitOnTXEFlagUntilTimeout>
 8005660:	4603      	mov	r3, r0
 8005662:	2b00      	cmp	r3, #0
 8005664:	d00d      	beq.n	8005682 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566a:	2b04      	cmp	r3, #4
 800566c:	d107      	bne.n	800567e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800567c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e076      	b.n	8005770 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005682:	88fb      	ldrh	r3, [r7, #6]
 8005684:	2b01      	cmp	r3, #1
 8005686:	d105      	bne.n	8005694 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005688:	893b      	ldrh	r3, [r7, #8]
 800568a:	b2da      	uxtb	r2, r3
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	611a      	str	r2, [r3, #16]
 8005692:	e021      	b.n	80056d8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005694:	893b      	ldrh	r3, [r7, #8]
 8005696:	0a1b      	lsrs	r3, r3, #8
 8005698:	b29b      	uxth	r3, r3
 800569a:	b2da      	uxtb	r2, r3
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056a4:	6a39      	ldr	r1, [r7, #32]
 80056a6:	68f8      	ldr	r0, [r7, #12]
 80056a8:	f000 f93e 	bl	8005928 <I2C_WaitOnTXEFlagUntilTimeout>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d00d      	beq.n	80056ce <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b6:	2b04      	cmp	r3, #4
 80056b8:	d107      	bne.n	80056ca <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e050      	b.n	8005770 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80056ce:	893b      	ldrh	r3, [r7, #8]
 80056d0:	b2da      	uxtb	r2, r3
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056da:	6a39      	ldr	r1, [r7, #32]
 80056dc:	68f8      	ldr	r0, [r7, #12]
 80056de:	f000 f923 	bl	8005928 <I2C_WaitOnTXEFlagUntilTimeout>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d00d      	beq.n	8005704 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ec:	2b04      	cmp	r3, #4
 80056ee:	d107      	bne.n	8005700 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056fe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	e035      	b.n	8005770 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005712:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005716:	9300      	str	r3, [sp, #0]
 8005718:	6a3b      	ldr	r3, [r7, #32]
 800571a:	2200      	movs	r2, #0
 800571c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005720:	68f8      	ldr	r0, [r7, #12]
 8005722:	f000 f82b 	bl	800577c <I2C_WaitOnFlagUntilTimeout>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d00d      	beq.n	8005748 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005736:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800573a:	d103      	bne.n	8005744 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005742:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005744:	2303      	movs	r3, #3
 8005746:	e013      	b.n	8005770 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005748:	897b      	ldrh	r3, [r7, #10]
 800574a:	b2db      	uxtb	r3, r3
 800574c:	f043 0301 	orr.w	r3, r3, #1
 8005750:	b2da      	uxtb	r2, r3
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575a:	6a3a      	ldr	r2, [r7, #32]
 800575c:	4906      	ldr	r1, [pc, #24]	; (8005778 <I2C_RequestMemoryRead+0x1cc>)
 800575e:	68f8      	ldr	r0, [r7, #12]
 8005760:	f000 f863 	bl	800582a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d001      	beq.n	800576e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e000      	b.n	8005770 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800576e:	2300      	movs	r3, #0
}
 8005770:	4618      	mov	r0, r3
 8005772:	3718      	adds	r7, #24
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}
 8005778:	00010002 	.word	0x00010002

0800577c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	603b      	str	r3, [r7, #0]
 8005788:	4613      	mov	r3, r2
 800578a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800578c:	e025      	b.n	80057da <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005794:	d021      	beq.n	80057da <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005796:	f7fe fe3b 	bl	8004410 <HAL_GetTick>
 800579a:	4602      	mov	r2, r0
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	683a      	ldr	r2, [r7, #0]
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d302      	bcc.n	80057ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d116      	bne.n	80057da <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2200      	movs	r2, #0
 80057b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2220      	movs	r2, #32
 80057b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2200      	movs	r2, #0
 80057be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c6:	f043 0220 	orr.w	r2, r3, #32
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2200      	movs	r2, #0
 80057d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e023      	b.n	8005822 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	0c1b      	lsrs	r3, r3, #16
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d10d      	bne.n	8005800 <I2C_WaitOnFlagUntilTimeout+0x84>
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	695b      	ldr	r3, [r3, #20]
 80057ea:	43da      	mvns	r2, r3
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	4013      	ands	r3, r2
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	bf0c      	ite	eq
 80057f6:	2301      	moveq	r3, #1
 80057f8:	2300      	movne	r3, #0
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	461a      	mov	r2, r3
 80057fe:	e00c      	b.n	800581a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	699b      	ldr	r3, [r3, #24]
 8005806:	43da      	mvns	r2, r3
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	4013      	ands	r3, r2
 800580c:	b29b      	uxth	r3, r3
 800580e:	2b00      	cmp	r3, #0
 8005810:	bf0c      	ite	eq
 8005812:	2301      	moveq	r3, #1
 8005814:	2300      	movne	r3, #0
 8005816:	b2db      	uxtb	r3, r3
 8005818:	461a      	mov	r2, r3
 800581a:	79fb      	ldrb	r3, [r7, #7]
 800581c:	429a      	cmp	r2, r3
 800581e:	d0b6      	beq.n	800578e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	3710      	adds	r7, #16
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}

0800582a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800582a:	b580      	push	{r7, lr}
 800582c:	b084      	sub	sp, #16
 800582e:	af00      	add	r7, sp, #0
 8005830:	60f8      	str	r0, [r7, #12]
 8005832:	60b9      	str	r1, [r7, #8]
 8005834:	607a      	str	r2, [r7, #4]
 8005836:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005838:	e051      	b.n	80058de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	695b      	ldr	r3, [r3, #20]
 8005840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005844:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005848:	d123      	bne.n	8005892 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005858:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005862:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2200      	movs	r2, #0
 8005868:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2220      	movs	r2, #32
 800586e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2200      	movs	r2, #0
 8005876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587e:	f043 0204 	orr.w	r2, r3, #4
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2200      	movs	r2, #0
 800588a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e046      	b.n	8005920 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005898:	d021      	beq.n	80058de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800589a:	f7fe fdb9 	bl	8004410 <HAL_GetTick>
 800589e:	4602      	mov	r2, r0
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	1ad3      	subs	r3, r2, r3
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d302      	bcc.n	80058b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d116      	bne.n	80058de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2200      	movs	r2, #0
 80058b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2220      	movs	r2, #32
 80058ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2200      	movs	r2, #0
 80058c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ca:	f043 0220 	orr.w	r2, r3, #32
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2200      	movs	r2, #0
 80058d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e020      	b.n	8005920 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	0c1b      	lsrs	r3, r3, #16
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d10c      	bne.n	8005902 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	695b      	ldr	r3, [r3, #20]
 80058ee:	43da      	mvns	r2, r3
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	4013      	ands	r3, r2
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	bf14      	ite	ne
 80058fa:	2301      	movne	r3, #1
 80058fc:	2300      	moveq	r3, #0
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	e00b      	b.n	800591a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	699b      	ldr	r3, [r3, #24]
 8005908:	43da      	mvns	r2, r3
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	4013      	ands	r3, r2
 800590e:	b29b      	uxth	r3, r3
 8005910:	2b00      	cmp	r3, #0
 8005912:	bf14      	ite	ne
 8005914:	2301      	movne	r3, #1
 8005916:	2300      	moveq	r3, #0
 8005918:	b2db      	uxtb	r3, r3
 800591a:	2b00      	cmp	r3, #0
 800591c:	d18d      	bne.n	800583a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800591e:	2300      	movs	r3, #0
}
 8005920:	4618      	mov	r0, r3
 8005922:	3710      	adds	r7, #16
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005934:	e02d      	b.n	8005992 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005936:	68f8      	ldr	r0, [r7, #12]
 8005938:	f000 f8ce 	bl	8005ad8 <I2C_IsAcknowledgeFailed>
 800593c:	4603      	mov	r3, r0
 800593e:	2b00      	cmp	r3, #0
 8005940:	d001      	beq.n	8005946 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e02d      	b.n	80059a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800594c:	d021      	beq.n	8005992 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800594e:	f7fe fd5f 	bl	8004410 <HAL_GetTick>
 8005952:	4602      	mov	r2, r0
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	1ad3      	subs	r3, r2, r3
 8005958:	68ba      	ldr	r2, [r7, #8]
 800595a:	429a      	cmp	r2, r3
 800595c:	d302      	bcc.n	8005964 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d116      	bne.n	8005992 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2200      	movs	r2, #0
 8005968:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2220      	movs	r2, #32
 800596e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2200      	movs	r2, #0
 8005976:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597e:	f043 0220 	orr.w	r2, r3, #32
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2200      	movs	r2, #0
 800598a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	e007      	b.n	80059a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	695b      	ldr	r3, [r3, #20]
 8005998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800599c:	2b80      	cmp	r3, #128	; 0x80
 800599e:	d1ca      	bne.n	8005936 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3710      	adds	r7, #16
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}

080059aa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059aa:	b580      	push	{r7, lr}
 80059ac:	b084      	sub	sp, #16
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	60f8      	str	r0, [r7, #12]
 80059b2:	60b9      	str	r1, [r7, #8]
 80059b4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80059b6:	e02d      	b.n	8005a14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80059b8:	68f8      	ldr	r0, [r7, #12]
 80059ba:	f000 f88d 	bl	8005ad8 <I2C_IsAcknowledgeFailed>
 80059be:	4603      	mov	r3, r0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d001      	beq.n	80059c8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e02d      	b.n	8005a24 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059ce:	d021      	beq.n	8005a14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059d0:	f7fe fd1e 	bl	8004410 <HAL_GetTick>
 80059d4:	4602      	mov	r2, r0
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	68ba      	ldr	r2, [r7, #8]
 80059dc:	429a      	cmp	r2, r3
 80059de:	d302      	bcc.n	80059e6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d116      	bne.n	8005a14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2200      	movs	r2, #0
 80059ea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2220      	movs	r2, #32
 80059f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a00:	f043 0220 	orr.w	r2, r3, #32
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	e007      	b.n	8005a24 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	695b      	ldr	r3, [r3, #20]
 8005a1a:	f003 0304 	and.w	r3, r3, #4
 8005a1e:	2b04      	cmp	r3, #4
 8005a20:	d1ca      	bne.n	80059b8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a22:	2300      	movs	r3, #0
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3710      	adds	r7, #16
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b084      	sub	sp, #16
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a38:	e042      	b.n	8005ac0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	695b      	ldr	r3, [r3, #20]
 8005a40:	f003 0310 	and.w	r3, r3, #16
 8005a44:	2b10      	cmp	r3, #16
 8005a46:	d119      	bne.n	8005a7c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f06f 0210 	mvn.w	r2, #16
 8005a50:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2200      	movs	r2, #0
 8005a56:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2220      	movs	r2, #32
 8005a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2200      	movs	r2, #0
 8005a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e029      	b.n	8005ad0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a7c:	f7fe fcc8 	bl	8004410 <HAL_GetTick>
 8005a80:	4602      	mov	r2, r0
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	68ba      	ldr	r2, [r7, #8]
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d302      	bcc.n	8005a92 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d116      	bne.n	8005ac0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2200      	movs	r2, #0
 8005a96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2220      	movs	r2, #32
 8005a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aac:	f043 0220 	orr.w	r2, r3, #32
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	e007      	b.n	8005ad0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	695b      	ldr	r3, [r3, #20]
 8005ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aca:	2b40      	cmp	r3, #64	; 0x40
 8005acc:	d1b5      	bne.n	8005a3a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005ace:	2300      	movs	r3, #0
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3710      	adds	r7, #16
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}

08005ad8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	695b      	ldr	r3, [r3, #20]
 8005ae6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005aee:	d11b      	bne.n	8005b28 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005af8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2220      	movs	r2, #32
 8005b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b14:	f043 0204 	orr.w	r2, r3, #4
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	e000      	b.n	8005b2a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	370c      	adds	r7, #12
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr

08005b36 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005b36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b38:	b08f      	sub	sp, #60	; 0x3c
 8005b3a:	af0a      	add	r7, sp, #40	; 0x28
 8005b3c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d101      	bne.n	8005b48 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e10f      	b.n	8005d68 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d106      	bne.n	8005b68 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f006 fc36 	bl	800c3d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2203      	movs	r2, #3
 8005b6c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d102      	bne.n	8005b82 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4618      	mov	r0, r3
 8005b88:	f003 fb29 	bl	80091de <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	603b      	str	r3, [r7, #0]
 8005b92:	687e      	ldr	r6, [r7, #4]
 8005b94:	466d      	mov	r5, sp
 8005b96:	f106 0410 	add.w	r4, r6, #16
 8005b9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ba0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ba2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005ba6:	e885 0003 	stmia.w	r5, {r0, r1}
 8005baa:	1d33      	adds	r3, r6, #4
 8005bac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005bae:	6838      	ldr	r0, [r7, #0]
 8005bb0:	f003 fa00 	bl	8008fb4 <USB_CoreInit>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d005      	beq.n	8005bc6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2202      	movs	r2, #2
 8005bbe:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e0d0      	b.n	8005d68 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	2100      	movs	r1, #0
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f003 fb17 	bl	8009200 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	73fb      	strb	r3, [r7, #15]
 8005bd6:	e04a      	b.n	8005c6e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005bd8:	7bfa      	ldrb	r2, [r7, #15]
 8005bda:	6879      	ldr	r1, [r7, #4]
 8005bdc:	4613      	mov	r3, r2
 8005bde:	00db      	lsls	r3, r3, #3
 8005be0:	1a9b      	subs	r3, r3, r2
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	440b      	add	r3, r1
 8005be6:	333d      	adds	r3, #61	; 0x3d
 8005be8:	2201      	movs	r2, #1
 8005bea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005bec:	7bfa      	ldrb	r2, [r7, #15]
 8005bee:	6879      	ldr	r1, [r7, #4]
 8005bf0:	4613      	mov	r3, r2
 8005bf2:	00db      	lsls	r3, r3, #3
 8005bf4:	1a9b      	subs	r3, r3, r2
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	440b      	add	r3, r1
 8005bfa:	333c      	adds	r3, #60	; 0x3c
 8005bfc:	7bfa      	ldrb	r2, [r7, #15]
 8005bfe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005c00:	7bfa      	ldrb	r2, [r7, #15]
 8005c02:	7bfb      	ldrb	r3, [r7, #15]
 8005c04:	b298      	uxth	r0, r3
 8005c06:	6879      	ldr	r1, [r7, #4]
 8005c08:	4613      	mov	r3, r2
 8005c0a:	00db      	lsls	r3, r3, #3
 8005c0c:	1a9b      	subs	r3, r3, r2
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	440b      	add	r3, r1
 8005c12:	3342      	adds	r3, #66	; 0x42
 8005c14:	4602      	mov	r2, r0
 8005c16:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005c18:	7bfa      	ldrb	r2, [r7, #15]
 8005c1a:	6879      	ldr	r1, [r7, #4]
 8005c1c:	4613      	mov	r3, r2
 8005c1e:	00db      	lsls	r3, r3, #3
 8005c20:	1a9b      	subs	r3, r3, r2
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	440b      	add	r3, r1
 8005c26:	333f      	adds	r3, #63	; 0x3f
 8005c28:	2200      	movs	r2, #0
 8005c2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005c2c:	7bfa      	ldrb	r2, [r7, #15]
 8005c2e:	6879      	ldr	r1, [r7, #4]
 8005c30:	4613      	mov	r3, r2
 8005c32:	00db      	lsls	r3, r3, #3
 8005c34:	1a9b      	subs	r3, r3, r2
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	440b      	add	r3, r1
 8005c3a:	3344      	adds	r3, #68	; 0x44
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005c40:	7bfa      	ldrb	r2, [r7, #15]
 8005c42:	6879      	ldr	r1, [r7, #4]
 8005c44:	4613      	mov	r3, r2
 8005c46:	00db      	lsls	r3, r3, #3
 8005c48:	1a9b      	subs	r3, r3, r2
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	440b      	add	r3, r1
 8005c4e:	3348      	adds	r3, #72	; 0x48
 8005c50:	2200      	movs	r2, #0
 8005c52:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005c54:	7bfa      	ldrb	r2, [r7, #15]
 8005c56:	6879      	ldr	r1, [r7, #4]
 8005c58:	4613      	mov	r3, r2
 8005c5a:	00db      	lsls	r3, r3, #3
 8005c5c:	1a9b      	subs	r3, r3, r2
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	440b      	add	r3, r1
 8005c62:	3350      	adds	r3, #80	; 0x50
 8005c64:	2200      	movs	r2, #0
 8005c66:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c68:	7bfb      	ldrb	r3, [r7, #15]
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	73fb      	strb	r3, [r7, #15]
 8005c6e:	7bfa      	ldrb	r2, [r7, #15]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d3af      	bcc.n	8005bd8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c78:	2300      	movs	r3, #0
 8005c7a:	73fb      	strb	r3, [r7, #15]
 8005c7c:	e044      	b.n	8005d08 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005c7e:	7bfa      	ldrb	r2, [r7, #15]
 8005c80:	6879      	ldr	r1, [r7, #4]
 8005c82:	4613      	mov	r3, r2
 8005c84:	00db      	lsls	r3, r3, #3
 8005c86:	1a9b      	subs	r3, r3, r2
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	440b      	add	r3, r1
 8005c8c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005c90:	2200      	movs	r2, #0
 8005c92:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005c94:	7bfa      	ldrb	r2, [r7, #15]
 8005c96:	6879      	ldr	r1, [r7, #4]
 8005c98:	4613      	mov	r3, r2
 8005c9a:	00db      	lsls	r3, r3, #3
 8005c9c:	1a9b      	subs	r3, r3, r2
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	440b      	add	r3, r1
 8005ca2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005ca6:	7bfa      	ldrb	r2, [r7, #15]
 8005ca8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005caa:	7bfa      	ldrb	r2, [r7, #15]
 8005cac:	6879      	ldr	r1, [r7, #4]
 8005cae:	4613      	mov	r3, r2
 8005cb0:	00db      	lsls	r3, r3, #3
 8005cb2:	1a9b      	subs	r3, r3, r2
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	440b      	add	r3, r1
 8005cb8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005cc0:	7bfa      	ldrb	r2, [r7, #15]
 8005cc2:	6879      	ldr	r1, [r7, #4]
 8005cc4:	4613      	mov	r3, r2
 8005cc6:	00db      	lsls	r3, r3, #3
 8005cc8:	1a9b      	subs	r3, r3, r2
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	440b      	add	r3, r1
 8005cce:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005cd6:	7bfa      	ldrb	r2, [r7, #15]
 8005cd8:	6879      	ldr	r1, [r7, #4]
 8005cda:	4613      	mov	r3, r2
 8005cdc:	00db      	lsls	r3, r3, #3
 8005cde:	1a9b      	subs	r3, r3, r2
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	440b      	add	r3, r1
 8005ce4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005ce8:	2200      	movs	r2, #0
 8005cea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005cec:	7bfa      	ldrb	r2, [r7, #15]
 8005cee:	6879      	ldr	r1, [r7, #4]
 8005cf0:	4613      	mov	r3, r2
 8005cf2:	00db      	lsls	r3, r3, #3
 8005cf4:	1a9b      	subs	r3, r3, r2
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	440b      	add	r3, r1
 8005cfa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005cfe:	2200      	movs	r2, #0
 8005d00:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d02:	7bfb      	ldrb	r3, [r7, #15]
 8005d04:	3301      	adds	r3, #1
 8005d06:	73fb      	strb	r3, [r7, #15]
 8005d08:	7bfa      	ldrb	r2, [r7, #15]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d3b5      	bcc.n	8005c7e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	603b      	str	r3, [r7, #0]
 8005d18:	687e      	ldr	r6, [r7, #4]
 8005d1a:	466d      	mov	r5, sp
 8005d1c:	f106 0410 	add.w	r4, r6, #16
 8005d20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005d24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005d28:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005d2c:	e885 0003 	stmia.w	r5, {r0, r1}
 8005d30:	1d33      	adds	r3, r6, #4
 8005d32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005d34:	6838      	ldr	r0, [r7, #0]
 8005d36:	f003 faaf 	bl	8009298 <USB_DevInit>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d005      	beq.n	8005d4c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2202      	movs	r2, #2
 8005d44:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e00d      	b.n	8005d68 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4618      	mov	r0, r3
 8005d62:	f004 fb2b 	bl	800a3bc <USB_DevDisconnect>

  return HAL_OK;
 8005d66:	2300      	movs	r3, #0
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3714      	adds	r7, #20
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005d70 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b084      	sub	sp, #16
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d101      	bne.n	8005d8c <HAL_PCD_Start+0x1c>
 8005d88:	2302      	movs	r3, #2
 8005d8a:	e020      	b.n	8005dce <HAL_PCD_Start+0x5e>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d109      	bne.n	8005db0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d005      	beq.n	8005db0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4618      	mov	r0, r3
 8005db6:	f003 fa01 	bl	80091bc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f004 fadb 	bl	800a37a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3710      	adds	r7, #16
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}

08005dd6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005dd6:	b590      	push	{r4, r7, lr}
 8005dd8:	b08d      	sub	sp, #52	; 0x34
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005de4:	6a3b      	ldr	r3, [r7, #32]
 8005de6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4618      	mov	r0, r3
 8005dee:	f004 fb99 	bl	800a524 <USB_GetMode>
 8005df2:	4603      	mov	r3, r0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	f040 839d 	bne.w	8006534 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f004 fafd 	bl	800a3fe <USB_ReadInterrupts>
 8005e04:	4603      	mov	r3, r0
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	f000 8393 	beq.w	8006532 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4618      	mov	r0, r3
 8005e12:	f004 faf4 	bl	800a3fe <USB_ReadInterrupts>
 8005e16:	4603      	mov	r3, r0
 8005e18:	f003 0302 	and.w	r3, r3, #2
 8005e1c:	2b02      	cmp	r3, #2
 8005e1e:	d107      	bne.n	8005e30 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	695a      	ldr	r2, [r3, #20]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f002 0202 	and.w	r2, r2, #2
 8005e2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4618      	mov	r0, r3
 8005e36:	f004 fae2 	bl	800a3fe <USB_ReadInterrupts>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	f003 0310 	and.w	r3, r3, #16
 8005e40:	2b10      	cmp	r3, #16
 8005e42:	d161      	bne.n	8005f08 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	699a      	ldr	r2, [r3, #24]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f022 0210 	bic.w	r2, r2, #16
 8005e52:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8005e54:	6a3b      	ldr	r3, [r7, #32]
 8005e56:	6a1b      	ldr	r3, [r3, #32]
 8005e58:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	f003 020f 	and.w	r2, r3, #15
 8005e60:	4613      	mov	r3, r2
 8005e62:	00db      	lsls	r3, r3, #3
 8005e64:	1a9b      	subs	r3, r3, r2
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	4413      	add	r3, r2
 8005e70:	3304      	adds	r3, #4
 8005e72:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005e74:	69bb      	ldr	r3, [r7, #24]
 8005e76:	0c5b      	lsrs	r3, r3, #17
 8005e78:	f003 030f 	and.w	r3, r3, #15
 8005e7c:	2b02      	cmp	r3, #2
 8005e7e:	d124      	bne.n	8005eca <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005e80:	69ba      	ldr	r2, [r7, #24]
 8005e82:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005e86:	4013      	ands	r3, r2
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d035      	beq.n	8005ef8 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	091b      	lsrs	r3, r3, #4
 8005e94:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005e96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	6a38      	ldr	r0, [r7, #32]
 8005ea0:	f004 f919 	bl	800a0d6 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	68da      	ldr	r2, [r3, #12]
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	091b      	lsrs	r3, r3, #4
 8005eac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005eb0:	441a      	add	r2, r3
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	699a      	ldr	r2, [r3, #24]
 8005eba:	69bb      	ldr	r3, [r7, #24]
 8005ebc:	091b      	lsrs	r3, r3, #4
 8005ebe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ec2:	441a      	add	r2, r3
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	619a      	str	r2, [r3, #24]
 8005ec8:	e016      	b.n	8005ef8 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	0c5b      	lsrs	r3, r3, #17
 8005ece:	f003 030f 	and.w	r3, r3, #15
 8005ed2:	2b06      	cmp	r3, #6
 8005ed4:	d110      	bne.n	8005ef8 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005edc:	2208      	movs	r2, #8
 8005ede:	4619      	mov	r1, r3
 8005ee0:	6a38      	ldr	r0, [r7, #32]
 8005ee2:	f004 f8f8 	bl	800a0d6 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	699a      	ldr	r2, [r3, #24]
 8005eea:	69bb      	ldr	r3, [r7, #24]
 8005eec:	091b      	lsrs	r3, r3, #4
 8005eee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ef2:	441a      	add	r2, r3
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	699a      	ldr	r2, [r3, #24]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f042 0210 	orr.w	r2, r2, #16
 8005f06:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f004 fa76 	bl	800a3fe <USB_ReadInterrupts>
 8005f12:	4603      	mov	r3, r0
 8005f14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f18:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005f1c:	d16e      	bne.n	8005ffc <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4618      	mov	r0, r3
 8005f28:	f004 fa7c 	bl	800a424 <USB_ReadDevAllOutEpInterrupt>
 8005f2c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005f2e:	e062      	b.n	8005ff6 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f32:	f003 0301 	and.w	r3, r3, #1
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d057      	beq.n	8005fea <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f40:	b2d2      	uxtb	r2, r2
 8005f42:	4611      	mov	r1, r2
 8005f44:	4618      	mov	r0, r3
 8005f46:	f004 faa1 	bl	800a48c <USB_ReadDevOutEPInterrupt>
 8005f4a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	f003 0301 	and.w	r3, r3, #1
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d00c      	beq.n	8005f70 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f58:	015a      	lsls	r2, r3, #5
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f62:	461a      	mov	r2, r3
 8005f64:	2301      	movs	r3, #1
 8005f66:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005f68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 fdb0 	bl	8006ad0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	f003 0308 	and.w	r3, r3, #8
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d00c      	beq.n	8005f94 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7c:	015a      	lsls	r2, r3, #5
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	4413      	add	r3, r2
 8005f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f86:	461a      	mov	r2, r3
 8005f88:	2308      	movs	r3, #8
 8005f8a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005f8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f000 feaa 	bl	8006ce8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	f003 0310 	and.w	r3, r3, #16
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d008      	beq.n	8005fb0 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa0:	015a      	lsls	r2, r3, #5
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	4413      	add	r3, r2
 8005fa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005faa:	461a      	mov	r2, r3
 8005fac:	2310      	movs	r3, #16
 8005fae:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	f003 0320 	and.w	r3, r3, #32
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d008      	beq.n	8005fcc <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fbc:	015a      	lsls	r2, r3, #5
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	4413      	add	r3, r2
 8005fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	2320      	movs	r3, #32
 8005fca:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d009      	beq.n	8005fea <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd8:	015a      	lsls	r2, r3, #5
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	4413      	add	r3, r2
 8005fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005fe8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fec:	3301      	adds	r3, #1
 8005fee:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff2:	085b      	lsrs	r3, r3, #1
 8005ff4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d199      	bne.n	8005f30 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4618      	mov	r0, r3
 8006002:	f004 f9fc 	bl	800a3fe <USB_ReadInterrupts>
 8006006:	4603      	mov	r3, r0
 8006008:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800600c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006010:	f040 80c0 	bne.w	8006194 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4618      	mov	r0, r3
 800601a:	f004 fa1d 	bl	800a458 <USB_ReadDevAllInEpInterrupt>
 800601e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8006020:	2300      	movs	r3, #0
 8006022:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8006024:	e0b2      	b.n	800618c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006028:	f003 0301 	and.w	r3, r3, #1
 800602c:	2b00      	cmp	r3, #0
 800602e:	f000 80a7 	beq.w	8006180 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006038:	b2d2      	uxtb	r2, r2
 800603a:	4611      	mov	r1, r2
 800603c:	4618      	mov	r0, r3
 800603e:	f004 fa43 	bl	800a4c8 <USB_ReadDevInEPInterrupt>
 8006042:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	f003 0301 	and.w	r3, r3, #1
 800604a:	2b00      	cmp	r3, #0
 800604c:	d057      	beq.n	80060fe <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800604e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006050:	f003 030f 	and.w	r3, r3, #15
 8006054:	2201      	movs	r2, #1
 8006056:	fa02 f303 	lsl.w	r3, r2, r3
 800605a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006062:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	43db      	mvns	r3, r3
 8006068:	69f9      	ldr	r1, [r7, #28]
 800606a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800606e:	4013      	ands	r3, r2
 8006070:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006074:	015a      	lsls	r2, r3, #5
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	4413      	add	r3, r2
 800607a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800607e:	461a      	mov	r2, r3
 8006080:	2301      	movs	r3, #1
 8006082:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	691b      	ldr	r3, [r3, #16]
 8006088:	2b01      	cmp	r3, #1
 800608a:	d132      	bne.n	80060f2 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800608c:	6879      	ldr	r1, [r7, #4]
 800608e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006090:	4613      	mov	r3, r2
 8006092:	00db      	lsls	r3, r3, #3
 8006094:	1a9b      	subs	r3, r3, r2
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	440b      	add	r3, r1
 800609a:	3348      	adds	r3, #72	; 0x48
 800609c:	6819      	ldr	r1, [r3, #0]
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060a2:	4613      	mov	r3, r2
 80060a4:	00db      	lsls	r3, r3, #3
 80060a6:	1a9b      	subs	r3, r3, r2
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	4403      	add	r3, r0
 80060ac:	3344      	adds	r3, #68	; 0x44
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4419      	add	r1, r3
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060b6:	4613      	mov	r3, r2
 80060b8:	00db      	lsls	r3, r3, #3
 80060ba:	1a9b      	subs	r3, r3, r2
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	4403      	add	r3, r0
 80060c0:	3348      	adds	r3, #72	; 0x48
 80060c2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80060c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d113      	bne.n	80060f2 <HAL_PCD_IRQHandler+0x31c>
 80060ca:	6879      	ldr	r1, [r7, #4]
 80060cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060ce:	4613      	mov	r3, r2
 80060d0:	00db      	lsls	r3, r3, #3
 80060d2:	1a9b      	subs	r3, r3, r2
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	440b      	add	r3, r1
 80060d8:	3350      	adds	r3, #80	; 0x50
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d108      	bne.n	80060f2 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6818      	ldr	r0, [r3, #0]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80060ea:	461a      	mov	r2, r3
 80060ec:	2101      	movs	r1, #1
 80060ee:	f004 fa4b 	bl	800a588 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80060f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	4619      	mov	r1, r3
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f006 f9ec 	bl	800c4d6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	f003 0308 	and.w	r3, r3, #8
 8006104:	2b00      	cmp	r3, #0
 8006106:	d008      	beq.n	800611a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610a:	015a      	lsls	r2, r3, #5
 800610c:	69fb      	ldr	r3, [r7, #28]
 800610e:	4413      	add	r3, r2
 8006110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006114:	461a      	mov	r2, r3
 8006116:	2308      	movs	r3, #8
 8006118:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	f003 0310 	and.w	r3, r3, #16
 8006120:	2b00      	cmp	r3, #0
 8006122:	d008      	beq.n	8006136 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006126:	015a      	lsls	r2, r3, #5
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	4413      	add	r3, r2
 800612c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006130:	461a      	mov	r2, r3
 8006132:	2310      	movs	r3, #16
 8006134:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800613c:	2b00      	cmp	r3, #0
 800613e:	d008      	beq.n	8006152 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006142:	015a      	lsls	r2, r3, #5
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	4413      	add	r3, r2
 8006148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800614c:	461a      	mov	r2, r3
 800614e:	2340      	movs	r3, #64	; 0x40
 8006150:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	f003 0302 	and.w	r3, r3, #2
 8006158:	2b00      	cmp	r3, #0
 800615a:	d008      	beq.n	800616e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800615c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615e:	015a      	lsls	r2, r3, #5
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	4413      	add	r3, r2
 8006164:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006168:	461a      	mov	r2, r3
 800616a:	2302      	movs	r3, #2
 800616c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006174:	2b00      	cmp	r3, #0
 8006176:	d003      	beq.n	8006180 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006178:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 fc1b 	bl	80069b6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006182:	3301      	adds	r3, #1
 8006184:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006188:	085b      	lsrs	r3, r3, #1
 800618a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800618c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618e:	2b00      	cmp	r3, #0
 8006190:	f47f af49 	bne.w	8006026 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4618      	mov	r0, r3
 800619a:	f004 f930 	bl	800a3fe <USB_ReadInterrupts>
 800619e:	4603      	mov	r3, r0
 80061a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061a8:	d122      	bne.n	80061f0 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80061aa:	69fb      	ldr	r3, [r7, #28]
 80061ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	69fa      	ldr	r2, [r7, #28]
 80061b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061b8:	f023 0301 	bic.w	r3, r3, #1
 80061bc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d108      	bne.n	80061da <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80061d0:	2100      	movs	r1, #0
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 fe26 	bl	8006e24 <HAL_PCDEx_LPM_Callback>
 80061d8:	e002      	b.n	80061e0 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f006 f9f2 	bl	800c5c4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	695a      	ldr	r2, [r3, #20]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80061ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4618      	mov	r0, r3
 80061f6:	f004 f902 	bl	800a3fe <USB_ReadInterrupts>
 80061fa:	4603      	mov	r3, r0
 80061fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006200:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006204:	d112      	bne.n	800622c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006206:	69fb      	ldr	r3, [r7, #28]
 8006208:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	f003 0301 	and.w	r3, r3, #1
 8006212:	2b01      	cmp	r3, #1
 8006214:	d102      	bne.n	800621c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f006 f9ae 	bl	800c578 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	695a      	ldr	r2, [r3, #20]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800622a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4618      	mov	r0, r3
 8006232:	f004 f8e4 	bl	800a3fe <USB_ReadInterrupts>
 8006236:	4603      	mov	r3, r0
 8006238:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800623c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006240:	f040 80c7 	bne.w	80063d2 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	69fa      	ldr	r2, [r7, #28]
 800624e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006252:	f023 0301 	bic.w	r3, r3, #1
 8006256:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	2110      	movs	r1, #16
 800625e:	4618      	mov	r0, r3
 8006260:	f003 f97e 	bl	8009560 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006264:	2300      	movs	r3, #0
 8006266:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006268:	e056      	b.n	8006318 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800626a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800626c:	015a      	lsls	r2, r3, #5
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	4413      	add	r3, r2
 8006272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006276:	461a      	mov	r2, r3
 8006278:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800627c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800627e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006280:	015a      	lsls	r2, r3, #5
 8006282:	69fb      	ldr	r3, [r7, #28]
 8006284:	4413      	add	r3, r2
 8006286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800628e:	0151      	lsls	r1, r2, #5
 8006290:	69fa      	ldr	r2, [r7, #28]
 8006292:	440a      	add	r2, r1
 8006294:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006298:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800629c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800629e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a0:	015a      	lsls	r2, r3, #5
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	4413      	add	r3, r2
 80062a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062ae:	0151      	lsls	r1, r2, #5
 80062b0:	69fa      	ldr	r2, [r7, #28]
 80062b2:	440a      	add	r2, r1
 80062b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062b8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80062bc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80062be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c0:	015a      	lsls	r2, r3, #5
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	4413      	add	r3, r2
 80062c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ca:	461a      	mov	r2, r3
 80062cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80062d0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80062d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d4:	015a      	lsls	r2, r3, #5
 80062d6:	69fb      	ldr	r3, [r7, #28]
 80062d8:	4413      	add	r3, r2
 80062da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062e2:	0151      	lsls	r1, r2, #5
 80062e4:	69fa      	ldr	r2, [r7, #28]
 80062e6:	440a      	add	r2, r1
 80062e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062ec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80062f0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80062f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062f4:	015a      	lsls	r2, r3, #5
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	4413      	add	r3, r2
 80062fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006302:	0151      	lsls	r1, r2, #5
 8006304:	69fa      	ldr	r2, [r7, #28]
 8006306:	440a      	add	r2, r1
 8006308:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800630c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006310:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006314:	3301      	adds	r3, #1
 8006316:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800631e:	429a      	cmp	r2, r3
 8006320:	d3a3      	bcc.n	800626a <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006328:	69db      	ldr	r3, [r3, #28]
 800632a:	69fa      	ldr	r2, [r7, #28]
 800632c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006330:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006334:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800633a:	2b00      	cmp	r3, #0
 800633c:	d016      	beq.n	800636c <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006344:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006348:	69fa      	ldr	r2, [r7, #28]
 800634a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800634e:	f043 030b 	orr.w	r3, r3, #11
 8006352:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800635c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800635e:	69fa      	ldr	r2, [r7, #28]
 8006360:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006364:	f043 030b 	orr.w	r3, r3, #11
 8006368:	6453      	str	r3, [r2, #68]	; 0x44
 800636a:	e015      	b.n	8006398 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800636c:	69fb      	ldr	r3, [r7, #28]
 800636e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006372:	695b      	ldr	r3, [r3, #20]
 8006374:	69fa      	ldr	r2, [r7, #28]
 8006376:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800637a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800637e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8006382:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800638a:	691b      	ldr	r3, [r3, #16]
 800638c:	69fa      	ldr	r2, [r7, #28]
 800638e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006392:	f043 030b 	orr.w	r3, r3, #11
 8006396:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	69fa      	ldr	r2, [r7, #28]
 80063a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063a6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80063aa:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6818      	ldr	r0, [r3, #0]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	691b      	ldr	r3, [r3, #16]
 80063b4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80063bc:	461a      	mov	r2, r3
 80063be:	f004 f8e3 	bl	800a588 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	695a      	ldr	r2, [r3, #20]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80063d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4618      	mov	r0, r3
 80063d8:	f004 f811 	bl	800a3fe <USB_ReadInterrupts>
 80063dc:	4603      	mov	r3, r0
 80063de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063e6:	d124      	bne.n	8006432 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4618      	mov	r0, r3
 80063ee:	f004 f8a7 	bl	800a540 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4618      	mov	r0, r3
 80063f8:	f003 f90f 	bl	800961a <USB_GetDevSpeed>
 80063fc:	4603      	mov	r3, r0
 80063fe:	461a      	mov	r2, r3
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681c      	ldr	r4, [r3, #0]
 8006408:	f001 f97a 	bl	8007700 <HAL_RCC_GetHCLKFreq>
 800640c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006412:	b2db      	uxtb	r3, r3
 8006414:	461a      	mov	r2, r3
 8006416:	4620      	mov	r0, r4
 8006418:	f002 fe2e 	bl	8009078 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f006 f882 	bl	800c526 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	695a      	ldr	r2, [r3, #20]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006430:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4618      	mov	r0, r3
 8006438:	f003 ffe1 	bl	800a3fe <USB_ReadInterrupts>
 800643c:	4603      	mov	r3, r0
 800643e:	f003 0308 	and.w	r3, r3, #8
 8006442:	2b08      	cmp	r3, #8
 8006444:	d10a      	bne.n	800645c <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f006 f85f 	bl	800c50a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	695a      	ldr	r2, [r3, #20]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f002 0208 	and.w	r2, r2, #8
 800645a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4618      	mov	r0, r3
 8006462:	f003 ffcc 	bl	800a3fe <USB_ReadInterrupts>
 8006466:	4603      	mov	r3, r0
 8006468:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800646c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006470:	d10f      	bne.n	8006492 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006472:	2300      	movs	r3, #0
 8006474:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006478:	b2db      	uxtb	r3, r3
 800647a:	4619      	mov	r1, r3
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f006 f8c1 	bl	800c604 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	695a      	ldr	r2, [r3, #20]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006490:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4618      	mov	r0, r3
 8006498:	f003 ffb1 	bl	800a3fe <USB_ReadInterrupts>
 800649c:	4603      	mov	r3, r0
 800649e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80064a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80064a6:	d10f      	bne.n	80064c8 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80064a8:	2300      	movs	r3, #0
 80064aa:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80064ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	4619      	mov	r1, r3
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f006 f894 	bl	800c5e0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	695a      	ldr	r2, [r3, #20]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80064c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4618      	mov	r0, r3
 80064ce:	f003 ff96 	bl	800a3fe <USB_ReadInterrupts>
 80064d2:	4603      	mov	r3, r0
 80064d4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80064d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064dc:	d10a      	bne.n	80064f4 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f006 f8a2 	bl	800c628 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	695a      	ldr	r2, [r3, #20]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80064f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4618      	mov	r0, r3
 80064fa:	f003 ff80 	bl	800a3fe <USB_ReadInterrupts>
 80064fe:	4603      	mov	r3, r0
 8006500:	f003 0304 	and.w	r3, r3, #4
 8006504:	2b04      	cmp	r3, #4
 8006506:	d115      	bne.n	8006534 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	f003 0304 	and.w	r3, r3, #4
 8006516:	2b00      	cmp	r3, #0
 8006518:	d002      	beq.n	8006520 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f006 f892 	bl	800c644 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	6859      	ldr	r1, [r3, #4]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	69ba      	ldr	r2, [r7, #24]
 800652c:	430a      	orrs	r2, r1
 800652e:	605a      	str	r2, [r3, #4]
 8006530:	e000      	b.n	8006534 <HAL_PCD_IRQHandler+0x75e>
      return;
 8006532:	bf00      	nop
    }
  }
}
 8006534:	3734      	adds	r7, #52	; 0x34
 8006536:	46bd      	mov	sp, r7
 8006538:	bd90      	pop	{r4, r7, pc}

0800653a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800653a:	b580      	push	{r7, lr}
 800653c:	b082      	sub	sp, #8
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
 8006542:	460b      	mov	r3, r1
 8006544:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800654c:	2b01      	cmp	r3, #1
 800654e:	d101      	bne.n	8006554 <HAL_PCD_SetAddress+0x1a>
 8006550:	2302      	movs	r3, #2
 8006552:	e013      	b.n	800657c <HAL_PCD_SetAddress+0x42>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	78fa      	ldrb	r2, [r7, #3]
 8006560:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	78fa      	ldrb	r2, [r7, #3]
 800656a:	4611      	mov	r1, r2
 800656c:	4618      	mov	r0, r3
 800656e:	f003 fede 	bl	800a32e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800657a:	2300      	movs	r3, #0
}
 800657c:	4618      	mov	r0, r3
 800657e:	3708      	adds	r7, #8
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b084      	sub	sp, #16
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	4608      	mov	r0, r1
 800658e:	4611      	mov	r1, r2
 8006590:	461a      	mov	r2, r3
 8006592:	4603      	mov	r3, r0
 8006594:	70fb      	strb	r3, [r7, #3]
 8006596:	460b      	mov	r3, r1
 8006598:	803b      	strh	r3, [r7, #0]
 800659a:	4613      	mov	r3, r2
 800659c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800659e:	2300      	movs	r3, #0
 80065a0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80065a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	da0f      	bge.n	80065ca <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80065aa:	78fb      	ldrb	r3, [r7, #3]
 80065ac:	f003 020f 	and.w	r2, r3, #15
 80065b0:	4613      	mov	r3, r2
 80065b2:	00db      	lsls	r3, r3, #3
 80065b4:	1a9b      	subs	r3, r3, r2
 80065b6:	009b      	lsls	r3, r3, #2
 80065b8:	3338      	adds	r3, #56	; 0x38
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	4413      	add	r3, r2
 80065be:	3304      	adds	r3, #4
 80065c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2201      	movs	r2, #1
 80065c6:	705a      	strb	r2, [r3, #1]
 80065c8:	e00f      	b.n	80065ea <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80065ca:	78fb      	ldrb	r3, [r7, #3]
 80065cc:	f003 020f 	and.w	r2, r3, #15
 80065d0:	4613      	mov	r3, r2
 80065d2:	00db      	lsls	r3, r3, #3
 80065d4:	1a9b      	subs	r3, r3, r2
 80065d6:	009b      	lsls	r3, r3, #2
 80065d8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	4413      	add	r3, r2
 80065e0:	3304      	adds	r3, #4
 80065e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2200      	movs	r2, #0
 80065e8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80065ea:	78fb      	ldrb	r3, [r7, #3]
 80065ec:	f003 030f 	and.w	r3, r3, #15
 80065f0:	b2da      	uxtb	r2, r3
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80065f6:	883a      	ldrh	r2, [r7, #0]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	78ba      	ldrb	r2, [r7, #2]
 8006600:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	785b      	ldrb	r3, [r3, #1]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d004      	beq.n	8006614 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	b29a      	uxth	r2, r3
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006614:	78bb      	ldrb	r3, [r7, #2]
 8006616:	2b02      	cmp	r3, #2
 8006618:	d102      	bne.n	8006620 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2200      	movs	r2, #0
 800661e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006626:	2b01      	cmp	r3, #1
 8006628:	d101      	bne.n	800662e <HAL_PCD_EP_Open+0xaa>
 800662a:	2302      	movs	r3, #2
 800662c:	e00e      	b.n	800664c <HAL_PCD_EP_Open+0xc8>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2201      	movs	r2, #1
 8006632:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	68f9      	ldr	r1, [r7, #12]
 800663c:	4618      	mov	r0, r3
 800663e:	f003 f811 	bl	8009664 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2200      	movs	r2, #0
 8006646:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800664a:	7afb      	ldrb	r3, [r7, #11]
}
 800664c:	4618      	mov	r0, r3
 800664e:	3710      	adds	r7, #16
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	460b      	mov	r3, r1
 800665e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006660:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006664:	2b00      	cmp	r3, #0
 8006666:	da0f      	bge.n	8006688 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006668:	78fb      	ldrb	r3, [r7, #3]
 800666a:	f003 020f 	and.w	r2, r3, #15
 800666e:	4613      	mov	r3, r2
 8006670:	00db      	lsls	r3, r3, #3
 8006672:	1a9b      	subs	r3, r3, r2
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	3338      	adds	r3, #56	; 0x38
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	4413      	add	r3, r2
 800667c:	3304      	adds	r3, #4
 800667e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2201      	movs	r2, #1
 8006684:	705a      	strb	r2, [r3, #1]
 8006686:	e00f      	b.n	80066a8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006688:	78fb      	ldrb	r3, [r7, #3]
 800668a:	f003 020f 	and.w	r2, r3, #15
 800668e:	4613      	mov	r3, r2
 8006690:	00db      	lsls	r3, r3, #3
 8006692:	1a9b      	subs	r3, r3, r2
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	4413      	add	r3, r2
 800669e:	3304      	adds	r3, #4
 80066a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2200      	movs	r2, #0
 80066a6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80066a8:	78fb      	ldrb	r3, [r7, #3]
 80066aa:	f003 030f 	and.w	r3, r3, #15
 80066ae:	b2da      	uxtb	r2, r3
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d101      	bne.n	80066c2 <HAL_PCD_EP_Close+0x6e>
 80066be:	2302      	movs	r3, #2
 80066c0:	e00e      	b.n	80066e0 <HAL_PCD_EP_Close+0x8c>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2201      	movs	r2, #1
 80066c6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68f9      	ldr	r1, [r7, #12]
 80066d0:	4618      	mov	r0, r3
 80066d2:	f003 f84f 	bl	8009774 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3710      	adds	r7, #16
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b086      	sub	sp, #24
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	607a      	str	r2, [r7, #4]
 80066f2:	603b      	str	r3, [r7, #0]
 80066f4:	460b      	mov	r3, r1
 80066f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80066f8:	7afb      	ldrb	r3, [r7, #11]
 80066fa:	f003 020f 	and.w	r2, r3, #15
 80066fe:	4613      	mov	r3, r2
 8006700:	00db      	lsls	r3, r3, #3
 8006702:	1a9b      	subs	r3, r3, r2
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800670a:	68fa      	ldr	r2, [r7, #12]
 800670c:	4413      	add	r3, r2
 800670e:	3304      	adds	r3, #4
 8006710:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	683a      	ldr	r2, [r7, #0]
 800671c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	2200      	movs	r2, #0
 8006722:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	2200      	movs	r2, #0
 8006728:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800672a:	7afb      	ldrb	r3, [r7, #11]
 800672c:	f003 030f 	and.w	r3, r3, #15
 8006730:	b2da      	uxtb	r2, r3
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	691b      	ldr	r3, [r3, #16]
 800673a:	2b01      	cmp	r3, #1
 800673c:	d102      	bne.n	8006744 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006744:	7afb      	ldrb	r3, [r7, #11]
 8006746:	f003 030f 	and.w	r3, r3, #15
 800674a:	2b00      	cmp	r3, #0
 800674c:	d109      	bne.n	8006762 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	6818      	ldr	r0, [r3, #0]
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	691b      	ldr	r3, [r3, #16]
 8006756:	b2db      	uxtb	r3, r3
 8006758:	461a      	mov	r2, r3
 800675a:	6979      	ldr	r1, [r7, #20]
 800675c:	f003 fb2a 	bl	8009db4 <USB_EP0StartXfer>
 8006760:	e008      	b.n	8006774 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	6818      	ldr	r0, [r3, #0]
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	691b      	ldr	r3, [r3, #16]
 800676a:	b2db      	uxtb	r3, r3
 800676c:	461a      	mov	r2, r3
 800676e:	6979      	ldr	r1, [r7, #20]
 8006770:	f003 f8dc 	bl	800992c <USB_EPStartXfer>
  }

  return HAL_OK;
 8006774:	2300      	movs	r3, #0
}
 8006776:	4618      	mov	r0, r3
 8006778:	3718      	adds	r7, #24
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}

0800677e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800677e:	b480      	push	{r7}
 8006780:	b083      	sub	sp, #12
 8006782:	af00      	add	r7, sp, #0
 8006784:	6078      	str	r0, [r7, #4]
 8006786:	460b      	mov	r3, r1
 8006788:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800678a:	78fb      	ldrb	r3, [r7, #3]
 800678c:	f003 020f 	and.w	r2, r3, #15
 8006790:	6879      	ldr	r1, [r7, #4]
 8006792:	4613      	mov	r3, r2
 8006794:	00db      	lsls	r3, r3, #3
 8006796:	1a9b      	subs	r3, r3, r2
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	440b      	add	r3, r1
 800679c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80067a0:	681b      	ldr	r3, [r3, #0]
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	370c      	adds	r7, #12
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr

080067ae <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80067ae:	b580      	push	{r7, lr}
 80067b0:	b086      	sub	sp, #24
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	60f8      	str	r0, [r7, #12]
 80067b6:	607a      	str	r2, [r7, #4]
 80067b8:	603b      	str	r3, [r7, #0]
 80067ba:	460b      	mov	r3, r1
 80067bc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80067be:	7afb      	ldrb	r3, [r7, #11]
 80067c0:	f003 020f 	and.w	r2, r3, #15
 80067c4:	4613      	mov	r3, r2
 80067c6:	00db      	lsls	r3, r3, #3
 80067c8:	1a9b      	subs	r3, r3, r2
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	3338      	adds	r3, #56	; 0x38
 80067ce:	68fa      	ldr	r2, [r7, #12]
 80067d0:	4413      	add	r3, r2
 80067d2:	3304      	adds	r3, #4
 80067d4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	683a      	ldr	r2, [r7, #0]
 80067e0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	2200      	movs	r2, #0
 80067e6:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	2201      	movs	r2, #1
 80067ec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80067ee:	7afb      	ldrb	r3, [r7, #11]
 80067f0:	f003 030f 	and.w	r3, r3, #15
 80067f4:	b2da      	uxtb	r2, r3
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	691b      	ldr	r3, [r3, #16]
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d102      	bne.n	8006808 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006808:	7afb      	ldrb	r3, [r7, #11]
 800680a:	f003 030f 	and.w	r3, r3, #15
 800680e:	2b00      	cmp	r3, #0
 8006810:	d109      	bne.n	8006826 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	6818      	ldr	r0, [r3, #0]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	691b      	ldr	r3, [r3, #16]
 800681a:	b2db      	uxtb	r3, r3
 800681c:	461a      	mov	r2, r3
 800681e:	6979      	ldr	r1, [r7, #20]
 8006820:	f003 fac8 	bl	8009db4 <USB_EP0StartXfer>
 8006824:	e008      	b.n	8006838 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	6818      	ldr	r0, [r3, #0]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	691b      	ldr	r3, [r3, #16]
 800682e:	b2db      	uxtb	r3, r3
 8006830:	461a      	mov	r2, r3
 8006832:	6979      	ldr	r1, [r7, #20]
 8006834:	f003 f87a 	bl	800992c <USB_EPStartXfer>
  }

  return HAL_OK;
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	3718      	adds	r7, #24
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}

08006842 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006842:	b580      	push	{r7, lr}
 8006844:	b084      	sub	sp, #16
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]
 800684a:	460b      	mov	r3, r1
 800684c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800684e:	78fb      	ldrb	r3, [r7, #3]
 8006850:	f003 020f 	and.w	r2, r3, #15
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	429a      	cmp	r2, r3
 800685a:	d901      	bls.n	8006860 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	e050      	b.n	8006902 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006860:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006864:	2b00      	cmp	r3, #0
 8006866:	da0f      	bge.n	8006888 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006868:	78fb      	ldrb	r3, [r7, #3]
 800686a:	f003 020f 	and.w	r2, r3, #15
 800686e:	4613      	mov	r3, r2
 8006870:	00db      	lsls	r3, r3, #3
 8006872:	1a9b      	subs	r3, r3, r2
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	3338      	adds	r3, #56	; 0x38
 8006878:	687a      	ldr	r2, [r7, #4]
 800687a:	4413      	add	r3, r2
 800687c:	3304      	adds	r3, #4
 800687e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2201      	movs	r2, #1
 8006884:	705a      	strb	r2, [r3, #1]
 8006886:	e00d      	b.n	80068a4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006888:	78fa      	ldrb	r2, [r7, #3]
 800688a:	4613      	mov	r3, r2
 800688c:	00db      	lsls	r3, r3, #3
 800688e:	1a9b      	subs	r3, r3, r2
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	4413      	add	r3, r2
 800689a:	3304      	adds	r3, #4
 800689c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2200      	movs	r2, #0
 80068a2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2201      	movs	r2, #1
 80068a8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80068aa:	78fb      	ldrb	r3, [r7, #3]
 80068ac:	f003 030f 	and.w	r3, r3, #15
 80068b0:	b2da      	uxtb	r2, r3
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d101      	bne.n	80068c4 <HAL_PCD_EP_SetStall+0x82>
 80068c0:	2302      	movs	r3, #2
 80068c2:	e01e      	b.n	8006902 <HAL_PCD_EP_SetStall+0xc0>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2201      	movs	r2, #1
 80068c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	68f9      	ldr	r1, [r7, #12]
 80068d2:	4618      	mov	r0, r3
 80068d4:	f003 fc57 	bl	800a186 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80068d8:	78fb      	ldrb	r3, [r7, #3]
 80068da:	f003 030f 	and.w	r3, r3, #15
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d10a      	bne.n	80068f8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6818      	ldr	r0, [r3, #0]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	691b      	ldr	r3, [r3, #16]
 80068ea:	b2d9      	uxtb	r1, r3
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80068f2:	461a      	mov	r2, r3
 80068f4:	f003 fe48 	bl	800a588 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006900:	2300      	movs	r3, #0
}
 8006902:	4618      	mov	r0, r3
 8006904:	3710      	adds	r7, #16
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}

0800690a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800690a:	b580      	push	{r7, lr}
 800690c:	b084      	sub	sp, #16
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
 8006912:	460b      	mov	r3, r1
 8006914:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006916:	78fb      	ldrb	r3, [r7, #3]
 8006918:	f003 020f 	and.w	r2, r3, #15
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	429a      	cmp	r2, r3
 8006922:	d901      	bls.n	8006928 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	e042      	b.n	80069ae <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006928:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800692c:	2b00      	cmp	r3, #0
 800692e:	da0f      	bge.n	8006950 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006930:	78fb      	ldrb	r3, [r7, #3]
 8006932:	f003 020f 	and.w	r2, r3, #15
 8006936:	4613      	mov	r3, r2
 8006938:	00db      	lsls	r3, r3, #3
 800693a:	1a9b      	subs	r3, r3, r2
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	3338      	adds	r3, #56	; 0x38
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	4413      	add	r3, r2
 8006944:	3304      	adds	r3, #4
 8006946:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2201      	movs	r2, #1
 800694c:	705a      	strb	r2, [r3, #1]
 800694e:	e00f      	b.n	8006970 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006950:	78fb      	ldrb	r3, [r7, #3]
 8006952:	f003 020f 	and.w	r2, r3, #15
 8006956:	4613      	mov	r3, r2
 8006958:	00db      	lsls	r3, r3, #3
 800695a:	1a9b      	subs	r3, r3, r2
 800695c:	009b      	lsls	r3, r3, #2
 800695e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	4413      	add	r3, r2
 8006966:	3304      	adds	r3, #4
 8006968:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2200      	movs	r2, #0
 800696e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2200      	movs	r2, #0
 8006974:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006976:	78fb      	ldrb	r3, [r7, #3]
 8006978:	f003 030f 	and.w	r3, r3, #15
 800697c:	b2da      	uxtb	r2, r3
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006988:	2b01      	cmp	r3, #1
 800698a:	d101      	bne.n	8006990 <HAL_PCD_EP_ClrStall+0x86>
 800698c:	2302      	movs	r3, #2
 800698e:	e00e      	b.n	80069ae <HAL_PCD_EP_ClrStall+0xa4>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2201      	movs	r2, #1
 8006994:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	68f9      	ldr	r1, [r7, #12]
 800699e:	4618      	mov	r0, r3
 80069a0:	f003 fc5f 	bl	800a262 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2200      	movs	r2, #0
 80069a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80069ac:	2300      	movs	r3, #0
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3710      	adds	r7, #16
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}

080069b6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80069b6:	b580      	push	{r7, lr}
 80069b8:	b08a      	sub	sp, #40	; 0x28
 80069ba:	af02      	add	r7, sp, #8
 80069bc:	6078      	str	r0, [r7, #4]
 80069be:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80069ca:	683a      	ldr	r2, [r7, #0]
 80069cc:	4613      	mov	r3, r2
 80069ce:	00db      	lsls	r3, r3, #3
 80069d0:	1a9b      	subs	r3, r3, r2
 80069d2:	009b      	lsls	r3, r3, #2
 80069d4:	3338      	adds	r3, #56	; 0x38
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	4413      	add	r3, r2
 80069da:	3304      	adds	r3, #4
 80069dc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	699a      	ldr	r2, [r3, #24]
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	695b      	ldr	r3, [r3, #20]
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d901      	bls.n	80069ee <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	e06c      	b.n	8006ac8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	695a      	ldr	r2, [r3, #20]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	699b      	ldr	r3, [r3, #24]
 80069f6:	1ad3      	subs	r3, r2, r3
 80069f8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	69fa      	ldr	r2, [r7, #28]
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d902      	bls.n	8006a0a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006a0a:	69fb      	ldr	r3, [r7, #28]
 8006a0c:	3303      	adds	r3, #3
 8006a0e:	089b      	lsrs	r3, r3, #2
 8006a10:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006a12:	e02b      	b.n	8006a6c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	695a      	ldr	r2, [r3, #20]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	699b      	ldr	r3, [r3, #24]
 8006a1c:	1ad3      	subs	r3, r2, r3
 8006a1e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	69fa      	ldr	r2, [r7, #28]
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d902      	bls.n	8006a30 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006a30:	69fb      	ldr	r3, [r7, #28]
 8006a32:	3303      	adds	r3, #3
 8006a34:	089b      	lsrs	r3, r3, #2
 8006a36:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	68d9      	ldr	r1, [r3, #12]
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	b2da      	uxtb	r2, r3
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006a48:	b2db      	uxtb	r3, r3
 8006a4a:	9300      	str	r3, [sp, #0]
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	6978      	ldr	r0, [r7, #20]
 8006a50:	f003 fb03 	bl	800a05a <USB_WritePacket>

    ep->xfer_buff  += len;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	68da      	ldr	r2, [r3, #12]
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	441a      	add	r2, r3
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	699a      	ldr	r2, [r3, #24]
 8006a64:	69fb      	ldr	r3, [r7, #28]
 8006a66:	441a      	add	r2, r3
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	015a      	lsls	r2, r3, #5
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	4413      	add	r3, r2
 8006a74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a78:	699b      	ldr	r3, [r3, #24]
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	69ba      	ldr	r2, [r7, #24]
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d809      	bhi.n	8006a96 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	699a      	ldr	r2, [r3, #24]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d203      	bcs.n	8006a96 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	695b      	ldr	r3, [r3, #20]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d1be      	bne.n	8006a14 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	695a      	ldr	r2, [r3, #20]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	699b      	ldr	r3, [r3, #24]
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d811      	bhi.n	8006ac6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	f003 030f 	and.w	r3, r3, #15
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8006aae:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ab6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	43db      	mvns	r3, r3
 8006abc:	6939      	ldr	r1, [r7, #16]
 8006abe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ac2:	4013      	ands	r3, r2
 8006ac4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006ac6:	2300      	movs	r3, #0
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3720      	adds	r7, #32
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b086      	sub	sp, #24
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	333c      	adds	r3, #60	; 0x3c
 8006ae8:	3304      	adds	r3, #4
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	015a      	lsls	r2, r3, #5
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	4413      	add	r3, r2
 8006af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	691b      	ldr	r3, [r3, #16]
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	f040 80a0 	bne.w	8006c48 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	f003 0308 	and.w	r3, r3, #8
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d015      	beq.n	8006b3e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	4a72      	ldr	r2, [pc, #456]	; (8006ce0 <PCD_EP_OutXfrComplete_int+0x210>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	f240 80dd 	bls.w	8006cd6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	f000 80d7 	beq.w	8006cd6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	015a      	lsls	r2, r3, #5
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	4413      	add	r3, r2
 8006b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b34:	461a      	mov	r2, r3
 8006b36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b3a:	6093      	str	r3, [r2, #8]
 8006b3c:	e0cb      	b.n	8006cd6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	f003 0320 	and.w	r3, r3, #32
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d009      	beq.n	8006b5c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	015a      	lsls	r2, r3, #5
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	4413      	add	r3, r2
 8006b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b54:	461a      	mov	r2, r3
 8006b56:	2320      	movs	r3, #32
 8006b58:	6093      	str	r3, [r2, #8]
 8006b5a:	e0bc      	b.n	8006cd6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	f040 80b7 	bne.w	8006cd6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	4a5d      	ldr	r2, [pc, #372]	; (8006ce0 <PCD_EP_OutXfrComplete_int+0x210>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d90f      	bls.n	8006b90 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d00a      	beq.n	8006b90 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	015a      	lsls	r2, r3, #5
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	4413      	add	r3, r2
 8006b82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b86:	461a      	mov	r2, r3
 8006b88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b8c:	6093      	str	r3, [r2, #8]
 8006b8e:	e0a2      	b.n	8006cd6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8006b90:	6879      	ldr	r1, [r7, #4]
 8006b92:	683a      	ldr	r2, [r7, #0]
 8006b94:	4613      	mov	r3, r2
 8006b96:	00db      	lsls	r3, r3, #3
 8006b98:	1a9b      	subs	r3, r3, r2
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	440b      	add	r3, r1
 8006b9e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006ba2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	0159      	lsls	r1, r3, #5
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	440b      	add	r3, r1
 8006bac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bb0:	691b      	ldr	r3, [r3, #16]
 8006bb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8006bb6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	683a      	ldr	r2, [r7, #0]
 8006bbc:	4613      	mov	r3, r2
 8006bbe:	00db      	lsls	r3, r3, #3
 8006bc0:	1a9b      	subs	r3, r3, r2
 8006bc2:	009b      	lsls	r3, r3, #2
 8006bc4:	4403      	add	r3, r0
 8006bc6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006bca:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8006bcc:	6879      	ldr	r1, [r7, #4]
 8006bce:	683a      	ldr	r2, [r7, #0]
 8006bd0:	4613      	mov	r3, r2
 8006bd2:	00db      	lsls	r3, r3, #3
 8006bd4:	1a9b      	subs	r3, r3, r2
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	440b      	add	r3, r1
 8006bda:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006bde:	6819      	ldr	r1, [r3, #0]
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	683a      	ldr	r2, [r7, #0]
 8006be4:	4613      	mov	r3, r2
 8006be6:	00db      	lsls	r3, r3, #3
 8006be8:	1a9b      	subs	r3, r3, r2
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	4403      	add	r3, r0
 8006bee:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4419      	add	r1, r3
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	683a      	ldr	r2, [r7, #0]
 8006bfa:	4613      	mov	r3, r2
 8006bfc:	00db      	lsls	r3, r3, #3
 8006bfe:	1a9b      	subs	r3, r3, r2
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	4403      	add	r3, r0
 8006c04:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006c08:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d114      	bne.n	8006c3a <PCD_EP_OutXfrComplete_int+0x16a>
 8006c10:	6879      	ldr	r1, [r7, #4]
 8006c12:	683a      	ldr	r2, [r7, #0]
 8006c14:	4613      	mov	r3, r2
 8006c16:	00db      	lsls	r3, r3, #3
 8006c18:	1a9b      	subs	r3, r3, r2
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	440b      	add	r3, r1
 8006c1e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d108      	bne.n	8006c3a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6818      	ldr	r0, [r3, #0]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006c32:	461a      	mov	r2, r3
 8006c34:	2101      	movs	r1, #1
 8006c36:	f003 fca7 	bl	800a588 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	4619      	mov	r1, r3
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f005 fc2d 	bl	800c4a0 <HAL_PCD_DataOutStageCallback>
 8006c46:	e046      	b.n	8006cd6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	4a26      	ldr	r2, [pc, #152]	; (8006ce4 <PCD_EP_OutXfrComplete_int+0x214>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d124      	bne.n	8006c9a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d00a      	beq.n	8006c70 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	015a      	lsls	r2, r3, #5
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	4413      	add	r3, r2
 8006c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c66:	461a      	mov	r2, r3
 8006c68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c6c:	6093      	str	r3, [r2, #8]
 8006c6e:	e032      	b.n	8006cd6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	f003 0320 	and.w	r3, r3, #32
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d008      	beq.n	8006c8c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	015a      	lsls	r2, r3, #5
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	4413      	add	r3, r2
 8006c82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c86:	461a      	mov	r2, r3
 8006c88:	2320      	movs	r3, #32
 8006c8a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	4619      	mov	r1, r3
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f005 fc04 	bl	800c4a0 <HAL_PCD_DataOutStageCallback>
 8006c98:	e01d      	b.n	8006cd6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d114      	bne.n	8006cca <PCD_EP_OutXfrComplete_int+0x1fa>
 8006ca0:	6879      	ldr	r1, [r7, #4]
 8006ca2:	683a      	ldr	r2, [r7, #0]
 8006ca4:	4613      	mov	r3, r2
 8006ca6:	00db      	lsls	r3, r3, #3
 8006ca8:	1a9b      	subs	r3, r3, r2
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	440b      	add	r3, r1
 8006cae:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d108      	bne.n	8006cca <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6818      	ldr	r0, [r3, #0]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	2100      	movs	r1, #0
 8006cc6:	f003 fc5f 	bl	800a588 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	4619      	mov	r1, r3
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f005 fbe5 	bl	800c4a0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006cd6:	2300      	movs	r3, #0
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3718      	adds	r7, #24
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}
 8006ce0:	4f54300a 	.word	0x4f54300a
 8006ce4:	4f54310a 	.word	0x4f54310a

08006ce8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b086      	sub	sp, #24
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	333c      	adds	r3, #60	; 0x3c
 8006d00:	3304      	adds	r3, #4
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	015a      	lsls	r2, r3, #5
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	4413      	add	r3, r2
 8006d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	4a15      	ldr	r2, [pc, #84]	; (8006d70 <PCD_EP_OutSetupPacket_int+0x88>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d90e      	bls.n	8006d3c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d009      	beq.n	8006d3c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	015a      	lsls	r2, r3, #5
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	4413      	add	r3, r2
 8006d30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d34:	461a      	mov	r2, r3
 8006d36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d3a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f005 fb9d 	bl	800c47c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	4a0a      	ldr	r2, [pc, #40]	; (8006d70 <PCD_EP_OutSetupPacket_int+0x88>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d90c      	bls.n	8006d64 <PCD_EP_OutSetupPacket_int+0x7c>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	691b      	ldr	r3, [r3, #16]
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	d108      	bne.n	8006d64 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6818      	ldr	r0, [r3, #0]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	2101      	movs	r1, #1
 8006d60:	f003 fc12 	bl	800a588 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006d64:	2300      	movs	r3, #0
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3718      	adds	r7, #24
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}
 8006d6e:	bf00      	nop
 8006d70:	4f54300a 	.word	0x4f54300a

08006d74 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b085      	sub	sp, #20
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	460b      	mov	r3, r1
 8006d7e:	70fb      	strb	r3, [r7, #3]
 8006d80:	4613      	mov	r3, r2
 8006d82:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d8a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006d8c:	78fb      	ldrb	r3, [r7, #3]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d107      	bne.n	8006da2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006d92:	883b      	ldrh	r3, [r7, #0]
 8006d94:	0419      	lsls	r1, r3, #16
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	68ba      	ldr	r2, [r7, #8]
 8006d9c:	430a      	orrs	r2, r1
 8006d9e:	629a      	str	r2, [r3, #40]	; 0x28
 8006da0:	e028      	b.n	8006df4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006da8:	0c1b      	lsrs	r3, r3, #16
 8006daa:	68ba      	ldr	r2, [r7, #8]
 8006dac:	4413      	add	r3, r2
 8006dae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006db0:	2300      	movs	r3, #0
 8006db2:	73fb      	strb	r3, [r7, #15]
 8006db4:	e00d      	b.n	8006dd2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681a      	ldr	r2, [r3, #0]
 8006dba:	7bfb      	ldrb	r3, [r7, #15]
 8006dbc:	3340      	adds	r3, #64	; 0x40
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	4413      	add	r3, r2
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	0c1b      	lsrs	r3, r3, #16
 8006dc6:	68ba      	ldr	r2, [r7, #8]
 8006dc8:	4413      	add	r3, r2
 8006dca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006dcc:	7bfb      	ldrb	r3, [r7, #15]
 8006dce:	3301      	adds	r3, #1
 8006dd0:	73fb      	strb	r3, [r7, #15]
 8006dd2:	7bfa      	ldrb	r2, [r7, #15]
 8006dd4:	78fb      	ldrb	r3, [r7, #3]
 8006dd6:	3b01      	subs	r3, #1
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d3ec      	bcc.n	8006db6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006ddc:	883b      	ldrh	r3, [r7, #0]
 8006dde:	0418      	lsls	r0, r3, #16
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6819      	ldr	r1, [r3, #0]
 8006de4:	78fb      	ldrb	r3, [r7, #3]
 8006de6:	3b01      	subs	r3, #1
 8006de8:	68ba      	ldr	r2, [r7, #8]
 8006dea:	4302      	orrs	r2, r0
 8006dec:	3340      	adds	r3, #64	; 0x40
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	440b      	add	r3, r1
 8006df2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3714      	adds	r7, #20
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e00:	4770      	bx	lr

08006e02 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006e02:	b480      	push	{r7}
 8006e04:	b083      	sub	sp, #12
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	6078      	str	r0, [r7, #4]
 8006e0a:	460b      	mov	r3, r1
 8006e0c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	887a      	ldrh	r2, [r7, #2]
 8006e14:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006e16:	2300      	movs	r3, #0
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	370c      	adds	r7, #12
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr

08006e24 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b083      	sub	sp, #12
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	460b      	mov	r3, r1
 8006e2e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006e30:	bf00      	nop
 8006e32:	370c      	adds	r7, #12
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b086      	sub	sp, #24
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d101      	bne.n	8006e4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e267      	b.n	800731e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f003 0301 	and.w	r3, r3, #1
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d075      	beq.n	8006f46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006e5a:	4b88      	ldr	r3, [pc, #544]	; (800707c <HAL_RCC_OscConfig+0x240>)
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	f003 030c 	and.w	r3, r3, #12
 8006e62:	2b04      	cmp	r3, #4
 8006e64:	d00c      	beq.n	8006e80 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006e66:	4b85      	ldr	r3, [pc, #532]	; (800707c <HAL_RCC_OscConfig+0x240>)
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006e6e:	2b08      	cmp	r3, #8
 8006e70:	d112      	bne.n	8006e98 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006e72:	4b82      	ldr	r3, [pc, #520]	; (800707c <HAL_RCC_OscConfig+0x240>)
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e7e:	d10b      	bne.n	8006e98 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e80:	4b7e      	ldr	r3, [pc, #504]	; (800707c <HAL_RCC_OscConfig+0x240>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d05b      	beq.n	8006f44 <HAL_RCC_OscConfig+0x108>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d157      	bne.n	8006f44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006e94:	2301      	movs	r3, #1
 8006e96:	e242      	b.n	800731e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ea0:	d106      	bne.n	8006eb0 <HAL_RCC_OscConfig+0x74>
 8006ea2:	4b76      	ldr	r3, [pc, #472]	; (800707c <HAL_RCC_OscConfig+0x240>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a75      	ldr	r2, [pc, #468]	; (800707c <HAL_RCC_OscConfig+0x240>)
 8006ea8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006eac:	6013      	str	r3, [r2, #0]
 8006eae:	e01d      	b.n	8006eec <HAL_RCC_OscConfig+0xb0>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006eb8:	d10c      	bne.n	8006ed4 <HAL_RCC_OscConfig+0x98>
 8006eba:	4b70      	ldr	r3, [pc, #448]	; (800707c <HAL_RCC_OscConfig+0x240>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a6f      	ldr	r2, [pc, #444]	; (800707c <HAL_RCC_OscConfig+0x240>)
 8006ec0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ec4:	6013      	str	r3, [r2, #0]
 8006ec6:	4b6d      	ldr	r3, [pc, #436]	; (800707c <HAL_RCC_OscConfig+0x240>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a6c      	ldr	r2, [pc, #432]	; (800707c <HAL_RCC_OscConfig+0x240>)
 8006ecc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ed0:	6013      	str	r3, [r2, #0]
 8006ed2:	e00b      	b.n	8006eec <HAL_RCC_OscConfig+0xb0>
 8006ed4:	4b69      	ldr	r3, [pc, #420]	; (800707c <HAL_RCC_OscConfig+0x240>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a68      	ldr	r2, [pc, #416]	; (800707c <HAL_RCC_OscConfig+0x240>)
 8006eda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ede:	6013      	str	r3, [r2, #0]
 8006ee0:	4b66      	ldr	r3, [pc, #408]	; (800707c <HAL_RCC_OscConfig+0x240>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a65      	ldr	r2, [pc, #404]	; (800707c <HAL_RCC_OscConfig+0x240>)
 8006ee6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006eea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d013      	beq.n	8006f1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ef4:	f7fd fa8c 	bl	8004410 <HAL_GetTick>
 8006ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006efa:	e008      	b.n	8006f0e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006efc:	f7fd fa88 	bl	8004410 <HAL_GetTick>
 8006f00:	4602      	mov	r2, r0
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	1ad3      	subs	r3, r2, r3
 8006f06:	2b64      	cmp	r3, #100	; 0x64
 8006f08:	d901      	bls.n	8006f0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006f0a:	2303      	movs	r3, #3
 8006f0c:	e207      	b.n	800731e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f0e:	4b5b      	ldr	r3, [pc, #364]	; (800707c <HAL_RCC_OscConfig+0x240>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d0f0      	beq.n	8006efc <HAL_RCC_OscConfig+0xc0>
 8006f1a:	e014      	b.n	8006f46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f1c:	f7fd fa78 	bl	8004410 <HAL_GetTick>
 8006f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f22:	e008      	b.n	8006f36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006f24:	f7fd fa74 	bl	8004410 <HAL_GetTick>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	1ad3      	subs	r3, r2, r3
 8006f2e:	2b64      	cmp	r3, #100	; 0x64
 8006f30:	d901      	bls.n	8006f36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006f32:	2303      	movs	r3, #3
 8006f34:	e1f3      	b.n	800731e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f36:	4b51      	ldr	r3, [pc, #324]	; (800707c <HAL_RCC_OscConfig+0x240>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d1f0      	bne.n	8006f24 <HAL_RCC_OscConfig+0xe8>
 8006f42:	e000      	b.n	8006f46 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f003 0302 	and.w	r3, r3, #2
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d063      	beq.n	800701a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006f52:	4b4a      	ldr	r3, [pc, #296]	; (800707c <HAL_RCC_OscConfig+0x240>)
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	f003 030c 	and.w	r3, r3, #12
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d00b      	beq.n	8006f76 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006f5e:	4b47      	ldr	r3, [pc, #284]	; (800707c <HAL_RCC_OscConfig+0x240>)
 8006f60:	689b      	ldr	r3, [r3, #8]
 8006f62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006f66:	2b08      	cmp	r3, #8
 8006f68:	d11c      	bne.n	8006fa4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006f6a:	4b44      	ldr	r3, [pc, #272]	; (800707c <HAL_RCC_OscConfig+0x240>)
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d116      	bne.n	8006fa4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f76:	4b41      	ldr	r3, [pc, #260]	; (800707c <HAL_RCC_OscConfig+0x240>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f003 0302 	and.w	r3, r3, #2
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d005      	beq.n	8006f8e <HAL_RCC_OscConfig+0x152>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	68db      	ldr	r3, [r3, #12]
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d001      	beq.n	8006f8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e1c7      	b.n	800731e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f8e:	4b3b      	ldr	r3, [pc, #236]	; (800707c <HAL_RCC_OscConfig+0x240>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	691b      	ldr	r3, [r3, #16]
 8006f9a:	00db      	lsls	r3, r3, #3
 8006f9c:	4937      	ldr	r1, [pc, #220]	; (800707c <HAL_RCC_OscConfig+0x240>)
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006fa2:	e03a      	b.n	800701a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	68db      	ldr	r3, [r3, #12]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d020      	beq.n	8006fee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006fac:	4b34      	ldr	r3, [pc, #208]	; (8007080 <HAL_RCC_OscConfig+0x244>)
 8006fae:	2201      	movs	r2, #1
 8006fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fb2:	f7fd fa2d 	bl	8004410 <HAL_GetTick>
 8006fb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006fb8:	e008      	b.n	8006fcc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006fba:	f7fd fa29 	bl	8004410 <HAL_GetTick>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	1ad3      	subs	r3, r2, r3
 8006fc4:	2b02      	cmp	r3, #2
 8006fc6:	d901      	bls.n	8006fcc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006fc8:	2303      	movs	r3, #3
 8006fca:	e1a8      	b.n	800731e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006fcc:	4b2b      	ldr	r3, [pc, #172]	; (800707c <HAL_RCC_OscConfig+0x240>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f003 0302 	and.w	r3, r3, #2
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d0f0      	beq.n	8006fba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fd8:	4b28      	ldr	r3, [pc, #160]	; (800707c <HAL_RCC_OscConfig+0x240>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	691b      	ldr	r3, [r3, #16]
 8006fe4:	00db      	lsls	r3, r3, #3
 8006fe6:	4925      	ldr	r1, [pc, #148]	; (800707c <HAL_RCC_OscConfig+0x240>)
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	600b      	str	r3, [r1, #0]
 8006fec:	e015      	b.n	800701a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006fee:	4b24      	ldr	r3, [pc, #144]	; (8007080 <HAL_RCC_OscConfig+0x244>)
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ff4:	f7fd fa0c 	bl	8004410 <HAL_GetTick>
 8006ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ffa:	e008      	b.n	800700e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ffc:	f7fd fa08 	bl	8004410 <HAL_GetTick>
 8007000:	4602      	mov	r2, r0
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	1ad3      	subs	r3, r2, r3
 8007006:	2b02      	cmp	r3, #2
 8007008:	d901      	bls.n	800700e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800700a:	2303      	movs	r3, #3
 800700c:	e187      	b.n	800731e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800700e:	4b1b      	ldr	r3, [pc, #108]	; (800707c <HAL_RCC_OscConfig+0x240>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f003 0302 	and.w	r3, r3, #2
 8007016:	2b00      	cmp	r3, #0
 8007018:	d1f0      	bne.n	8006ffc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f003 0308 	and.w	r3, r3, #8
 8007022:	2b00      	cmp	r3, #0
 8007024:	d036      	beq.n	8007094 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	695b      	ldr	r3, [r3, #20]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d016      	beq.n	800705c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800702e:	4b15      	ldr	r3, [pc, #84]	; (8007084 <HAL_RCC_OscConfig+0x248>)
 8007030:	2201      	movs	r2, #1
 8007032:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007034:	f7fd f9ec 	bl	8004410 <HAL_GetTick>
 8007038:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800703a:	e008      	b.n	800704e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800703c:	f7fd f9e8 	bl	8004410 <HAL_GetTick>
 8007040:	4602      	mov	r2, r0
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	1ad3      	subs	r3, r2, r3
 8007046:	2b02      	cmp	r3, #2
 8007048:	d901      	bls.n	800704e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800704a:	2303      	movs	r3, #3
 800704c:	e167      	b.n	800731e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800704e:	4b0b      	ldr	r3, [pc, #44]	; (800707c <HAL_RCC_OscConfig+0x240>)
 8007050:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007052:	f003 0302 	and.w	r3, r3, #2
 8007056:	2b00      	cmp	r3, #0
 8007058:	d0f0      	beq.n	800703c <HAL_RCC_OscConfig+0x200>
 800705a:	e01b      	b.n	8007094 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800705c:	4b09      	ldr	r3, [pc, #36]	; (8007084 <HAL_RCC_OscConfig+0x248>)
 800705e:	2200      	movs	r2, #0
 8007060:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007062:	f7fd f9d5 	bl	8004410 <HAL_GetTick>
 8007066:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007068:	e00e      	b.n	8007088 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800706a:	f7fd f9d1 	bl	8004410 <HAL_GetTick>
 800706e:	4602      	mov	r2, r0
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	1ad3      	subs	r3, r2, r3
 8007074:	2b02      	cmp	r3, #2
 8007076:	d907      	bls.n	8007088 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007078:	2303      	movs	r3, #3
 800707a:	e150      	b.n	800731e <HAL_RCC_OscConfig+0x4e2>
 800707c:	40023800 	.word	0x40023800
 8007080:	42470000 	.word	0x42470000
 8007084:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007088:	4b88      	ldr	r3, [pc, #544]	; (80072ac <HAL_RCC_OscConfig+0x470>)
 800708a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800708c:	f003 0302 	and.w	r3, r3, #2
 8007090:	2b00      	cmp	r3, #0
 8007092:	d1ea      	bne.n	800706a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f003 0304 	and.w	r3, r3, #4
 800709c:	2b00      	cmp	r3, #0
 800709e:	f000 8097 	beq.w	80071d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80070a2:	2300      	movs	r3, #0
 80070a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80070a6:	4b81      	ldr	r3, [pc, #516]	; (80072ac <HAL_RCC_OscConfig+0x470>)
 80070a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d10f      	bne.n	80070d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80070b2:	2300      	movs	r3, #0
 80070b4:	60bb      	str	r3, [r7, #8]
 80070b6:	4b7d      	ldr	r3, [pc, #500]	; (80072ac <HAL_RCC_OscConfig+0x470>)
 80070b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ba:	4a7c      	ldr	r2, [pc, #496]	; (80072ac <HAL_RCC_OscConfig+0x470>)
 80070bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070c0:	6413      	str	r3, [r2, #64]	; 0x40
 80070c2:	4b7a      	ldr	r3, [pc, #488]	; (80072ac <HAL_RCC_OscConfig+0x470>)
 80070c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070ca:	60bb      	str	r3, [r7, #8]
 80070cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80070ce:	2301      	movs	r3, #1
 80070d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070d2:	4b77      	ldr	r3, [pc, #476]	; (80072b0 <HAL_RCC_OscConfig+0x474>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d118      	bne.n	8007110 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80070de:	4b74      	ldr	r3, [pc, #464]	; (80072b0 <HAL_RCC_OscConfig+0x474>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a73      	ldr	r2, [pc, #460]	; (80072b0 <HAL_RCC_OscConfig+0x474>)
 80070e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80070ea:	f7fd f991 	bl	8004410 <HAL_GetTick>
 80070ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070f0:	e008      	b.n	8007104 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070f2:	f7fd f98d 	bl	8004410 <HAL_GetTick>
 80070f6:	4602      	mov	r2, r0
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	1ad3      	subs	r3, r2, r3
 80070fc:	2b02      	cmp	r3, #2
 80070fe:	d901      	bls.n	8007104 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007100:	2303      	movs	r3, #3
 8007102:	e10c      	b.n	800731e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007104:	4b6a      	ldr	r3, [pc, #424]	; (80072b0 <HAL_RCC_OscConfig+0x474>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800710c:	2b00      	cmp	r3, #0
 800710e:	d0f0      	beq.n	80070f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	689b      	ldr	r3, [r3, #8]
 8007114:	2b01      	cmp	r3, #1
 8007116:	d106      	bne.n	8007126 <HAL_RCC_OscConfig+0x2ea>
 8007118:	4b64      	ldr	r3, [pc, #400]	; (80072ac <HAL_RCC_OscConfig+0x470>)
 800711a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800711c:	4a63      	ldr	r2, [pc, #396]	; (80072ac <HAL_RCC_OscConfig+0x470>)
 800711e:	f043 0301 	orr.w	r3, r3, #1
 8007122:	6713      	str	r3, [r2, #112]	; 0x70
 8007124:	e01c      	b.n	8007160 <HAL_RCC_OscConfig+0x324>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	2b05      	cmp	r3, #5
 800712c:	d10c      	bne.n	8007148 <HAL_RCC_OscConfig+0x30c>
 800712e:	4b5f      	ldr	r3, [pc, #380]	; (80072ac <HAL_RCC_OscConfig+0x470>)
 8007130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007132:	4a5e      	ldr	r2, [pc, #376]	; (80072ac <HAL_RCC_OscConfig+0x470>)
 8007134:	f043 0304 	orr.w	r3, r3, #4
 8007138:	6713      	str	r3, [r2, #112]	; 0x70
 800713a:	4b5c      	ldr	r3, [pc, #368]	; (80072ac <HAL_RCC_OscConfig+0x470>)
 800713c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800713e:	4a5b      	ldr	r2, [pc, #364]	; (80072ac <HAL_RCC_OscConfig+0x470>)
 8007140:	f043 0301 	orr.w	r3, r3, #1
 8007144:	6713      	str	r3, [r2, #112]	; 0x70
 8007146:	e00b      	b.n	8007160 <HAL_RCC_OscConfig+0x324>
 8007148:	4b58      	ldr	r3, [pc, #352]	; (80072ac <HAL_RCC_OscConfig+0x470>)
 800714a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800714c:	4a57      	ldr	r2, [pc, #348]	; (80072ac <HAL_RCC_OscConfig+0x470>)
 800714e:	f023 0301 	bic.w	r3, r3, #1
 8007152:	6713      	str	r3, [r2, #112]	; 0x70
 8007154:	4b55      	ldr	r3, [pc, #340]	; (80072ac <HAL_RCC_OscConfig+0x470>)
 8007156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007158:	4a54      	ldr	r2, [pc, #336]	; (80072ac <HAL_RCC_OscConfig+0x470>)
 800715a:	f023 0304 	bic.w	r3, r3, #4
 800715e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d015      	beq.n	8007194 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007168:	f7fd f952 	bl	8004410 <HAL_GetTick>
 800716c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800716e:	e00a      	b.n	8007186 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007170:	f7fd f94e 	bl	8004410 <HAL_GetTick>
 8007174:	4602      	mov	r2, r0
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	1ad3      	subs	r3, r2, r3
 800717a:	f241 3288 	movw	r2, #5000	; 0x1388
 800717e:	4293      	cmp	r3, r2
 8007180:	d901      	bls.n	8007186 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007182:	2303      	movs	r3, #3
 8007184:	e0cb      	b.n	800731e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007186:	4b49      	ldr	r3, [pc, #292]	; (80072ac <HAL_RCC_OscConfig+0x470>)
 8007188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800718a:	f003 0302 	and.w	r3, r3, #2
 800718e:	2b00      	cmp	r3, #0
 8007190:	d0ee      	beq.n	8007170 <HAL_RCC_OscConfig+0x334>
 8007192:	e014      	b.n	80071be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007194:	f7fd f93c 	bl	8004410 <HAL_GetTick>
 8007198:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800719a:	e00a      	b.n	80071b2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800719c:	f7fd f938 	bl	8004410 <HAL_GetTick>
 80071a0:	4602      	mov	r2, r0
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	1ad3      	subs	r3, r2, r3
 80071a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d901      	bls.n	80071b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80071ae:	2303      	movs	r3, #3
 80071b0:	e0b5      	b.n	800731e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80071b2:	4b3e      	ldr	r3, [pc, #248]	; (80072ac <HAL_RCC_OscConfig+0x470>)
 80071b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071b6:	f003 0302 	and.w	r3, r3, #2
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d1ee      	bne.n	800719c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80071be:	7dfb      	ldrb	r3, [r7, #23]
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d105      	bne.n	80071d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80071c4:	4b39      	ldr	r3, [pc, #228]	; (80072ac <HAL_RCC_OscConfig+0x470>)
 80071c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c8:	4a38      	ldr	r2, [pc, #224]	; (80072ac <HAL_RCC_OscConfig+0x470>)
 80071ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80071ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	699b      	ldr	r3, [r3, #24]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	f000 80a1 	beq.w	800731c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80071da:	4b34      	ldr	r3, [pc, #208]	; (80072ac <HAL_RCC_OscConfig+0x470>)
 80071dc:	689b      	ldr	r3, [r3, #8]
 80071de:	f003 030c 	and.w	r3, r3, #12
 80071e2:	2b08      	cmp	r3, #8
 80071e4:	d05c      	beq.n	80072a0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	699b      	ldr	r3, [r3, #24]
 80071ea:	2b02      	cmp	r3, #2
 80071ec:	d141      	bne.n	8007272 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071ee:	4b31      	ldr	r3, [pc, #196]	; (80072b4 <HAL_RCC_OscConfig+0x478>)
 80071f0:	2200      	movs	r2, #0
 80071f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071f4:	f7fd f90c 	bl	8004410 <HAL_GetTick>
 80071f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071fa:	e008      	b.n	800720e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80071fc:	f7fd f908 	bl	8004410 <HAL_GetTick>
 8007200:	4602      	mov	r2, r0
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	1ad3      	subs	r3, r2, r3
 8007206:	2b02      	cmp	r3, #2
 8007208:	d901      	bls.n	800720e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800720a:	2303      	movs	r3, #3
 800720c:	e087      	b.n	800731e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800720e:	4b27      	ldr	r3, [pc, #156]	; (80072ac <HAL_RCC_OscConfig+0x470>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007216:	2b00      	cmp	r3, #0
 8007218:	d1f0      	bne.n	80071fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	69da      	ldr	r2, [r3, #28]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6a1b      	ldr	r3, [r3, #32]
 8007222:	431a      	orrs	r2, r3
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007228:	019b      	lsls	r3, r3, #6
 800722a:	431a      	orrs	r2, r3
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007230:	085b      	lsrs	r3, r3, #1
 8007232:	3b01      	subs	r3, #1
 8007234:	041b      	lsls	r3, r3, #16
 8007236:	431a      	orrs	r2, r3
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800723c:	061b      	lsls	r3, r3, #24
 800723e:	491b      	ldr	r1, [pc, #108]	; (80072ac <HAL_RCC_OscConfig+0x470>)
 8007240:	4313      	orrs	r3, r2
 8007242:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007244:	4b1b      	ldr	r3, [pc, #108]	; (80072b4 <HAL_RCC_OscConfig+0x478>)
 8007246:	2201      	movs	r2, #1
 8007248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800724a:	f7fd f8e1 	bl	8004410 <HAL_GetTick>
 800724e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007250:	e008      	b.n	8007264 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007252:	f7fd f8dd 	bl	8004410 <HAL_GetTick>
 8007256:	4602      	mov	r2, r0
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	1ad3      	subs	r3, r2, r3
 800725c:	2b02      	cmp	r3, #2
 800725e:	d901      	bls.n	8007264 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007260:	2303      	movs	r3, #3
 8007262:	e05c      	b.n	800731e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007264:	4b11      	ldr	r3, [pc, #68]	; (80072ac <HAL_RCC_OscConfig+0x470>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800726c:	2b00      	cmp	r3, #0
 800726e:	d0f0      	beq.n	8007252 <HAL_RCC_OscConfig+0x416>
 8007270:	e054      	b.n	800731c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007272:	4b10      	ldr	r3, [pc, #64]	; (80072b4 <HAL_RCC_OscConfig+0x478>)
 8007274:	2200      	movs	r2, #0
 8007276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007278:	f7fd f8ca 	bl	8004410 <HAL_GetTick>
 800727c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800727e:	e008      	b.n	8007292 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007280:	f7fd f8c6 	bl	8004410 <HAL_GetTick>
 8007284:	4602      	mov	r2, r0
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	1ad3      	subs	r3, r2, r3
 800728a:	2b02      	cmp	r3, #2
 800728c:	d901      	bls.n	8007292 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800728e:	2303      	movs	r3, #3
 8007290:	e045      	b.n	800731e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007292:	4b06      	ldr	r3, [pc, #24]	; (80072ac <HAL_RCC_OscConfig+0x470>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800729a:	2b00      	cmp	r3, #0
 800729c:	d1f0      	bne.n	8007280 <HAL_RCC_OscConfig+0x444>
 800729e:	e03d      	b.n	800731c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	699b      	ldr	r3, [r3, #24]
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d107      	bne.n	80072b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80072a8:	2301      	movs	r3, #1
 80072aa:	e038      	b.n	800731e <HAL_RCC_OscConfig+0x4e2>
 80072ac:	40023800 	.word	0x40023800
 80072b0:	40007000 	.word	0x40007000
 80072b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80072b8:	4b1b      	ldr	r3, [pc, #108]	; (8007328 <HAL_RCC_OscConfig+0x4ec>)
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	699b      	ldr	r3, [r3, #24]
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d028      	beq.n	8007318 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d121      	bne.n	8007318 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072de:	429a      	cmp	r2, r3
 80072e0:	d11a      	bne.n	8007318 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80072e2:	68fa      	ldr	r2, [r7, #12]
 80072e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80072e8:	4013      	ands	r3, r2
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80072ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d111      	bne.n	8007318 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072fe:	085b      	lsrs	r3, r3, #1
 8007300:	3b01      	subs	r3, #1
 8007302:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007304:	429a      	cmp	r2, r3
 8007306:	d107      	bne.n	8007318 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007312:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007314:	429a      	cmp	r2, r3
 8007316:	d001      	beq.n	800731c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007318:	2301      	movs	r3, #1
 800731a:	e000      	b.n	800731e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800731c:	2300      	movs	r3, #0
}
 800731e:	4618      	mov	r0, r3
 8007320:	3718      	adds	r7, #24
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop
 8007328:	40023800 	.word	0x40023800

0800732c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b084      	sub	sp, #16
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d101      	bne.n	8007340 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800733c:	2301      	movs	r3, #1
 800733e:	e0cc      	b.n	80074da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007340:	4b68      	ldr	r3, [pc, #416]	; (80074e4 <HAL_RCC_ClockConfig+0x1b8>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f003 0307 	and.w	r3, r3, #7
 8007348:	683a      	ldr	r2, [r7, #0]
 800734a:	429a      	cmp	r2, r3
 800734c:	d90c      	bls.n	8007368 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800734e:	4b65      	ldr	r3, [pc, #404]	; (80074e4 <HAL_RCC_ClockConfig+0x1b8>)
 8007350:	683a      	ldr	r2, [r7, #0]
 8007352:	b2d2      	uxtb	r2, r2
 8007354:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007356:	4b63      	ldr	r3, [pc, #396]	; (80074e4 <HAL_RCC_ClockConfig+0x1b8>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f003 0307 	and.w	r3, r3, #7
 800735e:	683a      	ldr	r2, [r7, #0]
 8007360:	429a      	cmp	r2, r3
 8007362:	d001      	beq.n	8007368 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	e0b8      	b.n	80074da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f003 0302 	and.w	r3, r3, #2
 8007370:	2b00      	cmp	r3, #0
 8007372:	d020      	beq.n	80073b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f003 0304 	and.w	r3, r3, #4
 800737c:	2b00      	cmp	r3, #0
 800737e:	d005      	beq.n	800738c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007380:	4b59      	ldr	r3, [pc, #356]	; (80074e8 <HAL_RCC_ClockConfig+0x1bc>)
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	4a58      	ldr	r2, [pc, #352]	; (80074e8 <HAL_RCC_ClockConfig+0x1bc>)
 8007386:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800738a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f003 0308 	and.w	r3, r3, #8
 8007394:	2b00      	cmp	r3, #0
 8007396:	d005      	beq.n	80073a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007398:	4b53      	ldr	r3, [pc, #332]	; (80074e8 <HAL_RCC_ClockConfig+0x1bc>)
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	4a52      	ldr	r2, [pc, #328]	; (80074e8 <HAL_RCC_ClockConfig+0x1bc>)
 800739e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80073a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80073a4:	4b50      	ldr	r3, [pc, #320]	; (80074e8 <HAL_RCC_ClockConfig+0x1bc>)
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	494d      	ldr	r1, [pc, #308]	; (80074e8 <HAL_RCC_ClockConfig+0x1bc>)
 80073b2:	4313      	orrs	r3, r2
 80073b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f003 0301 	and.w	r3, r3, #1
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d044      	beq.n	800744c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d107      	bne.n	80073da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073ca:	4b47      	ldr	r3, [pc, #284]	; (80074e8 <HAL_RCC_ClockConfig+0x1bc>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d119      	bne.n	800740a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80073d6:	2301      	movs	r3, #1
 80073d8:	e07f      	b.n	80074da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	2b02      	cmp	r3, #2
 80073e0:	d003      	beq.n	80073ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80073e6:	2b03      	cmp	r3, #3
 80073e8:	d107      	bne.n	80073fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073ea:	4b3f      	ldr	r3, [pc, #252]	; (80074e8 <HAL_RCC_ClockConfig+0x1bc>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d109      	bne.n	800740a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80073f6:	2301      	movs	r3, #1
 80073f8:	e06f      	b.n	80074da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073fa:	4b3b      	ldr	r3, [pc, #236]	; (80074e8 <HAL_RCC_ClockConfig+0x1bc>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f003 0302 	and.w	r3, r3, #2
 8007402:	2b00      	cmp	r3, #0
 8007404:	d101      	bne.n	800740a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007406:	2301      	movs	r3, #1
 8007408:	e067      	b.n	80074da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800740a:	4b37      	ldr	r3, [pc, #220]	; (80074e8 <HAL_RCC_ClockConfig+0x1bc>)
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	f023 0203 	bic.w	r2, r3, #3
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	4934      	ldr	r1, [pc, #208]	; (80074e8 <HAL_RCC_ClockConfig+0x1bc>)
 8007418:	4313      	orrs	r3, r2
 800741a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800741c:	f7fc fff8 	bl	8004410 <HAL_GetTick>
 8007420:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007422:	e00a      	b.n	800743a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007424:	f7fc fff4 	bl	8004410 <HAL_GetTick>
 8007428:	4602      	mov	r2, r0
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	1ad3      	subs	r3, r2, r3
 800742e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007432:	4293      	cmp	r3, r2
 8007434:	d901      	bls.n	800743a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007436:	2303      	movs	r3, #3
 8007438:	e04f      	b.n	80074da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800743a:	4b2b      	ldr	r3, [pc, #172]	; (80074e8 <HAL_RCC_ClockConfig+0x1bc>)
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	f003 020c 	and.w	r2, r3, #12
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	009b      	lsls	r3, r3, #2
 8007448:	429a      	cmp	r2, r3
 800744a:	d1eb      	bne.n	8007424 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800744c:	4b25      	ldr	r3, [pc, #148]	; (80074e4 <HAL_RCC_ClockConfig+0x1b8>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f003 0307 	and.w	r3, r3, #7
 8007454:	683a      	ldr	r2, [r7, #0]
 8007456:	429a      	cmp	r2, r3
 8007458:	d20c      	bcs.n	8007474 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800745a:	4b22      	ldr	r3, [pc, #136]	; (80074e4 <HAL_RCC_ClockConfig+0x1b8>)
 800745c:	683a      	ldr	r2, [r7, #0]
 800745e:	b2d2      	uxtb	r2, r2
 8007460:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007462:	4b20      	ldr	r3, [pc, #128]	; (80074e4 <HAL_RCC_ClockConfig+0x1b8>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f003 0307 	and.w	r3, r3, #7
 800746a:	683a      	ldr	r2, [r7, #0]
 800746c:	429a      	cmp	r2, r3
 800746e:	d001      	beq.n	8007474 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007470:	2301      	movs	r3, #1
 8007472:	e032      	b.n	80074da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f003 0304 	and.w	r3, r3, #4
 800747c:	2b00      	cmp	r3, #0
 800747e:	d008      	beq.n	8007492 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007480:	4b19      	ldr	r3, [pc, #100]	; (80074e8 <HAL_RCC_ClockConfig+0x1bc>)
 8007482:	689b      	ldr	r3, [r3, #8]
 8007484:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	68db      	ldr	r3, [r3, #12]
 800748c:	4916      	ldr	r1, [pc, #88]	; (80074e8 <HAL_RCC_ClockConfig+0x1bc>)
 800748e:	4313      	orrs	r3, r2
 8007490:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f003 0308 	and.w	r3, r3, #8
 800749a:	2b00      	cmp	r3, #0
 800749c:	d009      	beq.n	80074b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800749e:	4b12      	ldr	r3, [pc, #72]	; (80074e8 <HAL_RCC_ClockConfig+0x1bc>)
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	691b      	ldr	r3, [r3, #16]
 80074aa:	00db      	lsls	r3, r3, #3
 80074ac:	490e      	ldr	r1, [pc, #56]	; (80074e8 <HAL_RCC_ClockConfig+0x1bc>)
 80074ae:	4313      	orrs	r3, r2
 80074b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80074b2:	f000 f821 	bl	80074f8 <HAL_RCC_GetSysClockFreq>
 80074b6:	4602      	mov	r2, r0
 80074b8:	4b0b      	ldr	r3, [pc, #44]	; (80074e8 <HAL_RCC_ClockConfig+0x1bc>)
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	091b      	lsrs	r3, r3, #4
 80074be:	f003 030f 	and.w	r3, r3, #15
 80074c2:	490a      	ldr	r1, [pc, #40]	; (80074ec <HAL_RCC_ClockConfig+0x1c0>)
 80074c4:	5ccb      	ldrb	r3, [r1, r3]
 80074c6:	fa22 f303 	lsr.w	r3, r2, r3
 80074ca:	4a09      	ldr	r2, [pc, #36]	; (80074f0 <HAL_RCC_ClockConfig+0x1c4>)
 80074cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80074ce:	4b09      	ldr	r3, [pc, #36]	; (80074f4 <HAL_RCC_ClockConfig+0x1c8>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4618      	mov	r0, r3
 80074d4:	f7fc ff58 	bl	8004388 <HAL_InitTick>

  return HAL_OK;
 80074d8:	2300      	movs	r3, #0
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3710      	adds	r7, #16
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}
 80074e2:	bf00      	nop
 80074e4:	40023c00 	.word	0x40023c00
 80074e8:	40023800 	.word	0x40023800
 80074ec:	08010898 	.word	0x08010898
 80074f0:	20000030 	.word	0x20000030
 80074f4:	20000034 	.word	0x20000034

080074f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80074f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80074fc:	b094      	sub	sp, #80	; 0x50
 80074fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007500:	2300      	movs	r3, #0
 8007502:	647b      	str	r3, [r7, #68]	; 0x44
 8007504:	2300      	movs	r3, #0
 8007506:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007508:	2300      	movs	r3, #0
 800750a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800750c:	2300      	movs	r3, #0
 800750e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007510:	4b79      	ldr	r3, [pc, #484]	; (80076f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	f003 030c 	and.w	r3, r3, #12
 8007518:	2b08      	cmp	r3, #8
 800751a:	d00d      	beq.n	8007538 <HAL_RCC_GetSysClockFreq+0x40>
 800751c:	2b08      	cmp	r3, #8
 800751e:	f200 80e1 	bhi.w	80076e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007522:	2b00      	cmp	r3, #0
 8007524:	d002      	beq.n	800752c <HAL_RCC_GetSysClockFreq+0x34>
 8007526:	2b04      	cmp	r3, #4
 8007528:	d003      	beq.n	8007532 <HAL_RCC_GetSysClockFreq+0x3a>
 800752a:	e0db      	b.n	80076e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800752c:	4b73      	ldr	r3, [pc, #460]	; (80076fc <HAL_RCC_GetSysClockFreq+0x204>)
 800752e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007530:	e0db      	b.n	80076ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007532:	4b72      	ldr	r3, [pc, #456]	; (80076fc <HAL_RCC_GetSysClockFreq+0x204>)
 8007534:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007536:	e0d8      	b.n	80076ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007538:	4b6f      	ldr	r3, [pc, #444]	; (80076f8 <HAL_RCC_GetSysClockFreq+0x200>)
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007540:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007542:	4b6d      	ldr	r3, [pc, #436]	; (80076f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800754a:	2b00      	cmp	r3, #0
 800754c:	d063      	beq.n	8007616 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800754e:	4b6a      	ldr	r3, [pc, #424]	; (80076f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	099b      	lsrs	r3, r3, #6
 8007554:	2200      	movs	r2, #0
 8007556:	63bb      	str	r3, [r7, #56]	; 0x38
 8007558:	63fa      	str	r2, [r7, #60]	; 0x3c
 800755a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800755c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007560:	633b      	str	r3, [r7, #48]	; 0x30
 8007562:	2300      	movs	r3, #0
 8007564:	637b      	str	r3, [r7, #52]	; 0x34
 8007566:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800756a:	4622      	mov	r2, r4
 800756c:	462b      	mov	r3, r5
 800756e:	f04f 0000 	mov.w	r0, #0
 8007572:	f04f 0100 	mov.w	r1, #0
 8007576:	0159      	lsls	r1, r3, #5
 8007578:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800757c:	0150      	lsls	r0, r2, #5
 800757e:	4602      	mov	r2, r0
 8007580:	460b      	mov	r3, r1
 8007582:	4621      	mov	r1, r4
 8007584:	1a51      	subs	r1, r2, r1
 8007586:	6139      	str	r1, [r7, #16]
 8007588:	4629      	mov	r1, r5
 800758a:	eb63 0301 	sbc.w	r3, r3, r1
 800758e:	617b      	str	r3, [r7, #20]
 8007590:	f04f 0200 	mov.w	r2, #0
 8007594:	f04f 0300 	mov.w	r3, #0
 8007598:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800759c:	4659      	mov	r1, fp
 800759e:	018b      	lsls	r3, r1, #6
 80075a0:	4651      	mov	r1, sl
 80075a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80075a6:	4651      	mov	r1, sl
 80075a8:	018a      	lsls	r2, r1, #6
 80075aa:	4651      	mov	r1, sl
 80075ac:	ebb2 0801 	subs.w	r8, r2, r1
 80075b0:	4659      	mov	r1, fp
 80075b2:	eb63 0901 	sbc.w	r9, r3, r1
 80075b6:	f04f 0200 	mov.w	r2, #0
 80075ba:	f04f 0300 	mov.w	r3, #0
 80075be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80075c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80075c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80075ca:	4690      	mov	r8, r2
 80075cc:	4699      	mov	r9, r3
 80075ce:	4623      	mov	r3, r4
 80075d0:	eb18 0303 	adds.w	r3, r8, r3
 80075d4:	60bb      	str	r3, [r7, #8]
 80075d6:	462b      	mov	r3, r5
 80075d8:	eb49 0303 	adc.w	r3, r9, r3
 80075dc:	60fb      	str	r3, [r7, #12]
 80075de:	f04f 0200 	mov.w	r2, #0
 80075e2:	f04f 0300 	mov.w	r3, #0
 80075e6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80075ea:	4629      	mov	r1, r5
 80075ec:	028b      	lsls	r3, r1, #10
 80075ee:	4621      	mov	r1, r4
 80075f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80075f4:	4621      	mov	r1, r4
 80075f6:	028a      	lsls	r2, r1, #10
 80075f8:	4610      	mov	r0, r2
 80075fa:	4619      	mov	r1, r3
 80075fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075fe:	2200      	movs	r2, #0
 8007600:	62bb      	str	r3, [r7, #40]	; 0x28
 8007602:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007604:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007608:	f7f9 fb1e 	bl	8000c48 <__aeabi_uldivmod>
 800760c:	4602      	mov	r2, r0
 800760e:	460b      	mov	r3, r1
 8007610:	4613      	mov	r3, r2
 8007612:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007614:	e058      	b.n	80076c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007616:	4b38      	ldr	r3, [pc, #224]	; (80076f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	099b      	lsrs	r3, r3, #6
 800761c:	2200      	movs	r2, #0
 800761e:	4618      	mov	r0, r3
 8007620:	4611      	mov	r1, r2
 8007622:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007626:	623b      	str	r3, [r7, #32]
 8007628:	2300      	movs	r3, #0
 800762a:	627b      	str	r3, [r7, #36]	; 0x24
 800762c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007630:	4642      	mov	r2, r8
 8007632:	464b      	mov	r3, r9
 8007634:	f04f 0000 	mov.w	r0, #0
 8007638:	f04f 0100 	mov.w	r1, #0
 800763c:	0159      	lsls	r1, r3, #5
 800763e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007642:	0150      	lsls	r0, r2, #5
 8007644:	4602      	mov	r2, r0
 8007646:	460b      	mov	r3, r1
 8007648:	4641      	mov	r1, r8
 800764a:	ebb2 0a01 	subs.w	sl, r2, r1
 800764e:	4649      	mov	r1, r9
 8007650:	eb63 0b01 	sbc.w	fp, r3, r1
 8007654:	f04f 0200 	mov.w	r2, #0
 8007658:	f04f 0300 	mov.w	r3, #0
 800765c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007660:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007664:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007668:	ebb2 040a 	subs.w	r4, r2, sl
 800766c:	eb63 050b 	sbc.w	r5, r3, fp
 8007670:	f04f 0200 	mov.w	r2, #0
 8007674:	f04f 0300 	mov.w	r3, #0
 8007678:	00eb      	lsls	r3, r5, #3
 800767a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800767e:	00e2      	lsls	r2, r4, #3
 8007680:	4614      	mov	r4, r2
 8007682:	461d      	mov	r5, r3
 8007684:	4643      	mov	r3, r8
 8007686:	18e3      	adds	r3, r4, r3
 8007688:	603b      	str	r3, [r7, #0]
 800768a:	464b      	mov	r3, r9
 800768c:	eb45 0303 	adc.w	r3, r5, r3
 8007690:	607b      	str	r3, [r7, #4]
 8007692:	f04f 0200 	mov.w	r2, #0
 8007696:	f04f 0300 	mov.w	r3, #0
 800769a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800769e:	4629      	mov	r1, r5
 80076a0:	028b      	lsls	r3, r1, #10
 80076a2:	4621      	mov	r1, r4
 80076a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80076a8:	4621      	mov	r1, r4
 80076aa:	028a      	lsls	r2, r1, #10
 80076ac:	4610      	mov	r0, r2
 80076ae:	4619      	mov	r1, r3
 80076b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076b2:	2200      	movs	r2, #0
 80076b4:	61bb      	str	r3, [r7, #24]
 80076b6:	61fa      	str	r2, [r7, #28]
 80076b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80076bc:	f7f9 fac4 	bl	8000c48 <__aeabi_uldivmod>
 80076c0:	4602      	mov	r2, r0
 80076c2:	460b      	mov	r3, r1
 80076c4:	4613      	mov	r3, r2
 80076c6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80076c8:	4b0b      	ldr	r3, [pc, #44]	; (80076f8 <HAL_RCC_GetSysClockFreq+0x200>)
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	0c1b      	lsrs	r3, r3, #16
 80076ce:	f003 0303 	and.w	r3, r3, #3
 80076d2:	3301      	adds	r3, #1
 80076d4:	005b      	lsls	r3, r3, #1
 80076d6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80076d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80076da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80076e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80076e2:	e002      	b.n	80076ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80076e4:	4b05      	ldr	r3, [pc, #20]	; (80076fc <HAL_RCC_GetSysClockFreq+0x204>)
 80076e6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80076e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80076ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3750      	adds	r7, #80	; 0x50
 80076f0:	46bd      	mov	sp, r7
 80076f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80076f6:	bf00      	nop
 80076f8:	40023800 	.word	0x40023800
 80076fc:	00f42400 	.word	0x00f42400

08007700 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007700:	b480      	push	{r7}
 8007702:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007704:	4b03      	ldr	r3, [pc, #12]	; (8007714 <HAL_RCC_GetHCLKFreq+0x14>)
 8007706:	681b      	ldr	r3, [r3, #0]
}
 8007708:	4618      	mov	r0, r3
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr
 8007712:	bf00      	nop
 8007714:	20000030 	.word	0x20000030

08007718 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800771c:	f7ff fff0 	bl	8007700 <HAL_RCC_GetHCLKFreq>
 8007720:	4602      	mov	r2, r0
 8007722:	4b05      	ldr	r3, [pc, #20]	; (8007738 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007724:	689b      	ldr	r3, [r3, #8]
 8007726:	0a9b      	lsrs	r3, r3, #10
 8007728:	f003 0307 	and.w	r3, r3, #7
 800772c:	4903      	ldr	r1, [pc, #12]	; (800773c <HAL_RCC_GetPCLK1Freq+0x24>)
 800772e:	5ccb      	ldrb	r3, [r1, r3]
 8007730:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007734:	4618      	mov	r0, r3
 8007736:	bd80      	pop	{r7, pc}
 8007738:	40023800 	.word	0x40023800
 800773c:	080108a8 	.word	0x080108a8

08007740 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007744:	f7ff ffdc 	bl	8007700 <HAL_RCC_GetHCLKFreq>
 8007748:	4602      	mov	r2, r0
 800774a:	4b05      	ldr	r3, [pc, #20]	; (8007760 <HAL_RCC_GetPCLK2Freq+0x20>)
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	0b5b      	lsrs	r3, r3, #13
 8007750:	f003 0307 	and.w	r3, r3, #7
 8007754:	4903      	ldr	r1, [pc, #12]	; (8007764 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007756:	5ccb      	ldrb	r3, [r1, r3]
 8007758:	fa22 f303 	lsr.w	r3, r2, r3
}
 800775c:	4618      	mov	r0, r3
 800775e:	bd80      	pop	{r7, pc}
 8007760:	40023800 	.word	0x40023800
 8007764:	080108a8 	.word	0x080108a8

08007768 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b082      	sub	sp, #8
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d101      	bne.n	800777a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007776:	2301      	movs	r3, #1
 8007778:	e041      	b.n	80077fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007780:	b2db      	uxtb	r3, r3
 8007782:	2b00      	cmp	r3, #0
 8007784:	d106      	bne.n	8007794 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2200      	movs	r2, #0
 800778a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f7fb f800 	bl	8002794 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2202      	movs	r2, #2
 8007798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681a      	ldr	r2, [r3, #0]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	3304      	adds	r3, #4
 80077a4:	4619      	mov	r1, r3
 80077a6:	4610      	mov	r0, r2
 80077a8:	f000 fa96 	bl	8007cd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2201      	movs	r2, #1
 80077b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2201      	movs	r2, #1
 80077b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2201      	movs	r2, #1
 80077c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2201      	movs	r2, #1
 80077c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2201      	movs	r2, #1
 80077d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2201      	movs	r2, #1
 80077d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2201      	movs	r2, #1
 80077e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2201      	movs	r2, #1
 80077e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2201      	movs	r2, #1
 80077f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2201      	movs	r2, #1
 80077f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80077fc:	2300      	movs	r3, #0
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3708      	adds	r7, #8
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
	...

08007808 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007808:	b480      	push	{r7}
 800780a:	b085      	sub	sp, #20
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007816:	b2db      	uxtb	r3, r3
 8007818:	2b01      	cmp	r3, #1
 800781a:	d001      	beq.n	8007820 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800781c:	2301      	movs	r3, #1
 800781e:	e04e      	b.n	80078be <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2202      	movs	r2, #2
 8007824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	68da      	ldr	r2, [r3, #12]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f042 0201 	orr.w	r2, r2, #1
 8007836:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a23      	ldr	r2, [pc, #140]	; (80078cc <HAL_TIM_Base_Start_IT+0xc4>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d022      	beq.n	8007888 <HAL_TIM_Base_Start_IT+0x80>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800784a:	d01d      	beq.n	8007888 <HAL_TIM_Base_Start_IT+0x80>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a1f      	ldr	r2, [pc, #124]	; (80078d0 <HAL_TIM_Base_Start_IT+0xc8>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d018      	beq.n	8007888 <HAL_TIM_Base_Start_IT+0x80>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a1e      	ldr	r2, [pc, #120]	; (80078d4 <HAL_TIM_Base_Start_IT+0xcc>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d013      	beq.n	8007888 <HAL_TIM_Base_Start_IT+0x80>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a1c      	ldr	r2, [pc, #112]	; (80078d8 <HAL_TIM_Base_Start_IT+0xd0>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d00e      	beq.n	8007888 <HAL_TIM_Base_Start_IT+0x80>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a1b      	ldr	r2, [pc, #108]	; (80078dc <HAL_TIM_Base_Start_IT+0xd4>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d009      	beq.n	8007888 <HAL_TIM_Base_Start_IT+0x80>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a19      	ldr	r2, [pc, #100]	; (80078e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d004      	beq.n	8007888 <HAL_TIM_Base_Start_IT+0x80>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a18      	ldr	r2, [pc, #96]	; (80078e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d111      	bne.n	80078ac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	f003 0307 	and.w	r3, r3, #7
 8007892:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2b06      	cmp	r3, #6
 8007898:	d010      	beq.n	80078bc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	681a      	ldr	r2, [r3, #0]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f042 0201 	orr.w	r2, r2, #1
 80078a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078aa:	e007      	b.n	80078bc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	681a      	ldr	r2, [r3, #0]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f042 0201 	orr.w	r2, r2, #1
 80078ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80078bc:	2300      	movs	r3, #0
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3714      	adds	r7, #20
 80078c2:	46bd      	mov	sp, r7
 80078c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c8:	4770      	bx	lr
 80078ca:	bf00      	nop
 80078cc:	40010000 	.word	0x40010000
 80078d0:	40000400 	.word	0x40000400
 80078d4:	40000800 	.word	0x40000800
 80078d8:	40000c00 	.word	0x40000c00
 80078dc:	40010400 	.word	0x40010400
 80078e0:	40014000 	.word	0x40014000
 80078e4:	40001800 	.word	0x40001800

080078e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b082      	sub	sp, #8
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	691b      	ldr	r3, [r3, #16]
 80078f6:	f003 0302 	and.w	r3, r3, #2
 80078fa:	2b02      	cmp	r3, #2
 80078fc:	d122      	bne.n	8007944 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	68db      	ldr	r3, [r3, #12]
 8007904:	f003 0302 	and.w	r3, r3, #2
 8007908:	2b02      	cmp	r3, #2
 800790a:	d11b      	bne.n	8007944 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f06f 0202 	mvn.w	r2, #2
 8007914:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2201      	movs	r2, #1
 800791a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	699b      	ldr	r3, [r3, #24]
 8007922:	f003 0303 	and.w	r3, r3, #3
 8007926:	2b00      	cmp	r3, #0
 8007928:	d003      	beq.n	8007932 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 f9b5 	bl	8007c9a <HAL_TIM_IC_CaptureCallback>
 8007930:	e005      	b.n	800793e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 f9a7 	bl	8007c86 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f000 f9b8 	bl	8007cae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2200      	movs	r2, #0
 8007942:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	691b      	ldr	r3, [r3, #16]
 800794a:	f003 0304 	and.w	r3, r3, #4
 800794e:	2b04      	cmp	r3, #4
 8007950:	d122      	bne.n	8007998 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	68db      	ldr	r3, [r3, #12]
 8007958:	f003 0304 	and.w	r3, r3, #4
 800795c:	2b04      	cmp	r3, #4
 800795e:	d11b      	bne.n	8007998 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f06f 0204 	mvn.w	r2, #4
 8007968:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2202      	movs	r2, #2
 800796e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	699b      	ldr	r3, [r3, #24]
 8007976:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800797a:	2b00      	cmp	r3, #0
 800797c:	d003      	beq.n	8007986 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 f98b 	bl	8007c9a <HAL_TIM_IC_CaptureCallback>
 8007984:	e005      	b.n	8007992 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 f97d 	bl	8007c86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f000 f98e 	bl	8007cae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2200      	movs	r2, #0
 8007996:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	691b      	ldr	r3, [r3, #16]
 800799e:	f003 0308 	and.w	r3, r3, #8
 80079a2:	2b08      	cmp	r3, #8
 80079a4:	d122      	bne.n	80079ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	68db      	ldr	r3, [r3, #12]
 80079ac:	f003 0308 	and.w	r3, r3, #8
 80079b0:	2b08      	cmp	r3, #8
 80079b2:	d11b      	bne.n	80079ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f06f 0208 	mvn.w	r2, #8
 80079bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2204      	movs	r2, #4
 80079c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	69db      	ldr	r3, [r3, #28]
 80079ca:	f003 0303 	and.w	r3, r3, #3
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d003      	beq.n	80079da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 f961 	bl	8007c9a <HAL_TIM_IC_CaptureCallback>
 80079d8:	e005      	b.n	80079e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f000 f953 	bl	8007c86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f000 f964 	bl	8007cae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2200      	movs	r2, #0
 80079ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	691b      	ldr	r3, [r3, #16]
 80079f2:	f003 0310 	and.w	r3, r3, #16
 80079f6:	2b10      	cmp	r3, #16
 80079f8:	d122      	bne.n	8007a40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	68db      	ldr	r3, [r3, #12]
 8007a00:	f003 0310 	and.w	r3, r3, #16
 8007a04:	2b10      	cmp	r3, #16
 8007a06:	d11b      	bne.n	8007a40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f06f 0210 	mvn.w	r2, #16
 8007a10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2208      	movs	r2, #8
 8007a16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	69db      	ldr	r3, [r3, #28]
 8007a1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d003      	beq.n	8007a2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 f937 	bl	8007c9a <HAL_TIM_IC_CaptureCallback>
 8007a2c:	e005      	b.n	8007a3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 f929 	bl	8007c86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 f93a 	bl	8007cae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	691b      	ldr	r3, [r3, #16]
 8007a46:	f003 0301 	and.w	r3, r3, #1
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	d10e      	bne.n	8007a6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	68db      	ldr	r3, [r3, #12]
 8007a54:	f003 0301 	and.w	r3, r3, #1
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d107      	bne.n	8007a6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f06f 0201 	mvn.w	r2, #1
 8007a64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f7f9 fa70 	bl	8000f4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	691b      	ldr	r3, [r3, #16]
 8007a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a76:	2b80      	cmp	r3, #128	; 0x80
 8007a78:	d10e      	bne.n	8007a98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	68db      	ldr	r3, [r3, #12]
 8007a80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a84:	2b80      	cmp	r3, #128	; 0x80
 8007a86:	d107      	bne.n	8007a98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007a90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 fae0 	bl	8008058 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	691b      	ldr	r3, [r3, #16]
 8007a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aa2:	2b40      	cmp	r3, #64	; 0x40
 8007aa4:	d10e      	bne.n	8007ac4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	68db      	ldr	r3, [r3, #12]
 8007aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ab0:	2b40      	cmp	r3, #64	; 0x40
 8007ab2:	d107      	bne.n	8007ac4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 f8ff 	bl	8007cc2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	691b      	ldr	r3, [r3, #16]
 8007aca:	f003 0320 	and.w	r3, r3, #32
 8007ace:	2b20      	cmp	r3, #32
 8007ad0:	d10e      	bne.n	8007af0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	f003 0320 	and.w	r3, r3, #32
 8007adc:	2b20      	cmp	r3, #32
 8007ade:	d107      	bne.n	8007af0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f06f 0220 	mvn.w	r2, #32
 8007ae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f000 faaa 	bl	8008044 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007af0:	bf00      	nop
 8007af2:	3708      	adds	r7, #8
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b084      	sub	sp, #16
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b02:	2300      	movs	r3, #0
 8007b04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d101      	bne.n	8007b14 <HAL_TIM_ConfigClockSource+0x1c>
 8007b10:	2302      	movs	r3, #2
 8007b12:	e0b4      	b.n	8007c7e <HAL_TIM_ConfigClockSource+0x186>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2201      	movs	r2, #1
 8007b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2202      	movs	r2, #2
 8007b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	689b      	ldr	r3, [r3, #8]
 8007b2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007b32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	68ba      	ldr	r2, [r7, #8]
 8007b42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b4c:	d03e      	beq.n	8007bcc <HAL_TIM_ConfigClockSource+0xd4>
 8007b4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b52:	f200 8087 	bhi.w	8007c64 <HAL_TIM_ConfigClockSource+0x16c>
 8007b56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b5a:	f000 8086 	beq.w	8007c6a <HAL_TIM_ConfigClockSource+0x172>
 8007b5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b62:	d87f      	bhi.n	8007c64 <HAL_TIM_ConfigClockSource+0x16c>
 8007b64:	2b70      	cmp	r3, #112	; 0x70
 8007b66:	d01a      	beq.n	8007b9e <HAL_TIM_ConfigClockSource+0xa6>
 8007b68:	2b70      	cmp	r3, #112	; 0x70
 8007b6a:	d87b      	bhi.n	8007c64 <HAL_TIM_ConfigClockSource+0x16c>
 8007b6c:	2b60      	cmp	r3, #96	; 0x60
 8007b6e:	d050      	beq.n	8007c12 <HAL_TIM_ConfigClockSource+0x11a>
 8007b70:	2b60      	cmp	r3, #96	; 0x60
 8007b72:	d877      	bhi.n	8007c64 <HAL_TIM_ConfigClockSource+0x16c>
 8007b74:	2b50      	cmp	r3, #80	; 0x50
 8007b76:	d03c      	beq.n	8007bf2 <HAL_TIM_ConfigClockSource+0xfa>
 8007b78:	2b50      	cmp	r3, #80	; 0x50
 8007b7a:	d873      	bhi.n	8007c64 <HAL_TIM_ConfigClockSource+0x16c>
 8007b7c:	2b40      	cmp	r3, #64	; 0x40
 8007b7e:	d058      	beq.n	8007c32 <HAL_TIM_ConfigClockSource+0x13a>
 8007b80:	2b40      	cmp	r3, #64	; 0x40
 8007b82:	d86f      	bhi.n	8007c64 <HAL_TIM_ConfigClockSource+0x16c>
 8007b84:	2b30      	cmp	r3, #48	; 0x30
 8007b86:	d064      	beq.n	8007c52 <HAL_TIM_ConfigClockSource+0x15a>
 8007b88:	2b30      	cmp	r3, #48	; 0x30
 8007b8a:	d86b      	bhi.n	8007c64 <HAL_TIM_ConfigClockSource+0x16c>
 8007b8c:	2b20      	cmp	r3, #32
 8007b8e:	d060      	beq.n	8007c52 <HAL_TIM_ConfigClockSource+0x15a>
 8007b90:	2b20      	cmp	r3, #32
 8007b92:	d867      	bhi.n	8007c64 <HAL_TIM_ConfigClockSource+0x16c>
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d05c      	beq.n	8007c52 <HAL_TIM_ConfigClockSource+0x15a>
 8007b98:	2b10      	cmp	r3, #16
 8007b9a:	d05a      	beq.n	8007c52 <HAL_TIM_ConfigClockSource+0x15a>
 8007b9c:	e062      	b.n	8007c64 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6818      	ldr	r0, [r3, #0]
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	6899      	ldr	r1, [r3, #8]
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	685a      	ldr	r2, [r3, #4]
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	68db      	ldr	r3, [r3, #12]
 8007bae:	f000 f9ad 	bl	8007f0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007bc0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	68ba      	ldr	r2, [r7, #8]
 8007bc8:	609a      	str	r2, [r3, #8]
      break;
 8007bca:	e04f      	b.n	8007c6c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6818      	ldr	r0, [r3, #0]
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	6899      	ldr	r1, [r3, #8]
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	685a      	ldr	r2, [r3, #4]
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	68db      	ldr	r3, [r3, #12]
 8007bdc:	f000 f996 	bl	8007f0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	689a      	ldr	r2, [r3, #8]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007bee:	609a      	str	r2, [r3, #8]
      break;
 8007bf0:	e03c      	b.n	8007c6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6818      	ldr	r0, [r3, #0]
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	6859      	ldr	r1, [r3, #4]
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	68db      	ldr	r3, [r3, #12]
 8007bfe:	461a      	mov	r2, r3
 8007c00:	f000 f90a 	bl	8007e18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	2150      	movs	r1, #80	; 0x50
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f000 f963 	bl	8007ed6 <TIM_ITRx_SetConfig>
      break;
 8007c10:	e02c      	b.n	8007c6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6818      	ldr	r0, [r3, #0]
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	6859      	ldr	r1, [r3, #4]
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	68db      	ldr	r3, [r3, #12]
 8007c1e:	461a      	mov	r2, r3
 8007c20:	f000 f929 	bl	8007e76 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	2160      	movs	r1, #96	; 0x60
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f000 f953 	bl	8007ed6 <TIM_ITRx_SetConfig>
      break;
 8007c30:	e01c      	b.n	8007c6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6818      	ldr	r0, [r3, #0]
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	6859      	ldr	r1, [r3, #4]
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	68db      	ldr	r3, [r3, #12]
 8007c3e:	461a      	mov	r2, r3
 8007c40:	f000 f8ea 	bl	8007e18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	2140      	movs	r1, #64	; 0x40
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f000 f943 	bl	8007ed6 <TIM_ITRx_SetConfig>
      break;
 8007c50:	e00c      	b.n	8007c6c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681a      	ldr	r2, [r3, #0]
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4619      	mov	r1, r3
 8007c5c:	4610      	mov	r0, r2
 8007c5e:	f000 f93a 	bl	8007ed6 <TIM_ITRx_SetConfig>
      break;
 8007c62:	e003      	b.n	8007c6c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007c64:	2301      	movs	r3, #1
 8007c66:	73fb      	strb	r3, [r7, #15]
      break;
 8007c68:	e000      	b.n	8007c6c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007c6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2201      	movs	r2, #1
 8007c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2200      	movs	r2, #0
 8007c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3710      	adds	r7, #16
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}

08007c86 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c86:	b480      	push	{r7}
 8007c88:	b083      	sub	sp, #12
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007c8e:	bf00      	nop
 8007c90:	370c      	adds	r7, #12
 8007c92:	46bd      	mov	sp, r7
 8007c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c98:	4770      	bx	lr

08007c9a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007c9a:	b480      	push	{r7}
 8007c9c:	b083      	sub	sp, #12
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007ca2:	bf00      	nop
 8007ca4:	370c      	adds	r7, #12
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cac:	4770      	bx	lr

08007cae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007cae:	b480      	push	{r7}
 8007cb0:	b083      	sub	sp, #12
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007cb6:	bf00      	nop
 8007cb8:	370c      	adds	r7, #12
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc0:	4770      	bx	lr

08007cc2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007cc2:	b480      	push	{r7}
 8007cc4:	b083      	sub	sp, #12
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007cca:	bf00      	nop
 8007ccc:	370c      	adds	r7, #12
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd4:	4770      	bx	lr
	...

08007cd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b085      	sub	sp, #20
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	4a40      	ldr	r2, [pc, #256]	; (8007dec <TIM_Base_SetConfig+0x114>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d013      	beq.n	8007d18 <TIM_Base_SetConfig+0x40>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cf6:	d00f      	beq.n	8007d18 <TIM_Base_SetConfig+0x40>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	4a3d      	ldr	r2, [pc, #244]	; (8007df0 <TIM_Base_SetConfig+0x118>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d00b      	beq.n	8007d18 <TIM_Base_SetConfig+0x40>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	4a3c      	ldr	r2, [pc, #240]	; (8007df4 <TIM_Base_SetConfig+0x11c>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d007      	beq.n	8007d18 <TIM_Base_SetConfig+0x40>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	4a3b      	ldr	r2, [pc, #236]	; (8007df8 <TIM_Base_SetConfig+0x120>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d003      	beq.n	8007d18 <TIM_Base_SetConfig+0x40>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	4a3a      	ldr	r2, [pc, #232]	; (8007dfc <TIM_Base_SetConfig+0x124>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d108      	bne.n	8007d2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	68fa      	ldr	r2, [r7, #12]
 8007d26:	4313      	orrs	r3, r2
 8007d28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	4a2f      	ldr	r2, [pc, #188]	; (8007dec <TIM_Base_SetConfig+0x114>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d02b      	beq.n	8007d8a <TIM_Base_SetConfig+0xb2>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d38:	d027      	beq.n	8007d8a <TIM_Base_SetConfig+0xb2>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	4a2c      	ldr	r2, [pc, #176]	; (8007df0 <TIM_Base_SetConfig+0x118>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d023      	beq.n	8007d8a <TIM_Base_SetConfig+0xb2>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	4a2b      	ldr	r2, [pc, #172]	; (8007df4 <TIM_Base_SetConfig+0x11c>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d01f      	beq.n	8007d8a <TIM_Base_SetConfig+0xb2>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	4a2a      	ldr	r2, [pc, #168]	; (8007df8 <TIM_Base_SetConfig+0x120>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d01b      	beq.n	8007d8a <TIM_Base_SetConfig+0xb2>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	4a29      	ldr	r2, [pc, #164]	; (8007dfc <TIM_Base_SetConfig+0x124>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d017      	beq.n	8007d8a <TIM_Base_SetConfig+0xb2>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	4a28      	ldr	r2, [pc, #160]	; (8007e00 <TIM_Base_SetConfig+0x128>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d013      	beq.n	8007d8a <TIM_Base_SetConfig+0xb2>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	4a27      	ldr	r2, [pc, #156]	; (8007e04 <TIM_Base_SetConfig+0x12c>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d00f      	beq.n	8007d8a <TIM_Base_SetConfig+0xb2>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	4a26      	ldr	r2, [pc, #152]	; (8007e08 <TIM_Base_SetConfig+0x130>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d00b      	beq.n	8007d8a <TIM_Base_SetConfig+0xb2>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	4a25      	ldr	r2, [pc, #148]	; (8007e0c <TIM_Base_SetConfig+0x134>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d007      	beq.n	8007d8a <TIM_Base_SetConfig+0xb2>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	4a24      	ldr	r2, [pc, #144]	; (8007e10 <TIM_Base_SetConfig+0x138>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d003      	beq.n	8007d8a <TIM_Base_SetConfig+0xb2>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	4a23      	ldr	r2, [pc, #140]	; (8007e14 <TIM_Base_SetConfig+0x13c>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d108      	bne.n	8007d9c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	68db      	ldr	r3, [r3, #12]
 8007d96:	68fa      	ldr	r2, [r7, #12]
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	695b      	ldr	r3, [r3, #20]
 8007da6:	4313      	orrs	r3, r2
 8007da8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	68fa      	ldr	r2, [r7, #12]
 8007dae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	689a      	ldr	r2, [r3, #8]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	681a      	ldr	r2, [r3, #0]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	4a0a      	ldr	r2, [pc, #40]	; (8007dec <TIM_Base_SetConfig+0x114>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d003      	beq.n	8007dd0 <TIM_Base_SetConfig+0xf8>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	4a0c      	ldr	r2, [pc, #48]	; (8007dfc <TIM_Base_SetConfig+0x124>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d103      	bne.n	8007dd8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	691a      	ldr	r2, [r3, #16]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2201      	movs	r2, #1
 8007ddc:	615a      	str	r2, [r3, #20]
}
 8007dde:	bf00      	nop
 8007de0:	3714      	adds	r7, #20
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr
 8007dea:	bf00      	nop
 8007dec:	40010000 	.word	0x40010000
 8007df0:	40000400 	.word	0x40000400
 8007df4:	40000800 	.word	0x40000800
 8007df8:	40000c00 	.word	0x40000c00
 8007dfc:	40010400 	.word	0x40010400
 8007e00:	40014000 	.word	0x40014000
 8007e04:	40014400 	.word	0x40014400
 8007e08:	40014800 	.word	0x40014800
 8007e0c:	40001800 	.word	0x40001800
 8007e10:	40001c00 	.word	0x40001c00
 8007e14:	40002000 	.word	0x40002000

08007e18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b087      	sub	sp, #28
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	60f8      	str	r0, [r7, #12]
 8007e20:	60b9      	str	r1, [r7, #8]
 8007e22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	6a1b      	ldr	r3, [r3, #32]
 8007e28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	6a1b      	ldr	r3, [r3, #32]
 8007e2e:	f023 0201 	bic.w	r2, r3, #1
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	699b      	ldr	r3, [r3, #24]
 8007e3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	011b      	lsls	r3, r3, #4
 8007e48:	693a      	ldr	r2, [r7, #16]
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	f023 030a 	bic.w	r3, r3, #10
 8007e54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007e56:	697a      	ldr	r2, [r7, #20]
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	693a      	ldr	r2, [r7, #16]
 8007e62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	697a      	ldr	r2, [r7, #20]
 8007e68:	621a      	str	r2, [r3, #32]
}
 8007e6a:	bf00      	nop
 8007e6c:	371c      	adds	r7, #28
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr

08007e76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e76:	b480      	push	{r7}
 8007e78:	b087      	sub	sp, #28
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	60f8      	str	r0, [r7, #12]
 8007e7e:	60b9      	str	r1, [r7, #8]
 8007e80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	6a1b      	ldr	r3, [r3, #32]
 8007e86:	f023 0210 	bic.w	r2, r3, #16
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	699b      	ldr	r3, [r3, #24]
 8007e92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	6a1b      	ldr	r3, [r3, #32]
 8007e98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007ea0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	031b      	lsls	r3, r3, #12
 8007ea6:	697a      	ldr	r2, [r7, #20]
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007eb2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	011b      	lsls	r3, r3, #4
 8007eb8:	693a      	ldr	r2, [r7, #16]
 8007eba:	4313      	orrs	r3, r2
 8007ebc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	697a      	ldr	r2, [r7, #20]
 8007ec2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	693a      	ldr	r2, [r7, #16]
 8007ec8:	621a      	str	r2, [r3, #32]
}
 8007eca:	bf00      	nop
 8007ecc:	371c      	adds	r7, #28
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr

08007ed6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007ed6:	b480      	push	{r7}
 8007ed8:	b085      	sub	sp, #20
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	6078      	str	r0, [r7, #4]
 8007ede:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	689b      	ldr	r3, [r3, #8]
 8007ee4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007eee:	683a      	ldr	r2, [r7, #0]
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	f043 0307 	orr.w	r3, r3, #7
 8007ef8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	68fa      	ldr	r2, [r7, #12]
 8007efe:	609a      	str	r2, [r3, #8]
}
 8007f00:	bf00      	nop
 8007f02:	3714      	adds	r7, #20
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr

08007f0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b087      	sub	sp, #28
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	60f8      	str	r0, [r7, #12]
 8007f14:	60b9      	str	r1, [r7, #8]
 8007f16:	607a      	str	r2, [r7, #4]
 8007f18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	689b      	ldr	r3, [r3, #8]
 8007f1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	021a      	lsls	r2, r3, #8
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	431a      	orrs	r2, r3
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	4313      	orrs	r3, r2
 8007f34:	697a      	ldr	r2, [r7, #20]
 8007f36:	4313      	orrs	r3, r2
 8007f38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	697a      	ldr	r2, [r7, #20]
 8007f3e:	609a      	str	r2, [r3, #8]
}
 8007f40:	bf00      	nop
 8007f42:	371c      	adds	r7, #28
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr

08007f4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b085      	sub	sp, #20
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d101      	bne.n	8007f64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f60:	2302      	movs	r3, #2
 8007f62:	e05a      	b.n	800801a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2201      	movs	r2, #1
 8007f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2202      	movs	r2, #2
 8007f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	689b      	ldr	r3, [r3, #8]
 8007f82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	68fa      	ldr	r2, [r7, #12]
 8007f92:	4313      	orrs	r3, r2
 8007f94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	68fa      	ldr	r2, [r7, #12]
 8007f9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a21      	ldr	r2, [pc, #132]	; (8008028 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d022      	beq.n	8007fee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fb0:	d01d      	beq.n	8007fee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a1d      	ldr	r2, [pc, #116]	; (800802c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d018      	beq.n	8007fee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a1b      	ldr	r2, [pc, #108]	; (8008030 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d013      	beq.n	8007fee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a1a      	ldr	r2, [pc, #104]	; (8008034 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d00e      	beq.n	8007fee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a18      	ldr	r2, [pc, #96]	; (8008038 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d009      	beq.n	8007fee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a17      	ldr	r2, [pc, #92]	; (800803c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d004      	beq.n	8007fee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a15      	ldr	r2, [pc, #84]	; (8008040 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d10c      	bne.n	8008008 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ff4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	68ba      	ldr	r2, [r7, #8]
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	68ba      	ldr	r2, [r7, #8]
 8008006:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2201      	movs	r2, #1
 800800c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2200      	movs	r2, #0
 8008014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008018:	2300      	movs	r3, #0
}
 800801a:	4618      	mov	r0, r3
 800801c:	3714      	adds	r7, #20
 800801e:	46bd      	mov	sp, r7
 8008020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008024:	4770      	bx	lr
 8008026:	bf00      	nop
 8008028:	40010000 	.word	0x40010000
 800802c:	40000400 	.word	0x40000400
 8008030:	40000800 	.word	0x40000800
 8008034:	40000c00 	.word	0x40000c00
 8008038:	40010400 	.word	0x40010400
 800803c:	40014000 	.word	0x40014000
 8008040:	40001800 	.word	0x40001800

08008044 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008044:	b480      	push	{r7}
 8008046:	b083      	sub	sp, #12
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800804c:	bf00      	nop
 800804e:	370c      	adds	r7, #12
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr

08008058 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008058:	b480      	push	{r7}
 800805a:	b083      	sub	sp, #12
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008060:	bf00      	nop
 8008062:	370c      	adds	r7, #12
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr

0800806c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b082      	sub	sp, #8
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d101      	bne.n	800807e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800807a:	2301      	movs	r3, #1
 800807c:	e03f      	b.n	80080fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008084:	b2db      	uxtb	r3, r3
 8008086:	2b00      	cmp	r3, #0
 8008088:	d106      	bne.n	8008098 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2200      	movs	r2, #0
 800808e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f7fa fbc2 	bl	800281c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2224      	movs	r2, #36	; 0x24
 800809c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	68da      	ldr	r2, [r3, #12]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80080ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f000 fd0b 	bl	8008acc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	691a      	ldr	r2, [r3, #16]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80080c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	695a      	ldr	r2, [r3, #20]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80080d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	68da      	ldr	r2, [r3, #12]
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80080e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2200      	movs	r2, #0
 80080ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2220      	movs	r2, #32
 80080f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2220      	movs	r2, #32
 80080f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80080fc:	2300      	movs	r3, #0
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3708      	adds	r7, #8
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}

08008106 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008106:	b480      	push	{r7}
 8008108:	b085      	sub	sp, #20
 800810a:	af00      	add	r7, sp, #0
 800810c:	60f8      	str	r0, [r7, #12]
 800810e:	60b9      	str	r1, [r7, #8]
 8008110:	4613      	mov	r3, r2
 8008112:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800811a:	b2db      	uxtb	r3, r3
 800811c:	2b20      	cmp	r3, #32
 800811e:	d130      	bne.n	8008182 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d002      	beq.n	800812c <HAL_UART_Transmit_IT+0x26>
 8008126:	88fb      	ldrh	r3, [r7, #6]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d101      	bne.n	8008130 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800812c:	2301      	movs	r3, #1
 800812e:	e029      	b.n	8008184 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008136:	2b01      	cmp	r3, #1
 8008138:	d101      	bne.n	800813e <HAL_UART_Transmit_IT+0x38>
 800813a:	2302      	movs	r3, #2
 800813c:	e022      	b.n	8008184 <HAL_UART_Transmit_IT+0x7e>
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2201      	movs	r2, #1
 8008142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	68ba      	ldr	r2, [r7, #8]
 800814a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	88fa      	ldrh	r2, [r7, #6]
 8008150:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	88fa      	ldrh	r2, [r7, #6]
 8008156:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2200      	movs	r2, #0
 800815c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2221      	movs	r2, #33	; 0x21
 8008162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	2200      	movs	r2, #0
 800816a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	68da      	ldr	r2, [r3, #12]
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800817c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800817e:	2300      	movs	r3, #0
 8008180:	e000      	b.n	8008184 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8008182:	2302      	movs	r3, #2
  }
}
 8008184:	4618      	mov	r0, r3
 8008186:	3714      	adds	r7, #20
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr

08008190 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b084      	sub	sp, #16
 8008194:	af00      	add	r7, sp, #0
 8008196:	60f8      	str	r0, [r7, #12]
 8008198:	60b9      	str	r1, [r7, #8]
 800819a:	4613      	mov	r3, r2
 800819c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80081a4:	b2db      	uxtb	r3, r3
 80081a6:	2b20      	cmp	r3, #32
 80081a8:	d11d      	bne.n	80081e6 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d002      	beq.n	80081b6 <HAL_UART_Receive_IT+0x26>
 80081b0:	88fb      	ldrh	r3, [r7, #6]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d101      	bne.n	80081ba <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80081b6:	2301      	movs	r3, #1
 80081b8:	e016      	b.n	80081e8 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d101      	bne.n	80081c8 <HAL_UART_Receive_IT+0x38>
 80081c4:	2302      	movs	r3, #2
 80081c6:	e00f      	b.n	80081e8 <HAL_UART_Receive_IT+0x58>
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2201      	movs	r2, #1
 80081cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2200      	movs	r2, #0
 80081d4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80081d6:	88fb      	ldrh	r3, [r7, #6]
 80081d8:	461a      	mov	r2, r3
 80081da:	68b9      	ldr	r1, [r7, #8]
 80081dc:	68f8      	ldr	r0, [r7, #12]
 80081de:	f000 faa1 	bl	8008724 <UART_Start_Receive_IT>
 80081e2:	4603      	mov	r3, r0
 80081e4:	e000      	b.n	80081e8 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80081e6:	2302      	movs	r3, #2
  }
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3710      	adds	r7, #16
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b0ba      	sub	sp, #232	; 0xe8
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	68db      	ldr	r3, [r3, #12]
 8008208:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	695b      	ldr	r3, [r3, #20]
 8008212:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008216:	2300      	movs	r3, #0
 8008218:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800821c:	2300      	movs	r3, #0
 800821e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008226:	f003 030f 	and.w	r3, r3, #15
 800822a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800822e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008232:	2b00      	cmp	r3, #0
 8008234:	d10f      	bne.n	8008256 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008236:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800823a:	f003 0320 	and.w	r3, r3, #32
 800823e:	2b00      	cmp	r3, #0
 8008240:	d009      	beq.n	8008256 <HAL_UART_IRQHandler+0x66>
 8008242:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008246:	f003 0320 	and.w	r3, r3, #32
 800824a:	2b00      	cmp	r3, #0
 800824c:	d003      	beq.n	8008256 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f000 fb81 	bl	8008956 <UART_Receive_IT>
      return;
 8008254:	e256      	b.n	8008704 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008256:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800825a:	2b00      	cmp	r3, #0
 800825c:	f000 80de 	beq.w	800841c <HAL_UART_IRQHandler+0x22c>
 8008260:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008264:	f003 0301 	and.w	r3, r3, #1
 8008268:	2b00      	cmp	r3, #0
 800826a:	d106      	bne.n	800827a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800826c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008270:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008274:	2b00      	cmp	r3, #0
 8008276:	f000 80d1 	beq.w	800841c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800827a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800827e:	f003 0301 	and.w	r3, r3, #1
 8008282:	2b00      	cmp	r3, #0
 8008284:	d00b      	beq.n	800829e <HAL_UART_IRQHandler+0xae>
 8008286:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800828a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800828e:	2b00      	cmp	r3, #0
 8008290:	d005      	beq.n	800829e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008296:	f043 0201 	orr.w	r2, r3, #1
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800829e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082a2:	f003 0304 	and.w	r3, r3, #4
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d00b      	beq.n	80082c2 <HAL_UART_IRQHandler+0xd2>
 80082aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082ae:	f003 0301 	and.w	r3, r3, #1
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d005      	beq.n	80082c2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ba:	f043 0202 	orr.w	r2, r3, #2
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80082c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082c6:	f003 0302 	and.w	r3, r3, #2
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d00b      	beq.n	80082e6 <HAL_UART_IRQHandler+0xf6>
 80082ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082d2:	f003 0301 	and.w	r3, r3, #1
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d005      	beq.n	80082e6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082de:	f043 0204 	orr.w	r2, r3, #4
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80082e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082ea:	f003 0308 	and.w	r3, r3, #8
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d011      	beq.n	8008316 <HAL_UART_IRQHandler+0x126>
 80082f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082f6:	f003 0320 	and.w	r3, r3, #32
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d105      	bne.n	800830a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80082fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008302:	f003 0301 	and.w	r3, r3, #1
 8008306:	2b00      	cmp	r3, #0
 8008308:	d005      	beq.n	8008316 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800830e:	f043 0208 	orr.w	r2, r3, #8
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800831a:	2b00      	cmp	r3, #0
 800831c:	f000 81ed 	beq.w	80086fa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008320:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008324:	f003 0320 	and.w	r3, r3, #32
 8008328:	2b00      	cmp	r3, #0
 800832a:	d008      	beq.n	800833e <HAL_UART_IRQHandler+0x14e>
 800832c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008330:	f003 0320 	and.w	r3, r3, #32
 8008334:	2b00      	cmp	r3, #0
 8008336:	d002      	beq.n	800833e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f000 fb0c 	bl	8008956 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	695b      	ldr	r3, [r3, #20]
 8008344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008348:	2b40      	cmp	r3, #64	; 0x40
 800834a:	bf0c      	ite	eq
 800834c:	2301      	moveq	r3, #1
 800834e:	2300      	movne	r3, #0
 8008350:	b2db      	uxtb	r3, r3
 8008352:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800835a:	f003 0308 	and.w	r3, r3, #8
 800835e:	2b00      	cmp	r3, #0
 8008360:	d103      	bne.n	800836a <HAL_UART_IRQHandler+0x17a>
 8008362:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008366:	2b00      	cmp	r3, #0
 8008368:	d04f      	beq.n	800840a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 fa14 	bl	8008798 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	695b      	ldr	r3, [r3, #20]
 8008376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800837a:	2b40      	cmp	r3, #64	; 0x40
 800837c:	d141      	bne.n	8008402 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	3314      	adds	r3, #20
 8008384:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008388:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800838c:	e853 3f00 	ldrex	r3, [r3]
 8008390:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008394:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008398:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800839c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	3314      	adds	r3, #20
 80083a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80083aa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80083ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80083b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80083ba:	e841 2300 	strex	r3, r2, [r1]
 80083be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80083c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d1d9      	bne.n	800837e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d013      	beq.n	80083fa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083d6:	4a7d      	ldr	r2, [pc, #500]	; (80085cc <HAL_UART_IRQHandler+0x3dc>)
 80083d8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083de:	4618      	mov	r0, r3
 80083e0:	f7fc f9f9 	bl	80047d6 <HAL_DMA_Abort_IT>
 80083e4:	4603      	mov	r3, r0
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d016      	beq.n	8008418 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083f0:	687a      	ldr	r2, [r7, #4]
 80083f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80083f4:	4610      	mov	r0, r2
 80083f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083f8:	e00e      	b.n	8008418 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f7f8 fee6 	bl	80011cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008400:	e00a      	b.n	8008418 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f7f8 fee2 	bl	80011cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008408:	e006      	b.n	8008418 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f7f8 fede 	bl	80011cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2200      	movs	r2, #0
 8008414:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008416:	e170      	b.n	80086fa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008418:	bf00      	nop
    return;
 800841a:	e16e      	b.n	80086fa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008420:	2b01      	cmp	r3, #1
 8008422:	f040 814a 	bne.w	80086ba <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800842a:	f003 0310 	and.w	r3, r3, #16
 800842e:	2b00      	cmp	r3, #0
 8008430:	f000 8143 	beq.w	80086ba <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008434:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008438:	f003 0310 	and.w	r3, r3, #16
 800843c:	2b00      	cmp	r3, #0
 800843e:	f000 813c 	beq.w	80086ba <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008442:	2300      	movs	r3, #0
 8008444:	60bb      	str	r3, [r7, #8]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	60bb      	str	r3, [r7, #8]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	60bb      	str	r3, [r7, #8]
 8008456:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	695b      	ldr	r3, [r3, #20]
 800845e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008462:	2b40      	cmp	r3, #64	; 0x40
 8008464:	f040 80b4 	bne.w	80085d0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008474:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008478:	2b00      	cmp	r3, #0
 800847a:	f000 8140 	beq.w	80086fe <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008482:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008486:	429a      	cmp	r2, r3
 8008488:	f080 8139 	bcs.w	80086fe <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008492:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008498:	69db      	ldr	r3, [r3, #28]
 800849a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800849e:	f000 8088 	beq.w	80085b2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	330c      	adds	r3, #12
 80084a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80084b0:	e853 3f00 	ldrex	r3, [r3]
 80084b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80084b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80084bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	330c      	adds	r3, #12
 80084ca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80084ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80084d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80084da:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80084de:	e841 2300 	strex	r3, r2, [r1]
 80084e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80084e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d1d9      	bne.n	80084a2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	3314      	adds	r3, #20
 80084f4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084f8:	e853 3f00 	ldrex	r3, [r3]
 80084fc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80084fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008500:	f023 0301 	bic.w	r3, r3, #1
 8008504:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	3314      	adds	r3, #20
 800850e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008512:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008516:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008518:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800851a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800851e:	e841 2300 	strex	r3, r2, [r1]
 8008522:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008524:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008526:	2b00      	cmp	r3, #0
 8008528:	d1e1      	bne.n	80084ee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	3314      	adds	r3, #20
 8008530:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008532:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008534:	e853 3f00 	ldrex	r3, [r3]
 8008538:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800853a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800853c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008540:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	3314      	adds	r3, #20
 800854a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800854e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008550:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008552:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008554:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008556:	e841 2300 	strex	r3, r2, [r1]
 800855a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800855c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800855e:	2b00      	cmp	r3, #0
 8008560:	d1e3      	bne.n	800852a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2220      	movs	r2, #32
 8008566:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2200      	movs	r2, #0
 800856e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	330c      	adds	r3, #12
 8008576:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008578:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800857a:	e853 3f00 	ldrex	r3, [r3]
 800857e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008580:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008582:	f023 0310 	bic.w	r3, r3, #16
 8008586:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	330c      	adds	r3, #12
 8008590:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008594:	65ba      	str	r2, [r7, #88]	; 0x58
 8008596:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008598:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800859a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800859c:	e841 2300 	strex	r3, r2, [r1]
 80085a0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80085a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d1e3      	bne.n	8008570 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ac:	4618      	mov	r0, r3
 80085ae:	f7fc f8a2 	bl	80046f6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	1ad3      	subs	r3, r2, r3
 80085be:	b29b      	uxth	r3, r3
 80085c0:	4619      	mov	r1, r3
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f000 f8a2 	bl	800870c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80085c8:	e099      	b.n	80086fe <HAL_UART_IRQHandler+0x50e>
 80085ca:	bf00      	nop
 80085cc:	0800885f 	.word	0x0800885f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80085d8:	b29b      	uxth	r3, r3
 80085da:	1ad3      	subs	r3, r2, r3
 80085dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80085e4:	b29b      	uxth	r3, r3
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	f000 808b 	beq.w	8008702 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80085ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	f000 8086 	beq.w	8008702 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	330c      	adds	r3, #12
 80085fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008600:	e853 3f00 	ldrex	r3, [r3]
 8008604:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008608:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800860c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	330c      	adds	r3, #12
 8008616:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800861a:	647a      	str	r2, [r7, #68]	; 0x44
 800861c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800861e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008620:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008622:	e841 2300 	strex	r3, r2, [r1]
 8008626:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800862a:	2b00      	cmp	r3, #0
 800862c:	d1e3      	bne.n	80085f6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	3314      	adds	r3, #20
 8008634:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008638:	e853 3f00 	ldrex	r3, [r3]
 800863c:	623b      	str	r3, [r7, #32]
   return(result);
 800863e:	6a3b      	ldr	r3, [r7, #32]
 8008640:	f023 0301 	bic.w	r3, r3, #1
 8008644:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	3314      	adds	r3, #20
 800864e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008652:	633a      	str	r2, [r7, #48]	; 0x30
 8008654:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008656:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008658:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800865a:	e841 2300 	strex	r3, r2, [r1]
 800865e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008662:	2b00      	cmp	r3, #0
 8008664:	d1e3      	bne.n	800862e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2220      	movs	r2, #32
 800866a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2200      	movs	r2, #0
 8008672:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	330c      	adds	r3, #12
 800867a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	e853 3f00 	ldrex	r3, [r3]
 8008682:	60fb      	str	r3, [r7, #12]
   return(result);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	f023 0310 	bic.w	r3, r3, #16
 800868a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	330c      	adds	r3, #12
 8008694:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008698:	61fa      	str	r2, [r7, #28]
 800869a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800869c:	69b9      	ldr	r1, [r7, #24]
 800869e:	69fa      	ldr	r2, [r7, #28]
 80086a0:	e841 2300 	strex	r3, r2, [r1]
 80086a4:	617b      	str	r3, [r7, #20]
   return(result);
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d1e3      	bne.n	8008674 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80086ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80086b0:	4619      	mov	r1, r3
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 f82a 	bl	800870c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80086b8:	e023      	b.n	8008702 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80086ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d009      	beq.n	80086da <HAL_UART_IRQHandler+0x4ea>
 80086c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d003      	beq.n	80086da <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 f8d7 	bl	8008886 <UART_Transmit_IT>
    return;
 80086d8:	e014      	b.n	8008704 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80086da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d00e      	beq.n	8008704 <HAL_UART_IRQHandler+0x514>
 80086e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d008      	beq.n	8008704 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f000 f917 	bl	8008926 <UART_EndTransmit_IT>
    return;
 80086f8:	e004      	b.n	8008704 <HAL_UART_IRQHandler+0x514>
    return;
 80086fa:	bf00      	nop
 80086fc:	e002      	b.n	8008704 <HAL_UART_IRQHandler+0x514>
      return;
 80086fe:	bf00      	nop
 8008700:	e000      	b.n	8008704 <HAL_UART_IRQHandler+0x514>
      return;
 8008702:	bf00      	nop
  }
}
 8008704:	37e8      	adds	r7, #232	; 0xe8
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}
 800870a:	bf00      	nop

0800870c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800870c:	b480      	push	{r7}
 800870e:	b083      	sub	sp, #12
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
 8008714:	460b      	mov	r3, r1
 8008716:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008718:	bf00      	nop
 800871a:	370c      	adds	r7, #12
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr

08008724 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008724:	b480      	push	{r7}
 8008726:	b085      	sub	sp, #20
 8008728:	af00      	add	r7, sp, #0
 800872a:	60f8      	str	r0, [r7, #12]
 800872c:	60b9      	str	r1, [r7, #8]
 800872e:	4613      	mov	r3, r2
 8008730:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	68ba      	ldr	r2, [r7, #8]
 8008736:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	88fa      	ldrh	r2, [r7, #6]
 800873c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	88fa      	ldrh	r2, [r7, #6]
 8008742:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2200      	movs	r2, #0
 8008748:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	2222      	movs	r2, #34	; 0x22
 800874e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2200      	movs	r2, #0
 8008756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	68da      	ldr	r2, [r3, #12]
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008768:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	695a      	ldr	r2, [r3, #20]
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f042 0201 	orr.w	r2, r2, #1
 8008778:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	68da      	ldr	r2, [r3, #12]
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f042 0220 	orr.w	r2, r2, #32
 8008788:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800878a:	2300      	movs	r3, #0
}
 800878c:	4618      	mov	r0, r3
 800878e:	3714      	adds	r7, #20
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr

08008798 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008798:	b480      	push	{r7}
 800879a:	b095      	sub	sp, #84	; 0x54
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	330c      	adds	r3, #12
 80087a6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087aa:	e853 3f00 	ldrex	r3, [r3]
 80087ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80087b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80087b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	330c      	adds	r3, #12
 80087be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80087c0:	643a      	str	r2, [r7, #64]	; 0x40
 80087c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80087c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80087c8:	e841 2300 	strex	r3, r2, [r1]
 80087cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80087ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d1e5      	bne.n	80087a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	3314      	adds	r3, #20
 80087da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087dc:	6a3b      	ldr	r3, [r7, #32]
 80087de:	e853 3f00 	ldrex	r3, [r3]
 80087e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80087e4:	69fb      	ldr	r3, [r7, #28]
 80087e6:	f023 0301 	bic.w	r3, r3, #1
 80087ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	3314      	adds	r3, #20
 80087f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80087f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80087fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087fc:	e841 2300 	strex	r3, r2, [r1]
 8008800:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008804:	2b00      	cmp	r3, #0
 8008806:	d1e5      	bne.n	80087d4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800880c:	2b01      	cmp	r3, #1
 800880e:	d119      	bne.n	8008844 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	330c      	adds	r3, #12
 8008816:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	e853 3f00 	ldrex	r3, [r3]
 800881e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	f023 0310 	bic.w	r3, r3, #16
 8008826:	647b      	str	r3, [r7, #68]	; 0x44
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	330c      	adds	r3, #12
 800882e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008830:	61ba      	str	r2, [r7, #24]
 8008832:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008834:	6979      	ldr	r1, [r7, #20]
 8008836:	69ba      	ldr	r2, [r7, #24]
 8008838:	e841 2300 	strex	r3, r2, [r1]
 800883c:	613b      	str	r3, [r7, #16]
   return(result);
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d1e5      	bne.n	8008810 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2220      	movs	r2, #32
 8008848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2200      	movs	r2, #0
 8008850:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008852:	bf00      	nop
 8008854:	3754      	adds	r7, #84	; 0x54
 8008856:	46bd      	mov	sp, r7
 8008858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885c:	4770      	bx	lr

0800885e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800885e:	b580      	push	{r7, lr}
 8008860:	b084      	sub	sp, #16
 8008862:	af00      	add	r7, sp, #0
 8008864:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800886a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	2200      	movs	r2, #0
 8008870:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	2200      	movs	r2, #0
 8008876:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008878:	68f8      	ldr	r0, [r7, #12]
 800887a:	f7f8 fca7 	bl	80011cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800887e:	bf00      	nop
 8008880:	3710      	adds	r7, #16
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}

08008886 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008886:	b480      	push	{r7}
 8008888:	b085      	sub	sp, #20
 800888a:	af00      	add	r7, sp, #0
 800888c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008894:	b2db      	uxtb	r3, r3
 8008896:	2b21      	cmp	r3, #33	; 0x21
 8008898:	d13e      	bne.n	8008918 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	689b      	ldr	r3, [r3, #8]
 800889e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088a2:	d114      	bne.n	80088ce <UART_Transmit_IT+0x48>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	691b      	ldr	r3, [r3, #16]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d110      	bne.n	80088ce <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6a1b      	ldr	r3, [r3, #32]
 80088b0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	881b      	ldrh	r3, [r3, #0]
 80088b6:	461a      	mov	r2, r3
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80088c0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6a1b      	ldr	r3, [r3, #32]
 80088c6:	1c9a      	adds	r2, r3, #2
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	621a      	str	r2, [r3, #32]
 80088cc:	e008      	b.n	80088e0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6a1b      	ldr	r3, [r3, #32]
 80088d2:	1c59      	adds	r1, r3, #1
 80088d4:	687a      	ldr	r2, [r7, #4]
 80088d6:	6211      	str	r1, [r2, #32]
 80088d8:	781a      	ldrb	r2, [r3, #0]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80088e4:	b29b      	uxth	r3, r3
 80088e6:	3b01      	subs	r3, #1
 80088e8:	b29b      	uxth	r3, r3
 80088ea:	687a      	ldr	r2, [r7, #4]
 80088ec:	4619      	mov	r1, r3
 80088ee:	84d1      	strh	r1, [r2, #38]	; 0x26
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d10f      	bne.n	8008914 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	68da      	ldr	r2, [r3, #12]
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008902:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	68da      	ldr	r2, [r3, #12]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008912:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008914:	2300      	movs	r3, #0
 8008916:	e000      	b.n	800891a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008918:	2302      	movs	r3, #2
  }
}
 800891a:	4618      	mov	r0, r3
 800891c:	3714      	adds	r7, #20
 800891e:	46bd      	mov	sp, r7
 8008920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008924:	4770      	bx	lr

08008926 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008926:	b580      	push	{r7, lr}
 8008928:	b082      	sub	sp, #8
 800892a:	af00      	add	r7, sp, #0
 800892c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	68da      	ldr	r2, [r3, #12]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800893c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2220      	movs	r2, #32
 8008942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f7f8 fc00 	bl	800114c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800894c:	2300      	movs	r3, #0
}
 800894e:	4618      	mov	r0, r3
 8008950:	3708      	adds	r7, #8
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}

08008956 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008956:	b580      	push	{r7, lr}
 8008958:	b08c      	sub	sp, #48	; 0x30
 800895a:	af00      	add	r7, sp, #0
 800895c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008964:	b2db      	uxtb	r3, r3
 8008966:	2b22      	cmp	r3, #34	; 0x22
 8008968:	f040 80ab 	bne.w	8008ac2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	689b      	ldr	r3, [r3, #8]
 8008970:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008974:	d117      	bne.n	80089a6 <UART_Receive_IT+0x50>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	691b      	ldr	r3, [r3, #16]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d113      	bne.n	80089a6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800897e:	2300      	movs	r3, #0
 8008980:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008986:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	685b      	ldr	r3, [r3, #4]
 800898e:	b29b      	uxth	r3, r3
 8008990:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008994:	b29a      	uxth	r2, r3
 8008996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008998:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800899e:	1c9a      	adds	r2, r3, #2
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	629a      	str	r2, [r3, #40]	; 0x28
 80089a4:	e026      	b.n	80089f4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80089ac:	2300      	movs	r3, #0
 80089ae:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	689b      	ldr	r3, [r3, #8]
 80089b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089b8:	d007      	beq.n	80089ca <UART_Receive_IT+0x74>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	689b      	ldr	r3, [r3, #8]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d10a      	bne.n	80089d8 <UART_Receive_IT+0x82>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	691b      	ldr	r3, [r3, #16]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d106      	bne.n	80089d8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	b2da      	uxtb	r2, r3
 80089d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089d4:	701a      	strb	r2, [r3, #0]
 80089d6:	e008      	b.n	80089ea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	685b      	ldr	r3, [r3, #4]
 80089de:	b2db      	uxtb	r3, r3
 80089e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089e4:	b2da      	uxtb	r2, r3
 80089e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089e8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ee:	1c5a      	adds	r2, r3, #1
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80089f8:	b29b      	uxth	r3, r3
 80089fa:	3b01      	subs	r3, #1
 80089fc:	b29b      	uxth	r3, r3
 80089fe:	687a      	ldr	r2, [r7, #4]
 8008a00:	4619      	mov	r1, r3
 8008a02:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d15a      	bne.n	8008abe <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	68da      	ldr	r2, [r3, #12]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f022 0220 	bic.w	r2, r2, #32
 8008a16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	68da      	ldr	r2, [r3, #12]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008a26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	695a      	ldr	r2, [r3, #20]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f022 0201 	bic.w	r2, r2, #1
 8008a36:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2220      	movs	r2, #32
 8008a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a44:	2b01      	cmp	r3, #1
 8008a46:	d135      	bne.n	8008ab4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	330c      	adds	r3, #12
 8008a54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	e853 3f00 	ldrex	r3, [r3]
 8008a5c:	613b      	str	r3, [r7, #16]
   return(result);
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	f023 0310 	bic.w	r3, r3, #16
 8008a64:	627b      	str	r3, [r7, #36]	; 0x24
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	330c      	adds	r3, #12
 8008a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a6e:	623a      	str	r2, [r7, #32]
 8008a70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a72:	69f9      	ldr	r1, [r7, #28]
 8008a74:	6a3a      	ldr	r2, [r7, #32]
 8008a76:	e841 2300 	strex	r3, r2, [r1]
 8008a7a:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a7c:	69bb      	ldr	r3, [r7, #24]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d1e5      	bne.n	8008a4e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f003 0310 	and.w	r3, r3, #16
 8008a8c:	2b10      	cmp	r3, #16
 8008a8e:	d10a      	bne.n	8008aa6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008a90:	2300      	movs	r3, #0
 8008a92:	60fb      	str	r3, [r7, #12]
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	60fb      	str	r3, [r7, #12]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	60fb      	str	r3, [r7, #12]
 8008aa4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008aaa:	4619      	mov	r1, r3
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f7ff fe2d 	bl	800870c <HAL_UARTEx_RxEventCallback>
 8008ab2:	e002      	b.n	8008aba <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f7f8 fb69 	bl	800118c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008aba:	2300      	movs	r3, #0
 8008abc:	e002      	b.n	8008ac4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	e000      	b.n	8008ac4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008ac2:	2302      	movs	r3, #2
  }
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3730      	adds	r7, #48	; 0x30
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}

08008acc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008acc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ad0:	b0c0      	sub	sp, #256	; 0x100
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	691b      	ldr	r3, [r3, #16]
 8008ae0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ae8:	68d9      	ldr	r1, [r3, #12]
 8008aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008aee:	681a      	ldr	r2, [r3, #0]
 8008af0:	ea40 0301 	orr.w	r3, r0, r1
 8008af4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008afa:	689a      	ldr	r2, [r3, #8]
 8008afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b00:	691b      	ldr	r3, [r3, #16]
 8008b02:	431a      	orrs	r2, r3
 8008b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b08:	695b      	ldr	r3, [r3, #20]
 8008b0a:	431a      	orrs	r2, r3
 8008b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b10:	69db      	ldr	r3, [r3, #28]
 8008b12:	4313      	orrs	r3, r2
 8008b14:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	68db      	ldr	r3, [r3, #12]
 8008b20:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008b24:	f021 010c 	bic.w	r1, r1, #12
 8008b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b2c:	681a      	ldr	r2, [r3, #0]
 8008b2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008b32:	430b      	orrs	r3, r1
 8008b34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	695b      	ldr	r3, [r3, #20]
 8008b3e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b46:	6999      	ldr	r1, [r3, #24]
 8008b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b4c:	681a      	ldr	r2, [r3, #0]
 8008b4e:	ea40 0301 	orr.w	r3, r0, r1
 8008b52:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b58:	681a      	ldr	r2, [r3, #0]
 8008b5a:	4b8f      	ldr	r3, [pc, #572]	; (8008d98 <UART_SetConfig+0x2cc>)
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d005      	beq.n	8008b6c <UART_SetConfig+0xa0>
 8008b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b64:	681a      	ldr	r2, [r3, #0]
 8008b66:	4b8d      	ldr	r3, [pc, #564]	; (8008d9c <UART_SetConfig+0x2d0>)
 8008b68:	429a      	cmp	r2, r3
 8008b6a:	d104      	bne.n	8008b76 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008b6c:	f7fe fde8 	bl	8007740 <HAL_RCC_GetPCLK2Freq>
 8008b70:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008b74:	e003      	b.n	8008b7e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008b76:	f7fe fdcf 	bl	8007718 <HAL_RCC_GetPCLK1Freq>
 8008b7a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b82:	69db      	ldr	r3, [r3, #28]
 8008b84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b88:	f040 810c 	bne.w	8008da4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008b8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b90:	2200      	movs	r2, #0
 8008b92:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008b96:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008b9a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008b9e:	4622      	mov	r2, r4
 8008ba0:	462b      	mov	r3, r5
 8008ba2:	1891      	adds	r1, r2, r2
 8008ba4:	65b9      	str	r1, [r7, #88]	; 0x58
 8008ba6:	415b      	adcs	r3, r3
 8008ba8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008baa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008bae:	4621      	mov	r1, r4
 8008bb0:	eb12 0801 	adds.w	r8, r2, r1
 8008bb4:	4629      	mov	r1, r5
 8008bb6:	eb43 0901 	adc.w	r9, r3, r1
 8008bba:	f04f 0200 	mov.w	r2, #0
 8008bbe:	f04f 0300 	mov.w	r3, #0
 8008bc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008bc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008bca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008bce:	4690      	mov	r8, r2
 8008bd0:	4699      	mov	r9, r3
 8008bd2:	4623      	mov	r3, r4
 8008bd4:	eb18 0303 	adds.w	r3, r8, r3
 8008bd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008bdc:	462b      	mov	r3, r5
 8008bde:	eb49 0303 	adc.w	r3, r9, r3
 8008be2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bea:	685b      	ldr	r3, [r3, #4]
 8008bec:	2200      	movs	r2, #0
 8008bee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008bf2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008bf6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008bfa:	460b      	mov	r3, r1
 8008bfc:	18db      	adds	r3, r3, r3
 8008bfe:	653b      	str	r3, [r7, #80]	; 0x50
 8008c00:	4613      	mov	r3, r2
 8008c02:	eb42 0303 	adc.w	r3, r2, r3
 8008c06:	657b      	str	r3, [r7, #84]	; 0x54
 8008c08:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008c0c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008c10:	f7f8 f81a 	bl	8000c48 <__aeabi_uldivmod>
 8008c14:	4602      	mov	r2, r0
 8008c16:	460b      	mov	r3, r1
 8008c18:	4b61      	ldr	r3, [pc, #388]	; (8008da0 <UART_SetConfig+0x2d4>)
 8008c1a:	fba3 2302 	umull	r2, r3, r3, r2
 8008c1e:	095b      	lsrs	r3, r3, #5
 8008c20:	011c      	lsls	r4, r3, #4
 8008c22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c26:	2200      	movs	r2, #0
 8008c28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008c2c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008c30:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008c34:	4642      	mov	r2, r8
 8008c36:	464b      	mov	r3, r9
 8008c38:	1891      	adds	r1, r2, r2
 8008c3a:	64b9      	str	r1, [r7, #72]	; 0x48
 8008c3c:	415b      	adcs	r3, r3
 8008c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c40:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008c44:	4641      	mov	r1, r8
 8008c46:	eb12 0a01 	adds.w	sl, r2, r1
 8008c4a:	4649      	mov	r1, r9
 8008c4c:	eb43 0b01 	adc.w	fp, r3, r1
 8008c50:	f04f 0200 	mov.w	r2, #0
 8008c54:	f04f 0300 	mov.w	r3, #0
 8008c58:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008c5c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008c60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008c64:	4692      	mov	sl, r2
 8008c66:	469b      	mov	fp, r3
 8008c68:	4643      	mov	r3, r8
 8008c6a:	eb1a 0303 	adds.w	r3, sl, r3
 8008c6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008c72:	464b      	mov	r3, r9
 8008c74:	eb4b 0303 	adc.w	r3, fp, r3
 8008c78:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c80:	685b      	ldr	r3, [r3, #4]
 8008c82:	2200      	movs	r2, #0
 8008c84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008c88:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008c8c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008c90:	460b      	mov	r3, r1
 8008c92:	18db      	adds	r3, r3, r3
 8008c94:	643b      	str	r3, [r7, #64]	; 0x40
 8008c96:	4613      	mov	r3, r2
 8008c98:	eb42 0303 	adc.w	r3, r2, r3
 8008c9c:	647b      	str	r3, [r7, #68]	; 0x44
 8008c9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008ca2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008ca6:	f7f7 ffcf 	bl	8000c48 <__aeabi_uldivmod>
 8008caa:	4602      	mov	r2, r0
 8008cac:	460b      	mov	r3, r1
 8008cae:	4611      	mov	r1, r2
 8008cb0:	4b3b      	ldr	r3, [pc, #236]	; (8008da0 <UART_SetConfig+0x2d4>)
 8008cb2:	fba3 2301 	umull	r2, r3, r3, r1
 8008cb6:	095b      	lsrs	r3, r3, #5
 8008cb8:	2264      	movs	r2, #100	; 0x64
 8008cba:	fb02 f303 	mul.w	r3, r2, r3
 8008cbe:	1acb      	subs	r3, r1, r3
 8008cc0:	00db      	lsls	r3, r3, #3
 8008cc2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008cc6:	4b36      	ldr	r3, [pc, #216]	; (8008da0 <UART_SetConfig+0x2d4>)
 8008cc8:	fba3 2302 	umull	r2, r3, r3, r2
 8008ccc:	095b      	lsrs	r3, r3, #5
 8008cce:	005b      	lsls	r3, r3, #1
 8008cd0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008cd4:	441c      	add	r4, r3
 8008cd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008cda:	2200      	movs	r2, #0
 8008cdc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008ce0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008ce4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008ce8:	4642      	mov	r2, r8
 8008cea:	464b      	mov	r3, r9
 8008cec:	1891      	adds	r1, r2, r2
 8008cee:	63b9      	str	r1, [r7, #56]	; 0x38
 8008cf0:	415b      	adcs	r3, r3
 8008cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008cf4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008cf8:	4641      	mov	r1, r8
 8008cfa:	1851      	adds	r1, r2, r1
 8008cfc:	6339      	str	r1, [r7, #48]	; 0x30
 8008cfe:	4649      	mov	r1, r9
 8008d00:	414b      	adcs	r3, r1
 8008d02:	637b      	str	r3, [r7, #52]	; 0x34
 8008d04:	f04f 0200 	mov.w	r2, #0
 8008d08:	f04f 0300 	mov.w	r3, #0
 8008d0c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008d10:	4659      	mov	r1, fp
 8008d12:	00cb      	lsls	r3, r1, #3
 8008d14:	4651      	mov	r1, sl
 8008d16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008d1a:	4651      	mov	r1, sl
 8008d1c:	00ca      	lsls	r2, r1, #3
 8008d1e:	4610      	mov	r0, r2
 8008d20:	4619      	mov	r1, r3
 8008d22:	4603      	mov	r3, r0
 8008d24:	4642      	mov	r2, r8
 8008d26:	189b      	adds	r3, r3, r2
 8008d28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008d2c:	464b      	mov	r3, r9
 8008d2e:	460a      	mov	r2, r1
 8008d30:	eb42 0303 	adc.w	r3, r2, r3
 8008d34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d3c:	685b      	ldr	r3, [r3, #4]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008d44:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008d48:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008d4c:	460b      	mov	r3, r1
 8008d4e:	18db      	adds	r3, r3, r3
 8008d50:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d52:	4613      	mov	r3, r2
 8008d54:	eb42 0303 	adc.w	r3, r2, r3
 8008d58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008d5e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008d62:	f7f7 ff71 	bl	8000c48 <__aeabi_uldivmod>
 8008d66:	4602      	mov	r2, r0
 8008d68:	460b      	mov	r3, r1
 8008d6a:	4b0d      	ldr	r3, [pc, #52]	; (8008da0 <UART_SetConfig+0x2d4>)
 8008d6c:	fba3 1302 	umull	r1, r3, r3, r2
 8008d70:	095b      	lsrs	r3, r3, #5
 8008d72:	2164      	movs	r1, #100	; 0x64
 8008d74:	fb01 f303 	mul.w	r3, r1, r3
 8008d78:	1ad3      	subs	r3, r2, r3
 8008d7a:	00db      	lsls	r3, r3, #3
 8008d7c:	3332      	adds	r3, #50	; 0x32
 8008d7e:	4a08      	ldr	r2, [pc, #32]	; (8008da0 <UART_SetConfig+0x2d4>)
 8008d80:	fba2 2303 	umull	r2, r3, r2, r3
 8008d84:	095b      	lsrs	r3, r3, #5
 8008d86:	f003 0207 	and.w	r2, r3, #7
 8008d8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4422      	add	r2, r4
 8008d92:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008d94:	e105      	b.n	8008fa2 <UART_SetConfig+0x4d6>
 8008d96:	bf00      	nop
 8008d98:	40011000 	.word	0x40011000
 8008d9c:	40011400 	.word	0x40011400
 8008da0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008da4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008da8:	2200      	movs	r2, #0
 8008daa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008dae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008db2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008db6:	4642      	mov	r2, r8
 8008db8:	464b      	mov	r3, r9
 8008dba:	1891      	adds	r1, r2, r2
 8008dbc:	6239      	str	r1, [r7, #32]
 8008dbe:	415b      	adcs	r3, r3
 8008dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8008dc2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008dc6:	4641      	mov	r1, r8
 8008dc8:	1854      	adds	r4, r2, r1
 8008dca:	4649      	mov	r1, r9
 8008dcc:	eb43 0501 	adc.w	r5, r3, r1
 8008dd0:	f04f 0200 	mov.w	r2, #0
 8008dd4:	f04f 0300 	mov.w	r3, #0
 8008dd8:	00eb      	lsls	r3, r5, #3
 8008dda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008dde:	00e2      	lsls	r2, r4, #3
 8008de0:	4614      	mov	r4, r2
 8008de2:	461d      	mov	r5, r3
 8008de4:	4643      	mov	r3, r8
 8008de6:	18e3      	adds	r3, r4, r3
 8008de8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008dec:	464b      	mov	r3, r9
 8008dee:	eb45 0303 	adc.w	r3, r5, r3
 8008df2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008e02:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008e06:	f04f 0200 	mov.w	r2, #0
 8008e0a:	f04f 0300 	mov.w	r3, #0
 8008e0e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008e12:	4629      	mov	r1, r5
 8008e14:	008b      	lsls	r3, r1, #2
 8008e16:	4621      	mov	r1, r4
 8008e18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e1c:	4621      	mov	r1, r4
 8008e1e:	008a      	lsls	r2, r1, #2
 8008e20:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008e24:	f7f7 ff10 	bl	8000c48 <__aeabi_uldivmod>
 8008e28:	4602      	mov	r2, r0
 8008e2a:	460b      	mov	r3, r1
 8008e2c:	4b60      	ldr	r3, [pc, #384]	; (8008fb0 <UART_SetConfig+0x4e4>)
 8008e2e:	fba3 2302 	umull	r2, r3, r3, r2
 8008e32:	095b      	lsrs	r3, r3, #5
 8008e34:	011c      	lsls	r4, r3, #4
 8008e36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008e40:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008e44:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008e48:	4642      	mov	r2, r8
 8008e4a:	464b      	mov	r3, r9
 8008e4c:	1891      	adds	r1, r2, r2
 8008e4e:	61b9      	str	r1, [r7, #24]
 8008e50:	415b      	adcs	r3, r3
 8008e52:	61fb      	str	r3, [r7, #28]
 8008e54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008e58:	4641      	mov	r1, r8
 8008e5a:	1851      	adds	r1, r2, r1
 8008e5c:	6139      	str	r1, [r7, #16]
 8008e5e:	4649      	mov	r1, r9
 8008e60:	414b      	adcs	r3, r1
 8008e62:	617b      	str	r3, [r7, #20]
 8008e64:	f04f 0200 	mov.w	r2, #0
 8008e68:	f04f 0300 	mov.w	r3, #0
 8008e6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008e70:	4659      	mov	r1, fp
 8008e72:	00cb      	lsls	r3, r1, #3
 8008e74:	4651      	mov	r1, sl
 8008e76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e7a:	4651      	mov	r1, sl
 8008e7c:	00ca      	lsls	r2, r1, #3
 8008e7e:	4610      	mov	r0, r2
 8008e80:	4619      	mov	r1, r3
 8008e82:	4603      	mov	r3, r0
 8008e84:	4642      	mov	r2, r8
 8008e86:	189b      	adds	r3, r3, r2
 8008e88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008e8c:	464b      	mov	r3, r9
 8008e8e:	460a      	mov	r2, r1
 8008e90:	eb42 0303 	adc.w	r3, r2, r3
 8008e94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e9c:	685b      	ldr	r3, [r3, #4]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	67bb      	str	r3, [r7, #120]	; 0x78
 8008ea2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008ea4:	f04f 0200 	mov.w	r2, #0
 8008ea8:	f04f 0300 	mov.w	r3, #0
 8008eac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008eb0:	4649      	mov	r1, r9
 8008eb2:	008b      	lsls	r3, r1, #2
 8008eb4:	4641      	mov	r1, r8
 8008eb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008eba:	4641      	mov	r1, r8
 8008ebc:	008a      	lsls	r2, r1, #2
 8008ebe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008ec2:	f7f7 fec1 	bl	8000c48 <__aeabi_uldivmod>
 8008ec6:	4602      	mov	r2, r0
 8008ec8:	460b      	mov	r3, r1
 8008eca:	4b39      	ldr	r3, [pc, #228]	; (8008fb0 <UART_SetConfig+0x4e4>)
 8008ecc:	fba3 1302 	umull	r1, r3, r3, r2
 8008ed0:	095b      	lsrs	r3, r3, #5
 8008ed2:	2164      	movs	r1, #100	; 0x64
 8008ed4:	fb01 f303 	mul.w	r3, r1, r3
 8008ed8:	1ad3      	subs	r3, r2, r3
 8008eda:	011b      	lsls	r3, r3, #4
 8008edc:	3332      	adds	r3, #50	; 0x32
 8008ede:	4a34      	ldr	r2, [pc, #208]	; (8008fb0 <UART_SetConfig+0x4e4>)
 8008ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8008ee4:	095b      	lsrs	r3, r3, #5
 8008ee6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008eea:	441c      	add	r4, r3
 8008eec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	673b      	str	r3, [r7, #112]	; 0x70
 8008ef4:	677a      	str	r2, [r7, #116]	; 0x74
 8008ef6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008efa:	4642      	mov	r2, r8
 8008efc:	464b      	mov	r3, r9
 8008efe:	1891      	adds	r1, r2, r2
 8008f00:	60b9      	str	r1, [r7, #8]
 8008f02:	415b      	adcs	r3, r3
 8008f04:	60fb      	str	r3, [r7, #12]
 8008f06:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008f0a:	4641      	mov	r1, r8
 8008f0c:	1851      	adds	r1, r2, r1
 8008f0e:	6039      	str	r1, [r7, #0]
 8008f10:	4649      	mov	r1, r9
 8008f12:	414b      	adcs	r3, r1
 8008f14:	607b      	str	r3, [r7, #4]
 8008f16:	f04f 0200 	mov.w	r2, #0
 8008f1a:	f04f 0300 	mov.w	r3, #0
 8008f1e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008f22:	4659      	mov	r1, fp
 8008f24:	00cb      	lsls	r3, r1, #3
 8008f26:	4651      	mov	r1, sl
 8008f28:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f2c:	4651      	mov	r1, sl
 8008f2e:	00ca      	lsls	r2, r1, #3
 8008f30:	4610      	mov	r0, r2
 8008f32:	4619      	mov	r1, r3
 8008f34:	4603      	mov	r3, r0
 8008f36:	4642      	mov	r2, r8
 8008f38:	189b      	adds	r3, r3, r2
 8008f3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8008f3c:	464b      	mov	r3, r9
 8008f3e:	460a      	mov	r2, r1
 8008f40:	eb42 0303 	adc.w	r3, r2, r3
 8008f44:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f4a:	685b      	ldr	r3, [r3, #4]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	663b      	str	r3, [r7, #96]	; 0x60
 8008f50:	667a      	str	r2, [r7, #100]	; 0x64
 8008f52:	f04f 0200 	mov.w	r2, #0
 8008f56:	f04f 0300 	mov.w	r3, #0
 8008f5a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008f5e:	4649      	mov	r1, r9
 8008f60:	008b      	lsls	r3, r1, #2
 8008f62:	4641      	mov	r1, r8
 8008f64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f68:	4641      	mov	r1, r8
 8008f6a:	008a      	lsls	r2, r1, #2
 8008f6c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008f70:	f7f7 fe6a 	bl	8000c48 <__aeabi_uldivmod>
 8008f74:	4602      	mov	r2, r0
 8008f76:	460b      	mov	r3, r1
 8008f78:	4b0d      	ldr	r3, [pc, #52]	; (8008fb0 <UART_SetConfig+0x4e4>)
 8008f7a:	fba3 1302 	umull	r1, r3, r3, r2
 8008f7e:	095b      	lsrs	r3, r3, #5
 8008f80:	2164      	movs	r1, #100	; 0x64
 8008f82:	fb01 f303 	mul.w	r3, r1, r3
 8008f86:	1ad3      	subs	r3, r2, r3
 8008f88:	011b      	lsls	r3, r3, #4
 8008f8a:	3332      	adds	r3, #50	; 0x32
 8008f8c:	4a08      	ldr	r2, [pc, #32]	; (8008fb0 <UART_SetConfig+0x4e4>)
 8008f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8008f92:	095b      	lsrs	r3, r3, #5
 8008f94:	f003 020f 	and.w	r2, r3, #15
 8008f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	4422      	add	r2, r4
 8008fa0:	609a      	str	r2, [r3, #8]
}
 8008fa2:	bf00      	nop
 8008fa4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008fae:	bf00      	nop
 8008fb0:	51eb851f 	.word	0x51eb851f

08008fb4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008fb4:	b084      	sub	sp, #16
 8008fb6:	b580      	push	{r7, lr}
 8008fb8:	b084      	sub	sp, #16
 8008fba:	af00      	add	r7, sp, #0
 8008fbc:	6078      	str	r0, [r7, #4]
 8008fbe:	f107 001c 	add.w	r0, r7, #28
 8008fc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc8:	2b01      	cmp	r3, #1
 8008fca:	d122      	bne.n	8009012 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fd0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	68db      	ldr	r3, [r3, #12]
 8008fdc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008fe0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fe4:	687a      	ldr	r2, [r7, #4]
 8008fe6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	68db      	ldr	r3, [r3, #12]
 8008fec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008ff4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ff6:	2b01      	cmp	r3, #1
 8008ff8:	d105      	bne.n	8009006 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	68db      	ldr	r3, [r3, #12]
 8008ffe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f001 fb1c 	bl	800a644 <USB_CoreReset>
 800900c:	4603      	mov	r3, r0
 800900e:	73fb      	strb	r3, [r7, #15]
 8009010:	e01a      	b.n	8009048 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	68db      	ldr	r3, [r3, #12]
 8009016:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f001 fb10 	bl	800a644 <USB_CoreReset>
 8009024:	4603      	mov	r3, r0
 8009026:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009028:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800902a:	2b00      	cmp	r3, #0
 800902c:	d106      	bne.n	800903c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009032:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	639a      	str	r2, [r3, #56]	; 0x38
 800903a:	e005      	b.n	8009048 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009040:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800904a:	2b01      	cmp	r3, #1
 800904c:	d10b      	bne.n	8009066 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	689b      	ldr	r3, [r3, #8]
 8009052:	f043 0206 	orr.w	r2, r3, #6
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	689b      	ldr	r3, [r3, #8]
 800905e:	f043 0220 	orr.w	r2, r3, #32
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009066:	7bfb      	ldrb	r3, [r7, #15]
}
 8009068:	4618      	mov	r0, r3
 800906a:	3710      	adds	r7, #16
 800906c:	46bd      	mov	sp, r7
 800906e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009072:	b004      	add	sp, #16
 8009074:	4770      	bx	lr
	...

08009078 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009078:	b480      	push	{r7}
 800907a:	b087      	sub	sp, #28
 800907c:	af00      	add	r7, sp, #0
 800907e:	60f8      	str	r0, [r7, #12]
 8009080:	60b9      	str	r1, [r7, #8]
 8009082:	4613      	mov	r3, r2
 8009084:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009086:	79fb      	ldrb	r3, [r7, #7]
 8009088:	2b02      	cmp	r3, #2
 800908a:	d165      	bne.n	8009158 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	4a41      	ldr	r2, [pc, #260]	; (8009194 <USB_SetTurnaroundTime+0x11c>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d906      	bls.n	80090a2 <USB_SetTurnaroundTime+0x2a>
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	4a40      	ldr	r2, [pc, #256]	; (8009198 <USB_SetTurnaroundTime+0x120>)
 8009098:	4293      	cmp	r3, r2
 800909a:	d202      	bcs.n	80090a2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800909c:	230f      	movs	r3, #15
 800909e:	617b      	str	r3, [r7, #20]
 80090a0:	e062      	b.n	8009168 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	4a3c      	ldr	r2, [pc, #240]	; (8009198 <USB_SetTurnaroundTime+0x120>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d306      	bcc.n	80090b8 <USB_SetTurnaroundTime+0x40>
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	4a3b      	ldr	r2, [pc, #236]	; (800919c <USB_SetTurnaroundTime+0x124>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d202      	bcs.n	80090b8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80090b2:	230e      	movs	r3, #14
 80090b4:	617b      	str	r3, [r7, #20]
 80090b6:	e057      	b.n	8009168 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	4a38      	ldr	r2, [pc, #224]	; (800919c <USB_SetTurnaroundTime+0x124>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	d306      	bcc.n	80090ce <USB_SetTurnaroundTime+0x56>
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	4a37      	ldr	r2, [pc, #220]	; (80091a0 <USB_SetTurnaroundTime+0x128>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d202      	bcs.n	80090ce <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80090c8:	230d      	movs	r3, #13
 80090ca:	617b      	str	r3, [r7, #20]
 80090cc:	e04c      	b.n	8009168 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	4a33      	ldr	r2, [pc, #204]	; (80091a0 <USB_SetTurnaroundTime+0x128>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d306      	bcc.n	80090e4 <USB_SetTurnaroundTime+0x6c>
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	4a32      	ldr	r2, [pc, #200]	; (80091a4 <USB_SetTurnaroundTime+0x12c>)
 80090da:	4293      	cmp	r3, r2
 80090dc:	d802      	bhi.n	80090e4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80090de:	230c      	movs	r3, #12
 80090e0:	617b      	str	r3, [r7, #20]
 80090e2:	e041      	b.n	8009168 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	4a2f      	ldr	r2, [pc, #188]	; (80091a4 <USB_SetTurnaroundTime+0x12c>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d906      	bls.n	80090fa <USB_SetTurnaroundTime+0x82>
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	4a2e      	ldr	r2, [pc, #184]	; (80091a8 <USB_SetTurnaroundTime+0x130>)
 80090f0:	4293      	cmp	r3, r2
 80090f2:	d802      	bhi.n	80090fa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80090f4:	230b      	movs	r3, #11
 80090f6:	617b      	str	r3, [r7, #20]
 80090f8:	e036      	b.n	8009168 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	4a2a      	ldr	r2, [pc, #168]	; (80091a8 <USB_SetTurnaroundTime+0x130>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d906      	bls.n	8009110 <USB_SetTurnaroundTime+0x98>
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	4a29      	ldr	r2, [pc, #164]	; (80091ac <USB_SetTurnaroundTime+0x134>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d802      	bhi.n	8009110 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800910a:	230a      	movs	r3, #10
 800910c:	617b      	str	r3, [r7, #20]
 800910e:	e02b      	b.n	8009168 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	4a26      	ldr	r2, [pc, #152]	; (80091ac <USB_SetTurnaroundTime+0x134>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d906      	bls.n	8009126 <USB_SetTurnaroundTime+0xae>
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	4a25      	ldr	r2, [pc, #148]	; (80091b0 <USB_SetTurnaroundTime+0x138>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d202      	bcs.n	8009126 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009120:	2309      	movs	r3, #9
 8009122:	617b      	str	r3, [r7, #20]
 8009124:	e020      	b.n	8009168 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	4a21      	ldr	r2, [pc, #132]	; (80091b0 <USB_SetTurnaroundTime+0x138>)
 800912a:	4293      	cmp	r3, r2
 800912c:	d306      	bcc.n	800913c <USB_SetTurnaroundTime+0xc4>
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	4a20      	ldr	r2, [pc, #128]	; (80091b4 <USB_SetTurnaroundTime+0x13c>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d802      	bhi.n	800913c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009136:	2308      	movs	r3, #8
 8009138:	617b      	str	r3, [r7, #20]
 800913a:	e015      	b.n	8009168 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	4a1d      	ldr	r2, [pc, #116]	; (80091b4 <USB_SetTurnaroundTime+0x13c>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d906      	bls.n	8009152 <USB_SetTurnaroundTime+0xda>
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	4a1c      	ldr	r2, [pc, #112]	; (80091b8 <USB_SetTurnaroundTime+0x140>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d202      	bcs.n	8009152 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800914c:	2307      	movs	r3, #7
 800914e:	617b      	str	r3, [r7, #20]
 8009150:	e00a      	b.n	8009168 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009152:	2306      	movs	r3, #6
 8009154:	617b      	str	r3, [r7, #20]
 8009156:	e007      	b.n	8009168 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009158:	79fb      	ldrb	r3, [r7, #7]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d102      	bne.n	8009164 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800915e:	2309      	movs	r3, #9
 8009160:	617b      	str	r3, [r7, #20]
 8009162:	e001      	b.n	8009168 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009164:	2309      	movs	r3, #9
 8009166:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	68db      	ldr	r3, [r3, #12]
 800916c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	68da      	ldr	r2, [r3, #12]
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	029b      	lsls	r3, r3, #10
 800917c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009180:	431a      	orrs	r2, r3
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009186:	2300      	movs	r3, #0
}
 8009188:	4618      	mov	r0, r3
 800918a:	371c      	adds	r7, #28
 800918c:	46bd      	mov	sp, r7
 800918e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009192:	4770      	bx	lr
 8009194:	00d8acbf 	.word	0x00d8acbf
 8009198:	00e4e1c0 	.word	0x00e4e1c0
 800919c:	00f42400 	.word	0x00f42400
 80091a0:	01067380 	.word	0x01067380
 80091a4:	011a499f 	.word	0x011a499f
 80091a8:	01312cff 	.word	0x01312cff
 80091ac:	014ca43f 	.word	0x014ca43f
 80091b0:	016e3600 	.word	0x016e3600
 80091b4:	01a6ab1f 	.word	0x01a6ab1f
 80091b8:	01e84800 	.word	0x01e84800

080091bc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80091bc:	b480      	push	{r7}
 80091be:	b083      	sub	sp, #12
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	689b      	ldr	r3, [r3, #8]
 80091c8:	f043 0201 	orr.w	r2, r3, #1
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80091d0:	2300      	movs	r3, #0
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	370c      	adds	r7, #12
 80091d6:	46bd      	mov	sp, r7
 80091d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091dc:	4770      	bx	lr

080091de <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80091de:	b480      	push	{r7}
 80091e0:	b083      	sub	sp, #12
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	689b      	ldr	r3, [r3, #8]
 80091ea:	f023 0201 	bic.w	r2, r3, #1
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80091f2:	2300      	movs	r3, #0
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	370c      	adds	r7, #12
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr

08009200 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b084      	sub	sp, #16
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	460b      	mov	r3, r1
 800920a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800920c:	2300      	movs	r3, #0
 800920e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	68db      	ldr	r3, [r3, #12]
 8009214:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800921c:	78fb      	ldrb	r3, [r7, #3]
 800921e:	2b01      	cmp	r3, #1
 8009220:	d115      	bne.n	800924e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	68db      	ldr	r3, [r3, #12]
 8009226:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800922e:	2001      	movs	r0, #1
 8009230:	f7fb f8fa 	bl	8004428 <HAL_Delay>
      ms++;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	3301      	adds	r3, #1
 8009238:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f001 f972 	bl	800a524 <USB_GetMode>
 8009240:	4603      	mov	r3, r0
 8009242:	2b01      	cmp	r3, #1
 8009244:	d01e      	beq.n	8009284 <USB_SetCurrentMode+0x84>
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2b31      	cmp	r3, #49	; 0x31
 800924a:	d9f0      	bls.n	800922e <USB_SetCurrentMode+0x2e>
 800924c:	e01a      	b.n	8009284 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800924e:	78fb      	ldrb	r3, [r7, #3]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d115      	bne.n	8009280 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	68db      	ldr	r3, [r3, #12]
 8009258:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009260:	2001      	movs	r0, #1
 8009262:	f7fb f8e1 	bl	8004428 <HAL_Delay>
      ms++;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	3301      	adds	r3, #1
 800926a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f001 f959 	bl	800a524 <USB_GetMode>
 8009272:	4603      	mov	r3, r0
 8009274:	2b00      	cmp	r3, #0
 8009276:	d005      	beq.n	8009284 <USB_SetCurrentMode+0x84>
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2b31      	cmp	r3, #49	; 0x31
 800927c:	d9f0      	bls.n	8009260 <USB_SetCurrentMode+0x60>
 800927e:	e001      	b.n	8009284 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009280:	2301      	movs	r3, #1
 8009282:	e005      	b.n	8009290 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	2b32      	cmp	r3, #50	; 0x32
 8009288:	d101      	bne.n	800928e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800928a:	2301      	movs	r3, #1
 800928c:	e000      	b.n	8009290 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800928e:	2300      	movs	r3, #0
}
 8009290:	4618      	mov	r0, r3
 8009292:	3710      	adds	r7, #16
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}

08009298 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009298:	b084      	sub	sp, #16
 800929a:	b580      	push	{r7, lr}
 800929c:	b086      	sub	sp, #24
 800929e:	af00      	add	r7, sp, #0
 80092a0:	6078      	str	r0, [r7, #4]
 80092a2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80092a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80092aa:	2300      	movs	r3, #0
 80092ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80092b2:	2300      	movs	r3, #0
 80092b4:	613b      	str	r3, [r7, #16]
 80092b6:	e009      	b.n	80092cc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80092b8:	687a      	ldr	r2, [r7, #4]
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	3340      	adds	r3, #64	; 0x40
 80092be:	009b      	lsls	r3, r3, #2
 80092c0:	4413      	add	r3, r2
 80092c2:	2200      	movs	r2, #0
 80092c4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	3301      	adds	r3, #1
 80092ca:	613b      	str	r3, [r7, #16]
 80092cc:	693b      	ldr	r3, [r7, #16]
 80092ce:	2b0e      	cmp	r3, #14
 80092d0:	d9f2      	bls.n	80092b8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80092d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d11c      	bne.n	8009312 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092de:	685b      	ldr	r3, [r3, #4]
 80092e0:	68fa      	ldr	r2, [r7, #12]
 80092e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80092e6:	f043 0302 	orr.w	r3, r3, #2
 80092ea:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092f0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092fc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009308:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	639a      	str	r2, [r3, #56]	; 0x38
 8009310:	e00b      	b.n	800932a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009316:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009322:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009330:	461a      	mov	r2, r3
 8009332:	2300      	movs	r3, #0
 8009334:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800933c:	4619      	mov	r1, r3
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009344:	461a      	mov	r2, r3
 8009346:	680b      	ldr	r3, [r1, #0]
 8009348:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800934a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800934c:	2b01      	cmp	r3, #1
 800934e:	d10c      	bne.n	800936a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009352:	2b00      	cmp	r3, #0
 8009354:	d104      	bne.n	8009360 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009356:	2100      	movs	r1, #0
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f000 f945 	bl	80095e8 <USB_SetDevSpeed>
 800935e:	e008      	b.n	8009372 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009360:	2101      	movs	r1, #1
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f000 f940 	bl	80095e8 <USB_SetDevSpeed>
 8009368:	e003      	b.n	8009372 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800936a:	2103      	movs	r1, #3
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f000 f93b 	bl	80095e8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009372:	2110      	movs	r1, #16
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f000 f8f3 	bl	8009560 <USB_FlushTxFifo>
 800937a:	4603      	mov	r3, r0
 800937c:	2b00      	cmp	r3, #0
 800937e:	d001      	beq.n	8009384 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8009380:	2301      	movs	r3, #1
 8009382:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f000 f90f 	bl	80095a8 <USB_FlushRxFifo>
 800938a:	4603      	mov	r3, r0
 800938c:	2b00      	cmp	r3, #0
 800938e:	d001      	beq.n	8009394 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8009390:	2301      	movs	r3, #1
 8009392:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800939a:	461a      	mov	r2, r3
 800939c:	2300      	movs	r3, #0
 800939e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093a6:	461a      	mov	r2, r3
 80093a8:	2300      	movs	r3, #0
 80093aa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093b2:	461a      	mov	r2, r3
 80093b4:	2300      	movs	r3, #0
 80093b6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80093b8:	2300      	movs	r3, #0
 80093ba:	613b      	str	r3, [r7, #16]
 80093bc:	e043      	b.n	8009446 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	015a      	lsls	r2, r3, #5
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	4413      	add	r3, r2
 80093c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80093d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80093d4:	d118      	bne.n	8009408 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d10a      	bne.n	80093f2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	015a      	lsls	r2, r3, #5
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	4413      	add	r3, r2
 80093e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093e8:	461a      	mov	r2, r3
 80093ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80093ee:	6013      	str	r3, [r2, #0]
 80093f0:	e013      	b.n	800941a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80093f2:	693b      	ldr	r3, [r7, #16]
 80093f4:	015a      	lsls	r2, r3, #5
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	4413      	add	r3, r2
 80093fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093fe:	461a      	mov	r2, r3
 8009400:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009404:	6013      	str	r3, [r2, #0]
 8009406:	e008      	b.n	800941a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	015a      	lsls	r2, r3, #5
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	4413      	add	r3, r2
 8009410:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009414:	461a      	mov	r2, r3
 8009416:	2300      	movs	r3, #0
 8009418:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	015a      	lsls	r2, r3, #5
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	4413      	add	r3, r2
 8009422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009426:	461a      	mov	r2, r3
 8009428:	2300      	movs	r3, #0
 800942a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	015a      	lsls	r2, r3, #5
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	4413      	add	r3, r2
 8009434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009438:	461a      	mov	r2, r3
 800943a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800943e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	3301      	adds	r3, #1
 8009444:	613b      	str	r3, [r7, #16]
 8009446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009448:	693a      	ldr	r2, [r7, #16]
 800944a:	429a      	cmp	r2, r3
 800944c:	d3b7      	bcc.n	80093be <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800944e:	2300      	movs	r3, #0
 8009450:	613b      	str	r3, [r7, #16]
 8009452:	e043      	b.n	80094dc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	015a      	lsls	r2, r3, #5
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	4413      	add	r3, r2
 800945c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009466:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800946a:	d118      	bne.n	800949e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d10a      	bne.n	8009488 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	015a      	lsls	r2, r3, #5
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	4413      	add	r3, r2
 800947a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800947e:	461a      	mov	r2, r3
 8009480:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009484:	6013      	str	r3, [r2, #0]
 8009486:	e013      	b.n	80094b0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	015a      	lsls	r2, r3, #5
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	4413      	add	r3, r2
 8009490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009494:	461a      	mov	r2, r3
 8009496:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800949a:	6013      	str	r3, [r2, #0]
 800949c:	e008      	b.n	80094b0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800949e:	693b      	ldr	r3, [r7, #16]
 80094a0:	015a      	lsls	r2, r3, #5
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	4413      	add	r3, r2
 80094a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094aa:	461a      	mov	r2, r3
 80094ac:	2300      	movs	r3, #0
 80094ae:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80094b0:	693b      	ldr	r3, [r7, #16]
 80094b2:	015a      	lsls	r2, r3, #5
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	4413      	add	r3, r2
 80094b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094bc:	461a      	mov	r2, r3
 80094be:	2300      	movs	r3, #0
 80094c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80094c2:	693b      	ldr	r3, [r7, #16]
 80094c4:	015a      	lsls	r2, r3, #5
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	4413      	add	r3, r2
 80094ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094ce:	461a      	mov	r2, r3
 80094d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80094d4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80094d6:	693b      	ldr	r3, [r7, #16]
 80094d8:	3301      	adds	r3, #1
 80094da:	613b      	str	r3, [r7, #16]
 80094dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094de:	693a      	ldr	r2, [r7, #16]
 80094e0:	429a      	cmp	r2, r3
 80094e2:	d3b7      	bcc.n	8009454 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094ea:	691b      	ldr	r3, [r3, #16]
 80094ec:	68fa      	ldr	r2, [r7, #12]
 80094ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80094f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80094f6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2200      	movs	r2, #0
 80094fc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009504:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009508:	2b00      	cmp	r3, #0
 800950a:	d105      	bne.n	8009518 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	699b      	ldr	r3, [r3, #24]
 8009510:	f043 0210 	orr.w	r2, r3, #16
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	699a      	ldr	r2, [r3, #24]
 800951c:	4b0f      	ldr	r3, [pc, #60]	; (800955c <USB_DevInit+0x2c4>)
 800951e:	4313      	orrs	r3, r2
 8009520:	687a      	ldr	r2, [r7, #4]
 8009522:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009526:	2b00      	cmp	r3, #0
 8009528:	d005      	beq.n	8009536 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	699b      	ldr	r3, [r3, #24]
 800952e:	f043 0208 	orr.w	r2, r3, #8
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009538:	2b01      	cmp	r3, #1
 800953a:	d107      	bne.n	800954c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	699b      	ldr	r3, [r3, #24]
 8009540:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009544:	f043 0304 	orr.w	r3, r3, #4
 8009548:	687a      	ldr	r2, [r7, #4]
 800954a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800954c:	7dfb      	ldrb	r3, [r7, #23]
}
 800954e:	4618      	mov	r0, r3
 8009550:	3718      	adds	r7, #24
 8009552:	46bd      	mov	sp, r7
 8009554:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009558:	b004      	add	sp, #16
 800955a:	4770      	bx	lr
 800955c:	803c3800 	.word	0x803c3800

08009560 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009560:	b480      	push	{r7}
 8009562:	b085      	sub	sp, #20
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
 8009568:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800956a:	2300      	movs	r3, #0
 800956c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	019b      	lsls	r3, r3, #6
 8009572:	f043 0220 	orr.w	r2, r3, #32
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	3301      	adds	r3, #1
 800957e:	60fb      	str	r3, [r7, #12]
 8009580:	4a08      	ldr	r2, [pc, #32]	; (80095a4 <USB_FlushTxFifo+0x44>)
 8009582:	4293      	cmp	r3, r2
 8009584:	d901      	bls.n	800958a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8009586:	2303      	movs	r3, #3
 8009588:	e006      	b.n	8009598 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	691b      	ldr	r3, [r3, #16]
 800958e:	f003 0320 	and.w	r3, r3, #32
 8009592:	2b20      	cmp	r3, #32
 8009594:	d0f1      	beq.n	800957a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009596:	2300      	movs	r3, #0
}
 8009598:	4618      	mov	r0, r3
 800959a:	3714      	adds	r7, #20
 800959c:	46bd      	mov	sp, r7
 800959e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a2:	4770      	bx	lr
 80095a4:	00030d40 	.word	0x00030d40

080095a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b085      	sub	sp, #20
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80095b0:	2300      	movs	r3, #0
 80095b2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2210      	movs	r2, #16
 80095b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	3301      	adds	r3, #1
 80095be:	60fb      	str	r3, [r7, #12]
 80095c0:	4a08      	ldr	r2, [pc, #32]	; (80095e4 <USB_FlushRxFifo+0x3c>)
 80095c2:	4293      	cmp	r3, r2
 80095c4:	d901      	bls.n	80095ca <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80095c6:	2303      	movs	r3, #3
 80095c8:	e006      	b.n	80095d8 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	691b      	ldr	r3, [r3, #16]
 80095ce:	f003 0310 	and.w	r3, r3, #16
 80095d2:	2b10      	cmp	r3, #16
 80095d4:	d0f1      	beq.n	80095ba <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80095d6:	2300      	movs	r3, #0
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3714      	adds	r7, #20
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr
 80095e4:	00030d40 	.word	0x00030d40

080095e8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b085      	sub	sp, #20
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
 80095f0:	460b      	mov	r3, r1
 80095f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095fe:	681a      	ldr	r2, [r3, #0]
 8009600:	78fb      	ldrb	r3, [r7, #3]
 8009602:	68f9      	ldr	r1, [r7, #12]
 8009604:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009608:	4313      	orrs	r3, r2
 800960a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800960c:	2300      	movs	r3, #0
}
 800960e:	4618      	mov	r0, r3
 8009610:	3714      	adds	r7, #20
 8009612:	46bd      	mov	sp, r7
 8009614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009618:	4770      	bx	lr

0800961a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800961a:	b480      	push	{r7}
 800961c:	b087      	sub	sp, #28
 800961e:	af00      	add	r7, sp, #0
 8009620:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800962c:	689b      	ldr	r3, [r3, #8]
 800962e:	f003 0306 	and.w	r3, r3, #6
 8009632:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d102      	bne.n	8009640 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800963a:	2300      	movs	r3, #0
 800963c:	75fb      	strb	r3, [r7, #23]
 800963e:	e00a      	b.n	8009656 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2b02      	cmp	r3, #2
 8009644:	d002      	beq.n	800964c <USB_GetDevSpeed+0x32>
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	2b06      	cmp	r3, #6
 800964a:	d102      	bne.n	8009652 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800964c:	2302      	movs	r3, #2
 800964e:	75fb      	strb	r3, [r7, #23]
 8009650:	e001      	b.n	8009656 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009652:	230f      	movs	r3, #15
 8009654:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009656:	7dfb      	ldrb	r3, [r7, #23]
}
 8009658:	4618      	mov	r0, r3
 800965a:	371c      	adds	r7, #28
 800965c:	46bd      	mov	sp, r7
 800965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009662:	4770      	bx	lr

08009664 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009664:	b480      	push	{r7}
 8009666:	b085      	sub	sp, #20
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
 800966c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	781b      	ldrb	r3, [r3, #0]
 8009676:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	785b      	ldrb	r3, [r3, #1]
 800967c:	2b01      	cmp	r3, #1
 800967e:	d13a      	bne.n	80096f6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009686:	69da      	ldr	r2, [r3, #28]
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	781b      	ldrb	r3, [r3, #0]
 800968c:	f003 030f 	and.w	r3, r3, #15
 8009690:	2101      	movs	r1, #1
 8009692:	fa01 f303 	lsl.w	r3, r1, r3
 8009696:	b29b      	uxth	r3, r3
 8009698:	68f9      	ldr	r1, [r7, #12]
 800969a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800969e:	4313      	orrs	r3, r2
 80096a0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	015a      	lsls	r2, r3, #5
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	4413      	add	r3, r2
 80096aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d155      	bne.n	8009764 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	015a      	lsls	r2, r3, #5
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	4413      	add	r3, r2
 80096c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096c4:	681a      	ldr	r2, [r3, #0]
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	689b      	ldr	r3, [r3, #8]
 80096ca:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	78db      	ldrb	r3, [r3, #3]
 80096d2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80096d4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	059b      	lsls	r3, r3, #22
 80096da:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80096dc:	4313      	orrs	r3, r2
 80096de:	68ba      	ldr	r2, [r7, #8]
 80096e0:	0151      	lsls	r1, r2, #5
 80096e2:	68fa      	ldr	r2, [r7, #12]
 80096e4:	440a      	add	r2, r1
 80096e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80096ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096f2:	6013      	str	r3, [r2, #0]
 80096f4:	e036      	b.n	8009764 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096fc:	69da      	ldr	r2, [r3, #28]
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	781b      	ldrb	r3, [r3, #0]
 8009702:	f003 030f 	and.w	r3, r3, #15
 8009706:	2101      	movs	r1, #1
 8009708:	fa01 f303 	lsl.w	r3, r1, r3
 800970c:	041b      	lsls	r3, r3, #16
 800970e:	68f9      	ldr	r1, [r7, #12]
 8009710:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009714:	4313      	orrs	r3, r2
 8009716:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	015a      	lsls	r2, r3, #5
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	4413      	add	r3, r2
 8009720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800972a:	2b00      	cmp	r3, #0
 800972c:	d11a      	bne.n	8009764 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	015a      	lsls	r2, r3, #5
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	4413      	add	r3, r2
 8009736:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800973a:	681a      	ldr	r2, [r3, #0]
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	689b      	ldr	r3, [r3, #8]
 8009740:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	78db      	ldrb	r3, [r3, #3]
 8009748:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800974a:	430b      	orrs	r3, r1
 800974c:	4313      	orrs	r3, r2
 800974e:	68ba      	ldr	r2, [r7, #8]
 8009750:	0151      	lsls	r1, r2, #5
 8009752:	68fa      	ldr	r2, [r7, #12]
 8009754:	440a      	add	r2, r1
 8009756:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800975a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800975e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009762:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009764:	2300      	movs	r3, #0
}
 8009766:	4618      	mov	r0, r3
 8009768:	3714      	adds	r7, #20
 800976a:	46bd      	mov	sp, r7
 800976c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009770:	4770      	bx	lr
	...

08009774 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009774:	b480      	push	{r7}
 8009776:	b085      	sub	sp, #20
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
 800977c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	781b      	ldrb	r3, [r3, #0]
 8009786:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	785b      	ldrb	r3, [r3, #1]
 800978c:	2b01      	cmp	r3, #1
 800978e:	d161      	bne.n	8009854 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	015a      	lsls	r2, r3, #5
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	4413      	add	r3, r2
 8009798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80097a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80097a6:	d11f      	bne.n	80097e8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	015a      	lsls	r2, r3, #5
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	4413      	add	r3, r2
 80097b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	68ba      	ldr	r2, [r7, #8]
 80097b8:	0151      	lsls	r1, r2, #5
 80097ba:	68fa      	ldr	r2, [r7, #12]
 80097bc:	440a      	add	r2, r1
 80097be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80097c6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	015a      	lsls	r2, r3, #5
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	4413      	add	r3, r2
 80097d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	68ba      	ldr	r2, [r7, #8]
 80097d8:	0151      	lsls	r1, r2, #5
 80097da:	68fa      	ldr	r2, [r7, #12]
 80097dc:	440a      	add	r2, r1
 80097de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80097e6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	781b      	ldrb	r3, [r3, #0]
 80097f4:	f003 030f 	and.w	r3, r3, #15
 80097f8:	2101      	movs	r1, #1
 80097fa:	fa01 f303 	lsl.w	r3, r1, r3
 80097fe:	b29b      	uxth	r3, r3
 8009800:	43db      	mvns	r3, r3
 8009802:	68f9      	ldr	r1, [r7, #12]
 8009804:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009808:	4013      	ands	r3, r2
 800980a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009812:	69da      	ldr	r2, [r3, #28]
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	781b      	ldrb	r3, [r3, #0]
 8009818:	f003 030f 	and.w	r3, r3, #15
 800981c:	2101      	movs	r1, #1
 800981e:	fa01 f303 	lsl.w	r3, r1, r3
 8009822:	b29b      	uxth	r3, r3
 8009824:	43db      	mvns	r3, r3
 8009826:	68f9      	ldr	r1, [r7, #12]
 8009828:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800982c:	4013      	ands	r3, r2
 800982e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	015a      	lsls	r2, r3, #5
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	4413      	add	r3, r2
 8009838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800983c:	681a      	ldr	r2, [r3, #0]
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	0159      	lsls	r1, r3, #5
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	440b      	add	r3, r1
 8009846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800984a:	4619      	mov	r1, r3
 800984c:	4b35      	ldr	r3, [pc, #212]	; (8009924 <USB_DeactivateEndpoint+0x1b0>)
 800984e:	4013      	ands	r3, r2
 8009850:	600b      	str	r3, [r1, #0]
 8009852:	e060      	b.n	8009916 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	015a      	lsls	r2, r3, #5
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	4413      	add	r3, r2
 800985c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009866:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800986a:	d11f      	bne.n	80098ac <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	015a      	lsls	r2, r3, #5
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	4413      	add	r3, r2
 8009874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	68ba      	ldr	r2, [r7, #8]
 800987c:	0151      	lsls	r1, r2, #5
 800987e:	68fa      	ldr	r2, [r7, #12]
 8009880:	440a      	add	r2, r1
 8009882:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009886:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800988a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	015a      	lsls	r2, r3, #5
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	4413      	add	r3, r2
 8009894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	68ba      	ldr	r2, [r7, #8]
 800989c:	0151      	lsls	r1, r2, #5
 800989e:	68fa      	ldr	r2, [r7, #12]
 80098a0:	440a      	add	r2, r1
 80098a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80098aa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	781b      	ldrb	r3, [r3, #0]
 80098b8:	f003 030f 	and.w	r3, r3, #15
 80098bc:	2101      	movs	r1, #1
 80098be:	fa01 f303 	lsl.w	r3, r1, r3
 80098c2:	041b      	lsls	r3, r3, #16
 80098c4:	43db      	mvns	r3, r3
 80098c6:	68f9      	ldr	r1, [r7, #12]
 80098c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80098cc:	4013      	ands	r3, r2
 80098ce:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098d6:	69da      	ldr	r2, [r3, #28]
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	781b      	ldrb	r3, [r3, #0]
 80098dc:	f003 030f 	and.w	r3, r3, #15
 80098e0:	2101      	movs	r1, #1
 80098e2:	fa01 f303 	lsl.w	r3, r1, r3
 80098e6:	041b      	lsls	r3, r3, #16
 80098e8:	43db      	mvns	r3, r3
 80098ea:	68f9      	ldr	r1, [r7, #12]
 80098ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80098f0:	4013      	ands	r3, r2
 80098f2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	015a      	lsls	r2, r3, #5
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	4413      	add	r3, r2
 80098fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009900:	681a      	ldr	r2, [r3, #0]
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	0159      	lsls	r1, r3, #5
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	440b      	add	r3, r1
 800990a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800990e:	4619      	mov	r1, r3
 8009910:	4b05      	ldr	r3, [pc, #20]	; (8009928 <USB_DeactivateEndpoint+0x1b4>)
 8009912:	4013      	ands	r3, r2
 8009914:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009916:	2300      	movs	r3, #0
}
 8009918:	4618      	mov	r0, r3
 800991a:	3714      	adds	r7, #20
 800991c:	46bd      	mov	sp, r7
 800991e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009922:	4770      	bx	lr
 8009924:	ec337800 	.word	0xec337800
 8009928:	eff37800 	.word	0xeff37800

0800992c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b08a      	sub	sp, #40	; 0x28
 8009930:	af02      	add	r7, sp, #8
 8009932:	60f8      	str	r0, [r7, #12]
 8009934:	60b9      	str	r1, [r7, #8]
 8009936:	4613      	mov	r3, r2
 8009938:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	781b      	ldrb	r3, [r3, #0]
 8009942:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	785b      	ldrb	r3, [r3, #1]
 8009948:	2b01      	cmp	r3, #1
 800994a:	f040 815c 	bne.w	8009c06 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	695b      	ldr	r3, [r3, #20]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d132      	bne.n	80099bc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009956:	69bb      	ldr	r3, [r7, #24]
 8009958:	015a      	lsls	r2, r3, #5
 800995a:	69fb      	ldr	r3, [r7, #28]
 800995c:	4413      	add	r3, r2
 800995e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009962:	691b      	ldr	r3, [r3, #16]
 8009964:	69ba      	ldr	r2, [r7, #24]
 8009966:	0151      	lsls	r1, r2, #5
 8009968:	69fa      	ldr	r2, [r7, #28]
 800996a:	440a      	add	r2, r1
 800996c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009970:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009974:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009978:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800997a:	69bb      	ldr	r3, [r7, #24]
 800997c:	015a      	lsls	r2, r3, #5
 800997e:	69fb      	ldr	r3, [r7, #28]
 8009980:	4413      	add	r3, r2
 8009982:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009986:	691b      	ldr	r3, [r3, #16]
 8009988:	69ba      	ldr	r2, [r7, #24]
 800998a:	0151      	lsls	r1, r2, #5
 800998c:	69fa      	ldr	r2, [r7, #28]
 800998e:	440a      	add	r2, r1
 8009990:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009994:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009998:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800999a:	69bb      	ldr	r3, [r7, #24]
 800999c:	015a      	lsls	r2, r3, #5
 800999e:	69fb      	ldr	r3, [r7, #28]
 80099a0:	4413      	add	r3, r2
 80099a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099a6:	691b      	ldr	r3, [r3, #16]
 80099a8:	69ba      	ldr	r2, [r7, #24]
 80099aa:	0151      	lsls	r1, r2, #5
 80099ac:	69fa      	ldr	r2, [r7, #28]
 80099ae:	440a      	add	r2, r1
 80099b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099b4:	0cdb      	lsrs	r3, r3, #19
 80099b6:	04db      	lsls	r3, r3, #19
 80099b8:	6113      	str	r3, [r2, #16]
 80099ba:	e074      	b.n	8009aa6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80099bc:	69bb      	ldr	r3, [r7, #24]
 80099be:	015a      	lsls	r2, r3, #5
 80099c0:	69fb      	ldr	r3, [r7, #28]
 80099c2:	4413      	add	r3, r2
 80099c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099c8:	691b      	ldr	r3, [r3, #16]
 80099ca:	69ba      	ldr	r2, [r7, #24]
 80099cc:	0151      	lsls	r1, r2, #5
 80099ce:	69fa      	ldr	r2, [r7, #28]
 80099d0:	440a      	add	r2, r1
 80099d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099d6:	0cdb      	lsrs	r3, r3, #19
 80099d8:	04db      	lsls	r3, r3, #19
 80099da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80099dc:	69bb      	ldr	r3, [r7, #24]
 80099de:	015a      	lsls	r2, r3, #5
 80099e0:	69fb      	ldr	r3, [r7, #28]
 80099e2:	4413      	add	r3, r2
 80099e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099e8:	691b      	ldr	r3, [r3, #16]
 80099ea:	69ba      	ldr	r2, [r7, #24]
 80099ec:	0151      	lsls	r1, r2, #5
 80099ee:	69fa      	ldr	r2, [r7, #28]
 80099f0:	440a      	add	r2, r1
 80099f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099f6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80099fa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80099fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009a00:	69bb      	ldr	r3, [r7, #24]
 8009a02:	015a      	lsls	r2, r3, #5
 8009a04:	69fb      	ldr	r3, [r7, #28]
 8009a06:	4413      	add	r3, r2
 8009a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a0c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	6959      	ldr	r1, [r3, #20]
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	689b      	ldr	r3, [r3, #8]
 8009a16:	440b      	add	r3, r1
 8009a18:	1e59      	subs	r1, r3, #1
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	689b      	ldr	r3, [r3, #8]
 8009a1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8009a22:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009a24:	4b9d      	ldr	r3, [pc, #628]	; (8009c9c <USB_EPStartXfer+0x370>)
 8009a26:	400b      	ands	r3, r1
 8009a28:	69b9      	ldr	r1, [r7, #24]
 8009a2a:	0148      	lsls	r0, r1, #5
 8009a2c:	69f9      	ldr	r1, [r7, #28]
 8009a2e:	4401      	add	r1, r0
 8009a30:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009a34:	4313      	orrs	r3, r2
 8009a36:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009a38:	69bb      	ldr	r3, [r7, #24]
 8009a3a:	015a      	lsls	r2, r3, #5
 8009a3c:	69fb      	ldr	r3, [r7, #28]
 8009a3e:	4413      	add	r3, r2
 8009a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a44:	691a      	ldr	r2, [r3, #16]
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	695b      	ldr	r3, [r3, #20]
 8009a4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a4e:	69b9      	ldr	r1, [r7, #24]
 8009a50:	0148      	lsls	r0, r1, #5
 8009a52:	69f9      	ldr	r1, [r7, #28]
 8009a54:	4401      	add	r1, r0
 8009a56:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009a5a:	4313      	orrs	r3, r2
 8009a5c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	78db      	ldrb	r3, [r3, #3]
 8009a62:	2b01      	cmp	r3, #1
 8009a64:	d11f      	bne.n	8009aa6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009a66:	69bb      	ldr	r3, [r7, #24]
 8009a68:	015a      	lsls	r2, r3, #5
 8009a6a:	69fb      	ldr	r3, [r7, #28]
 8009a6c:	4413      	add	r3, r2
 8009a6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a72:	691b      	ldr	r3, [r3, #16]
 8009a74:	69ba      	ldr	r2, [r7, #24]
 8009a76:	0151      	lsls	r1, r2, #5
 8009a78:	69fa      	ldr	r2, [r7, #28]
 8009a7a:	440a      	add	r2, r1
 8009a7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a80:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009a84:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009a86:	69bb      	ldr	r3, [r7, #24]
 8009a88:	015a      	lsls	r2, r3, #5
 8009a8a:	69fb      	ldr	r3, [r7, #28]
 8009a8c:	4413      	add	r3, r2
 8009a8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a92:	691b      	ldr	r3, [r3, #16]
 8009a94:	69ba      	ldr	r2, [r7, #24]
 8009a96:	0151      	lsls	r1, r2, #5
 8009a98:	69fa      	ldr	r2, [r7, #28]
 8009a9a:	440a      	add	r2, r1
 8009a9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009aa0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009aa4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009aa6:	79fb      	ldrb	r3, [r7, #7]
 8009aa8:	2b01      	cmp	r3, #1
 8009aaa:	d14b      	bne.n	8009b44 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	691b      	ldr	r3, [r3, #16]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d009      	beq.n	8009ac8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009ab4:	69bb      	ldr	r3, [r7, #24]
 8009ab6:	015a      	lsls	r2, r3, #5
 8009ab8:	69fb      	ldr	r3, [r7, #28]
 8009aba:	4413      	add	r3, r2
 8009abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ac0:	461a      	mov	r2, r3
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	691b      	ldr	r3, [r3, #16]
 8009ac6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	78db      	ldrb	r3, [r3, #3]
 8009acc:	2b01      	cmp	r3, #1
 8009ace:	d128      	bne.n	8009b22 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009ad0:	69fb      	ldr	r3, [r7, #28]
 8009ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ad6:	689b      	ldr	r3, [r3, #8]
 8009ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d110      	bne.n	8009b02 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009ae0:	69bb      	ldr	r3, [r7, #24]
 8009ae2:	015a      	lsls	r2, r3, #5
 8009ae4:	69fb      	ldr	r3, [r7, #28]
 8009ae6:	4413      	add	r3, r2
 8009ae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	69ba      	ldr	r2, [r7, #24]
 8009af0:	0151      	lsls	r1, r2, #5
 8009af2:	69fa      	ldr	r2, [r7, #28]
 8009af4:	440a      	add	r2, r1
 8009af6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009afa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009afe:	6013      	str	r3, [r2, #0]
 8009b00:	e00f      	b.n	8009b22 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009b02:	69bb      	ldr	r3, [r7, #24]
 8009b04:	015a      	lsls	r2, r3, #5
 8009b06:	69fb      	ldr	r3, [r7, #28]
 8009b08:	4413      	add	r3, r2
 8009b0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	69ba      	ldr	r2, [r7, #24]
 8009b12:	0151      	lsls	r1, r2, #5
 8009b14:	69fa      	ldr	r2, [r7, #28]
 8009b16:	440a      	add	r2, r1
 8009b18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b20:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009b22:	69bb      	ldr	r3, [r7, #24]
 8009b24:	015a      	lsls	r2, r3, #5
 8009b26:	69fb      	ldr	r3, [r7, #28]
 8009b28:	4413      	add	r3, r2
 8009b2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	69ba      	ldr	r2, [r7, #24]
 8009b32:	0151      	lsls	r1, r2, #5
 8009b34:	69fa      	ldr	r2, [r7, #28]
 8009b36:	440a      	add	r2, r1
 8009b38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b3c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009b40:	6013      	str	r3, [r2, #0]
 8009b42:	e12f      	b.n	8009da4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009b44:	69bb      	ldr	r3, [r7, #24]
 8009b46:	015a      	lsls	r2, r3, #5
 8009b48:	69fb      	ldr	r3, [r7, #28]
 8009b4a:	4413      	add	r3, r2
 8009b4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	69ba      	ldr	r2, [r7, #24]
 8009b54:	0151      	lsls	r1, r2, #5
 8009b56:	69fa      	ldr	r2, [r7, #28]
 8009b58:	440a      	add	r2, r1
 8009b5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b5e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009b62:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	78db      	ldrb	r3, [r3, #3]
 8009b68:	2b01      	cmp	r3, #1
 8009b6a:	d015      	beq.n	8009b98 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	695b      	ldr	r3, [r3, #20]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	f000 8117 	beq.w	8009da4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009b76:	69fb      	ldr	r3, [r7, #28]
 8009b78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	781b      	ldrb	r3, [r3, #0]
 8009b82:	f003 030f 	and.w	r3, r3, #15
 8009b86:	2101      	movs	r1, #1
 8009b88:	fa01 f303 	lsl.w	r3, r1, r3
 8009b8c:	69f9      	ldr	r1, [r7, #28]
 8009b8e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009b92:	4313      	orrs	r3, r2
 8009b94:	634b      	str	r3, [r1, #52]	; 0x34
 8009b96:	e105      	b.n	8009da4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009b98:	69fb      	ldr	r3, [r7, #28]
 8009b9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b9e:	689b      	ldr	r3, [r3, #8]
 8009ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d110      	bne.n	8009bca <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009ba8:	69bb      	ldr	r3, [r7, #24]
 8009baa:	015a      	lsls	r2, r3, #5
 8009bac:	69fb      	ldr	r3, [r7, #28]
 8009bae:	4413      	add	r3, r2
 8009bb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	69ba      	ldr	r2, [r7, #24]
 8009bb8:	0151      	lsls	r1, r2, #5
 8009bba:	69fa      	ldr	r2, [r7, #28]
 8009bbc:	440a      	add	r2, r1
 8009bbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bc2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009bc6:	6013      	str	r3, [r2, #0]
 8009bc8:	e00f      	b.n	8009bea <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009bca:	69bb      	ldr	r3, [r7, #24]
 8009bcc:	015a      	lsls	r2, r3, #5
 8009bce:	69fb      	ldr	r3, [r7, #28]
 8009bd0:	4413      	add	r3, r2
 8009bd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	69ba      	ldr	r2, [r7, #24]
 8009bda:	0151      	lsls	r1, r2, #5
 8009bdc:	69fa      	ldr	r2, [r7, #28]
 8009bde:	440a      	add	r2, r1
 8009be0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009be8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	68d9      	ldr	r1, [r3, #12]
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	781a      	ldrb	r2, [r3, #0]
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	695b      	ldr	r3, [r3, #20]
 8009bf6:	b298      	uxth	r0, r3
 8009bf8:	79fb      	ldrb	r3, [r7, #7]
 8009bfa:	9300      	str	r3, [sp, #0]
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	68f8      	ldr	r0, [r7, #12]
 8009c00:	f000 fa2b 	bl	800a05a <USB_WritePacket>
 8009c04:	e0ce      	b.n	8009da4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009c06:	69bb      	ldr	r3, [r7, #24]
 8009c08:	015a      	lsls	r2, r3, #5
 8009c0a:	69fb      	ldr	r3, [r7, #28]
 8009c0c:	4413      	add	r3, r2
 8009c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c12:	691b      	ldr	r3, [r3, #16]
 8009c14:	69ba      	ldr	r2, [r7, #24]
 8009c16:	0151      	lsls	r1, r2, #5
 8009c18:	69fa      	ldr	r2, [r7, #28]
 8009c1a:	440a      	add	r2, r1
 8009c1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c20:	0cdb      	lsrs	r3, r3, #19
 8009c22:	04db      	lsls	r3, r3, #19
 8009c24:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009c26:	69bb      	ldr	r3, [r7, #24]
 8009c28:	015a      	lsls	r2, r3, #5
 8009c2a:	69fb      	ldr	r3, [r7, #28]
 8009c2c:	4413      	add	r3, r2
 8009c2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c32:	691b      	ldr	r3, [r3, #16]
 8009c34:	69ba      	ldr	r2, [r7, #24]
 8009c36:	0151      	lsls	r1, r2, #5
 8009c38:	69fa      	ldr	r2, [r7, #28]
 8009c3a:	440a      	add	r2, r1
 8009c3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c40:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009c44:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009c48:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	695b      	ldr	r3, [r3, #20]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d126      	bne.n	8009ca0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009c52:	69bb      	ldr	r3, [r7, #24]
 8009c54:	015a      	lsls	r2, r3, #5
 8009c56:	69fb      	ldr	r3, [r7, #28]
 8009c58:	4413      	add	r3, r2
 8009c5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c5e:	691a      	ldr	r2, [r3, #16]
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	689b      	ldr	r3, [r3, #8]
 8009c64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c68:	69b9      	ldr	r1, [r7, #24]
 8009c6a:	0148      	lsls	r0, r1, #5
 8009c6c:	69f9      	ldr	r1, [r7, #28]
 8009c6e:	4401      	add	r1, r0
 8009c70:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009c74:	4313      	orrs	r3, r2
 8009c76:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009c78:	69bb      	ldr	r3, [r7, #24]
 8009c7a:	015a      	lsls	r2, r3, #5
 8009c7c:	69fb      	ldr	r3, [r7, #28]
 8009c7e:	4413      	add	r3, r2
 8009c80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c84:	691b      	ldr	r3, [r3, #16]
 8009c86:	69ba      	ldr	r2, [r7, #24]
 8009c88:	0151      	lsls	r1, r2, #5
 8009c8a:	69fa      	ldr	r2, [r7, #28]
 8009c8c:	440a      	add	r2, r1
 8009c8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c92:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009c96:	6113      	str	r3, [r2, #16]
 8009c98:	e036      	b.n	8009d08 <USB_EPStartXfer+0x3dc>
 8009c9a:	bf00      	nop
 8009c9c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	695a      	ldr	r2, [r3, #20]
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	689b      	ldr	r3, [r3, #8]
 8009ca8:	4413      	add	r3, r2
 8009caa:	1e5a      	subs	r2, r3, #1
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	689b      	ldr	r3, [r3, #8]
 8009cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cb4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009cb6:	69bb      	ldr	r3, [r7, #24]
 8009cb8:	015a      	lsls	r2, r3, #5
 8009cba:	69fb      	ldr	r3, [r7, #28]
 8009cbc:	4413      	add	r3, r2
 8009cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cc2:	691a      	ldr	r2, [r3, #16]
 8009cc4:	8afb      	ldrh	r3, [r7, #22]
 8009cc6:	04d9      	lsls	r1, r3, #19
 8009cc8:	4b39      	ldr	r3, [pc, #228]	; (8009db0 <USB_EPStartXfer+0x484>)
 8009cca:	400b      	ands	r3, r1
 8009ccc:	69b9      	ldr	r1, [r7, #24]
 8009cce:	0148      	lsls	r0, r1, #5
 8009cd0:	69f9      	ldr	r1, [r7, #28]
 8009cd2:	4401      	add	r1, r0
 8009cd4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009cd8:	4313      	orrs	r3, r2
 8009cda:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8009cdc:	69bb      	ldr	r3, [r7, #24]
 8009cde:	015a      	lsls	r2, r3, #5
 8009ce0:	69fb      	ldr	r3, [r7, #28]
 8009ce2:	4413      	add	r3, r2
 8009ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ce8:	691a      	ldr	r2, [r3, #16]
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	689b      	ldr	r3, [r3, #8]
 8009cee:	8af9      	ldrh	r1, [r7, #22]
 8009cf0:	fb01 f303 	mul.w	r3, r1, r3
 8009cf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009cf8:	69b9      	ldr	r1, [r7, #24]
 8009cfa:	0148      	lsls	r0, r1, #5
 8009cfc:	69f9      	ldr	r1, [r7, #28]
 8009cfe:	4401      	add	r1, r0
 8009d00:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009d04:	4313      	orrs	r3, r2
 8009d06:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009d08:	79fb      	ldrb	r3, [r7, #7]
 8009d0a:	2b01      	cmp	r3, #1
 8009d0c:	d10d      	bne.n	8009d2a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	68db      	ldr	r3, [r3, #12]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d009      	beq.n	8009d2a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	68d9      	ldr	r1, [r3, #12]
 8009d1a:	69bb      	ldr	r3, [r7, #24]
 8009d1c:	015a      	lsls	r2, r3, #5
 8009d1e:	69fb      	ldr	r3, [r7, #28]
 8009d20:	4413      	add	r3, r2
 8009d22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d26:	460a      	mov	r2, r1
 8009d28:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	78db      	ldrb	r3, [r3, #3]
 8009d2e:	2b01      	cmp	r3, #1
 8009d30:	d128      	bne.n	8009d84 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009d32:	69fb      	ldr	r3, [r7, #28]
 8009d34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d38:	689b      	ldr	r3, [r3, #8]
 8009d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d110      	bne.n	8009d64 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009d42:	69bb      	ldr	r3, [r7, #24]
 8009d44:	015a      	lsls	r2, r3, #5
 8009d46:	69fb      	ldr	r3, [r7, #28]
 8009d48:	4413      	add	r3, r2
 8009d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	69ba      	ldr	r2, [r7, #24]
 8009d52:	0151      	lsls	r1, r2, #5
 8009d54:	69fa      	ldr	r2, [r7, #28]
 8009d56:	440a      	add	r2, r1
 8009d58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d5c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009d60:	6013      	str	r3, [r2, #0]
 8009d62:	e00f      	b.n	8009d84 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009d64:	69bb      	ldr	r3, [r7, #24]
 8009d66:	015a      	lsls	r2, r3, #5
 8009d68:	69fb      	ldr	r3, [r7, #28]
 8009d6a:	4413      	add	r3, r2
 8009d6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	69ba      	ldr	r2, [r7, #24]
 8009d74:	0151      	lsls	r1, r2, #5
 8009d76:	69fa      	ldr	r2, [r7, #28]
 8009d78:	440a      	add	r2, r1
 8009d7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d82:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009d84:	69bb      	ldr	r3, [r7, #24]
 8009d86:	015a      	lsls	r2, r3, #5
 8009d88:	69fb      	ldr	r3, [r7, #28]
 8009d8a:	4413      	add	r3, r2
 8009d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	69ba      	ldr	r2, [r7, #24]
 8009d94:	0151      	lsls	r1, r2, #5
 8009d96:	69fa      	ldr	r2, [r7, #28]
 8009d98:	440a      	add	r2, r1
 8009d9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d9e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009da2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009da4:	2300      	movs	r3, #0
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	3720      	adds	r7, #32
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}
 8009dae:	bf00      	nop
 8009db0:	1ff80000 	.word	0x1ff80000

08009db4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009db4:	b480      	push	{r7}
 8009db6:	b087      	sub	sp, #28
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	60f8      	str	r0, [r7, #12]
 8009dbc:	60b9      	str	r1, [r7, #8]
 8009dbe:	4613      	mov	r3, r2
 8009dc0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	781b      	ldrb	r3, [r3, #0]
 8009dca:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	785b      	ldrb	r3, [r3, #1]
 8009dd0:	2b01      	cmp	r3, #1
 8009dd2:	f040 80cd 	bne.w	8009f70 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	695b      	ldr	r3, [r3, #20]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d132      	bne.n	8009e44 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009dde:	693b      	ldr	r3, [r7, #16]
 8009de0:	015a      	lsls	r2, r3, #5
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	4413      	add	r3, r2
 8009de6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dea:	691b      	ldr	r3, [r3, #16]
 8009dec:	693a      	ldr	r2, [r7, #16]
 8009dee:	0151      	lsls	r1, r2, #5
 8009df0:	697a      	ldr	r2, [r7, #20]
 8009df2:	440a      	add	r2, r1
 8009df4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009df8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009dfc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009e00:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	015a      	lsls	r2, r3, #5
 8009e06:	697b      	ldr	r3, [r7, #20]
 8009e08:	4413      	add	r3, r2
 8009e0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e0e:	691b      	ldr	r3, [r3, #16]
 8009e10:	693a      	ldr	r2, [r7, #16]
 8009e12:	0151      	lsls	r1, r2, #5
 8009e14:	697a      	ldr	r2, [r7, #20]
 8009e16:	440a      	add	r2, r1
 8009e18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e1c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009e20:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009e22:	693b      	ldr	r3, [r7, #16]
 8009e24:	015a      	lsls	r2, r3, #5
 8009e26:	697b      	ldr	r3, [r7, #20]
 8009e28:	4413      	add	r3, r2
 8009e2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e2e:	691b      	ldr	r3, [r3, #16]
 8009e30:	693a      	ldr	r2, [r7, #16]
 8009e32:	0151      	lsls	r1, r2, #5
 8009e34:	697a      	ldr	r2, [r7, #20]
 8009e36:	440a      	add	r2, r1
 8009e38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e3c:	0cdb      	lsrs	r3, r3, #19
 8009e3e:	04db      	lsls	r3, r3, #19
 8009e40:	6113      	str	r3, [r2, #16]
 8009e42:	e04e      	b.n	8009ee2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009e44:	693b      	ldr	r3, [r7, #16]
 8009e46:	015a      	lsls	r2, r3, #5
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	4413      	add	r3, r2
 8009e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e50:	691b      	ldr	r3, [r3, #16]
 8009e52:	693a      	ldr	r2, [r7, #16]
 8009e54:	0151      	lsls	r1, r2, #5
 8009e56:	697a      	ldr	r2, [r7, #20]
 8009e58:	440a      	add	r2, r1
 8009e5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e5e:	0cdb      	lsrs	r3, r3, #19
 8009e60:	04db      	lsls	r3, r3, #19
 8009e62:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009e64:	693b      	ldr	r3, [r7, #16]
 8009e66:	015a      	lsls	r2, r3, #5
 8009e68:	697b      	ldr	r3, [r7, #20]
 8009e6a:	4413      	add	r3, r2
 8009e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e70:	691b      	ldr	r3, [r3, #16]
 8009e72:	693a      	ldr	r2, [r7, #16]
 8009e74:	0151      	lsls	r1, r2, #5
 8009e76:	697a      	ldr	r2, [r7, #20]
 8009e78:	440a      	add	r2, r1
 8009e7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e7e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009e82:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009e86:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	695a      	ldr	r2, [r3, #20]
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	689b      	ldr	r3, [r3, #8]
 8009e90:	429a      	cmp	r2, r3
 8009e92:	d903      	bls.n	8009e9c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	689a      	ldr	r2, [r3, #8]
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009e9c:	693b      	ldr	r3, [r7, #16]
 8009e9e:	015a      	lsls	r2, r3, #5
 8009ea0:	697b      	ldr	r3, [r7, #20]
 8009ea2:	4413      	add	r3, r2
 8009ea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ea8:	691b      	ldr	r3, [r3, #16]
 8009eaa:	693a      	ldr	r2, [r7, #16]
 8009eac:	0151      	lsls	r1, r2, #5
 8009eae:	697a      	ldr	r2, [r7, #20]
 8009eb0:	440a      	add	r2, r1
 8009eb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009eb6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009eba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009ebc:	693b      	ldr	r3, [r7, #16]
 8009ebe:	015a      	lsls	r2, r3, #5
 8009ec0:	697b      	ldr	r3, [r7, #20]
 8009ec2:	4413      	add	r3, r2
 8009ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ec8:	691a      	ldr	r2, [r3, #16]
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	695b      	ldr	r3, [r3, #20]
 8009ece:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ed2:	6939      	ldr	r1, [r7, #16]
 8009ed4:	0148      	lsls	r0, r1, #5
 8009ed6:	6979      	ldr	r1, [r7, #20]
 8009ed8:	4401      	add	r1, r0
 8009eda:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009ede:	4313      	orrs	r3, r2
 8009ee0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009ee2:	79fb      	ldrb	r3, [r7, #7]
 8009ee4:	2b01      	cmp	r3, #1
 8009ee6:	d11e      	bne.n	8009f26 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009ee8:	68bb      	ldr	r3, [r7, #8]
 8009eea:	691b      	ldr	r3, [r3, #16]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d009      	beq.n	8009f04 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009ef0:	693b      	ldr	r3, [r7, #16]
 8009ef2:	015a      	lsls	r2, r3, #5
 8009ef4:	697b      	ldr	r3, [r7, #20]
 8009ef6:	4413      	add	r3, r2
 8009ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009efc:	461a      	mov	r2, r3
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	691b      	ldr	r3, [r3, #16]
 8009f02:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	015a      	lsls	r2, r3, #5
 8009f08:	697b      	ldr	r3, [r7, #20]
 8009f0a:	4413      	add	r3, r2
 8009f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	693a      	ldr	r2, [r7, #16]
 8009f14:	0151      	lsls	r1, r2, #5
 8009f16:	697a      	ldr	r2, [r7, #20]
 8009f18:	440a      	add	r2, r1
 8009f1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f1e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009f22:	6013      	str	r3, [r2, #0]
 8009f24:	e092      	b.n	800a04c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009f26:	693b      	ldr	r3, [r7, #16]
 8009f28:	015a      	lsls	r2, r3, #5
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	4413      	add	r3, r2
 8009f2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	693a      	ldr	r2, [r7, #16]
 8009f36:	0151      	lsls	r1, r2, #5
 8009f38:	697a      	ldr	r2, [r7, #20]
 8009f3a:	440a      	add	r2, r1
 8009f3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f40:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009f44:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	695b      	ldr	r3, [r3, #20]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d07e      	beq.n	800a04c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	781b      	ldrb	r3, [r3, #0]
 8009f5a:	f003 030f 	and.w	r3, r3, #15
 8009f5e:	2101      	movs	r1, #1
 8009f60:	fa01 f303 	lsl.w	r3, r1, r3
 8009f64:	6979      	ldr	r1, [r7, #20]
 8009f66:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009f6a:	4313      	orrs	r3, r2
 8009f6c:	634b      	str	r3, [r1, #52]	; 0x34
 8009f6e:	e06d      	b.n	800a04c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009f70:	693b      	ldr	r3, [r7, #16]
 8009f72:	015a      	lsls	r2, r3, #5
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	4413      	add	r3, r2
 8009f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f7c:	691b      	ldr	r3, [r3, #16]
 8009f7e:	693a      	ldr	r2, [r7, #16]
 8009f80:	0151      	lsls	r1, r2, #5
 8009f82:	697a      	ldr	r2, [r7, #20]
 8009f84:	440a      	add	r2, r1
 8009f86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f8a:	0cdb      	lsrs	r3, r3, #19
 8009f8c:	04db      	lsls	r3, r3, #19
 8009f8e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	015a      	lsls	r2, r3, #5
 8009f94:	697b      	ldr	r3, [r7, #20]
 8009f96:	4413      	add	r3, r2
 8009f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f9c:	691b      	ldr	r3, [r3, #16]
 8009f9e:	693a      	ldr	r2, [r7, #16]
 8009fa0:	0151      	lsls	r1, r2, #5
 8009fa2:	697a      	ldr	r2, [r7, #20]
 8009fa4:	440a      	add	r2, r1
 8009fa6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009faa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009fae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009fb2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	695b      	ldr	r3, [r3, #20]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d003      	beq.n	8009fc4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	689a      	ldr	r2, [r3, #8]
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009fc4:	693b      	ldr	r3, [r7, #16]
 8009fc6:	015a      	lsls	r2, r3, #5
 8009fc8:	697b      	ldr	r3, [r7, #20]
 8009fca:	4413      	add	r3, r2
 8009fcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fd0:	691b      	ldr	r3, [r3, #16]
 8009fd2:	693a      	ldr	r2, [r7, #16]
 8009fd4:	0151      	lsls	r1, r2, #5
 8009fd6:	697a      	ldr	r2, [r7, #20]
 8009fd8:	440a      	add	r2, r1
 8009fda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fde:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009fe2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	015a      	lsls	r2, r3, #5
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	4413      	add	r3, r2
 8009fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ff0:	691a      	ldr	r2, [r3, #16]
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	689b      	ldr	r3, [r3, #8]
 8009ff6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ffa:	6939      	ldr	r1, [r7, #16]
 8009ffc:	0148      	lsls	r0, r1, #5
 8009ffe:	6979      	ldr	r1, [r7, #20]
 800a000:	4401      	add	r1, r0
 800a002:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a006:	4313      	orrs	r3, r2
 800a008:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800a00a:	79fb      	ldrb	r3, [r7, #7]
 800a00c:	2b01      	cmp	r3, #1
 800a00e:	d10d      	bne.n	800a02c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	68db      	ldr	r3, [r3, #12]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d009      	beq.n	800a02c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	68d9      	ldr	r1, [r3, #12]
 800a01c:	693b      	ldr	r3, [r7, #16]
 800a01e:	015a      	lsls	r2, r3, #5
 800a020:	697b      	ldr	r3, [r7, #20]
 800a022:	4413      	add	r3, r2
 800a024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a028:	460a      	mov	r2, r1
 800a02a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a02c:	693b      	ldr	r3, [r7, #16]
 800a02e:	015a      	lsls	r2, r3, #5
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	4413      	add	r3, r2
 800a034:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	693a      	ldr	r2, [r7, #16]
 800a03c:	0151      	lsls	r1, r2, #5
 800a03e:	697a      	ldr	r2, [r7, #20]
 800a040:	440a      	add	r2, r1
 800a042:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a046:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a04a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a04c:	2300      	movs	r3, #0
}
 800a04e:	4618      	mov	r0, r3
 800a050:	371c      	adds	r7, #28
 800a052:	46bd      	mov	sp, r7
 800a054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a058:	4770      	bx	lr

0800a05a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a05a:	b480      	push	{r7}
 800a05c:	b089      	sub	sp, #36	; 0x24
 800a05e:	af00      	add	r7, sp, #0
 800a060:	60f8      	str	r0, [r7, #12]
 800a062:	60b9      	str	r1, [r7, #8]
 800a064:	4611      	mov	r1, r2
 800a066:	461a      	mov	r2, r3
 800a068:	460b      	mov	r3, r1
 800a06a:	71fb      	strb	r3, [r7, #7]
 800a06c:	4613      	mov	r3, r2
 800a06e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a078:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d123      	bne.n	800a0c8 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a080:	88bb      	ldrh	r3, [r7, #4]
 800a082:	3303      	adds	r3, #3
 800a084:	089b      	lsrs	r3, r3, #2
 800a086:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a088:	2300      	movs	r3, #0
 800a08a:	61bb      	str	r3, [r7, #24]
 800a08c:	e018      	b.n	800a0c0 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a08e:	79fb      	ldrb	r3, [r7, #7]
 800a090:	031a      	lsls	r2, r3, #12
 800a092:	697b      	ldr	r3, [r7, #20]
 800a094:	4413      	add	r3, r2
 800a096:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a09a:	461a      	mov	r2, r3
 800a09c:	69fb      	ldr	r3, [r7, #28]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a0a2:	69fb      	ldr	r3, [r7, #28]
 800a0a4:	3301      	adds	r3, #1
 800a0a6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a0a8:	69fb      	ldr	r3, [r7, #28]
 800a0aa:	3301      	adds	r3, #1
 800a0ac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a0ae:	69fb      	ldr	r3, [r7, #28]
 800a0b0:	3301      	adds	r3, #1
 800a0b2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a0b4:	69fb      	ldr	r3, [r7, #28]
 800a0b6:	3301      	adds	r3, #1
 800a0b8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a0ba:	69bb      	ldr	r3, [r7, #24]
 800a0bc:	3301      	adds	r3, #1
 800a0be:	61bb      	str	r3, [r7, #24]
 800a0c0:	69ba      	ldr	r2, [r7, #24]
 800a0c2:	693b      	ldr	r3, [r7, #16]
 800a0c4:	429a      	cmp	r2, r3
 800a0c6:	d3e2      	bcc.n	800a08e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a0c8:	2300      	movs	r3, #0
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	3724      	adds	r7, #36	; 0x24
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d4:	4770      	bx	lr

0800a0d6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a0d6:	b480      	push	{r7}
 800a0d8:	b08b      	sub	sp, #44	; 0x2c
 800a0da:	af00      	add	r7, sp, #0
 800a0dc:	60f8      	str	r0, [r7, #12]
 800a0de:	60b9      	str	r1, [r7, #8]
 800a0e0:	4613      	mov	r3, r2
 800a0e2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a0ec:	88fb      	ldrh	r3, [r7, #6]
 800a0ee:	089b      	lsrs	r3, r3, #2
 800a0f0:	b29b      	uxth	r3, r3
 800a0f2:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a0f4:	88fb      	ldrh	r3, [r7, #6]
 800a0f6:	f003 0303 	and.w	r3, r3, #3
 800a0fa:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	623b      	str	r3, [r7, #32]
 800a100:	e014      	b.n	800a12c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a102:	69bb      	ldr	r3, [r7, #24]
 800a104:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a108:	681a      	ldr	r2, [r3, #0]
 800a10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a10c:	601a      	str	r2, [r3, #0]
    pDest++;
 800a10e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a110:	3301      	adds	r3, #1
 800a112:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a116:	3301      	adds	r3, #1
 800a118:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a11a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a11c:	3301      	adds	r3, #1
 800a11e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a122:	3301      	adds	r3, #1
 800a124:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a126:	6a3b      	ldr	r3, [r7, #32]
 800a128:	3301      	adds	r3, #1
 800a12a:	623b      	str	r3, [r7, #32]
 800a12c:	6a3a      	ldr	r2, [r7, #32]
 800a12e:	697b      	ldr	r3, [r7, #20]
 800a130:	429a      	cmp	r2, r3
 800a132:	d3e6      	bcc.n	800a102 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a134:	8bfb      	ldrh	r3, [r7, #30]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d01e      	beq.n	800a178 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a13a:	2300      	movs	r3, #0
 800a13c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a13e:	69bb      	ldr	r3, [r7, #24]
 800a140:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a144:	461a      	mov	r2, r3
 800a146:	f107 0310 	add.w	r3, r7, #16
 800a14a:	6812      	ldr	r2, [r2, #0]
 800a14c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a14e:	693a      	ldr	r2, [r7, #16]
 800a150:	6a3b      	ldr	r3, [r7, #32]
 800a152:	b2db      	uxtb	r3, r3
 800a154:	00db      	lsls	r3, r3, #3
 800a156:	fa22 f303 	lsr.w	r3, r2, r3
 800a15a:	b2da      	uxtb	r2, r3
 800a15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a15e:	701a      	strb	r2, [r3, #0]
      i++;
 800a160:	6a3b      	ldr	r3, [r7, #32]
 800a162:	3301      	adds	r3, #1
 800a164:	623b      	str	r3, [r7, #32]
      pDest++;
 800a166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a168:	3301      	adds	r3, #1
 800a16a:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a16c:	8bfb      	ldrh	r3, [r7, #30]
 800a16e:	3b01      	subs	r3, #1
 800a170:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a172:	8bfb      	ldrh	r3, [r7, #30]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d1ea      	bne.n	800a14e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a17a:	4618      	mov	r0, r3
 800a17c:	372c      	adds	r7, #44	; 0x2c
 800a17e:	46bd      	mov	sp, r7
 800a180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a184:	4770      	bx	lr

0800a186 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a186:	b480      	push	{r7}
 800a188:	b085      	sub	sp, #20
 800a18a:	af00      	add	r7, sp, #0
 800a18c:	6078      	str	r0, [r7, #4]
 800a18e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	781b      	ldrb	r3, [r3, #0]
 800a198:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	785b      	ldrb	r3, [r3, #1]
 800a19e:	2b01      	cmp	r3, #1
 800a1a0:	d12c      	bne.n	800a1fc <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	015a      	lsls	r2, r3, #5
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	4413      	add	r3, r2
 800a1aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	db12      	blt.n	800a1da <USB_EPSetStall+0x54>
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d00f      	beq.n	800a1da <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	015a      	lsls	r2, r3, #5
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	4413      	add	r3, r2
 800a1c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	68ba      	ldr	r2, [r7, #8]
 800a1ca:	0151      	lsls	r1, r2, #5
 800a1cc:	68fa      	ldr	r2, [r7, #12]
 800a1ce:	440a      	add	r2, r1
 800a1d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a1d8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	015a      	lsls	r2, r3, #5
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	4413      	add	r3, r2
 800a1e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	68ba      	ldr	r2, [r7, #8]
 800a1ea:	0151      	lsls	r1, r2, #5
 800a1ec:	68fa      	ldr	r2, [r7, #12]
 800a1ee:	440a      	add	r2, r1
 800a1f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a1f8:	6013      	str	r3, [r2, #0]
 800a1fa:	e02b      	b.n	800a254 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	015a      	lsls	r2, r3, #5
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	4413      	add	r3, r2
 800a204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	db12      	blt.n	800a234 <USB_EPSetStall+0xae>
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d00f      	beq.n	800a234 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a214:	68bb      	ldr	r3, [r7, #8]
 800a216:	015a      	lsls	r2, r3, #5
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	4413      	add	r3, r2
 800a21c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	68ba      	ldr	r2, [r7, #8]
 800a224:	0151      	lsls	r1, r2, #5
 800a226:	68fa      	ldr	r2, [r7, #12]
 800a228:	440a      	add	r2, r1
 800a22a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a22e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a232:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	015a      	lsls	r2, r3, #5
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	4413      	add	r3, r2
 800a23c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	68ba      	ldr	r2, [r7, #8]
 800a244:	0151      	lsls	r1, r2, #5
 800a246:	68fa      	ldr	r2, [r7, #12]
 800a248:	440a      	add	r2, r1
 800a24a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a24e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a252:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a254:	2300      	movs	r3, #0
}
 800a256:	4618      	mov	r0, r3
 800a258:	3714      	adds	r7, #20
 800a25a:	46bd      	mov	sp, r7
 800a25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a260:	4770      	bx	lr

0800a262 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a262:	b480      	push	{r7}
 800a264:	b085      	sub	sp, #20
 800a266:	af00      	add	r7, sp, #0
 800a268:	6078      	str	r0, [r7, #4]
 800a26a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	781b      	ldrb	r3, [r3, #0]
 800a274:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	785b      	ldrb	r3, [r3, #1]
 800a27a:	2b01      	cmp	r3, #1
 800a27c:	d128      	bne.n	800a2d0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	015a      	lsls	r2, r3, #5
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	4413      	add	r3, r2
 800a286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	68ba      	ldr	r2, [r7, #8]
 800a28e:	0151      	lsls	r1, r2, #5
 800a290:	68fa      	ldr	r2, [r7, #12]
 800a292:	440a      	add	r2, r1
 800a294:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a298:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a29c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	78db      	ldrb	r3, [r3, #3]
 800a2a2:	2b03      	cmp	r3, #3
 800a2a4:	d003      	beq.n	800a2ae <USB_EPClearStall+0x4c>
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	78db      	ldrb	r3, [r3, #3]
 800a2aa:	2b02      	cmp	r3, #2
 800a2ac:	d138      	bne.n	800a320 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	015a      	lsls	r2, r3, #5
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	4413      	add	r3, r2
 800a2b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	68ba      	ldr	r2, [r7, #8]
 800a2be:	0151      	lsls	r1, r2, #5
 800a2c0:	68fa      	ldr	r2, [r7, #12]
 800a2c2:	440a      	add	r2, r1
 800a2c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a2cc:	6013      	str	r3, [r2, #0]
 800a2ce:	e027      	b.n	800a320 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	015a      	lsls	r2, r3, #5
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	4413      	add	r3, r2
 800a2d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	68ba      	ldr	r2, [r7, #8]
 800a2e0:	0151      	lsls	r1, r2, #5
 800a2e2:	68fa      	ldr	r2, [r7, #12]
 800a2e4:	440a      	add	r2, r1
 800a2e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a2ee:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	78db      	ldrb	r3, [r3, #3]
 800a2f4:	2b03      	cmp	r3, #3
 800a2f6:	d003      	beq.n	800a300 <USB_EPClearStall+0x9e>
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	78db      	ldrb	r3, [r3, #3]
 800a2fc:	2b02      	cmp	r3, #2
 800a2fe:	d10f      	bne.n	800a320 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	015a      	lsls	r2, r3, #5
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	4413      	add	r3, r2
 800a308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	68ba      	ldr	r2, [r7, #8]
 800a310:	0151      	lsls	r1, r2, #5
 800a312:	68fa      	ldr	r2, [r7, #12]
 800a314:	440a      	add	r2, r1
 800a316:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a31a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a31e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a320:	2300      	movs	r3, #0
}
 800a322:	4618      	mov	r0, r3
 800a324:	3714      	adds	r7, #20
 800a326:	46bd      	mov	sp, r7
 800a328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32c:	4770      	bx	lr

0800a32e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a32e:	b480      	push	{r7}
 800a330:	b085      	sub	sp, #20
 800a332:	af00      	add	r7, sp, #0
 800a334:	6078      	str	r0, [r7, #4]
 800a336:	460b      	mov	r3, r1
 800a338:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	68fa      	ldr	r2, [r7, #12]
 800a348:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a34c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a350:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a358:	681a      	ldr	r2, [r3, #0]
 800a35a:	78fb      	ldrb	r3, [r7, #3]
 800a35c:	011b      	lsls	r3, r3, #4
 800a35e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a362:	68f9      	ldr	r1, [r7, #12]
 800a364:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a368:	4313      	orrs	r3, r2
 800a36a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a36c:	2300      	movs	r3, #0
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3714      	adds	r7, #20
 800a372:	46bd      	mov	sp, r7
 800a374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a378:	4770      	bx	lr

0800a37a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a37a:	b480      	push	{r7}
 800a37c:	b085      	sub	sp, #20
 800a37e:	af00      	add	r7, sp, #0
 800a380:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	68fa      	ldr	r2, [r7, #12]
 800a390:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a394:	f023 0303 	bic.w	r3, r3, #3
 800a398:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3a0:	685b      	ldr	r3, [r3, #4]
 800a3a2:	68fa      	ldr	r2, [r7, #12]
 800a3a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a3a8:	f023 0302 	bic.w	r3, r3, #2
 800a3ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a3ae:	2300      	movs	r3, #0
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3714      	adds	r7, #20
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	4770      	bx	lr

0800a3bc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b085      	sub	sp, #20
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	68fa      	ldr	r2, [r7, #12]
 800a3d2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a3d6:	f023 0303 	bic.w	r3, r3, #3
 800a3da:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3e2:	685b      	ldr	r3, [r3, #4]
 800a3e4:	68fa      	ldr	r2, [r7, #12]
 800a3e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a3ea:	f043 0302 	orr.w	r3, r3, #2
 800a3ee:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a3f0:	2300      	movs	r3, #0
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	3714      	adds	r7, #20
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fc:	4770      	bx	lr

0800a3fe <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a3fe:	b480      	push	{r7}
 800a400:	b085      	sub	sp, #20
 800a402:	af00      	add	r7, sp, #0
 800a404:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	695b      	ldr	r3, [r3, #20]
 800a40a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	699b      	ldr	r3, [r3, #24]
 800a410:	68fa      	ldr	r2, [r7, #12]
 800a412:	4013      	ands	r3, r2
 800a414:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a416:	68fb      	ldr	r3, [r7, #12]
}
 800a418:	4618      	mov	r0, r3
 800a41a:	3714      	adds	r7, #20
 800a41c:	46bd      	mov	sp, r7
 800a41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a422:	4770      	bx	lr

0800a424 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a424:	b480      	push	{r7}
 800a426:	b085      	sub	sp, #20
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a436:	699b      	ldr	r3, [r3, #24]
 800a438:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a440:	69db      	ldr	r3, [r3, #28]
 800a442:	68ba      	ldr	r2, [r7, #8]
 800a444:	4013      	ands	r3, r2
 800a446:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	0c1b      	lsrs	r3, r3, #16
}
 800a44c:	4618      	mov	r0, r3
 800a44e:	3714      	adds	r7, #20
 800a450:	46bd      	mov	sp, r7
 800a452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a456:	4770      	bx	lr

0800a458 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a458:	b480      	push	{r7}
 800a45a:	b085      	sub	sp, #20
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a46a:	699b      	ldr	r3, [r3, #24]
 800a46c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a474:	69db      	ldr	r3, [r3, #28]
 800a476:	68ba      	ldr	r2, [r7, #8]
 800a478:	4013      	ands	r3, r2
 800a47a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	b29b      	uxth	r3, r3
}
 800a480:	4618      	mov	r0, r3
 800a482:	3714      	adds	r7, #20
 800a484:	46bd      	mov	sp, r7
 800a486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48a:	4770      	bx	lr

0800a48c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a48c:	b480      	push	{r7}
 800a48e:	b085      	sub	sp, #20
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
 800a494:	460b      	mov	r3, r1
 800a496:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a49c:	78fb      	ldrb	r3, [r7, #3]
 800a49e:	015a      	lsls	r2, r3, #5
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	4413      	add	r3, r2
 800a4a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4a8:	689b      	ldr	r3, [r3, #8]
 800a4aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4b2:	695b      	ldr	r3, [r3, #20]
 800a4b4:	68ba      	ldr	r2, [r7, #8]
 800a4b6:	4013      	ands	r3, r2
 800a4b8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a4ba:	68bb      	ldr	r3, [r7, #8]
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	3714      	adds	r7, #20
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c6:	4770      	bx	lr

0800a4c8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	b087      	sub	sp, #28
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
 800a4d0:	460b      	mov	r3, r1
 800a4d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a4d8:	697b      	ldr	r3, [r7, #20]
 800a4da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4de:	691b      	ldr	r3, [r3, #16]
 800a4e0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a4e2:	697b      	ldr	r3, [r7, #20]
 800a4e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4ea:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a4ec:	78fb      	ldrb	r3, [r7, #3]
 800a4ee:	f003 030f 	and.w	r3, r3, #15
 800a4f2:	68fa      	ldr	r2, [r7, #12]
 800a4f4:	fa22 f303 	lsr.w	r3, r2, r3
 800a4f8:	01db      	lsls	r3, r3, #7
 800a4fa:	b2db      	uxtb	r3, r3
 800a4fc:	693a      	ldr	r2, [r7, #16]
 800a4fe:	4313      	orrs	r3, r2
 800a500:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a502:	78fb      	ldrb	r3, [r7, #3]
 800a504:	015a      	lsls	r2, r3, #5
 800a506:	697b      	ldr	r3, [r7, #20]
 800a508:	4413      	add	r3, r2
 800a50a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a50e:	689b      	ldr	r3, [r3, #8]
 800a510:	693a      	ldr	r2, [r7, #16]
 800a512:	4013      	ands	r3, r2
 800a514:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a516:	68bb      	ldr	r3, [r7, #8]
}
 800a518:	4618      	mov	r0, r3
 800a51a:	371c      	adds	r7, #28
 800a51c:	46bd      	mov	sp, r7
 800a51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a522:	4770      	bx	lr

0800a524 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a524:	b480      	push	{r7}
 800a526:	b083      	sub	sp, #12
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	695b      	ldr	r3, [r3, #20]
 800a530:	f003 0301 	and.w	r3, r3, #1
}
 800a534:	4618      	mov	r0, r3
 800a536:	370c      	adds	r7, #12
 800a538:	46bd      	mov	sp, r7
 800a53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53e:	4770      	bx	lr

0800a540 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a540:	b480      	push	{r7}
 800a542:	b085      	sub	sp, #20
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	68fa      	ldr	r2, [r7, #12]
 800a556:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a55a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a55e:	f023 0307 	bic.w	r3, r3, #7
 800a562:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a56a:	685b      	ldr	r3, [r3, #4]
 800a56c:	68fa      	ldr	r2, [r7, #12]
 800a56e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a572:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a576:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a578:	2300      	movs	r3, #0
}
 800a57a:	4618      	mov	r0, r3
 800a57c:	3714      	adds	r7, #20
 800a57e:	46bd      	mov	sp, r7
 800a580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a584:	4770      	bx	lr
	...

0800a588 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a588:	b480      	push	{r7}
 800a58a:	b087      	sub	sp, #28
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	60f8      	str	r0, [r7, #12]
 800a590:	460b      	mov	r3, r1
 800a592:	607a      	str	r2, [r7, #4]
 800a594:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	333c      	adds	r3, #60	; 0x3c
 800a59e:	3304      	adds	r3, #4
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a5a4:	693b      	ldr	r3, [r7, #16]
 800a5a6:	4a26      	ldr	r2, [pc, #152]	; (800a640 <USB_EP0_OutStart+0xb8>)
 800a5a8:	4293      	cmp	r3, r2
 800a5aa:	d90a      	bls.n	800a5c2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a5ac:	697b      	ldr	r3, [r7, #20]
 800a5ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a5b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a5bc:	d101      	bne.n	800a5c2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a5be:	2300      	movs	r3, #0
 800a5c0:	e037      	b.n	800a632 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a5c2:	697b      	ldr	r3, [r7, #20]
 800a5c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5c8:	461a      	mov	r2, r3
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a5ce:	697b      	ldr	r3, [r7, #20]
 800a5d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5d4:	691b      	ldr	r3, [r3, #16]
 800a5d6:	697a      	ldr	r2, [r7, #20]
 800a5d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a5dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a5e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a5e2:	697b      	ldr	r3, [r7, #20]
 800a5e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5e8:	691b      	ldr	r3, [r3, #16]
 800a5ea:	697a      	ldr	r2, [r7, #20]
 800a5ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a5f0:	f043 0318 	orr.w	r3, r3, #24
 800a5f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5fc:	691b      	ldr	r3, [r3, #16]
 800a5fe:	697a      	ldr	r2, [r7, #20]
 800a600:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a604:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a608:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a60a:	7afb      	ldrb	r3, [r7, #11]
 800a60c:	2b01      	cmp	r3, #1
 800a60e:	d10f      	bne.n	800a630 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a610:	697b      	ldr	r3, [r7, #20]
 800a612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a616:	461a      	mov	r2, r3
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	697a      	ldr	r2, [r7, #20]
 800a626:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a62a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a62e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a630:	2300      	movs	r3, #0
}
 800a632:	4618      	mov	r0, r3
 800a634:	371c      	adds	r7, #28
 800a636:	46bd      	mov	sp, r7
 800a638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63c:	4770      	bx	lr
 800a63e:	bf00      	nop
 800a640:	4f54300a 	.word	0x4f54300a

0800a644 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a644:	b480      	push	{r7}
 800a646:	b085      	sub	sp, #20
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a64c:	2300      	movs	r3, #0
 800a64e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	3301      	adds	r3, #1
 800a654:	60fb      	str	r3, [r7, #12]
 800a656:	4a13      	ldr	r2, [pc, #76]	; (800a6a4 <USB_CoreReset+0x60>)
 800a658:	4293      	cmp	r3, r2
 800a65a:	d901      	bls.n	800a660 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800a65c:	2303      	movs	r3, #3
 800a65e:	e01a      	b.n	800a696 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	691b      	ldr	r3, [r3, #16]
 800a664:	2b00      	cmp	r3, #0
 800a666:	daf3      	bge.n	800a650 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a668:	2300      	movs	r3, #0
 800a66a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	691b      	ldr	r3, [r3, #16]
 800a670:	f043 0201 	orr.w	r2, r3, #1
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	3301      	adds	r3, #1
 800a67c:	60fb      	str	r3, [r7, #12]
 800a67e:	4a09      	ldr	r2, [pc, #36]	; (800a6a4 <USB_CoreReset+0x60>)
 800a680:	4293      	cmp	r3, r2
 800a682:	d901      	bls.n	800a688 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800a684:	2303      	movs	r3, #3
 800a686:	e006      	b.n	800a696 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	691b      	ldr	r3, [r3, #16]
 800a68c:	f003 0301 	and.w	r3, r3, #1
 800a690:	2b01      	cmp	r3, #1
 800a692:	d0f1      	beq.n	800a678 <USB_CoreReset+0x34>

  return HAL_OK;
 800a694:	2300      	movs	r3, #0
}
 800a696:	4618      	mov	r0, r3
 800a698:	3714      	adds	r7, #20
 800a69a:	46bd      	mov	sp, r7
 800a69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a0:	4770      	bx	lr
 800a6a2:	bf00      	nop
 800a6a4:	00030d40 	.word	0x00030d40

0800a6a8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b084      	sub	sp, #16
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
 800a6b0:	460b      	mov	r3, r1
 800a6b2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a6b4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a6b8:	f002 f95c 	bl	800c974 <USBD_static_malloc>
 800a6bc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d105      	bne.n	800a6d0 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800a6cc:	2302      	movs	r3, #2
 800a6ce:	e066      	b.n	800a79e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	68fa      	ldr	r2, [r7, #12]
 800a6d4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	7c1b      	ldrb	r3, [r3, #16]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d119      	bne.n	800a714 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a6e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a6e4:	2202      	movs	r2, #2
 800a6e6:	2181      	movs	r1, #129	; 0x81
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f002 f820 	bl	800c72e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2201      	movs	r2, #1
 800a6f2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a6f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a6f8:	2202      	movs	r2, #2
 800a6fa:	2101      	movs	r1, #1
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f002 f816 	bl	800c72e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2201      	movs	r2, #1
 800a706:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2210      	movs	r2, #16
 800a70e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800a712:	e016      	b.n	800a742 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a714:	2340      	movs	r3, #64	; 0x40
 800a716:	2202      	movs	r2, #2
 800a718:	2181      	movs	r1, #129	; 0x81
 800a71a:	6878      	ldr	r0, [r7, #4]
 800a71c:	f002 f807 	bl	800c72e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2201      	movs	r2, #1
 800a724:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a726:	2340      	movs	r3, #64	; 0x40
 800a728:	2202      	movs	r2, #2
 800a72a:	2101      	movs	r1, #1
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f001 fffe 	bl	800c72e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2201      	movs	r2, #1
 800a736:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2210      	movs	r2, #16
 800a73e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a742:	2308      	movs	r3, #8
 800a744:	2203      	movs	r2, #3
 800a746:	2182      	movs	r1, #130	; 0x82
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	f001 fff0 	bl	800c72e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2201      	movs	r2, #1
 800a752:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	2200      	movs	r2, #0
 800a764:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	2200      	movs	r2, #0
 800a76c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	7c1b      	ldrb	r3, [r3, #16]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d109      	bne.n	800a78c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a77e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a782:	2101      	movs	r1, #1
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f002 f8c1 	bl	800c90c <USBD_LL_PrepareReceive>
 800a78a:	e007      	b.n	800a79c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a792:	2340      	movs	r3, #64	; 0x40
 800a794:	2101      	movs	r1, #1
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f002 f8b8 	bl	800c90c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a79c:	2300      	movs	r3, #0
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3710      	adds	r7, #16
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}

0800a7a6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a7a6:	b580      	push	{r7, lr}
 800a7a8:	b082      	sub	sp, #8
 800a7aa:	af00      	add	r7, sp, #0
 800a7ac:	6078      	str	r0, [r7, #4]
 800a7ae:	460b      	mov	r3, r1
 800a7b0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a7b2:	2181      	movs	r1, #129	; 0x81
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f001 ffe0 	bl	800c77a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2200      	movs	r2, #0
 800a7be:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a7c0:	2101      	movs	r1, #1
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f001 ffd9 	bl	800c77a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a7d0:	2182      	movs	r1, #130	; 0x82
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	f001 ffd1 	bl	800c77a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d00e      	beq.n	800a810 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a7f8:	685b      	ldr	r3, [r3, #4]
 800a7fa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a802:	4618      	mov	r0, r3
 800a804:	f002 f8c4 	bl	800c990 <USBD_static_free>
    pdev->pClassData = NULL;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2200      	movs	r2, #0
 800a80c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a810:	2300      	movs	r3, #0
}
 800a812:	4618      	mov	r0, r3
 800a814:	3708      	adds	r7, #8
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}
	...

0800a81c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b086      	sub	sp, #24
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
 800a824:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a82c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a82e:	2300      	movs	r3, #0
 800a830:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a832:	2300      	movs	r3, #0
 800a834:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a836:	2300      	movs	r3, #0
 800a838:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a83a:	693b      	ldr	r3, [r7, #16]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d101      	bne.n	800a844 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800a840:	2303      	movs	r3, #3
 800a842:	e0af      	b.n	800a9a4 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	781b      	ldrb	r3, [r3, #0]
 800a848:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d03f      	beq.n	800a8d0 <USBD_CDC_Setup+0xb4>
 800a850:	2b20      	cmp	r3, #32
 800a852:	f040 809f 	bne.w	800a994 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	88db      	ldrh	r3, [r3, #6]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d02e      	beq.n	800a8bc <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	781b      	ldrb	r3, [r3, #0]
 800a862:	b25b      	sxtb	r3, r3
 800a864:	2b00      	cmp	r3, #0
 800a866:	da16      	bge.n	800a896 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a86e:	689b      	ldr	r3, [r3, #8]
 800a870:	683a      	ldr	r2, [r7, #0]
 800a872:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800a874:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a876:	683a      	ldr	r2, [r7, #0]
 800a878:	88d2      	ldrh	r2, [r2, #6]
 800a87a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	88db      	ldrh	r3, [r3, #6]
 800a880:	2b07      	cmp	r3, #7
 800a882:	bf28      	it	cs
 800a884:	2307      	movcs	r3, #7
 800a886:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a888:	693b      	ldr	r3, [r7, #16]
 800a88a:	89fa      	ldrh	r2, [r7, #14]
 800a88c:	4619      	mov	r1, r3
 800a88e:	6878      	ldr	r0, [r7, #4]
 800a890:	f001 fb19 	bl	800bec6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800a894:	e085      	b.n	800a9a2 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	785a      	ldrb	r2, [r3, #1]
 800a89a:	693b      	ldr	r3, [r7, #16]
 800a89c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	88db      	ldrh	r3, [r3, #6]
 800a8a4:	b2da      	uxtb	r2, r3
 800a8a6:	693b      	ldr	r3, [r7, #16]
 800a8a8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a8ac:	6939      	ldr	r1, [r7, #16]
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	88db      	ldrh	r3, [r3, #6]
 800a8b2:	461a      	mov	r2, r3
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f001 fb32 	bl	800bf1e <USBD_CtlPrepareRx>
      break;
 800a8ba:	e072      	b.n	800a9a2 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a8c2:	689b      	ldr	r3, [r3, #8]
 800a8c4:	683a      	ldr	r2, [r7, #0]
 800a8c6:	7850      	ldrb	r0, [r2, #1]
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	6839      	ldr	r1, [r7, #0]
 800a8cc:	4798      	blx	r3
      break;
 800a8ce:	e068      	b.n	800a9a2 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	785b      	ldrb	r3, [r3, #1]
 800a8d4:	2b0b      	cmp	r3, #11
 800a8d6:	d852      	bhi.n	800a97e <USBD_CDC_Setup+0x162>
 800a8d8:	a201      	add	r2, pc, #4	; (adr r2, 800a8e0 <USBD_CDC_Setup+0xc4>)
 800a8da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8de:	bf00      	nop
 800a8e0:	0800a911 	.word	0x0800a911
 800a8e4:	0800a98d 	.word	0x0800a98d
 800a8e8:	0800a97f 	.word	0x0800a97f
 800a8ec:	0800a97f 	.word	0x0800a97f
 800a8f0:	0800a97f 	.word	0x0800a97f
 800a8f4:	0800a97f 	.word	0x0800a97f
 800a8f8:	0800a97f 	.word	0x0800a97f
 800a8fc:	0800a97f 	.word	0x0800a97f
 800a900:	0800a97f 	.word	0x0800a97f
 800a904:	0800a97f 	.word	0x0800a97f
 800a908:	0800a93b 	.word	0x0800a93b
 800a90c:	0800a965 	.word	0x0800a965
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a916:	b2db      	uxtb	r3, r3
 800a918:	2b03      	cmp	r3, #3
 800a91a:	d107      	bne.n	800a92c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a91c:	f107 030a 	add.w	r3, r7, #10
 800a920:	2202      	movs	r2, #2
 800a922:	4619      	mov	r1, r3
 800a924:	6878      	ldr	r0, [r7, #4]
 800a926:	f001 face 	bl	800bec6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a92a:	e032      	b.n	800a992 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a92c:	6839      	ldr	r1, [r7, #0]
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	f001 fa58 	bl	800bde4 <USBD_CtlError>
            ret = USBD_FAIL;
 800a934:	2303      	movs	r3, #3
 800a936:	75fb      	strb	r3, [r7, #23]
          break;
 800a938:	e02b      	b.n	800a992 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a940:	b2db      	uxtb	r3, r3
 800a942:	2b03      	cmp	r3, #3
 800a944:	d107      	bne.n	800a956 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a946:	f107 030d 	add.w	r3, r7, #13
 800a94a:	2201      	movs	r2, #1
 800a94c:	4619      	mov	r1, r3
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f001 fab9 	bl	800bec6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a954:	e01d      	b.n	800a992 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a956:	6839      	ldr	r1, [r7, #0]
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	f001 fa43 	bl	800bde4 <USBD_CtlError>
            ret = USBD_FAIL;
 800a95e:	2303      	movs	r3, #3
 800a960:	75fb      	strb	r3, [r7, #23]
          break;
 800a962:	e016      	b.n	800a992 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a96a:	b2db      	uxtb	r3, r3
 800a96c:	2b03      	cmp	r3, #3
 800a96e:	d00f      	beq.n	800a990 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800a970:	6839      	ldr	r1, [r7, #0]
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f001 fa36 	bl	800bde4 <USBD_CtlError>
            ret = USBD_FAIL;
 800a978:	2303      	movs	r3, #3
 800a97a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a97c:	e008      	b.n	800a990 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a97e:	6839      	ldr	r1, [r7, #0]
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	f001 fa2f 	bl	800bde4 <USBD_CtlError>
          ret = USBD_FAIL;
 800a986:	2303      	movs	r3, #3
 800a988:	75fb      	strb	r3, [r7, #23]
          break;
 800a98a:	e002      	b.n	800a992 <USBD_CDC_Setup+0x176>
          break;
 800a98c:	bf00      	nop
 800a98e:	e008      	b.n	800a9a2 <USBD_CDC_Setup+0x186>
          break;
 800a990:	bf00      	nop
      }
      break;
 800a992:	e006      	b.n	800a9a2 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800a994:	6839      	ldr	r1, [r7, #0]
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	f001 fa24 	bl	800bde4 <USBD_CtlError>
      ret = USBD_FAIL;
 800a99c:	2303      	movs	r3, #3
 800a99e:	75fb      	strb	r3, [r7, #23]
      break;
 800a9a0:	bf00      	nop
  }

  return (uint8_t)ret;
 800a9a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	3718      	adds	r7, #24
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd80      	pop	{r7, pc}

0800a9ac <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b084      	sub	sp, #16
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
 800a9b4:	460b      	mov	r3, r1
 800a9b6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a9be:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d101      	bne.n	800a9ce <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a9ca:	2303      	movs	r3, #3
 800a9cc:	e04f      	b.n	800aa6e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a9d4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a9d6:	78fa      	ldrb	r2, [r7, #3]
 800a9d8:	6879      	ldr	r1, [r7, #4]
 800a9da:	4613      	mov	r3, r2
 800a9dc:	009b      	lsls	r3, r3, #2
 800a9de:	4413      	add	r3, r2
 800a9e0:	009b      	lsls	r3, r3, #2
 800a9e2:	440b      	add	r3, r1
 800a9e4:	3318      	adds	r3, #24
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d029      	beq.n	800aa40 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a9ec:	78fa      	ldrb	r2, [r7, #3]
 800a9ee:	6879      	ldr	r1, [r7, #4]
 800a9f0:	4613      	mov	r3, r2
 800a9f2:	009b      	lsls	r3, r3, #2
 800a9f4:	4413      	add	r3, r2
 800a9f6:	009b      	lsls	r3, r3, #2
 800a9f8:	440b      	add	r3, r1
 800a9fa:	3318      	adds	r3, #24
 800a9fc:	681a      	ldr	r2, [r3, #0]
 800a9fe:	78f9      	ldrb	r1, [r7, #3]
 800aa00:	68f8      	ldr	r0, [r7, #12]
 800aa02:	460b      	mov	r3, r1
 800aa04:	00db      	lsls	r3, r3, #3
 800aa06:	1a5b      	subs	r3, r3, r1
 800aa08:	009b      	lsls	r3, r3, #2
 800aa0a:	4403      	add	r3, r0
 800aa0c:	3344      	adds	r3, #68	; 0x44
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	fbb2 f1f3 	udiv	r1, r2, r3
 800aa14:	fb01 f303 	mul.w	r3, r1, r3
 800aa18:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d110      	bne.n	800aa40 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800aa1e:	78fa      	ldrb	r2, [r7, #3]
 800aa20:	6879      	ldr	r1, [r7, #4]
 800aa22:	4613      	mov	r3, r2
 800aa24:	009b      	lsls	r3, r3, #2
 800aa26:	4413      	add	r3, r2
 800aa28:	009b      	lsls	r3, r3, #2
 800aa2a:	440b      	add	r3, r1
 800aa2c:	3318      	adds	r3, #24
 800aa2e:	2200      	movs	r2, #0
 800aa30:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800aa32:	78f9      	ldrb	r1, [r7, #3]
 800aa34:	2300      	movs	r3, #0
 800aa36:	2200      	movs	r2, #0
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	f001 ff46 	bl	800c8ca <USBD_LL_Transmit>
 800aa3e:	e015      	b.n	800aa6c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800aa40:	68bb      	ldr	r3, [r7, #8]
 800aa42:	2200      	movs	r2, #0
 800aa44:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa4e:	691b      	ldr	r3, [r3, #16]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d00b      	beq.n	800aa6c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa5a:	691b      	ldr	r3, [r3, #16]
 800aa5c:	68ba      	ldr	r2, [r7, #8]
 800aa5e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800aa62:	68ba      	ldr	r2, [r7, #8]
 800aa64:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800aa68:	78fa      	ldrb	r2, [r7, #3]
 800aa6a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800aa6c:	2300      	movs	r3, #0
}
 800aa6e:	4618      	mov	r0, r3
 800aa70:	3710      	adds	r7, #16
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}

0800aa76 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aa76:	b580      	push	{r7, lr}
 800aa78:	b084      	sub	sp, #16
 800aa7a:	af00      	add	r7, sp, #0
 800aa7c:	6078      	str	r0, [r7, #4]
 800aa7e:	460b      	mov	r3, r1
 800aa80:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa88:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d101      	bne.n	800aa98 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800aa94:	2303      	movs	r3, #3
 800aa96:	e015      	b.n	800aac4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800aa98:	78fb      	ldrb	r3, [r7, #3]
 800aa9a:	4619      	mov	r1, r3
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	f001 ff56 	bl	800c94e <USBD_LL_GetRxDataSize>
 800aaa2:	4602      	mov	r2, r0
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aab0:	68db      	ldr	r3, [r3, #12]
 800aab2:	68fa      	ldr	r2, [r7, #12]
 800aab4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800aab8:	68fa      	ldr	r2, [r7, #12]
 800aaba:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800aabe:	4611      	mov	r1, r2
 800aac0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800aac2:	2300      	movs	r3, #0
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	3710      	adds	r7, #16
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}

0800aacc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b084      	sub	sp, #16
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aada:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d101      	bne.n	800aae6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800aae2:	2303      	movs	r3, #3
 800aae4:	e01b      	b.n	800ab1e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d015      	beq.n	800ab1c <USBD_CDC_EP0_RxReady+0x50>
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800aaf6:	2bff      	cmp	r3, #255	; 0xff
 800aaf8:	d010      	beq.n	800ab1c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ab00:	689b      	ldr	r3, [r3, #8]
 800ab02:	68fa      	ldr	r2, [r7, #12]
 800ab04:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800ab08:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800ab0a:	68fa      	ldr	r2, [r7, #12]
 800ab0c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ab10:	b292      	uxth	r2, r2
 800ab12:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	22ff      	movs	r2, #255	; 0xff
 800ab18:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800ab1c:	2300      	movs	r3, #0
}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	3710      	adds	r7, #16
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bd80      	pop	{r7, pc}
	...

0800ab28 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ab28:	b480      	push	{r7}
 800ab2a:	b083      	sub	sp, #12
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2243      	movs	r2, #67	; 0x43
 800ab34:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800ab36:	4b03      	ldr	r3, [pc, #12]	; (800ab44 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800ab38:	4618      	mov	r0, r3
 800ab3a:	370c      	adds	r7, #12
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab42:	4770      	bx	lr
 800ab44:	200000c4 	.word	0x200000c4

0800ab48 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b083      	sub	sp, #12
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2243      	movs	r2, #67	; 0x43
 800ab54:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800ab56:	4b03      	ldr	r3, [pc, #12]	; (800ab64 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	370c      	adds	r7, #12
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab62:	4770      	bx	lr
 800ab64:	20000080 	.word	0x20000080

0800ab68 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ab68:	b480      	push	{r7}
 800ab6a:	b083      	sub	sp, #12
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2243      	movs	r2, #67	; 0x43
 800ab74:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800ab76:	4b03      	ldr	r3, [pc, #12]	; (800ab84 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	370c      	adds	r7, #12
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab82:	4770      	bx	lr
 800ab84:	20000108 	.word	0x20000108

0800ab88 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ab88:	b480      	push	{r7}
 800ab8a:	b083      	sub	sp, #12
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	220a      	movs	r2, #10
 800ab94:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ab96:	4b03      	ldr	r3, [pc, #12]	; (800aba4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	370c      	adds	r7, #12
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba2:	4770      	bx	lr
 800aba4:	2000003c 	.word	0x2000003c

0800aba8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800aba8:	b480      	push	{r7}
 800abaa:	b083      	sub	sp, #12
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
 800abb0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d101      	bne.n	800abbc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800abb8:	2303      	movs	r3, #3
 800abba:	e004      	b.n	800abc6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	683a      	ldr	r2, [r7, #0]
 800abc0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800abc4:	2300      	movs	r3, #0
}
 800abc6:	4618      	mov	r0, r3
 800abc8:	370c      	adds	r7, #12
 800abca:	46bd      	mov	sp, r7
 800abcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd0:	4770      	bx	lr

0800abd2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800abd2:	b480      	push	{r7}
 800abd4:	b087      	sub	sp, #28
 800abd6:	af00      	add	r7, sp, #0
 800abd8:	60f8      	str	r0, [r7, #12]
 800abda:	60b9      	str	r1, [r7, #8]
 800abdc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800abe4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800abe6:	697b      	ldr	r3, [r7, #20]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d101      	bne.n	800abf0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800abec:	2303      	movs	r3, #3
 800abee:	e008      	b.n	800ac02 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800abf0:	697b      	ldr	r3, [r7, #20]
 800abf2:	68ba      	ldr	r2, [r7, #8]
 800abf4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	687a      	ldr	r2, [r7, #4]
 800abfc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800ac00:	2300      	movs	r3, #0
}
 800ac02:	4618      	mov	r0, r3
 800ac04:	371c      	adds	r7, #28
 800ac06:	46bd      	mov	sp, r7
 800ac08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0c:	4770      	bx	lr

0800ac0e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ac0e:	b480      	push	{r7}
 800ac10:	b085      	sub	sp, #20
 800ac12:	af00      	add	r7, sp, #0
 800ac14:	6078      	str	r0, [r7, #4]
 800ac16:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ac1e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d101      	bne.n	800ac2a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800ac26:	2303      	movs	r3, #3
 800ac28:	e004      	b.n	800ac34 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	683a      	ldr	r2, [r7, #0]
 800ac2e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800ac32:	2300      	movs	r3, #0
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	3714      	adds	r7, #20
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3e:	4770      	bx	lr

0800ac40 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b084      	sub	sp, #16
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ac4e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800ac50:	2301      	movs	r3, #1
 800ac52:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d101      	bne.n	800ac62 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ac5e:	2303      	movs	r3, #3
 800ac60:	e01a      	b.n	800ac98 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800ac62:	68bb      	ldr	r3, [r7, #8]
 800ac64:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d114      	bne.n	800ac96 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	2201      	movs	r2, #1
 800ac70:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800ac84:	68bb      	ldr	r3, [r7, #8]
 800ac86:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ac8a:	2181      	movs	r1, #129	; 0x81
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	f001 fe1c 	bl	800c8ca <USBD_LL_Transmit>

    ret = USBD_OK;
 800ac92:	2300      	movs	r3, #0
 800ac94:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ac96:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	3710      	adds	r7, #16
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd80      	pop	{r7, pc}

0800aca0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b084      	sub	sp, #16
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800acae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d101      	bne.n	800acbe <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800acba:	2303      	movs	r3, #3
 800acbc:	e016      	b.n	800acec <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	7c1b      	ldrb	r3, [r3, #16]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d109      	bne.n	800acda <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800accc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800acd0:	2101      	movs	r1, #1
 800acd2:	6878      	ldr	r0, [r7, #4]
 800acd4:	f001 fe1a 	bl	800c90c <USBD_LL_PrepareReceive>
 800acd8:	e007      	b.n	800acea <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ace0:	2340      	movs	r3, #64	; 0x40
 800ace2:	2101      	movs	r1, #1
 800ace4:	6878      	ldr	r0, [r7, #4]
 800ace6:	f001 fe11 	bl	800c90c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800acea:	2300      	movs	r3, #0
}
 800acec:	4618      	mov	r0, r3
 800acee:	3710      	adds	r7, #16
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}

0800acf4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b086      	sub	sp, #24
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	60f8      	str	r0, [r7, #12]
 800acfc:	60b9      	str	r1, [r7, #8]
 800acfe:	4613      	mov	r3, r2
 800ad00:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d101      	bne.n	800ad0c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ad08:	2303      	movs	r3, #3
 800ad0a:	e01f      	b.n	800ad4c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	2200      	movs	r2, #0
 800ad10:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	2200      	movs	r2, #0
 800ad18:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	2200      	movs	r2, #0
 800ad20:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d003      	beq.n	800ad32 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	68ba      	ldr	r2, [r7, #8]
 800ad2e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	2201      	movs	r2, #1
 800ad36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	79fa      	ldrb	r2, [r7, #7]
 800ad3e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ad40:	68f8      	ldr	r0, [r7, #12]
 800ad42:	f001 fc8d 	bl	800c660 <USBD_LL_Init>
 800ad46:	4603      	mov	r3, r0
 800ad48:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ad4a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	3718      	adds	r7, #24
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bd80      	pop	{r7, pc}

0800ad54 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b084      	sub	sp, #16
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
 800ad5c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d101      	bne.n	800ad6c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800ad68:	2303      	movs	r3, #3
 800ad6a:	e016      	b.n	800ad9a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	683a      	ldr	r2, [r7, #0]
 800ad70:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d00b      	beq.n	800ad98 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad88:	f107 020e 	add.w	r2, r7, #14
 800ad8c:	4610      	mov	r0, r2
 800ad8e:	4798      	blx	r3
 800ad90:	4602      	mov	r2, r0
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800ad98:	2300      	movs	r3, #0
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	3710      	adds	r7, #16
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}

0800ada2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ada2:	b580      	push	{r7, lr}
 800ada4:	b082      	sub	sp, #8
 800ada6:	af00      	add	r7, sp, #0
 800ada8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f001 fca4 	bl	800c6f8 <USBD_LL_Start>
 800adb0:	4603      	mov	r3, r0
}
 800adb2:	4618      	mov	r0, r3
 800adb4:	3708      	adds	r7, #8
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}

0800adba <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800adba:	b480      	push	{r7}
 800adbc:	b083      	sub	sp, #12
 800adbe:	af00      	add	r7, sp, #0
 800adc0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800adc2:	2300      	movs	r3, #0
}
 800adc4:	4618      	mov	r0, r3
 800adc6:	370c      	adds	r7, #12
 800adc8:	46bd      	mov	sp, r7
 800adca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adce:	4770      	bx	lr

0800add0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b084      	sub	sp, #16
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
 800add8:	460b      	mov	r3, r1
 800adda:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800addc:	2303      	movs	r3, #3
 800adde:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d009      	beq.n	800adfe <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	78fa      	ldrb	r2, [r7, #3]
 800adf4:	4611      	mov	r1, r2
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	4798      	blx	r3
 800adfa:	4603      	mov	r3, r0
 800adfc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800adfe:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	3710      	adds	r7, #16
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bd80      	pop	{r7, pc}

0800ae08 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b082      	sub	sp, #8
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
 800ae10:	460b      	mov	r3, r1
 800ae12:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d007      	beq.n	800ae2e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae24:	685b      	ldr	r3, [r3, #4]
 800ae26:	78fa      	ldrb	r2, [r7, #3]
 800ae28:	4611      	mov	r1, r2
 800ae2a:	6878      	ldr	r0, [r7, #4]
 800ae2c:	4798      	blx	r3
  }

  return USBD_OK;
 800ae2e:	2300      	movs	r3, #0
}
 800ae30:	4618      	mov	r0, r3
 800ae32:	3708      	adds	r7, #8
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}

0800ae38 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b084      	sub	sp, #16
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
 800ae40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ae48:	6839      	ldr	r1, [r7, #0]
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	f000 ff90 	bl	800bd70 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2201      	movs	r2, #1
 800ae54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ae5e:	461a      	mov	r2, r3
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ae6c:	f003 031f 	and.w	r3, r3, #31
 800ae70:	2b02      	cmp	r3, #2
 800ae72:	d01a      	beq.n	800aeaa <USBD_LL_SetupStage+0x72>
 800ae74:	2b02      	cmp	r3, #2
 800ae76:	d822      	bhi.n	800aebe <USBD_LL_SetupStage+0x86>
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d002      	beq.n	800ae82 <USBD_LL_SetupStage+0x4a>
 800ae7c:	2b01      	cmp	r3, #1
 800ae7e:	d00a      	beq.n	800ae96 <USBD_LL_SetupStage+0x5e>
 800ae80:	e01d      	b.n	800aebe <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ae88:	4619      	mov	r1, r3
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	f000 fa62 	bl	800b354 <USBD_StdDevReq>
 800ae90:	4603      	mov	r3, r0
 800ae92:	73fb      	strb	r3, [r7, #15]
      break;
 800ae94:	e020      	b.n	800aed8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ae9c:	4619      	mov	r1, r3
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f000 fac6 	bl	800b430 <USBD_StdItfReq>
 800aea4:	4603      	mov	r3, r0
 800aea6:	73fb      	strb	r3, [r7, #15]
      break;
 800aea8:	e016      	b.n	800aed8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800aeb0:	4619      	mov	r1, r3
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f000 fb05 	bl	800b4c2 <USBD_StdEPReq>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	73fb      	strb	r3, [r7, #15]
      break;
 800aebc:	e00c      	b.n	800aed8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800aec4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800aec8:	b2db      	uxtb	r3, r3
 800aeca:	4619      	mov	r1, r3
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f001 fc73 	bl	800c7b8 <USBD_LL_StallEP>
 800aed2:	4603      	mov	r3, r0
 800aed4:	73fb      	strb	r3, [r7, #15]
      break;
 800aed6:	bf00      	nop
  }

  return ret;
 800aed8:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeda:	4618      	mov	r0, r3
 800aedc:	3710      	adds	r7, #16
 800aede:	46bd      	mov	sp, r7
 800aee0:	bd80      	pop	{r7, pc}

0800aee2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800aee2:	b580      	push	{r7, lr}
 800aee4:	b086      	sub	sp, #24
 800aee6:	af00      	add	r7, sp, #0
 800aee8:	60f8      	str	r0, [r7, #12]
 800aeea:	460b      	mov	r3, r1
 800aeec:	607a      	str	r2, [r7, #4]
 800aeee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800aef0:	7afb      	ldrb	r3, [r7, #11]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d138      	bne.n	800af68 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800aefc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800af04:	2b03      	cmp	r3, #3
 800af06:	d14a      	bne.n	800af9e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800af08:	693b      	ldr	r3, [r7, #16]
 800af0a:	689a      	ldr	r2, [r3, #8]
 800af0c:	693b      	ldr	r3, [r7, #16]
 800af0e:	68db      	ldr	r3, [r3, #12]
 800af10:	429a      	cmp	r2, r3
 800af12:	d913      	bls.n	800af3c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800af14:	693b      	ldr	r3, [r7, #16]
 800af16:	689a      	ldr	r2, [r3, #8]
 800af18:	693b      	ldr	r3, [r7, #16]
 800af1a:	68db      	ldr	r3, [r3, #12]
 800af1c:	1ad2      	subs	r2, r2, r3
 800af1e:	693b      	ldr	r3, [r7, #16]
 800af20:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800af22:	693b      	ldr	r3, [r7, #16]
 800af24:	68da      	ldr	r2, [r3, #12]
 800af26:	693b      	ldr	r3, [r7, #16]
 800af28:	689b      	ldr	r3, [r3, #8]
 800af2a:	4293      	cmp	r3, r2
 800af2c:	bf28      	it	cs
 800af2e:	4613      	movcs	r3, r2
 800af30:	461a      	mov	r2, r3
 800af32:	6879      	ldr	r1, [r7, #4]
 800af34:	68f8      	ldr	r0, [r7, #12]
 800af36:	f001 f80f 	bl	800bf58 <USBD_CtlContinueRx>
 800af3a:	e030      	b.n	800af9e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af42:	b2db      	uxtb	r3, r3
 800af44:	2b03      	cmp	r3, #3
 800af46:	d10b      	bne.n	800af60 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af4e:	691b      	ldr	r3, [r3, #16]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d005      	beq.n	800af60 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af5a:	691b      	ldr	r3, [r3, #16]
 800af5c:	68f8      	ldr	r0, [r7, #12]
 800af5e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800af60:	68f8      	ldr	r0, [r7, #12]
 800af62:	f001 f80a 	bl	800bf7a <USBD_CtlSendStatus>
 800af66:	e01a      	b.n	800af9e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af6e:	b2db      	uxtb	r3, r3
 800af70:	2b03      	cmp	r3, #3
 800af72:	d114      	bne.n	800af9e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af7a:	699b      	ldr	r3, [r3, #24]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d00e      	beq.n	800af9e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af86:	699b      	ldr	r3, [r3, #24]
 800af88:	7afa      	ldrb	r2, [r7, #11]
 800af8a:	4611      	mov	r1, r2
 800af8c:	68f8      	ldr	r0, [r7, #12]
 800af8e:	4798      	blx	r3
 800af90:	4603      	mov	r3, r0
 800af92:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800af94:	7dfb      	ldrb	r3, [r7, #23]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d001      	beq.n	800af9e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800af9a:	7dfb      	ldrb	r3, [r7, #23]
 800af9c:	e000      	b.n	800afa0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800af9e:	2300      	movs	r3, #0
}
 800afa0:	4618      	mov	r0, r3
 800afa2:	3718      	adds	r7, #24
 800afa4:	46bd      	mov	sp, r7
 800afa6:	bd80      	pop	{r7, pc}

0800afa8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b086      	sub	sp, #24
 800afac:	af00      	add	r7, sp, #0
 800afae:	60f8      	str	r0, [r7, #12]
 800afb0:	460b      	mov	r3, r1
 800afb2:	607a      	str	r2, [r7, #4]
 800afb4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800afb6:	7afb      	ldrb	r3, [r7, #11]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d16b      	bne.n	800b094 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	3314      	adds	r3, #20
 800afc0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800afc8:	2b02      	cmp	r3, #2
 800afca:	d156      	bne.n	800b07a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800afcc:	693b      	ldr	r3, [r7, #16]
 800afce:	689a      	ldr	r2, [r3, #8]
 800afd0:	693b      	ldr	r3, [r7, #16]
 800afd2:	68db      	ldr	r3, [r3, #12]
 800afd4:	429a      	cmp	r2, r3
 800afd6:	d914      	bls.n	800b002 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800afd8:	693b      	ldr	r3, [r7, #16]
 800afda:	689a      	ldr	r2, [r3, #8]
 800afdc:	693b      	ldr	r3, [r7, #16]
 800afde:	68db      	ldr	r3, [r3, #12]
 800afe0:	1ad2      	subs	r2, r2, r3
 800afe2:	693b      	ldr	r3, [r7, #16]
 800afe4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800afe6:	693b      	ldr	r3, [r7, #16]
 800afe8:	689b      	ldr	r3, [r3, #8]
 800afea:	461a      	mov	r2, r3
 800afec:	6879      	ldr	r1, [r7, #4]
 800afee:	68f8      	ldr	r0, [r7, #12]
 800aff0:	f000 ff84 	bl	800befc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aff4:	2300      	movs	r3, #0
 800aff6:	2200      	movs	r2, #0
 800aff8:	2100      	movs	r1, #0
 800affa:	68f8      	ldr	r0, [r7, #12]
 800affc:	f001 fc86 	bl	800c90c <USBD_LL_PrepareReceive>
 800b000:	e03b      	b.n	800b07a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b002:	693b      	ldr	r3, [r7, #16]
 800b004:	68da      	ldr	r2, [r3, #12]
 800b006:	693b      	ldr	r3, [r7, #16]
 800b008:	689b      	ldr	r3, [r3, #8]
 800b00a:	429a      	cmp	r2, r3
 800b00c:	d11c      	bne.n	800b048 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b00e:	693b      	ldr	r3, [r7, #16]
 800b010:	685a      	ldr	r2, [r3, #4]
 800b012:	693b      	ldr	r3, [r7, #16]
 800b014:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b016:	429a      	cmp	r2, r3
 800b018:	d316      	bcc.n	800b048 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b01a:	693b      	ldr	r3, [r7, #16]
 800b01c:	685a      	ldr	r2, [r3, #4]
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b024:	429a      	cmp	r2, r3
 800b026:	d20f      	bcs.n	800b048 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b028:	2200      	movs	r2, #0
 800b02a:	2100      	movs	r1, #0
 800b02c:	68f8      	ldr	r0, [r7, #12]
 800b02e:	f000 ff65 	bl	800befc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	2200      	movs	r2, #0
 800b036:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b03a:	2300      	movs	r3, #0
 800b03c:	2200      	movs	r2, #0
 800b03e:	2100      	movs	r1, #0
 800b040:	68f8      	ldr	r0, [r7, #12]
 800b042:	f001 fc63 	bl	800c90c <USBD_LL_PrepareReceive>
 800b046:	e018      	b.n	800b07a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b04e:	b2db      	uxtb	r3, r3
 800b050:	2b03      	cmp	r3, #3
 800b052:	d10b      	bne.n	800b06c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b05a:	68db      	ldr	r3, [r3, #12]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d005      	beq.n	800b06c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b066:	68db      	ldr	r3, [r3, #12]
 800b068:	68f8      	ldr	r0, [r7, #12]
 800b06a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b06c:	2180      	movs	r1, #128	; 0x80
 800b06e:	68f8      	ldr	r0, [r7, #12]
 800b070:	f001 fba2 	bl	800c7b8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b074:	68f8      	ldr	r0, [r7, #12]
 800b076:	f000 ff93 	bl	800bfa0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b080:	2b01      	cmp	r3, #1
 800b082:	d122      	bne.n	800b0ca <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800b084:	68f8      	ldr	r0, [r7, #12]
 800b086:	f7ff fe98 	bl	800adba <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	2200      	movs	r2, #0
 800b08e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b092:	e01a      	b.n	800b0ca <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b09a:	b2db      	uxtb	r3, r3
 800b09c:	2b03      	cmp	r3, #3
 800b09e:	d114      	bne.n	800b0ca <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0a6:	695b      	ldr	r3, [r3, #20]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d00e      	beq.n	800b0ca <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0b2:	695b      	ldr	r3, [r3, #20]
 800b0b4:	7afa      	ldrb	r2, [r7, #11]
 800b0b6:	4611      	mov	r1, r2
 800b0b8:	68f8      	ldr	r0, [r7, #12]
 800b0ba:	4798      	blx	r3
 800b0bc:	4603      	mov	r3, r0
 800b0be:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b0c0:	7dfb      	ldrb	r3, [r7, #23]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d001      	beq.n	800b0ca <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800b0c6:	7dfb      	ldrb	r3, [r7, #23]
 800b0c8:	e000      	b.n	800b0cc <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800b0ca:	2300      	movs	r3, #0
}
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	3718      	adds	r7, #24
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}

0800b0d4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b082      	sub	sp, #8
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2201      	movs	r2, #1
 800b0e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b100:	2b00      	cmp	r3, #0
 800b102:	d101      	bne.n	800b108 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800b104:	2303      	movs	r3, #3
 800b106:	e02f      	b.n	800b168 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d00f      	beq.n	800b132 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b118:	685b      	ldr	r3, [r3, #4]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d009      	beq.n	800b132 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b124:	685b      	ldr	r3, [r3, #4]
 800b126:	687a      	ldr	r2, [r7, #4]
 800b128:	6852      	ldr	r2, [r2, #4]
 800b12a:	b2d2      	uxtb	r2, r2
 800b12c:	4611      	mov	r1, r2
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b132:	2340      	movs	r3, #64	; 0x40
 800b134:	2200      	movs	r2, #0
 800b136:	2100      	movs	r1, #0
 800b138:	6878      	ldr	r0, [r7, #4]
 800b13a:	f001 faf8 	bl	800c72e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	2201      	movs	r2, #1
 800b142:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2240      	movs	r2, #64	; 0x40
 800b14a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b14e:	2340      	movs	r3, #64	; 0x40
 800b150:	2200      	movs	r2, #0
 800b152:	2180      	movs	r1, #128	; 0x80
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	f001 faea 	bl	800c72e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2201      	movs	r2, #1
 800b15e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2240      	movs	r2, #64	; 0x40
 800b164:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800b166:	2300      	movs	r3, #0
}
 800b168:	4618      	mov	r0, r3
 800b16a:	3708      	adds	r7, #8
 800b16c:	46bd      	mov	sp, r7
 800b16e:	bd80      	pop	{r7, pc}

0800b170 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b170:	b480      	push	{r7}
 800b172:	b083      	sub	sp, #12
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
 800b178:	460b      	mov	r3, r1
 800b17a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	78fa      	ldrb	r2, [r7, #3]
 800b180:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b182:	2300      	movs	r3, #0
}
 800b184:	4618      	mov	r0, r3
 800b186:	370c      	adds	r7, #12
 800b188:	46bd      	mov	sp, r7
 800b18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18e:	4770      	bx	lr

0800b190 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b190:	b480      	push	{r7}
 800b192:	b083      	sub	sp, #12
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b19e:	b2da      	uxtb	r2, r3
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2204      	movs	r2, #4
 800b1aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b1ae:	2300      	movs	r3, #0
}
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	370c      	adds	r7, #12
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ba:	4770      	bx	lr

0800b1bc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b1bc:	b480      	push	{r7}
 800b1be:	b083      	sub	sp, #12
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1ca:	b2db      	uxtb	r3, r3
 800b1cc:	2b04      	cmp	r3, #4
 800b1ce:	d106      	bne.n	800b1de <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b1d6:	b2da      	uxtb	r2, r3
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b1de:	2300      	movs	r3, #0
}
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	370c      	adds	r7, #12
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ea:	4770      	bx	lr

0800b1ec <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b082      	sub	sp, #8
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d101      	bne.n	800b202 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800b1fe:	2303      	movs	r3, #3
 800b200:	e012      	b.n	800b228 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b208:	b2db      	uxtb	r3, r3
 800b20a:	2b03      	cmp	r3, #3
 800b20c:	d10b      	bne.n	800b226 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b214:	69db      	ldr	r3, [r3, #28]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d005      	beq.n	800b226 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b220:	69db      	ldr	r3, [r3, #28]
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b226:	2300      	movs	r3, #0
}
 800b228:	4618      	mov	r0, r3
 800b22a:	3708      	adds	r7, #8
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bd80      	pop	{r7, pc}

0800b230 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b082      	sub	sp, #8
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
 800b238:	460b      	mov	r3, r1
 800b23a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b242:	2b00      	cmp	r3, #0
 800b244:	d101      	bne.n	800b24a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800b246:	2303      	movs	r3, #3
 800b248:	e014      	b.n	800b274 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b250:	b2db      	uxtb	r3, r3
 800b252:	2b03      	cmp	r3, #3
 800b254:	d10d      	bne.n	800b272 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b25c:	6a1b      	ldr	r3, [r3, #32]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d007      	beq.n	800b272 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b268:	6a1b      	ldr	r3, [r3, #32]
 800b26a:	78fa      	ldrb	r2, [r7, #3]
 800b26c:	4611      	mov	r1, r2
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b272:	2300      	movs	r3, #0
}
 800b274:	4618      	mov	r0, r3
 800b276:	3708      	adds	r7, #8
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}

0800b27c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b082      	sub	sp, #8
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
 800b284:	460b      	mov	r3, r1
 800b286:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d101      	bne.n	800b296 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800b292:	2303      	movs	r3, #3
 800b294:	e014      	b.n	800b2c0 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b29c:	b2db      	uxtb	r3, r3
 800b29e:	2b03      	cmp	r3, #3
 800b2a0:	d10d      	bne.n	800b2be <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d007      	beq.n	800b2be <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2b6:	78fa      	ldrb	r2, [r7, #3]
 800b2b8:	4611      	mov	r1, r2
 800b2ba:	6878      	ldr	r0, [r7, #4]
 800b2bc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b2be:	2300      	movs	r3, #0
}
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	3708      	adds	r7, #8
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	bd80      	pop	{r7, pc}

0800b2c8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b2c8:	b480      	push	{r7}
 800b2ca:	b083      	sub	sp, #12
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b2d0:	2300      	movs	r3, #0
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	370c      	adds	r7, #12
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2dc:	4770      	bx	lr

0800b2de <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b2de:	b580      	push	{r7, lr}
 800b2e0:	b082      	sub	sp, #8
 800b2e2:	af00      	add	r7, sp, #0
 800b2e4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2201      	movs	r2, #1
 800b2ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d009      	beq.n	800b30c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2fe:	685b      	ldr	r3, [r3, #4]
 800b300:	687a      	ldr	r2, [r7, #4]
 800b302:	6852      	ldr	r2, [r2, #4]
 800b304:	b2d2      	uxtb	r2, r2
 800b306:	4611      	mov	r1, r2
 800b308:	6878      	ldr	r0, [r7, #4]
 800b30a:	4798      	blx	r3
  }

  return USBD_OK;
 800b30c:	2300      	movs	r3, #0
}
 800b30e:	4618      	mov	r0, r3
 800b310:	3708      	adds	r7, #8
 800b312:	46bd      	mov	sp, r7
 800b314:	bd80      	pop	{r7, pc}

0800b316 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b316:	b480      	push	{r7}
 800b318:	b087      	sub	sp, #28
 800b31a:	af00      	add	r7, sp, #0
 800b31c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b322:	697b      	ldr	r3, [r7, #20]
 800b324:	781b      	ldrb	r3, [r3, #0]
 800b326:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b328:	697b      	ldr	r3, [r7, #20]
 800b32a:	3301      	adds	r3, #1
 800b32c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b32e:	697b      	ldr	r3, [r7, #20]
 800b330:	781b      	ldrb	r3, [r3, #0]
 800b332:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b334:	8a3b      	ldrh	r3, [r7, #16]
 800b336:	021b      	lsls	r3, r3, #8
 800b338:	b21a      	sxth	r2, r3
 800b33a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b33e:	4313      	orrs	r3, r2
 800b340:	b21b      	sxth	r3, r3
 800b342:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b344:	89fb      	ldrh	r3, [r7, #14]
}
 800b346:	4618      	mov	r0, r3
 800b348:	371c      	adds	r7, #28
 800b34a:	46bd      	mov	sp, r7
 800b34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b350:	4770      	bx	lr
	...

0800b354 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b084      	sub	sp, #16
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
 800b35c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b35e:	2300      	movs	r3, #0
 800b360:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	781b      	ldrb	r3, [r3, #0]
 800b366:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b36a:	2b40      	cmp	r3, #64	; 0x40
 800b36c:	d005      	beq.n	800b37a <USBD_StdDevReq+0x26>
 800b36e:	2b40      	cmp	r3, #64	; 0x40
 800b370:	d853      	bhi.n	800b41a <USBD_StdDevReq+0xc6>
 800b372:	2b00      	cmp	r3, #0
 800b374:	d00b      	beq.n	800b38e <USBD_StdDevReq+0x3a>
 800b376:	2b20      	cmp	r3, #32
 800b378:	d14f      	bne.n	800b41a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b380:	689b      	ldr	r3, [r3, #8]
 800b382:	6839      	ldr	r1, [r7, #0]
 800b384:	6878      	ldr	r0, [r7, #4]
 800b386:	4798      	blx	r3
 800b388:	4603      	mov	r3, r0
 800b38a:	73fb      	strb	r3, [r7, #15]
      break;
 800b38c:	e04a      	b.n	800b424 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	785b      	ldrb	r3, [r3, #1]
 800b392:	2b09      	cmp	r3, #9
 800b394:	d83b      	bhi.n	800b40e <USBD_StdDevReq+0xba>
 800b396:	a201      	add	r2, pc, #4	; (adr r2, 800b39c <USBD_StdDevReq+0x48>)
 800b398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b39c:	0800b3f1 	.word	0x0800b3f1
 800b3a0:	0800b405 	.word	0x0800b405
 800b3a4:	0800b40f 	.word	0x0800b40f
 800b3a8:	0800b3fb 	.word	0x0800b3fb
 800b3ac:	0800b40f 	.word	0x0800b40f
 800b3b0:	0800b3cf 	.word	0x0800b3cf
 800b3b4:	0800b3c5 	.word	0x0800b3c5
 800b3b8:	0800b40f 	.word	0x0800b40f
 800b3bc:	0800b3e7 	.word	0x0800b3e7
 800b3c0:	0800b3d9 	.word	0x0800b3d9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b3c4:	6839      	ldr	r1, [r7, #0]
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f000 f9de 	bl	800b788 <USBD_GetDescriptor>
          break;
 800b3cc:	e024      	b.n	800b418 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b3ce:	6839      	ldr	r1, [r7, #0]
 800b3d0:	6878      	ldr	r0, [r7, #4]
 800b3d2:	f000 fb43 	bl	800ba5c <USBD_SetAddress>
          break;
 800b3d6:	e01f      	b.n	800b418 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b3d8:	6839      	ldr	r1, [r7, #0]
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f000 fb82 	bl	800bae4 <USBD_SetConfig>
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	73fb      	strb	r3, [r7, #15]
          break;
 800b3e4:	e018      	b.n	800b418 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b3e6:	6839      	ldr	r1, [r7, #0]
 800b3e8:	6878      	ldr	r0, [r7, #4]
 800b3ea:	f000 fc21 	bl	800bc30 <USBD_GetConfig>
          break;
 800b3ee:	e013      	b.n	800b418 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b3f0:	6839      	ldr	r1, [r7, #0]
 800b3f2:	6878      	ldr	r0, [r7, #4]
 800b3f4:	f000 fc52 	bl	800bc9c <USBD_GetStatus>
          break;
 800b3f8:	e00e      	b.n	800b418 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b3fa:	6839      	ldr	r1, [r7, #0]
 800b3fc:	6878      	ldr	r0, [r7, #4]
 800b3fe:	f000 fc81 	bl	800bd04 <USBD_SetFeature>
          break;
 800b402:	e009      	b.n	800b418 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b404:	6839      	ldr	r1, [r7, #0]
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	f000 fc90 	bl	800bd2c <USBD_ClrFeature>
          break;
 800b40c:	e004      	b.n	800b418 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800b40e:	6839      	ldr	r1, [r7, #0]
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	f000 fce7 	bl	800bde4 <USBD_CtlError>
          break;
 800b416:	bf00      	nop
      }
      break;
 800b418:	e004      	b.n	800b424 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800b41a:	6839      	ldr	r1, [r7, #0]
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	f000 fce1 	bl	800bde4 <USBD_CtlError>
      break;
 800b422:	bf00      	nop
  }

  return ret;
 800b424:	7bfb      	ldrb	r3, [r7, #15]
}
 800b426:	4618      	mov	r0, r3
 800b428:	3710      	adds	r7, #16
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bd80      	pop	{r7, pc}
 800b42e:	bf00      	nop

0800b430 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b084      	sub	sp, #16
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
 800b438:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b43a:	2300      	movs	r3, #0
 800b43c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	781b      	ldrb	r3, [r3, #0]
 800b442:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b446:	2b40      	cmp	r3, #64	; 0x40
 800b448:	d005      	beq.n	800b456 <USBD_StdItfReq+0x26>
 800b44a:	2b40      	cmp	r3, #64	; 0x40
 800b44c:	d82f      	bhi.n	800b4ae <USBD_StdItfReq+0x7e>
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d001      	beq.n	800b456 <USBD_StdItfReq+0x26>
 800b452:	2b20      	cmp	r3, #32
 800b454:	d12b      	bne.n	800b4ae <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b45c:	b2db      	uxtb	r3, r3
 800b45e:	3b01      	subs	r3, #1
 800b460:	2b02      	cmp	r3, #2
 800b462:	d81d      	bhi.n	800b4a0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	889b      	ldrh	r3, [r3, #4]
 800b468:	b2db      	uxtb	r3, r3
 800b46a:	2b01      	cmp	r3, #1
 800b46c:	d813      	bhi.n	800b496 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b474:	689b      	ldr	r3, [r3, #8]
 800b476:	6839      	ldr	r1, [r7, #0]
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	4798      	blx	r3
 800b47c:	4603      	mov	r3, r0
 800b47e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	88db      	ldrh	r3, [r3, #6]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d110      	bne.n	800b4aa <USBD_StdItfReq+0x7a>
 800b488:	7bfb      	ldrb	r3, [r7, #15]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d10d      	bne.n	800b4aa <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f000 fd73 	bl	800bf7a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b494:	e009      	b.n	800b4aa <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800b496:	6839      	ldr	r1, [r7, #0]
 800b498:	6878      	ldr	r0, [r7, #4]
 800b49a:	f000 fca3 	bl	800bde4 <USBD_CtlError>
          break;
 800b49e:	e004      	b.n	800b4aa <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800b4a0:	6839      	ldr	r1, [r7, #0]
 800b4a2:	6878      	ldr	r0, [r7, #4]
 800b4a4:	f000 fc9e 	bl	800bde4 <USBD_CtlError>
          break;
 800b4a8:	e000      	b.n	800b4ac <USBD_StdItfReq+0x7c>
          break;
 800b4aa:	bf00      	nop
      }
      break;
 800b4ac:	e004      	b.n	800b4b8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800b4ae:	6839      	ldr	r1, [r7, #0]
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f000 fc97 	bl	800bde4 <USBD_CtlError>
      break;
 800b4b6:	bf00      	nop
  }

  return ret;
 800b4b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	3710      	adds	r7, #16
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	bd80      	pop	{r7, pc}

0800b4c2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4c2:	b580      	push	{r7, lr}
 800b4c4:	b084      	sub	sp, #16
 800b4c6:	af00      	add	r7, sp, #0
 800b4c8:	6078      	str	r0, [r7, #4]
 800b4ca:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800b4d0:	683b      	ldr	r3, [r7, #0]
 800b4d2:	889b      	ldrh	r3, [r3, #4]
 800b4d4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	781b      	ldrb	r3, [r3, #0]
 800b4da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b4de:	2b40      	cmp	r3, #64	; 0x40
 800b4e0:	d007      	beq.n	800b4f2 <USBD_StdEPReq+0x30>
 800b4e2:	2b40      	cmp	r3, #64	; 0x40
 800b4e4:	f200 8145 	bhi.w	800b772 <USBD_StdEPReq+0x2b0>
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d00c      	beq.n	800b506 <USBD_StdEPReq+0x44>
 800b4ec:	2b20      	cmp	r3, #32
 800b4ee:	f040 8140 	bne.w	800b772 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4f8:	689b      	ldr	r3, [r3, #8]
 800b4fa:	6839      	ldr	r1, [r7, #0]
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	4798      	blx	r3
 800b500:	4603      	mov	r3, r0
 800b502:	73fb      	strb	r3, [r7, #15]
      break;
 800b504:	e13a      	b.n	800b77c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b506:	683b      	ldr	r3, [r7, #0]
 800b508:	785b      	ldrb	r3, [r3, #1]
 800b50a:	2b03      	cmp	r3, #3
 800b50c:	d007      	beq.n	800b51e <USBD_StdEPReq+0x5c>
 800b50e:	2b03      	cmp	r3, #3
 800b510:	f300 8129 	bgt.w	800b766 <USBD_StdEPReq+0x2a4>
 800b514:	2b00      	cmp	r3, #0
 800b516:	d07f      	beq.n	800b618 <USBD_StdEPReq+0x156>
 800b518:	2b01      	cmp	r3, #1
 800b51a:	d03c      	beq.n	800b596 <USBD_StdEPReq+0xd4>
 800b51c:	e123      	b.n	800b766 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b524:	b2db      	uxtb	r3, r3
 800b526:	2b02      	cmp	r3, #2
 800b528:	d002      	beq.n	800b530 <USBD_StdEPReq+0x6e>
 800b52a:	2b03      	cmp	r3, #3
 800b52c:	d016      	beq.n	800b55c <USBD_StdEPReq+0x9a>
 800b52e:	e02c      	b.n	800b58a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b530:	7bbb      	ldrb	r3, [r7, #14]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d00d      	beq.n	800b552 <USBD_StdEPReq+0x90>
 800b536:	7bbb      	ldrb	r3, [r7, #14]
 800b538:	2b80      	cmp	r3, #128	; 0x80
 800b53a:	d00a      	beq.n	800b552 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b53c:	7bbb      	ldrb	r3, [r7, #14]
 800b53e:	4619      	mov	r1, r3
 800b540:	6878      	ldr	r0, [r7, #4]
 800b542:	f001 f939 	bl	800c7b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b546:	2180      	movs	r1, #128	; 0x80
 800b548:	6878      	ldr	r0, [r7, #4]
 800b54a:	f001 f935 	bl	800c7b8 <USBD_LL_StallEP>
 800b54e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b550:	e020      	b.n	800b594 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800b552:	6839      	ldr	r1, [r7, #0]
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f000 fc45 	bl	800bde4 <USBD_CtlError>
              break;
 800b55a:	e01b      	b.n	800b594 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	885b      	ldrh	r3, [r3, #2]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d10e      	bne.n	800b582 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b564:	7bbb      	ldrb	r3, [r7, #14]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d00b      	beq.n	800b582 <USBD_StdEPReq+0xc0>
 800b56a:	7bbb      	ldrb	r3, [r7, #14]
 800b56c:	2b80      	cmp	r3, #128	; 0x80
 800b56e:	d008      	beq.n	800b582 <USBD_StdEPReq+0xc0>
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	88db      	ldrh	r3, [r3, #6]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d104      	bne.n	800b582 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b578:	7bbb      	ldrb	r3, [r7, #14]
 800b57a:	4619      	mov	r1, r3
 800b57c:	6878      	ldr	r0, [r7, #4]
 800b57e:	f001 f91b 	bl	800c7b8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	f000 fcf9 	bl	800bf7a <USBD_CtlSendStatus>

              break;
 800b588:	e004      	b.n	800b594 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800b58a:	6839      	ldr	r1, [r7, #0]
 800b58c:	6878      	ldr	r0, [r7, #4]
 800b58e:	f000 fc29 	bl	800bde4 <USBD_CtlError>
              break;
 800b592:	bf00      	nop
          }
          break;
 800b594:	e0ec      	b.n	800b770 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b59c:	b2db      	uxtb	r3, r3
 800b59e:	2b02      	cmp	r3, #2
 800b5a0:	d002      	beq.n	800b5a8 <USBD_StdEPReq+0xe6>
 800b5a2:	2b03      	cmp	r3, #3
 800b5a4:	d016      	beq.n	800b5d4 <USBD_StdEPReq+0x112>
 800b5a6:	e030      	b.n	800b60a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b5a8:	7bbb      	ldrb	r3, [r7, #14]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d00d      	beq.n	800b5ca <USBD_StdEPReq+0x108>
 800b5ae:	7bbb      	ldrb	r3, [r7, #14]
 800b5b0:	2b80      	cmp	r3, #128	; 0x80
 800b5b2:	d00a      	beq.n	800b5ca <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b5b4:	7bbb      	ldrb	r3, [r7, #14]
 800b5b6:	4619      	mov	r1, r3
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	f001 f8fd 	bl	800c7b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b5be:	2180      	movs	r1, #128	; 0x80
 800b5c0:	6878      	ldr	r0, [r7, #4]
 800b5c2:	f001 f8f9 	bl	800c7b8 <USBD_LL_StallEP>
 800b5c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b5c8:	e025      	b.n	800b616 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800b5ca:	6839      	ldr	r1, [r7, #0]
 800b5cc:	6878      	ldr	r0, [r7, #4]
 800b5ce:	f000 fc09 	bl	800bde4 <USBD_CtlError>
              break;
 800b5d2:	e020      	b.n	800b616 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	885b      	ldrh	r3, [r3, #2]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d11b      	bne.n	800b614 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b5dc:	7bbb      	ldrb	r3, [r7, #14]
 800b5de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d004      	beq.n	800b5f0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b5e6:	7bbb      	ldrb	r3, [r7, #14]
 800b5e8:	4619      	mov	r1, r3
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f001 f903 	bl	800c7f6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b5f0:	6878      	ldr	r0, [r7, #4]
 800b5f2:	f000 fcc2 	bl	800bf7a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5fc:	689b      	ldr	r3, [r3, #8]
 800b5fe:	6839      	ldr	r1, [r7, #0]
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	4798      	blx	r3
 800b604:	4603      	mov	r3, r0
 800b606:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800b608:	e004      	b.n	800b614 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800b60a:	6839      	ldr	r1, [r7, #0]
 800b60c:	6878      	ldr	r0, [r7, #4]
 800b60e:	f000 fbe9 	bl	800bde4 <USBD_CtlError>
              break;
 800b612:	e000      	b.n	800b616 <USBD_StdEPReq+0x154>
              break;
 800b614:	bf00      	nop
          }
          break;
 800b616:	e0ab      	b.n	800b770 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b61e:	b2db      	uxtb	r3, r3
 800b620:	2b02      	cmp	r3, #2
 800b622:	d002      	beq.n	800b62a <USBD_StdEPReq+0x168>
 800b624:	2b03      	cmp	r3, #3
 800b626:	d032      	beq.n	800b68e <USBD_StdEPReq+0x1cc>
 800b628:	e097      	b.n	800b75a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b62a:	7bbb      	ldrb	r3, [r7, #14]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d007      	beq.n	800b640 <USBD_StdEPReq+0x17e>
 800b630:	7bbb      	ldrb	r3, [r7, #14]
 800b632:	2b80      	cmp	r3, #128	; 0x80
 800b634:	d004      	beq.n	800b640 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800b636:	6839      	ldr	r1, [r7, #0]
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	f000 fbd3 	bl	800bde4 <USBD_CtlError>
                break;
 800b63e:	e091      	b.n	800b764 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b640:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b644:	2b00      	cmp	r3, #0
 800b646:	da0b      	bge.n	800b660 <USBD_StdEPReq+0x19e>
 800b648:	7bbb      	ldrb	r3, [r7, #14]
 800b64a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b64e:	4613      	mov	r3, r2
 800b650:	009b      	lsls	r3, r3, #2
 800b652:	4413      	add	r3, r2
 800b654:	009b      	lsls	r3, r3, #2
 800b656:	3310      	adds	r3, #16
 800b658:	687a      	ldr	r2, [r7, #4]
 800b65a:	4413      	add	r3, r2
 800b65c:	3304      	adds	r3, #4
 800b65e:	e00b      	b.n	800b678 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b660:	7bbb      	ldrb	r3, [r7, #14]
 800b662:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b666:	4613      	mov	r3, r2
 800b668:	009b      	lsls	r3, r3, #2
 800b66a:	4413      	add	r3, r2
 800b66c:	009b      	lsls	r3, r3, #2
 800b66e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b672:	687a      	ldr	r2, [r7, #4]
 800b674:	4413      	add	r3, r2
 800b676:	3304      	adds	r3, #4
 800b678:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b67a:	68bb      	ldr	r3, [r7, #8]
 800b67c:	2200      	movs	r2, #0
 800b67e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b680:	68bb      	ldr	r3, [r7, #8]
 800b682:	2202      	movs	r2, #2
 800b684:	4619      	mov	r1, r3
 800b686:	6878      	ldr	r0, [r7, #4]
 800b688:	f000 fc1d 	bl	800bec6 <USBD_CtlSendData>
              break;
 800b68c:	e06a      	b.n	800b764 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b68e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b692:	2b00      	cmp	r3, #0
 800b694:	da11      	bge.n	800b6ba <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b696:	7bbb      	ldrb	r3, [r7, #14]
 800b698:	f003 020f 	and.w	r2, r3, #15
 800b69c:	6879      	ldr	r1, [r7, #4]
 800b69e:	4613      	mov	r3, r2
 800b6a0:	009b      	lsls	r3, r3, #2
 800b6a2:	4413      	add	r3, r2
 800b6a4:	009b      	lsls	r3, r3, #2
 800b6a6:	440b      	add	r3, r1
 800b6a8:	3324      	adds	r3, #36	; 0x24
 800b6aa:	881b      	ldrh	r3, [r3, #0]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d117      	bne.n	800b6e0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b6b0:	6839      	ldr	r1, [r7, #0]
 800b6b2:	6878      	ldr	r0, [r7, #4]
 800b6b4:	f000 fb96 	bl	800bde4 <USBD_CtlError>
                  break;
 800b6b8:	e054      	b.n	800b764 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b6ba:	7bbb      	ldrb	r3, [r7, #14]
 800b6bc:	f003 020f 	and.w	r2, r3, #15
 800b6c0:	6879      	ldr	r1, [r7, #4]
 800b6c2:	4613      	mov	r3, r2
 800b6c4:	009b      	lsls	r3, r3, #2
 800b6c6:	4413      	add	r3, r2
 800b6c8:	009b      	lsls	r3, r3, #2
 800b6ca:	440b      	add	r3, r1
 800b6cc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b6d0:	881b      	ldrh	r3, [r3, #0]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d104      	bne.n	800b6e0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b6d6:	6839      	ldr	r1, [r7, #0]
 800b6d8:	6878      	ldr	r0, [r7, #4]
 800b6da:	f000 fb83 	bl	800bde4 <USBD_CtlError>
                  break;
 800b6de:	e041      	b.n	800b764 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b6e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	da0b      	bge.n	800b700 <USBD_StdEPReq+0x23e>
 800b6e8:	7bbb      	ldrb	r3, [r7, #14]
 800b6ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b6ee:	4613      	mov	r3, r2
 800b6f0:	009b      	lsls	r3, r3, #2
 800b6f2:	4413      	add	r3, r2
 800b6f4:	009b      	lsls	r3, r3, #2
 800b6f6:	3310      	adds	r3, #16
 800b6f8:	687a      	ldr	r2, [r7, #4]
 800b6fa:	4413      	add	r3, r2
 800b6fc:	3304      	adds	r3, #4
 800b6fe:	e00b      	b.n	800b718 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b700:	7bbb      	ldrb	r3, [r7, #14]
 800b702:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b706:	4613      	mov	r3, r2
 800b708:	009b      	lsls	r3, r3, #2
 800b70a:	4413      	add	r3, r2
 800b70c:	009b      	lsls	r3, r3, #2
 800b70e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b712:	687a      	ldr	r2, [r7, #4]
 800b714:	4413      	add	r3, r2
 800b716:	3304      	adds	r3, #4
 800b718:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b71a:	7bbb      	ldrb	r3, [r7, #14]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d002      	beq.n	800b726 <USBD_StdEPReq+0x264>
 800b720:	7bbb      	ldrb	r3, [r7, #14]
 800b722:	2b80      	cmp	r3, #128	; 0x80
 800b724:	d103      	bne.n	800b72e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	2200      	movs	r2, #0
 800b72a:	601a      	str	r2, [r3, #0]
 800b72c:	e00e      	b.n	800b74c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b72e:	7bbb      	ldrb	r3, [r7, #14]
 800b730:	4619      	mov	r1, r3
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f001 f87e 	bl	800c834 <USBD_LL_IsStallEP>
 800b738:	4603      	mov	r3, r0
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d003      	beq.n	800b746 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800b73e:	68bb      	ldr	r3, [r7, #8]
 800b740:	2201      	movs	r2, #1
 800b742:	601a      	str	r2, [r3, #0]
 800b744:	e002      	b.n	800b74c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800b746:	68bb      	ldr	r3, [r7, #8]
 800b748:	2200      	movs	r2, #0
 800b74a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b74c:	68bb      	ldr	r3, [r7, #8]
 800b74e:	2202      	movs	r2, #2
 800b750:	4619      	mov	r1, r3
 800b752:	6878      	ldr	r0, [r7, #4]
 800b754:	f000 fbb7 	bl	800bec6 <USBD_CtlSendData>
              break;
 800b758:	e004      	b.n	800b764 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800b75a:	6839      	ldr	r1, [r7, #0]
 800b75c:	6878      	ldr	r0, [r7, #4]
 800b75e:	f000 fb41 	bl	800bde4 <USBD_CtlError>
              break;
 800b762:	bf00      	nop
          }
          break;
 800b764:	e004      	b.n	800b770 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800b766:	6839      	ldr	r1, [r7, #0]
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	f000 fb3b 	bl	800bde4 <USBD_CtlError>
          break;
 800b76e:	bf00      	nop
      }
      break;
 800b770:	e004      	b.n	800b77c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800b772:	6839      	ldr	r1, [r7, #0]
 800b774:	6878      	ldr	r0, [r7, #4]
 800b776:	f000 fb35 	bl	800bde4 <USBD_CtlError>
      break;
 800b77a:	bf00      	nop
  }

  return ret;
 800b77c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b77e:	4618      	mov	r0, r3
 800b780:	3710      	adds	r7, #16
 800b782:	46bd      	mov	sp, r7
 800b784:	bd80      	pop	{r7, pc}
	...

0800b788 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b084      	sub	sp, #16
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
 800b790:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b792:	2300      	movs	r3, #0
 800b794:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b796:	2300      	movs	r3, #0
 800b798:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b79a:	2300      	movs	r3, #0
 800b79c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	885b      	ldrh	r3, [r3, #2]
 800b7a2:	0a1b      	lsrs	r3, r3, #8
 800b7a4:	b29b      	uxth	r3, r3
 800b7a6:	3b01      	subs	r3, #1
 800b7a8:	2b06      	cmp	r3, #6
 800b7aa:	f200 8128 	bhi.w	800b9fe <USBD_GetDescriptor+0x276>
 800b7ae:	a201      	add	r2, pc, #4	; (adr r2, 800b7b4 <USBD_GetDescriptor+0x2c>)
 800b7b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7b4:	0800b7d1 	.word	0x0800b7d1
 800b7b8:	0800b7e9 	.word	0x0800b7e9
 800b7bc:	0800b829 	.word	0x0800b829
 800b7c0:	0800b9ff 	.word	0x0800b9ff
 800b7c4:	0800b9ff 	.word	0x0800b9ff
 800b7c8:	0800b99f 	.word	0x0800b99f
 800b7cc:	0800b9cb 	.word	0x0800b9cb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	687a      	ldr	r2, [r7, #4]
 800b7da:	7c12      	ldrb	r2, [r2, #16]
 800b7dc:	f107 0108 	add.w	r1, r7, #8
 800b7e0:	4610      	mov	r0, r2
 800b7e2:	4798      	blx	r3
 800b7e4:	60f8      	str	r0, [r7, #12]
      break;
 800b7e6:	e112      	b.n	800ba0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	7c1b      	ldrb	r3, [r3, #16]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d10d      	bne.n	800b80c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7f8:	f107 0208 	add.w	r2, r7, #8
 800b7fc:	4610      	mov	r0, r2
 800b7fe:	4798      	blx	r3
 800b800:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	3301      	adds	r3, #1
 800b806:	2202      	movs	r2, #2
 800b808:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b80a:	e100      	b.n	800ba0e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b814:	f107 0208 	add.w	r2, r7, #8
 800b818:	4610      	mov	r0, r2
 800b81a:	4798      	blx	r3
 800b81c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	3301      	adds	r3, #1
 800b822:	2202      	movs	r2, #2
 800b824:	701a      	strb	r2, [r3, #0]
      break;
 800b826:	e0f2      	b.n	800ba0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	885b      	ldrh	r3, [r3, #2]
 800b82c:	b2db      	uxtb	r3, r3
 800b82e:	2b05      	cmp	r3, #5
 800b830:	f200 80ac 	bhi.w	800b98c <USBD_GetDescriptor+0x204>
 800b834:	a201      	add	r2, pc, #4	; (adr r2, 800b83c <USBD_GetDescriptor+0xb4>)
 800b836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b83a:	bf00      	nop
 800b83c:	0800b855 	.word	0x0800b855
 800b840:	0800b889 	.word	0x0800b889
 800b844:	0800b8bd 	.word	0x0800b8bd
 800b848:	0800b8f1 	.word	0x0800b8f1
 800b84c:	0800b925 	.word	0x0800b925
 800b850:	0800b959 	.word	0x0800b959
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b85a:	685b      	ldr	r3, [r3, #4]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d00b      	beq.n	800b878 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b866:	685b      	ldr	r3, [r3, #4]
 800b868:	687a      	ldr	r2, [r7, #4]
 800b86a:	7c12      	ldrb	r2, [r2, #16]
 800b86c:	f107 0108 	add.w	r1, r7, #8
 800b870:	4610      	mov	r0, r2
 800b872:	4798      	blx	r3
 800b874:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b876:	e091      	b.n	800b99c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b878:	6839      	ldr	r1, [r7, #0]
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	f000 fab2 	bl	800bde4 <USBD_CtlError>
            err++;
 800b880:	7afb      	ldrb	r3, [r7, #11]
 800b882:	3301      	adds	r3, #1
 800b884:	72fb      	strb	r3, [r7, #11]
          break;
 800b886:	e089      	b.n	800b99c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b88e:	689b      	ldr	r3, [r3, #8]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d00b      	beq.n	800b8ac <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b89a:	689b      	ldr	r3, [r3, #8]
 800b89c:	687a      	ldr	r2, [r7, #4]
 800b89e:	7c12      	ldrb	r2, [r2, #16]
 800b8a0:	f107 0108 	add.w	r1, r7, #8
 800b8a4:	4610      	mov	r0, r2
 800b8a6:	4798      	blx	r3
 800b8a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b8aa:	e077      	b.n	800b99c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b8ac:	6839      	ldr	r1, [r7, #0]
 800b8ae:	6878      	ldr	r0, [r7, #4]
 800b8b0:	f000 fa98 	bl	800bde4 <USBD_CtlError>
            err++;
 800b8b4:	7afb      	ldrb	r3, [r7, #11]
 800b8b6:	3301      	adds	r3, #1
 800b8b8:	72fb      	strb	r3, [r7, #11]
          break;
 800b8ba:	e06f      	b.n	800b99c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8c2:	68db      	ldr	r3, [r3, #12]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d00b      	beq.n	800b8e0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8ce:	68db      	ldr	r3, [r3, #12]
 800b8d0:	687a      	ldr	r2, [r7, #4]
 800b8d2:	7c12      	ldrb	r2, [r2, #16]
 800b8d4:	f107 0108 	add.w	r1, r7, #8
 800b8d8:	4610      	mov	r0, r2
 800b8da:	4798      	blx	r3
 800b8dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b8de:	e05d      	b.n	800b99c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b8e0:	6839      	ldr	r1, [r7, #0]
 800b8e2:	6878      	ldr	r0, [r7, #4]
 800b8e4:	f000 fa7e 	bl	800bde4 <USBD_CtlError>
            err++;
 800b8e8:	7afb      	ldrb	r3, [r7, #11]
 800b8ea:	3301      	adds	r3, #1
 800b8ec:	72fb      	strb	r3, [r7, #11]
          break;
 800b8ee:	e055      	b.n	800b99c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8f6:	691b      	ldr	r3, [r3, #16]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d00b      	beq.n	800b914 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b902:	691b      	ldr	r3, [r3, #16]
 800b904:	687a      	ldr	r2, [r7, #4]
 800b906:	7c12      	ldrb	r2, [r2, #16]
 800b908:	f107 0108 	add.w	r1, r7, #8
 800b90c:	4610      	mov	r0, r2
 800b90e:	4798      	blx	r3
 800b910:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b912:	e043      	b.n	800b99c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b914:	6839      	ldr	r1, [r7, #0]
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	f000 fa64 	bl	800bde4 <USBD_CtlError>
            err++;
 800b91c:	7afb      	ldrb	r3, [r7, #11]
 800b91e:	3301      	adds	r3, #1
 800b920:	72fb      	strb	r3, [r7, #11]
          break;
 800b922:	e03b      	b.n	800b99c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b92a:	695b      	ldr	r3, [r3, #20]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d00b      	beq.n	800b948 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b936:	695b      	ldr	r3, [r3, #20]
 800b938:	687a      	ldr	r2, [r7, #4]
 800b93a:	7c12      	ldrb	r2, [r2, #16]
 800b93c:	f107 0108 	add.w	r1, r7, #8
 800b940:	4610      	mov	r0, r2
 800b942:	4798      	blx	r3
 800b944:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b946:	e029      	b.n	800b99c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b948:	6839      	ldr	r1, [r7, #0]
 800b94a:	6878      	ldr	r0, [r7, #4]
 800b94c:	f000 fa4a 	bl	800bde4 <USBD_CtlError>
            err++;
 800b950:	7afb      	ldrb	r3, [r7, #11]
 800b952:	3301      	adds	r3, #1
 800b954:	72fb      	strb	r3, [r7, #11]
          break;
 800b956:	e021      	b.n	800b99c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b95e:	699b      	ldr	r3, [r3, #24]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d00b      	beq.n	800b97c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b96a:	699b      	ldr	r3, [r3, #24]
 800b96c:	687a      	ldr	r2, [r7, #4]
 800b96e:	7c12      	ldrb	r2, [r2, #16]
 800b970:	f107 0108 	add.w	r1, r7, #8
 800b974:	4610      	mov	r0, r2
 800b976:	4798      	blx	r3
 800b978:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b97a:	e00f      	b.n	800b99c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b97c:	6839      	ldr	r1, [r7, #0]
 800b97e:	6878      	ldr	r0, [r7, #4]
 800b980:	f000 fa30 	bl	800bde4 <USBD_CtlError>
            err++;
 800b984:	7afb      	ldrb	r3, [r7, #11]
 800b986:	3301      	adds	r3, #1
 800b988:	72fb      	strb	r3, [r7, #11]
          break;
 800b98a:	e007      	b.n	800b99c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b98c:	6839      	ldr	r1, [r7, #0]
 800b98e:	6878      	ldr	r0, [r7, #4]
 800b990:	f000 fa28 	bl	800bde4 <USBD_CtlError>
          err++;
 800b994:	7afb      	ldrb	r3, [r7, #11]
 800b996:	3301      	adds	r3, #1
 800b998:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800b99a:	bf00      	nop
      }
      break;
 800b99c:	e037      	b.n	800ba0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	7c1b      	ldrb	r3, [r3, #16]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d109      	bne.n	800b9ba <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9ae:	f107 0208 	add.w	r2, r7, #8
 800b9b2:	4610      	mov	r0, r2
 800b9b4:	4798      	blx	r3
 800b9b6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b9b8:	e029      	b.n	800ba0e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b9ba:	6839      	ldr	r1, [r7, #0]
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	f000 fa11 	bl	800bde4 <USBD_CtlError>
        err++;
 800b9c2:	7afb      	ldrb	r3, [r7, #11]
 800b9c4:	3301      	adds	r3, #1
 800b9c6:	72fb      	strb	r3, [r7, #11]
      break;
 800b9c8:	e021      	b.n	800ba0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	7c1b      	ldrb	r3, [r3, #16]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d10d      	bne.n	800b9ee <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9da:	f107 0208 	add.w	r2, r7, #8
 800b9de:	4610      	mov	r0, r2
 800b9e0:	4798      	blx	r3
 800b9e2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	3301      	adds	r3, #1
 800b9e8:	2207      	movs	r2, #7
 800b9ea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b9ec:	e00f      	b.n	800ba0e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b9ee:	6839      	ldr	r1, [r7, #0]
 800b9f0:	6878      	ldr	r0, [r7, #4]
 800b9f2:	f000 f9f7 	bl	800bde4 <USBD_CtlError>
        err++;
 800b9f6:	7afb      	ldrb	r3, [r7, #11]
 800b9f8:	3301      	adds	r3, #1
 800b9fa:	72fb      	strb	r3, [r7, #11]
      break;
 800b9fc:	e007      	b.n	800ba0e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b9fe:	6839      	ldr	r1, [r7, #0]
 800ba00:	6878      	ldr	r0, [r7, #4]
 800ba02:	f000 f9ef 	bl	800bde4 <USBD_CtlError>
      err++;
 800ba06:	7afb      	ldrb	r3, [r7, #11]
 800ba08:	3301      	adds	r3, #1
 800ba0a:	72fb      	strb	r3, [r7, #11]
      break;
 800ba0c:	bf00      	nop
  }

  if (err != 0U)
 800ba0e:	7afb      	ldrb	r3, [r7, #11]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d11e      	bne.n	800ba52 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	88db      	ldrh	r3, [r3, #6]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d016      	beq.n	800ba4a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800ba1c:	893b      	ldrh	r3, [r7, #8]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d00e      	beq.n	800ba40 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	88da      	ldrh	r2, [r3, #6]
 800ba26:	893b      	ldrh	r3, [r7, #8]
 800ba28:	4293      	cmp	r3, r2
 800ba2a:	bf28      	it	cs
 800ba2c:	4613      	movcs	r3, r2
 800ba2e:	b29b      	uxth	r3, r3
 800ba30:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ba32:	893b      	ldrh	r3, [r7, #8]
 800ba34:	461a      	mov	r2, r3
 800ba36:	68f9      	ldr	r1, [r7, #12]
 800ba38:	6878      	ldr	r0, [r7, #4]
 800ba3a:	f000 fa44 	bl	800bec6 <USBD_CtlSendData>
 800ba3e:	e009      	b.n	800ba54 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ba40:	6839      	ldr	r1, [r7, #0]
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	f000 f9ce 	bl	800bde4 <USBD_CtlError>
 800ba48:	e004      	b.n	800ba54 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ba4a:	6878      	ldr	r0, [r7, #4]
 800ba4c:	f000 fa95 	bl	800bf7a <USBD_CtlSendStatus>
 800ba50:	e000      	b.n	800ba54 <USBD_GetDescriptor+0x2cc>
    return;
 800ba52:	bf00      	nop
  }
}
 800ba54:	3710      	adds	r7, #16
 800ba56:	46bd      	mov	sp, r7
 800ba58:	bd80      	pop	{r7, pc}
 800ba5a:	bf00      	nop

0800ba5c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b084      	sub	sp, #16
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
 800ba64:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ba66:	683b      	ldr	r3, [r7, #0]
 800ba68:	889b      	ldrh	r3, [r3, #4]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d131      	bne.n	800bad2 <USBD_SetAddress+0x76>
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	88db      	ldrh	r3, [r3, #6]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d12d      	bne.n	800bad2 <USBD_SetAddress+0x76>
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	885b      	ldrh	r3, [r3, #2]
 800ba7a:	2b7f      	cmp	r3, #127	; 0x7f
 800ba7c:	d829      	bhi.n	800bad2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	885b      	ldrh	r3, [r3, #2]
 800ba82:	b2db      	uxtb	r3, r3
 800ba84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba88:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba90:	b2db      	uxtb	r3, r3
 800ba92:	2b03      	cmp	r3, #3
 800ba94:	d104      	bne.n	800baa0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ba96:	6839      	ldr	r1, [r7, #0]
 800ba98:	6878      	ldr	r0, [r7, #4]
 800ba9a:	f000 f9a3 	bl	800bde4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba9e:	e01d      	b.n	800badc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	7bfa      	ldrb	r2, [r7, #15]
 800baa4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800baa8:	7bfb      	ldrb	r3, [r7, #15]
 800baaa:	4619      	mov	r1, r3
 800baac:	6878      	ldr	r0, [r7, #4]
 800baae:	f000 feed 	bl	800c88c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	f000 fa61 	bl	800bf7a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bab8:	7bfb      	ldrb	r3, [r7, #15]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d004      	beq.n	800bac8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	2202      	movs	r2, #2
 800bac2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bac6:	e009      	b.n	800badc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2201      	movs	r2, #1
 800bacc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bad0:	e004      	b.n	800badc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bad2:	6839      	ldr	r1, [r7, #0]
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	f000 f985 	bl	800bde4 <USBD_CtlError>
  }
}
 800bada:	bf00      	nop
 800badc:	bf00      	nop
 800bade:	3710      	adds	r7, #16
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bd80      	pop	{r7, pc}

0800bae4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b084      	sub	sp, #16
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
 800baec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800baee:	2300      	movs	r3, #0
 800baf0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	885b      	ldrh	r3, [r3, #2]
 800baf6:	b2da      	uxtb	r2, r3
 800baf8:	4b4c      	ldr	r3, [pc, #304]	; (800bc2c <USBD_SetConfig+0x148>)
 800bafa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bafc:	4b4b      	ldr	r3, [pc, #300]	; (800bc2c <USBD_SetConfig+0x148>)
 800bafe:	781b      	ldrb	r3, [r3, #0]
 800bb00:	2b01      	cmp	r3, #1
 800bb02:	d905      	bls.n	800bb10 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bb04:	6839      	ldr	r1, [r7, #0]
 800bb06:	6878      	ldr	r0, [r7, #4]
 800bb08:	f000 f96c 	bl	800bde4 <USBD_CtlError>
    return USBD_FAIL;
 800bb0c:	2303      	movs	r3, #3
 800bb0e:	e088      	b.n	800bc22 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb16:	b2db      	uxtb	r3, r3
 800bb18:	2b02      	cmp	r3, #2
 800bb1a:	d002      	beq.n	800bb22 <USBD_SetConfig+0x3e>
 800bb1c:	2b03      	cmp	r3, #3
 800bb1e:	d025      	beq.n	800bb6c <USBD_SetConfig+0x88>
 800bb20:	e071      	b.n	800bc06 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800bb22:	4b42      	ldr	r3, [pc, #264]	; (800bc2c <USBD_SetConfig+0x148>)
 800bb24:	781b      	ldrb	r3, [r3, #0]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d01c      	beq.n	800bb64 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800bb2a:	4b40      	ldr	r3, [pc, #256]	; (800bc2c <USBD_SetConfig+0x148>)
 800bb2c:	781b      	ldrb	r3, [r3, #0]
 800bb2e:	461a      	mov	r2, r3
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bb34:	4b3d      	ldr	r3, [pc, #244]	; (800bc2c <USBD_SetConfig+0x148>)
 800bb36:	781b      	ldrb	r3, [r3, #0]
 800bb38:	4619      	mov	r1, r3
 800bb3a:	6878      	ldr	r0, [r7, #4]
 800bb3c:	f7ff f948 	bl	800add0 <USBD_SetClassConfig>
 800bb40:	4603      	mov	r3, r0
 800bb42:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800bb44:	7bfb      	ldrb	r3, [r7, #15]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d004      	beq.n	800bb54 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800bb4a:	6839      	ldr	r1, [r7, #0]
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	f000 f949 	bl	800bde4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bb52:	e065      	b.n	800bc20 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800bb54:	6878      	ldr	r0, [r7, #4]
 800bb56:	f000 fa10 	bl	800bf7a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	2203      	movs	r2, #3
 800bb5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bb62:	e05d      	b.n	800bc20 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800bb64:	6878      	ldr	r0, [r7, #4]
 800bb66:	f000 fa08 	bl	800bf7a <USBD_CtlSendStatus>
      break;
 800bb6a:	e059      	b.n	800bc20 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800bb6c:	4b2f      	ldr	r3, [pc, #188]	; (800bc2c <USBD_SetConfig+0x148>)
 800bb6e:	781b      	ldrb	r3, [r3, #0]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d112      	bne.n	800bb9a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2202      	movs	r2, #2
 800bb78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800bb7c:	4b2b      	ldr	r3, [pc, #172]	; (800bc2c <USBD_SetConfig+0x148>)
 800bb7e:	781b      	ldrb	r3, [r3, #0]
 800bb80:	461a      	mov	r2, r3
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bb86:	4b29      	ldr	r3, [pc, #164]	; (800bc2c <USBD_SetConfig+0x148>)
 800bb88:	781b      	ldrb	r3, [r3, #0]
 800bb8a:	4619      	mov	r1, r3
 800bb8c:	6878      	ldr	r0, [r7, #4]
 800bb8e:	f7ff f93b 	bl	800ae08 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bb92:	6878      	ldr	r0, [r7, #4]
 800bb94:	f000 f9f1 	bl	800bf7a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bb98:	e042      	b.n	800bc20 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800bb9a:	4b24      	ldr	r3, [pc, #144]	; (800bc2c <USBD_SetConfig+0x148>)
 800bb9c:	781b      	ldrb	r3, [r3, #0]
 800bb9e:	461a      	mov	r2, r3
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	685b      	ldr	r3, [r3, #4]
 800bba4:	429a      	cmp	r2, r3
 800bba6:	d02a      	beq.n	800bbfe <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	685b      	ldr	r3, [r3, #4]
 800bbac:	b2db      	uxtb	r3, r3
 800bbae:	4619      	mov	r1, r3
 800bbb0:	6878      	ldr	r0, [r7, #4]
 800bbb2:	f7ff f929 	bl	800ae08 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bbb6:	4b1d      	ldr	r3, [pc, #116]	; (800bc2c <USBD_SetConfig+0x148>)
 800bbb8:	781b      	ldrb	r3, [r3, #0]
 800bbba:	461a      	mov	r2, r3
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bbc0:	4b1a      	ldr	r3, [pc, #104]	; (800bc2c <USBD_SetConfig+0x148>)
 800bbc2:	781b      	ldrb	r3, [r3, #0]
 800bbc4:	4619      	mov	r1, r3
 800bbc6:	6878      	ldr	r0, [r7, #4]
 800bbc8:	f7ff f902 	bl	800add0 <USBD_SetClassConfig>
 800bbcc:	4603      	mov	r3, r0
 800bbce:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800bbd0:	7bfb      	ldrb	r3, [r7, #15]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d00f      	beq.n	800bbf6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800bbd6:	6839      	ldr	r1, [r7, #0]
 800bbd8:	6878      	ldr	r0, [r7, #4]
 800bbda:	f000 f903 	bl	800bde4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	685b      	ldr	r3, [r3, #4]
 800bbe2:	b2db      	uxtb	r3, r3
 800bbe4:	4619      	mov	r1, r3
 800bbe6:	6878      	ldr	r0, [r7, #4]
 800bbe8:	f7ff f90e 	bl	800ae08 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2202      	movs	r2, #2
 800bbf0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bbf4:	e014      	b.n	800bc20 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800bbf6:	6878      	ldr	r0, [r7, #4]
 800bbf8:	f000 f9bf 	bl	800bf7a <USBD_CtlSendStatus>
      break;
 800bbfc:	e010      	b.n	800bc20 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800bbfe:	6878      	ldr	r0, [r7, #4]
 800bc00:	f000 f9bb 	bl	800bf7a <USBD_CtlSendStatus>
      break;
 800bc04:	e00c      	b.n	800bc20 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800bc06:	6839      	ldr	r1, [r7, #0]
 800bc08:	6878      	ldr	r0, [r7, #4]
 800bc0a:	f000 f8eb 	bl	800bde4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bc0e:	4b07      	ldr	r3, [pc, #28]	; (800bc2c <USBD_SetConfig+0x148>)
 800bc10:	781b      	ldrb	r3, [r3, #0]
 800bc12:	4619      	mov	r1, r3
 800bc14:	6878      	ldr	r0, [r7, #4]
 800bc16:	f7ff f8f7 	bl	800ae08 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800bc1a:	2303      	movs	r3, #3
 800bc1c:	73fb      	strb	r3, [r7, #15]
      break;
 800bc1e:	bf00      	nop
  }

  return ret;
 800bc20:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc22:	4618      	mov	r0, r3
 800bc24:	3710      	adds	r7, #16
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}
 800bc2a:	bf00      	nop
 800bc2c:	200096ec 	.word	0x200096ec

0800bc30 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b082      	sub	sp, #8
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
 800bc38:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bc3a:	683b      	ldr	r3, [r7, #0]
 800bc3c:	88db      	ldrh	r3, [r3, #6]
 800bc3e:	2b01      	cmp	r3, #1
 800bc40:	d004      	beq.n	800bc4c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bc42:	6839      	ldr	r1, [r7, #0]
 800bc44:	6878      	ldr	r0, [r7, #4]
 800bc46:	f000 f8cd 	bl	800bde4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bc4a:	e023      	b.n	800bc94 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc52:	b2db      	uxtb	r3, r3
 800bc54:	2b02      	cmp	r3, #2
 800bc56:	dc02      	bgt.n	800bc5e <USBD_GetConfig+0x2e>
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	dc03      	bgt.n	800bc64 <USBD_GetConfig+0x34>
 800bc5c:	e015      	b.n	800bc8a <USBD_GetConfig+0x5a>
 800bc5e:	2b03      	cmp	r3, #3
 800bc60:	d00b      	beq.n	800bc7a <USBD_GetConfig+0x4a>
 800bc62:	e012      	b.n	800bc8a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2200      	movs	r2, #0
 800bc68:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	3308      	adds	r3, #8
 800bc6e:	2201      	movs	r2, #1
 800bc70:	4619      	mov	r1, r3
 800bc72:	6878      	ldr	r0, [r7, #4]
 800bc74:	f000 f927 	bl	800bec6 <USBD_CtlSendData>
        break;
 800bc78:	e00c      	b.n	800bc94 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	3304      	adds	r3, #4
 800bc7e:	2201      	movs	r2, #1
 800bc80:	4619      	mov	r1, r3
 800bc82:	6878      	ldr	r0, [r7, #4]
 800bc84:	f000 f91f 	bl	800bec6 <USBD_CtlSendData>
        break;
 800bc88:	e004      	b.n	800bc94 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800bc8a:	6839      	ldr	r1, [r7, #0]
 800bc8c:	6878      	ldr	r0, [r7, #4]
 800bc8e:	f000 f8a9 	bl	800bde4 <USBD_CtlError>
        break;
 800bc92:	bf00      	nop
}
 800bc94:	bf00      	nop
 800bc96:	3708      	adds	r7, #8
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	bd80      	pop	{r7, pc}

0800bc9c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b082      	sub	sp, #8
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
 800bca4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcac:	b2db      	uxtb	r3, r3
 800bcae:	3b01      	subs	r3, #1
 800bcb0:	2b02      	cmp	r3, #2
 800bcb2:	d81e      	bhi.n	800bcf2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	88db      	ldrh	r3, [r3, #6]
 800bcb8:	2b02      	cmp	r3, #2
 800bcba:	d004      	beq.n	800bcc6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800bcbc:	6839      	ldr	r1, [r7, #0]
 800bcbe:	6878      	ldr	r0, [r7, #4]
 800bcc0:	f000 f890 	bl	800bde4 <USBD_CtlError>
        break;
 800bcc4:	e01a      	b.n	800bcfc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	2201      	movs	r2, #1
 800bcca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d005      	beq.n	800bce2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	68db      	ldr	r3, [r3, #12]
 800bcda:	f043 0202 	orr.w	r2, r3, #2
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	330c      	adds	r3, #12
 800bce6:	2202      	movs	r2, #2
 800bce8:	4619      	mov	r1, r3
 800bcea:	6878      	ldr	r0, [r7, #4]
 800bcec:	f000 f8eb 	bl	800bec6 <USBD_CtlSendData>
      break;
 800bcf0:	e004      	b.n	800bcfc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800bcf2:	6839      	ldr	r1, [r7, #0]
 800bcf4:	6878      	ldr	r0, [r7, #4]
 800bcf6:	f000 f875 	bl	800bde4 <USBD_CtlError>
      break;
 800bcfa:	bf00      	nop
  }
}
 800bcfc:	bf00      	nop
 800bcfe:	3708      	adds	r7, #8
 800bd00:	46bd      	mov	sp, r7
 800bd02:	bd80      	pop	{r7, pc}

0800bd04 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b082      	sub	sp, #8
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
 800bd0c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bd0e:	683b      	ldr	r3, [r7, #0]
 800bd10:	885b      	ldrh	r3, [r3, #2]
 800bd12:	2b01      	cmp	r3, #1
 800bd14:	d106      	bne.n	800bd24 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	2201      	movs	r2, #1
 800bd1a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800bd1e:	6878      	ldr	r0, [r7, #4]
 800bd20:	f000 f92b 	bl	800bf7a <USBD_CtlSendStatus>
  }
}
 800bd24:	bf00      	nop
 800bd26:	3708      	adds	r7, #8
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	bd80      	pop	{r7, pc}

0800bd2c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b082      	sub	sp, #8
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
 800bd34:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd3c:	b2db      	uxtb	r3, r3
 800bd3e:	3b01      	subs	r3, #1
 800bd40:	2b02      	cmp	r3, #2
 800bd42:	d80b      	bhi.n	800bd5c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	885b      	ldrh	r3, [r3, #2]
 800bd48:	2b01      	cmp	r3, #1
 800bd4a:	d10c      	bne.n	800bd66 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2200      	movs	r2, #0
 800bd50:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800bd54:	6878      	ldr	r0, [r7, #4]
 800bd56:	f000 f910 	bl	800bf7a <USBD_CtlSendStatus>
      }
      break;
 800bd5a:	e004      	b.n	800bd66 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800bd5c:	6839      	ldr	r1, [r7, #0]
 800bd5e:	6878      	ldr	r0, [r7, #4]
 800bd60:	f000 f840 	bl	800bde4 <USBD_CtlError>
      break;
 800bd64:	e000      	b.n	800bd68 <USBD_ClrFeature+0x3c>
      break;
 800bd66:	bf00      	nop
  }
}
 800bd68:	bf00      	nop
 800bd6a:	3708      	adds	r7, #8
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	bd80      	pop	{r7, pc}

0800bd70 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b084      	sub	sp, #16
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
 800bd78:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	781a      	ldrb	r2, [r3, #0]
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	3301      	adds	r3, #1
 800bd8a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	781a      	ldrb	r2, [r3, #0]
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	3301      	adds	r3, #1
 800bd98:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800bd9a:	68f8      	ldr	r0, [r7, #12]
 800bd9c:	f7ff fabb 	bl	800b316 <SWAPBYTE>
 800bda0:	4603      	mov	r3, r0
 800bda2:	461a      	mov	r2, r3
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	3301      	adds	r3, #1
 800bdac:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	3301      	adds	r3, #1
 800bdb2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800bdb4:	68f8      	ldr	r0, [r7, #12]
 800bdb6:	f7ff faae 	bl	800b316 <SWAPBYTE>
 800bdba:	4603      	mov	r3, r0
 800bdbc:	461a      	mov	r2, r3
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	3301      	adds	r3, #1
 800bdc6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	3301      	adds	r3, #1
 800bdcc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800bdce:	68f8      	ldr	r0, [r7, #12]
 800bdd0:	f7ff faa1 	bl	800b316 <SWAPBYTE>
 800bdd4:	4603      	mov	r3, r0
 800bdd6:	461a      	mov	r2, r3
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	80da      	strh	r2, [r3, #6]
}
 800bddc:	bf00      	nop
 800bdde:	3710      	adds	r7, #16
 800bde0:	46bd      	mov	sp, r7
 800bde2:	bd80      	pop	{r7, pc}

0800bde4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b082      	sub	sp, #8
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
 800bdec:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800bdee:	2180      	movs	r1, #128	; 0x80
 800bdf0:	6878      	ldr	r0, [r7, #4]
 800bdf2:	f000 fce1 	bl	800c7b8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bdf6:	2100      	movs	r1, #0
 800bdf8:	6878      	ldr	r0, [r7, #4]
 800bdfa:	f000 fcdd 	bl	800c7b8 <USBD_LL_StallEP>
}
 800bdfe:	bf00      	nop
 800be00:	3708      	adds	r7, #8
 800be02:	46bd      	mov	sp, r7
 800be04:	bd80      	pop	{r7, pc}

0800be06 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800be06:	b580      	push	{r7, lr}
 800be08:	b086      	sub	sp, #24
 800be0a:	af00      	add	r7, sp, #0
 800be0c:	60f8      	str	r0, [r7, #12]
 800be0e:	60b9      	str	r1, [r7, #8]
 800be10:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800be12:	2300      	movs	r3, #0
 800be14:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d036      	beq.n	800be8a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800be20:	6938      	ldr	r0, [r7, #16]
 800be22:	f000 f836 	bl	800be92 <USBD_GetLen>
 800be26:	4603      	mov	r3, r0
 800be28:	3301      	adds	r3, #1
 800be2a:	b29b      	uxth	r3, r3
 800be2c:	005b      	lsls	r3, r3, #1
 800be2e:	b29a      	uxth	r2, r3
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800be34:	7dfb      	ldrb	r3, [r7, #23]
 800be36:	68ba      	ldr	r2, [r7, #8]
 800be38:	4413      	add	r3, r2
 800be3a:	687a      	ldr	r2, [r7, #4]
 800be3c:	7812      	ldrb	r2, [r2, #0]
 800be3e:	701a      	strb	r2, [r3, #0]
  idx++;
 800be40:	7dfb      	ldrb	r3, [r7, #23]
 800be42:	3301      	adds	r3, #1
 800be44:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800be46:	7dfb      	ldrb	r3, [r7, #23]
 800be48:	68ba      	ldr	r2, [r7, #8]
 800be4a:	4413      	add	r3, r2
 800be4c:	2203      	movs	r2, #3
 800be4e:	701a      	strb	r2, [r3, #0]
  idx++;
 800be50:	7dfb      	ldrb	r3, [r7, #23]
 800be52:	3301      	adds	r3, #1
 800be54:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800be56:	e013      	b.n	800be80 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800be58:	7dfb      	ldrb	r3, [r7, #23]
 800be5a:	68ba      	ldr	r2, [r7, #8]
 800be5c:	4413      	add	r3, r2
 800be5e:	693a      	ldr	r2, [r7, #16]
 800be60:	7812      	ldrb	r2, [r2, #0]
 800be62:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800be64:	693b      	ldr	r3, [r7, #16]
 800be66:	3301      	adds	r3, #1
 800be68:	613b      	str	r3, [r7, #16]
    idx++;
 800be6a:	7dfb      	ldrb	r3, [r7, #23]
 800be6c:	3301      	adds	r3, #1
 800be6e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800be70:	7dfb      	ldrb	r3, [r7, #23]
 800be72:	68ba      	ldr	r2, [r7, #8]
 800be74:	4413      	add	r3, r2
 800be76:	2200      	movs	r2, #0
 800be78:	701a      	strb	r2, [r3, #0]
    idx++;
 800be7a:	7dfb      	ldrb	r3, [r7, #23]
 800be7c:	3301      	adds	r3, #1
 800be7e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800be80:	693b      	ldr	r3, [r7, #16]
 800be82:	781b      	ldrb	r3, [r3, #0]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d1e7      	bne.n	800be58 <USBD_GetString+0x52>
 800be88:	e000      	b.n	800be8c <USBD_GetString+0x86>
    return;
 800be8a:	bf00      	nop
  }
}
 800be8c:	3718      	adds	r7, #24
 800be8e:	46bd      	mov	sp, r7
 800be90:	bd80      	pop	{r7, pc}

0800be92 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800be92:	b480      	push	{r7}
 800be94:	b085      	sub	sp, #20
 800be96:	af00      	add	r7, sp, #0
 800be98:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800be9a:	2300      	movs	r3, #0
 800be9c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bea2:	e005      	b.n	800beb0 <USBD_GetLen+0x1e>
  {
    len++;
 800bea4:	7bfb      	ldrb	r3, [r7, #15]
 800bea6:	3301      	adds	r3, #1
 800bea8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800beaa:	68bb      	ldr	r3, [r7, #8]
 800beac:	3301      	adds	r3, #1
 800beae:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800beb0:	68bb      	ldr	r3, [r7, #8]
 800beb2:	781b      	ldrb	r3, [r3, #0]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d1f5      	bne.n	800bea4 <USBD_GetLen+0x12>
  }

  return len;
 800beb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800beba:	4618      	mov	r0, r3
 800bebc:	3714      	adds	r7, #20
 800bebe:	46bd      	mov	sp, r7
 800bec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec4:	4770      	bx	lr

0800bec6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bec6:	b580      	push	{r7, lr}
 800bec8:	b084      	sub	sp, #16
 800beca:	af00      	add	r7, sp, #0
 800becc:	60f8      	str	r0, [r7, #12]
 800bece:	60b9      	str	r1, [r7, #8]
 800bed0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	2202      	movs	r2, #2
 800bed6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	687a      	ldr	r2, [r7, #4]
 800bede:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	687a      	ldr	r2, [r7, #4]
 800bee4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	68ba      	ldr	r2, [r7, #8]
 800beea:	2100      	movs	r1, #0
 800beec:	68f8      	ldr	r0, [r7, #12]
 800beee:	f000 fcec 	bl	800c8ca <USBD_LL_Transmit>

  return USBD_OK;
 800bef2:	2300      	movs	r3, #0
}
 800bef4:	4618      	mov	r0, r3
 800bef6:	3710      	adds	r7, #16
 800bef8:	46bd      	mov	sp, r7
 800befa:	bd80      	pop	{r7, pc}

0800befc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800befc:	b580      	push	{r7, lr}
 800befe:	b084      	sub	sp, #16
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	60f8      	str	r0, [r7, #12]
 800bf04:	60b9      	str	r1, [r7, #8]
 800bf06:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	68ba      	ldr	r2, [r7, #8]
 800bf0c:	2100      	movs	r1, #0
 800bf0e:	68f8      	ldr	r0, [r7, #12]
 800bf10:	f000 fcdb 	bl	800c8ca <USBD_LL_Transmit>

  return USBD_OK;
 800bf14:	2300      	movs	r3, #0
}
 800bf16:	4618      	mov	r0, r3
 800bf18:	3710      	adds	r7, #16
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}

0800bf1e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bf1e:	b580      	push	{r7, lr}
 800bf20:	b084      	sub	sp, #16
 800bf22:	af00      	add	r7, sp, #0
 800bf24:	60f8      	str	r0, [r7, #12]
 800bf26:	60b9      	str	r1, [r7, #8]
 800bf28:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	2203      	movs	r2, #3
 800bf2e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	687a      	ldr	r2, [r7, #4]
 800bf36:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	687a      	ldr	r2, [r7, #4]
 800bf3e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	68ba      	ldr	r2, [r7, #8]
 800bf46:	2100      	movs	r1, #0
 800bf48:	68f8      	ldr	r0, [r7, #12]
 800bf4a:	f000 fcdf 	bl	800c90c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bf4e:	2300      	movs	r3, #0
}
 800bf50:	4618      	mov	r0, r3
 800bf52:	3710      	adds	r7, #16
 800bf54:	46bd      	mov	sp, r7
 800bf56:	bd80      	pop	{r7, pc}

0800bf58 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b084      	sub	sp, #16
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	60f8      	str	r0, [r7, #12]
 800bf60:	60b9      	str	r1, [r7, #8]
 800bf62:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	68ba      	ldr	r2, [r7, #8]
 800bf68:	2100      	movs	r1, #0
 800bf6a:	68f8      	ldr	r0, [r7, #12]
 800bf6c:	f000 fcce 	bl	800c90c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bf70:	2300      	movs	r3, #0
}
 800bf72:	4618      	mov	r0, r3
 800bf74:	3710      	adds	r7, #16
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}

0800bf7a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bf7a:	b580      	push	{r7, lr}
 800bf7c:	b082      	sub	sp, #8
 800bf7e:	af00      	add	r7, sp, #0
 800bf80:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	2204      	movs	r2, #4
 800bf86:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	2100      	movs	r1, #0
 800bf90:	6878      	ldr	r0, [r7, #4]
 800bf92:	f000 fc9a 	bl	800c8ca <USBD_LL_Transmit>

  return USBD_OK;
 800bf96:	2300      	movs	r3, #0
}
 800bf98:	4618      	mov	r0, r3
 800bf9a:	3708      	adds	r7, #8
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bd80      	pop	{r7, pc}

0800bfa0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b082      	sub	sp, #8
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	2205      	movs	r2, #5
 800bfac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	2100      	movs	r1, #0
 800bfb6:	6878      	ldr	r0, [r7, #4]
 800bfb8:	f000 fca8 	bl	800c90c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bfbc:	2300      	movs	r3, #0
}
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	3708      	adds	r7, #8
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	bd80      	pop	{r7, pc}
	...

0800bfc8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bfcc:	2200      	movs	r2, #0
 800bfce:	4912      	ldr	r1, [pc, #72]	; (800c018 <MX_USB_DEVICE_Init+0x50>)
 800bfd0:	4812      	ldr	r0, [pc, #72]	; (800c01c <MX_USB_DEVICE_Init+0x54>)
 800bfd2:	f7fe fe8f 	bl	800acf4 <USBD_Init>
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d001      	beq.n	800bfe0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bfdc:	f7f6 fa6a 	bl	80024b4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bfe0:	490f      	ldr	r1, [pc, #60]	; (800c020 <MX_USB_DEVICE_Init+0x58>)
 800bfe2:	480e      	ldr	r0, [pc, #56]	; (800c01c <MX_USB_DEVICE_Init+0x54>)
 800bfe4:	f7fe feb6 	bl	800ad54 <USBD_RegisterClass>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d001      	beq.n	800bff2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bfee:	f7f6 fa61 	bl	80024b4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bff2:	490c      	ldr	r1, [pc, #48]	; (800c024 <MX_USB_DEVICE_Init+0x5c>)
 800bff4:	4809      	ldr	r0, [pc, #36]	; (800c01c <MX_USB_DEVICE_Init+0x54>)
 800bff6:	f7fe fdd7 	bl	800aba8 <USBD_CDC_RegisterInterface>
 800bffa:	4603      	mov	r3, r0
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d001      	beq.n	800c004 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c000:	f7f6 fa58 	bl	80024b4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c004:	4805      	ldr	r0, [pc, #20]	; (800c01c <MX_USB_DEVICE_Init+0x54>)
 800c006:	f7fe fecc 	bl	800ada2 <USBD_Start>
 800c00a:	4603      	mov	r3, r0
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d001      	beq.n	800c014 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c010:	f7f6 fa50 	bl	80024b4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c014:	bf00      	nop
 800c016:	bd80      	pop	{r7, pc}
 800c018:	20000160 	.word	0x20000160
 800c01c:	200096f0 	.word	0x200096f0
 800c020:	20000048 	.word	0x20000048
 800c024:	2000014c 	.word	0x2000014c

0800c028 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c02c:	2200      	movs	r2, #0
 800c02e:	4905      	ldr	r1, [pc, #20]	; (800c044 <CDC_Init_FS+0x1c>)
 800c030:	4805      	ldr	r0, [pc, #20]	; (800c048 <CDC_Init_FS+0x20>)
 800c032:	f7fe fdce 	bl	800abd2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c036:	4905      	ldr	r1, [pc, #20]	; (800c04c <CDC_Init_FS+0x24>)
 800c038:	4803      	ldr	r0, [pc, #12]	; (800c048 <CDC_Init_FS+0x20>)
 800c03a:	f7fe fde8 	bl	800ac0e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c03e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c040:	4618      	mov	r0, r3
 800c042:	bd80      	pop	{r7, pc}
 800c044:	2000a1c0 	.word	0x2000a1c0
 800c048:	200096f0 	.word	0x200096f0
 800c04c:	200099c0 	.word	0x200099c0

0800c050 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c050:	b480      	push	{r7}
 800c052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c054:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c056:	4618      	mov	r0, r3
 800c058:	46bd      	mov	sp, r7
 800c05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05e:	4770      	bx	lr

0800c060 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c060:	b480      	push	{r7}
 800c062:	b083      	sub	sp, #12
 800c064:	af00      	add	r7, sp, #0
 800c066:	4603      	mov	r3, r0
 800c068:	6039      	str	r1, [r7, #0]
 800c06a:	71fb      	strb	r3, [r7, #7]
 800c06c:	4613      	mov	r3, r2
 800c06e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c070:	79fb      	ldrb	r3, [r7, #7]
 800c072:	2b23      	cmp	r3, #35	; 0x23
 800c074:	d84a      	bhi.n	800c10c <CDC_Control_FS+0xac>
 800c076:	a201      	add	r2, pc, #4	; (adr r2, 800c07c <CDC_Control_FS+0x1c>)
 800c078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c07c:	0800c10d 	.word	0x0800c10d
 800c080:	0800c10d 	.word	0x0800c10d
 800c084:	0800c10d 	.word	0x0800c10d
 800c088:	0800c10d 	.word	0x0800c10d
 800c08c:	0800c10d 	.word	0x0800c10d
 800c090:	0800c10d 	.word	0x0800c10d
 800c094:	0800c10d 	.word	0x0800c10d
 800c098:	0800c10d 	.word	0x0800c10d
 800c09c:	0800c10d 	.word	0x0800c10d
 800c0a0:	0800c10d 	.word	0x0800c10d
 800c0a4:	0800c10d 	.word	0x0800c10d
 800c0a8:	0800c10d 	.word	0x0800c10d
 800c0ac:	0800c10d 	.word	0x0800c10d
 800c0b0:	0800c10d 	.word	0x0800c10d
 800c0b4:	0800c10d 	.word	0x0800c10d
 800c0b8:	0800c10d 	.word	0x0800c10d
 800c0bc:	0800c10d 	.word	0x0800c10d
 800c0c0:	0800c10d 	.word	0x0800c10d
 800c0c4:	0800c10d 	.word	0x0800c10d
 800c0c8:	0800c10d 	.word	0x0800c10d
 800c0cc:	0800c10d 	.word	0x0800c10d
 800c0d0:	0800c10d 	.word	0x0800c10d
 800c0d4:	0800c10d 	.word	0x0800c10d
 800c0d8:	0800c10d 	.word	0x0800c10d
 800c0dc:	0800c10d 	.word	0x0800c10d
 800c0e0:	0800c10d 	.word	0x0800c10d
 800c0e4:	0800c10d 	.word	0x0800c10d
 800c0e8:	0800c10d 	.word	0x0800c10d
 800c0ec:	0800c10d 	.word	0x0800c10d
 800c0f0:	0800c10d 	.word	0x0800c10d
 800c0f4:	0800c10d 	.word	0x0800c10d
 800c0f8:	0800c10d 	.word	0x0800c10d
 800c0fc:	0800c10d 	.word	0x0800c10d
 800c100:	0800c10d 	.word	0x0800c10d
 800c104:	0800c10d 	.word	0x0800c10d
 800c108:	0800c10d 	.word	0x0800c10d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c10c:	bf00      	nop
  }

  return (USBD_OK);
 800c10e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c110:	4618      	mov	r0, r3
 800c112:	370c      	adds	r7, #12
 800c114:	46bd      	mov	sp, r7
 800c116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11a:	4770      	bx	lr

0800c11c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b082      	sub	sp, #8
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
 800c124:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c126:	6879      	ldr	r1, [r7, #4]
 800c128:	4805      	ldr	r0, [pc, #20]	; (800c140 <CDC_Receive_FS+0x24>)
 800c12a:	f7fe fd70 	bl	800ac0e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c12e:	4804      	ldr	r0, [pc, #16]	; (800c140 <CDC_Receive_FS+0x24>)
 800c130:	f7fe fdb6 	bl	800aca0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c134:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c136:	4618      	mov	r0, r3
 800c138:	3708      	adds	r7, #8
 800c13a:	46bd      	mov	sp, r7
 800c13c:	bd80      	pop	{r7, pc}
 800c13e:	bf00      	nop
 800c140:	200096f0 	.word	0x200096f0

0800c144 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b084      	sub	sp, #16
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
 800c14c:	460b      	mov	r3, r1
 800c14e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c150:	2300      	movs	r3, #0
 800c152:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c154:	4b0d      	ldr	r3, [pc, #52]	; (800c18c <CDC_Transmit_FS+0x48>)
 800c156:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c15a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c15c:	68bb      	ldr	r3, [r7, #8]
 800c15e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c162:	2b00      	cmp	r3, #0
 800c164:	d001      	beq.n	800c16a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c166:	2301      	movs	r3, #1
 800c168:	e00b      	b.n	800c182 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c16a:	887b      	ldrh	r3, [r7, #2]
 800c16c:	461a      	mov	r2, r3
 800c16e:	6879      	ldr	r1, [r7, #4]
 800c170:	4806      	ldr	r0, [pc, #24]	; (800c18c <CDC_Transmit_FS+0x48>)
 800c172:	f7fe fd2e 	bl	800abd2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c176:	4805      	ldr	r0, [pc, #20]	; (800c18c <CDC_Transmit_FS+0x48>)
 800c178:	f7fe fd62 	bl	800ac40 <USBD_CDC_TransmitPacket>
 800c17c:	4603      	mov	r3, r0
 800c17e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c180:	7bfb      	ldrb	r3, [r7, #15]
}
 800c182:	4618      	mov	r0, r3
 800c184:	3710      	adds	r7, #16
 800c186:	46bd      	mov	sp, r7
 800c188:	bd80      	pop	{r7, pc}
 800c18a:	bf00      	nop
 800c18c:	200096f0 	.word	0x200096f0

0800c190 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c190:	b480      	push	{r7}
 800c192:	b087      	sub	sp, #28
 800c194:	af00      	add	r7, sp, #0
 800c196:	60f8      	str	r0, [r7, #12]
 800c198:	60b9      	str	r1, [r7, #8]
 800c19a:	4613      	mov	r3, r2
 800c19c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c19e:	2300      	movs	r3, #0
 800c1a0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c1a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	371c      	adds	r7, #28
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b0:	4770      	bx	lr
	...

0800c1b4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c1b4:	b480      	push	{r7}
 800c1b6:	b083      	sub	sp, #12
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	4603      	mov	r3, r0
 800c1bc:	6039      	str	r1, [r7, #0]
 800c1be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c1c0:	683b      	ldr	r3, [r7, #0]
 800c1c2:	2212      	movs	r2, #18
 800c1c4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c1c6:	4b03      	ldr	r3, [pc, #12]	; (800c1d4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	370c      	adds	r7, #12
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d2:	4770      	bx	lr
 800c1d4:	2000017c 	.word	0x2000017c

0800c1d8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c1d8:	b480      	push	{r7}
 800c1da:	b083      	sub	sp, #12
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	4603      	mov	r3, r0
 800c1e0:	6039      	str	r1, [r7, #0]
 800c1e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	2204      	movs	r2, #4
 800c1e8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c1ea:	4b03      	ldr	r3, [pc, #12]	; (800c1f8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	370c      	adds	r7, #12
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f6:	4770      	bx	lr
 800c1f8:	20000190 	.word	0x20000190

0800c1fc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b082      	sub	sp, #8
 800c200:	af00      	add	r7, sp, #0
 800c202:	4603      	mov	r3, r0
 800c204:	6039      	str	r1, [r7, #0]
 800c206:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c208:	79fb      	ldrb	r3, [r7, #7]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d105      	bne.n	800c21a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c20e:	683a      	ldr	r2, [r7, #0]
 800c210:	4907      	ldr	r1, [pc, #28]	; (800c230 <USBD_FS_ProductStrDescriptor+0x34>)
 800c212:	4808      	ldr	r0, [pc, #32]	; (800c234 <USBD_FS_ProductStrDescriptor+0x38>)
 800c214:	f7ff fdf7 	bl	800be06 <USBD_GetString>
 800c218:	e004      	b.n	800c224 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c21a:	683a      	ldr	r2, [r7, #0]
 800c21c:	4904      	ldr	r1, [pc, #16]	; (800c230 <USBD_FS_ProductStrDescriptor+0x34>)
 800c21e:	4805      	ldr	r0, [pc, #20]	; (800c234 <USBD_FS_ProductStrDescriptor+0x38>)
 800c220:	f7ff fdf1 	bl	800be06 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c224:	4b02      	ldr	r3, [pc, #8]	; (800c230 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c226:	4618      	mov	r0, r3
 800c228:	3708      	adds	r7, #8
 800c22a:	46bd      	mov	sp, r7
 800c22c:	bd80      	pop	{r7, pc}
 800c22e:	bf00      	nop
 800c230:	2000a9c0 	.word	0x2000a9c0
 800c234:	08010824 	.word	0x08010824

0800c238 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b082      	sub	sp, #8
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	4603      	mov	r3, r0
 800c240:	6039      	str	r1, [r7, #0]
 800c242:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c244:	683a      	ldr	r2, [r7, #0]
 800c246:	4904      	ldr	r1, [pc, #16]	; (800c258 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c248:	4804      	ldr	r0, [pc, #16]	; (800c25c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c24a:	f7ff fddc 	bl	800be06 <USBD_GetString>
  return USBD_StrDesc;
 800c24e:	4b02      	ldr	r3, [pc, #8]	; (800c258 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c250:	4618      	mov	r0, r3
 800c252:	3708      	adds	r7, #8
 800c254:	46bd      	mov	sp, r7
 800c256:	bd80      	pop	{r7, pc}
 800c258:	2000a9c0 	.word	0x2000a9c0
 800c25c:	0801083c 	.word	0x0801083c

0800c260 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b082      	sub	sp, #8
 800c264:	af00      	add	r7, sp, #0
 800c266:	4603      	mov	r3, r0
 800c268:	6039      	str	r1, [r7, #0]
 800c26a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	221a      	movs	r2, #26
 800c270:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c272:	f000 f843 	bl	800c2fc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c276:	4b02      	ldr	r3, [pc, #8]	; (800c280 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c278:	4618      	mov	r0, r3
 800c27a:	3708      	adds	r7, #8
 800c27c:	46bd      	mov	sp, r7
 800c27e:	bd80      	pop	{r7, pc}
 800c280:	20000194 	.word	0x20000194

0800c284 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b082      	sub	sp, #8
 800c288:	af00      	add	r7, sp, #0
 800c28a:	4603      	mov	r3, r0
 800c28c:	6039      	str	r1, [r7, #0]
 800c28e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c290:	79fb      	ldrb	r3, [r7, #7]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d105      	bne.n	800c2a2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c296:	683a      	ldr	r2, [r7, #0]
 800c298:	4907      	ldr	r1, [pc, #28]	; (800c2b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c29a:	4808      	ldr	r0, [pc, #32]	; (800c2bc <USBD_FS_ConfigStrDescriptor+0x38>)
 800c29c:	f7ff fdb3 	bl	800be06 <USBD_GetString>
 800c2a0:	e004      	b.n	800c2ac <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c2a2:	683a      	ldr	r2, [r7, #0]
 800c2a4:	4904      	ldr	r1, [pc, #16]	; (800c2b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c2a6:	4805      	ldr	r0, [pc, #20]	; (800c2bc <USBD_FS_ConfigStrDescriptor+0x38>)
 800c2a8:	f7ff fdad 	bl	800be06 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c2ac:	4b02      	ldr	r3, [pc, #8]	; (800c2b8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	3708      	adds	r7, #8
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	bd80      	pop	{r7, pc}
 800c2b6:	bf00      	nop
 800c2b8:	2000a9c0 	.word	0x2000a9c0
 800c2bc:	08010850 	.word	0x08010850

0800c2c0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b082      	sub	sp, #8
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	4603      	mov	r3, r0
 800c2c8:	6039      	str	r1, [r7, #0]
 800c2ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c2cc:	79fb      	ldrb	r3, [r7, #7]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d105      	bne.n	800c2de <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c2d2:	683a      	ldr	r2, [r7, #0]
 800c2d4:	4907      	ldr	r1, [pc, #28]	; (800c2f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c2d6:	4808      	ldr	r0, [pc, #32]	; (800c2f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c2d8:	f7ff fd95 	bl	800be06 <USBD_GetString>
 800c2dc:	e004      	b.n	800c2e8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c2de:	683a      	ldr	r2, [r7, #0]
 800c2e0:	4904      	ldr	r1, [pc, #16]	; (800c2f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c2e2:	4805      	ldr	r0, [pc, #20]	; (800c2f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c2e4:	f7ff fd8f 	bl	800be06 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c2e8:	4b02      	ldr	r3, [pc, #8]	; (800c2f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	3708      	adds	r7, #8
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}
 800c2f2:	bf00      	nop
 800c2f4:	2000a9c0 	.word	0x2000a9c0
 800c2f8:	0801085c 	.word	0x0801085c

0800c2fc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b084      	sub	sp, #16
 800c300:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c302:	4b0f      	ldr	r3, [pc, #60]	; (800c340 <Get_SerialNum+0x44>)
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c308:	4b0e      	ldr	r3, [pc, #56]	; (800c344 <Get_SerialNum+0x48>)
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c30e:	4b0e      	ldr	r3, [pc, #56]	; (800c348 <Get_SerialNum+0x4c>)
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c314:	68fa      	ldr	r2, [r7, #12]
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	4413      	add	r3, r2
 800c31a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d009      	beq.n	800c336 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c322:	2208      	movs	r2, #8
 800c324:	4909      	ldr	r1, [pc, #36]	; (800c34c <Get_SerialNum+0x50>)
 800c326:	68f8      	ldr	r0, [r7, #12]
 800c328:	f000 f814 	bl	800c354 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c32c:	2204      	movs	r2, #4
 800c32e:	4908      	ldr	r1, [pc, #32]	; (800c350 <Get_SerialNum+0x54>)
 800c330:	68b8      	ldr	r0, [r7, #8]
 800c332:	f000 f80f 	bl	800c354 <IntToUnicode>
  }
}
 800c336:	bf00      	nop
 800c338:	3710      	adds	r7, #16
 800c33a:	46bd      	mov	sp, r7
 800c33c:	bd80      	pop	{r7, pc}
 800c33e:	bf00      	nop
 800c340:	1fff7a10 	.word	0x1fff7a10
 800c344:	1fff7a14 	.word	0x1fff7a14
 800c348:	1fff7a18 	.word	0x1fff7a18
 800c34c:	20000196 	.word	0x20000196
 800c350:	200001a6 	.word	0x200001a6

0800c354 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c354:	b480      	push	{r7}
 800c356:	b087      	sub	sp, #28
 800c358:	af00      	add	r7, sp, #0
 800c35a:	60f8      	str	r0, [r7, #12]
 800c35c:	60b9      	str	r1, [r7, #8]
 800c35e:	4613      	mov	r3, r2
 800c360:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c362:	2300      	movs	r3, #0
 800c364:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c366:	2300      	movs	r3, #0
 800c368:	75fb      	strb	r3, [r7, #23]
 800c36a:	e027      	b.n	800c3bc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	0f1b      	lsrs	r3, r3, #28
 800c370:	2b09      	cmp	r3, #9
 800c372:	d80b      	bhi.n	800c38c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	0f1b      	lsrs	r3, r3, #28
 800c378:	b2da      	uxtb	r2, r3
 800c37a:	7dfb      	ldrb	r3, [r7, #23]
 800c37c:	005b      	lsls	r3, r3, #1
 800c37e:	4619      	mov	r1, r3
 800c380:	68bb      	ldr	r3, [r7, #8]
 800c382:	440b      	add	r3, r1
 800c384:	3230      	adds	r2, #48	; 0x30
 800c386:	b2d2      	uxtb	r2, r2
 800c388:	701a      	strb	r2, [r3, #0]
 800c38a:	e00a      	b.n	800c3a2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	0f1b      	lsrs	r3, r3, #28
 800c390:	b2da      	uxtb	r2, r3
 800c392:	7dfb      	ldrb	r3, [r7, #23]
 800c394:	005b      	lsls	r3, r3, #1
 800c396:	4619      	mov	r1, r3
 800c398:	68bb      	ldr	r3, [r7, #8]
 800c39a:	440b      	add	r3, r1
 800c39c:	3237      	adds	r2, #55	; 0x37
 800c39e:	b2d2      	uxtb	r2, r2
 800c3a0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	011b      	lsls	r3, r3, #4
 800c3a6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c3a8:	7dfb      	ldrb	r3, [r7, #23]
 800c3aa:	005b      	lsls	r3, r3, #1
 800c3ac:	3301      	adds	r3, #1
 800c3ae:	68ba      	ldr	r2, [r7, #8]
 800c3b0:	4413      	add	r3, r2
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c3b6:	7dfb      	ldrb	r3, [r7, #23]
 800c3b8:	3301      	adds	r3, #1
 800c3ba:	75fb      	strb	r3, [r7, #23]
 800c3bc:	7dfa      	ldrb	r2, [r7, #23]
 800c3be:	79fb      	ldrb	r3, [r7, #7]
 800c3c0:	429a      	cmp	r2, r3
 800c3c2:	d3d3      	bcc.n	800c36c <IntToUnicode+0x18>
  }
}
 800c3c4:	bf00      	nop
 800c3c6:	bf00      	nop
 800c3c8:	371c      	adds	r7, #28
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d0:	4770      	bx	lr
	...

0800c3d4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b08a      	sub	sp, #40	; 0x28
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c3dc:	f107 0314 	add.w	r3, r7, #20
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	601a      	str	r2, [r3, #0]
 800c3e4:	605a      	str	r2, [r3, #4]
 800c3e6:	609a      	str	r2, [r3, #8]
 800c3e8:	60da      	str	r2, [r3, #12]
 800c3ea:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c3f4:	d13a      	bne.n	800c46c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	613b      	str	r3, [r7, #16]
 800c3fa:	4b1e      	ldr	r3, [pc, #120]	; (800c474 <HAL_PCD_MspInit+0xa0>)
 800c3fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3fe:	4a1d      	ldr	r2, [pc, #116]	; (800c474 <HAL_PCD_MspInit+0xa0>)
 800c400:	f043 0301 	orr.w	r3, r3, #1
 800c404:	6313      	str	r3, [r2, #48]	; 0x30
 800c406:	4b1b      	ldr	r3, [pc, #108]	; (800c474 <HAL_PCD_MspInit+0xa0>)
 800c408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c40a:	f003 0301 	and.w	r3, r3, #1
 800c40e:	613b      	str	r3, [r7, #16]
 800c410:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c412:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c416:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c418:	2302      	movs	r3, #2
 800c41a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c41c:	2300      	movs	r3, #0
 800c41e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c420:	2303      	movs	r3, #3
 800c422:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c424:	230a      	movs	r3, #10
 800c426:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c428:	f107 0314 	add.w	r3, r7, #20
 800c42c:	4619      	mov	r1, r3
 800c42e:	4812      	ldr	r0, [pc, #72]	; (800c478 <HAL_PCD_MspInit+0xa4>)
 800c430:	f7f8 f9f4 	bl	800481c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c434:	4b0f      	ldr	r3, [pc, #60]	; (800c474 <HAL_PCD_MspInit+0xa0>)
 800c436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c438:	4a0e      	ldr	r2, [pc, #56]	; (800c474 <HAL_PCD_MspInit+0xa0>)
 800c43a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c43e:	6353      	str	r3, [r2, #52]	; 0x34
 800c440:	2300      	movs	r3, #0
 800c442:	60fb      	str	r3, [r7, #12]
 800c444:	4b0b      	ldr	r3, [pc, #44]	; (800c474 <HAL_PCD_MspInit+0xa0>)
 800c446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c448:	4a0a      	ldr	r2, [pc, #40]	; (800c474 <HAL_PCD_MspInit+0xa0>)
 800c44a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c44e:	6453      	str	r3, [r2, #68]	; 0x44
 800c450:	4b08      	ldr	r3, [pc, #32]	; (800c474 <HAL_PCD_MspInit+0xa0>)
 800c452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c454:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c458:	60fb      	str	r3, [r7, #12]
 800c45a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c45c:	2200      	movs	r2, #0
 800c45e:	2100      	movs	r1, #0
 800c460:	2043      	movs	r0, #67	; 0x43
 800c462:	f7f8 f904 	bl	800466e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c466:	2043      	movs	r0, #67	; 0x43
 800c468:	f7f8 f91d 	bl	80046a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c46c:	bf00      	nop
 800c46e:	3728      	adds	r7, #40	; 0x28
 800c470:	46bd      	mov	sp, r7
 800c472:	bd80      	pop	{r7, pc}
 800c474:	40023800 	.word	0x40023800
 800c478:	40020000 	.word	0x40020000

0800c47c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b082      	sub	sp, #8
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c490:	4619      	mov	r1, r3
 800c492:	4610      	mov	r0, r2
 800c494:	f7fe fcd0 	bl	800ae38 <USBD_LL_SetupStage>
}
 800c498:	bf00      	nop
 800c49a:	3708      	adds	r7, #8
 800c49c:	46bd      	mov	sp, r7
 800c49e:	bd80      	pop	{r7, pc}

0800c4a0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b082      	sub	sp, #8
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
 800c4a8:	460b      	mov	r3, r1
 800c4aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800c4b2:	78fa      	ldrb	r2, [r7, #3]
 800c4b4:	6879      	ldr	r1, [r7, #4]
 800c4b6:	4613      	mov	r3, r2
 800c4b8:	00db      	lsls	r3, r3, #3
 800c4ba:	1a9b      	subs	r3, r3, r2
 800c4bc:	009b      	lsls	r3, r3, #2
 800c4be:	440b      	add	r3, r1
 800c4c0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c4c4:	681a      	ldr	r2, [r3, #0]
 800c4c6:	78fb      	ldrb	r3, [r7, #3]
 800c4c8:	4619      	mov	r1, r3
 800c4ca:	f7fe fd0a 	bl	800aee2 <USBD_LL_DataOutStage>
}
 800c4ce:	bf00      	nop
 800c4d0:	3708      	adds	r7, #8
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	bd80      	pop	{r7, pc}

0800c4d6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4d6:	b580      	push	{r7, lr}
 800c4d8:	b082      	sub	sp, #8
 800c4da:	af00      	add	r7, sp, #0
 800c4dc:	6078      	str	r0, [r7, #4]
 800c4de:	460b      	mov	r3, r1
 800c4e0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800c4e8:	78fa      	ldrb	r2, [r7, #3]
 800c4ea:	6879      	ldr	r1, [r7, #4]
 800c4ec:	4613      	mov	r3, r2
 800c4ee:	00db      	lsls	r3, r3, #3
 800c4f0:	1a9b      	subs	r3, r3, r2
 800c4f2:	009b      	lsls	r3, r3, #2
 800c4f4:	440b      	add	r3, r1
 800c4f6:	3348      	adds	r3, #72	; 0x48
 800c4f8:	681a      	ldr	r2, [r3, #0]
 800c4fa:	78fb      	ldrb	r3, [r7, #3]
 800c4fc:	4619      	mov	r1, r3
 800c4fe:	f7fe fd53 	bl	800afa8 <USBD_LL_DataInStage>
}
 800c502:	bf00      	nop
 800c504:	3708      	adds	r7, #8
 800c506:	46bd      	mov	sp, r7
 800c508:	bd80      	pop	{r7, pc}

0800c50a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c50a:	b580      	push	{r7, lr}
 800c50c:	b082      	sub	sp, #8
 800c50e:	af00      	add	r7, sp, #0
 800c510:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c518:	4618      	mov	r0, r3
 800c51a:	f7fe fe67 	bl	800b1ec <USBD_LL_SOF>
}
 800c51e:	bf00      	nop
 800c520:	3708      	adds	r7, #8
 800c522:	46bd      	mov	sp, r7
 800c524:	bd80      	pop	{r7, pc}

0800c526 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c526:	b580      	push	{r7, lr}
 800c528:	b084      	sub	sp, #16
 800c52a:	af00      	add	r7, sp, #0
 800c52c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c52e:	2301      	movs	r3, #1
 800c530:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	68db      	ldr	r3, [r3, #12]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d102      	bne.n	800c540 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c53a:	2300      	movs	r3, #0
 800c53c:	73fb      	strb	r3, [r7, #15]
 800c53e:	e008      	b.n	800c552 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	68db      	ldr	r3, [r3, #12]
 800c544:	2b02      	cmp	r3, #2
 800c546:	d102      	bne.n	800c54e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c548:	2301      	movs	r3, #1
 800c54a:	73fb      	strb	r3, [r7, #15]
 800c54c:	e001      	b.n	800c552 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c54e:	f7f5 ffb1 	bl	80024b4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c558:	7bfa      	ldrb	r2, [r7, #15]
 800c55a:	4611      	mov	r1, r2
 800c55c:	4618      	mov	r0, r3
 800c55e:	f7fe fe07 	bl	800b170 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c568:	4618      	mov	r0, r3
 800c56a:	f7fe fdb3 	bl	800b0d4 <USBD_LL_Reset>
}
 800c56e:	bf00      	nop
 800c570:	3710      	adds	r7, #16
 800c572:	46bd      	mov	sp, r7
 800c574:	bd80      	pop	{r7, pc}
	...

0800c578 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b082      	sub	sp, #8
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c586:	4618      	mov	r0, r3
 800c588:	f7fe fe02 	bl	800b190 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	687a      	ldr	r2, [r7, #4]
 800c598:	6812      	ldr	r2, [r2, #0]
 800c59a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c59e:	f043 0301 	orr.w	r3, r3, #1
 800c5a2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	6a1b      	ldr	r3, [r3, #32]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d005      	beq.n	800c5b8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c5ac:	4b04      	ldr	r3, [pc, #16]	; (800c5c0 <HAL_PCD_SuspendCallback+0x48>)
 800c5ae:	691b      	ldr	r3, [r3, #16]
 800c5b0:	4a03      	ldr	r2, [pc, #12]	; (800c5c0 <HAL_PCD_SuspendCallback+0x48>)
 800c5b2:	f043 0306 	orr.w	r3, r3, #6
 800c5b6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c5b8:	bf00      	nop
 800c5ba:	3708      	adds	r7, #8
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	bd80      	pop	{r7, pc}
 800c5c0:	e000ed00 	.word	0xe000ed00

0800c5c4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b082      	sub	sp, #8
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	f7fe fdf2 	bl	800b1bc <USBD_LL_Resume>
}
 800c5d8:	bf00      	nop
 800c5da:	3708      	adds	r7, #8
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	bd80      	pop	{r7, pc}

0800c5e0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b082      	sub	sp, #8
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
 800c5e8:	460b      	mov	r3, r1
 800c5ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c5f2:	78fa      	ldrb	r2, [r7, #3]
 800c5f4:	4611      	mov	r1, r2
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	f7fe fe40 	bl	800b27c <USBD_LL_IsoOUTIncomplete>
}
 800c5fc:	bf00      	nop
 800c5fe:	3708      	adds	r7, #8
 800c600:	46bd      	mov	sp, r7
 800c602:	bd80      	pop	{r7, pc}

0800c604 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b082      	sub	sp, #8
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
 800c60c:	460b      	mov	r3, r1
 800c60e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c616:	78fa      	ldrb	r2, [r7, #3]
 800c618:	4611      	mov	r1, r2
 800c61a:	4618      	mov	r0, r3
 800c61c:	f7fe fe08 	bl	800b230 <USBD_LL_IsoINIncomplete>
}
 800c620:	bf00      	nop
 800c622:	3708      	adds	r7, #8
 800c624:	46bd      	mov	sp, r7
 800c626:	bd80      	pop	{r7, pc}

0800c628 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	b082      	sub	sp, #8
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c636:	4618      	mov	r0, r3
 800c638:	f7fe fe46 	bl	800b2c8 <USBD_LL_DevConnected>
}
 800c63c:	bf00      	nop
 800c63e:	3708      	adds	r7, #8
 800c640:	46bd      	mov	sp, r7
 800c642:	bd80      	pop	{r7, pc}

0800c644 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b082      	sub	sp, #8
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c652:	4618      	mov	r0, r3
 800c654:	f7fe fe43 	bl	800b2de <USBD_LL_DevDisconnected>
}
 800c658:	bf00      	nop
 800c65a:	3708      	adds	r7, #8
 800c65c:	46bd      	mov	sp, r7
 800c65e:	bd80      	pop	{r7, pc}

0800c660 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b082      	sub	sp, #8
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	781b      	ldrb	r3, [r3, #0]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d13c      	bne.n	800c6ea <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c670:	4a20      	ldr	r2, [pc, #128]	; (800c6f4 <USBD_LL_Init+0x94>)
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	4a1e      	ldr	r2, [pc, #120]	; (800c6f4 <USBD_LL_Init+0x94>)
 800c67c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c680:	4b1c      	ldr	r3, [pc, #112]	; (800c6f4 <USBD_LL_Init+0x94>)
 800c682:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c686:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c688:	4b1a      	ldr	r3, [pc, #104]	; (800c6f4 <USBD_LL_Init+0x94>)
 800c68a:	2204      	movs	r2, #4
 800c68c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c68e:	4b19      	ldr	r3, [pc, #100]	; (800c6f4 <USBD_LL_Init+0x94>)
 800c690:	2202      	movs	r2, #2
 800c692:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c694:	4b17      	ldr	r3, [pc, #92]	; (800c6f4 <USBD_LL_Init+0x94>)
 800c696:	2200      	movs	r2, #0
 800c698:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c69a:	4b16      	ldr	r3, [pc, #88]	; (800c6f4 <USBD_LL_Init+0x94>)
 800c69c:	2202      	movs	r2, #2
 800c69e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c6a0:	4b14      	ldr	r3, [pc, #80]	; (800c6f4 <USBD_LL_Init+0x94>)
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c6a6:	4b13      	ldr	r3, [pc, #76]	; (800c6f4 <USBD_LL_Init+0x94>)
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c6ac:	4b11      	ldr	r3, [pc, #68]	; (800c6f4 <USBD_LL_Init+0x94>)
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c6b2:	4b10      	ldr	r3, [pc, #64]	; (800c6f4 <USBD_LL_Init+0x94>)
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c6b8:	4b0e      	ldr	r3, [pc, #56]	; (800c6f4 <USBD_LL_Init+0x94>)
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c6be:	480d      	ldr	r0, [pc, #52]	; (800c6f4 <USBD_LL_Init+0x94>)
 800c6c0:	f7f9 fa39 	bl	8005b36 <HAL_PCD_Init>
 800c6c4:	4603      	mov	r3, r0
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d001      	beq.n	800c6ce <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c6ca:	f7f5 fef3 	bl	80024b4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c6ce:	2180      	movs	r1, #128	; 0x80
 800c6d0:	4808      	ldr	r0, [pc, #32]	; (800c6f4 <USBD_LL_Init+0x94>)
 800c6d2:	f7fa fb96 	bl	8006e02 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c6d6:	2240      	movs	r2, #64	; 0x40
 800c6d8:	2100      	movs	r1, #0
 800c6da:	4806      	ldr	r0, [pc, #24]	; (800c6f4 <USBD_LL_Init+0x94>)
 800c6dc:	f7fa fb4a 	bl	8006d74 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c6e0:	2280      	movs	r2, #128	; 0x80
 800c6e2:	2101      	movs	r1, #1
 800c6e4:	4803      	ldr	r0, [pc, #12]	; (800c6f4 <USBD_LL_Init+0x94>)
 800c6e6:	f7fa fb45 	bl	8006d74 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c6ea:	2300      	movs	r3, #0
}
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	3708      	adds	r7, #8
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	bd80      	pop	{r7, pc}
 800c6f4:	2000abc0 	.word	0x2000abc0

0800c6f8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b084      	sub	sp, #16
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c700:	2300      	movs	r3, #0
 800c702:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c704:	2300      	movs	r3, #0
 800c706:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c70e:	4618      	mov	r0, r3
 800c710:	f7f9 fb2e 	bl	8005d70 <HAL_PCD_Start>
 800c714:	4603      	mov	r3, r0
 800c716:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c718:	7bfb      	ldrb	r3, [r7, #15]
 800c71a:	4618      	mov	r0, r3
 800c71c:	f000 f942 	bl	800c9a4 <USBD_Get_USB_Status>
 800c720:	4603      	mov	r3, r0
 800c722:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c724:	7bbb      	ldrb	r3, [r7, #14]
}
 800c726:	4618      	mov	r0, r3
 800c728:	3710      	adds	r7, #16
 800c72a:	46bd      	mov	sp, r7
 800c72c:	bd80      	pop	{r7, pc}

0800c72e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c72e:	b580      	push	{r7, lr}
 800c730:	b084      	sub	sp, #16
 800c732:	af00      	add	r7, sp, #0
 800c734:	6078      	str	r0, [r7, #4]
 800c736:	4608      	mov	r0, r1
 800c738:	4611      	mov	r1, r2
 800c73a:	461a      	mov	r2, r3
 800c73c:	4603      	mov	r3, r0
 800c73e:	70fb      	strb	r3, [r7, #3]
 800c740:	460b      	mov	r3, r1
 800c742:	70bb      	strb	r3, [r7, #2]
 800c744:	4613      	mov	r3, r2
 800c746:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c748:	2300      	movs	r3, #0
 800c74a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c74c:	2300      	movs	r3, #0
 800c74e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c756:	78bb      	ldrb	r3, [r7, #2]
 800c758:	883a      	ldrh	r2, [r7, #0]
 800c75a:	78f9      	ldrb	r1, [r7, #3]
 800c75c:	f7f9 ff12 	bl	8006584 <HAL_PCD_EP_Open>
 800c760:	4603      	mov	r3, r0
 800c762:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c764:	7bfb      	ldrb	r3, [r7, #15]
 800c766:	4618      	mov	r0, r3
 800c768:	f000 f91c 	bl	800c9a4 <USBD_Get_USB_Status>
 800c76c:	4603      	mov	r3, r0
 800c76e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c770:	7bbb      	ldrb	r3, [r7, #14]
}
 800c772:	4618      	mov	r0, r3
 800c774:	3710      	adds	r7, #16
 800c776:	46bd      	mov	sp, r7
 800c778:	bd80      	pop	{r7, pc}

0800c77a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c77a:	b580      	push	{r7, lr}
 800c77c:	b084      	sub	sp, #16
 800c77e:	af00      	add	r7, sp, #0
 800c780:	6078      	str	r0, [r7, #4]
 800c782:	460b      	mov	r3, r1
 800c784:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c786:	2300      	movs	r3, #0
 800c788:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c78a:	2300      	movs	r3, #0
 800c78c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c794:	78fa      	ldrb	r2, [r7, #3]
 800c796:	4611      	mov	r1, r2
 800c798:	4618      	mov	r0, r3
 800c79a:	f7f9 ff5b 	bl	8006654 <HAL_PCD_EP_Close>
 800c79e:	4603      	mov	r3, r0
 800c7a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c7a2:	7bfb      	ldrb	r3, [r7, #15]
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	f000 f8fd 	bl	800c9a4 <USBD_Get_USB_Status>
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c7ae:	7bbb      	ldrb	r3, [r7, #14]
}
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	3710      	adds	r7, #16
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	bd80      	pop	{r7, pc}

0800c7b8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b084      	sub	sp, #16
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
 800c7c0:	460b      	mov	r3, r1
 800c7c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c7d2:	78fa      	ldrb	r2, [r7, #3]
 800c7d4:	4611      	mov	r1, r2
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	f7fa f833 	bl	8006842 <HAL_PCD_EP_SetStall>
 800c7dc:	4603      	mov	r3, r0
 800c7de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c7e0:	7bfb      	ldrb	r3, [r7, #15]
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	f000 f8de 	bl	800c9a4 <USBD_Get_USB_Status>
 800c7e8:	4603      	mov	r3, r0
 800c7ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c7ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	3710      	adds	r7, #16
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	bd80      	pop	{r7, pc}

0800c7f6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c7f6:	b580      	push	{r7, lr}
 800c7f8:	b084      	sub	sp, #16
 800c7fa:	af00      	add	r7, sp, #0
 800c7fc:	6078      	str	r0, [r7, #4]
 800c7fe:	460b      	mov	r3, r1
 800c800:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c802:	2300      	movs	r3, #0
 800c804:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c806:	2300      	movs	r3, #0
 800c808:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c810:	78fa      	ldrb	r2, [r7, #3]
 800c812:	4611      	mov	r1, r2
 800c814:	4618      	mov	r0, r3
 800c816:	f7fa f878 	bl	800690a <HAL_PCD_EP_ClrStall>
 800c81a:	4603      	mov	r3, r0
 800c81c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c81e:	7bfb      	ldrb	r3, [r7, #15]
 800c820:	4618      	mov	r0, r3
 800c822:	f000 f8bf 	bl	800c9a4 <USBD_Get_USB_Status>
 800c826:	4603      	mov	r3, r0
 800c828:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c82a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c82c:	4618      	mov	r0, r3
 800c82e:	3710      	adds	r7, #16
 800c830:	46bd      	mov	sp, r7
 800c832:	bd80      	pop	{r7, pc}

0800c834 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c834:	b480      	push	{r7}
 800c836:	b085      	sub	sp, #20
 800c838:	af00      	add	r7, sp, #0
 800c83a:	6078      	str	r0, [r7, #4]
 800c83c:	460b      	mov	r3, r1
 800c83e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c846:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c848:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	da0b      	bge.n	800c868 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c850:	78fb      	ldrb	r3, [r7, #3]
 800c852:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c856:	68f9      	ldr	r1, [r7, #12]
 800c858:	4613      	mov	r3, r2
 800c85a:	00db      	lsls	r3, r3, #3
 800c85c:	1a9b      	subs	r3, r3, r2
 800c85e:	009b      	lsls	r3, r3, #2
 800c860:	440b      	add	r3, r1
 800c862:	333e      	adds	r3, #62	; 0x3e
 800c864:	781b      	ldrb	r3, [r3, #0]
 800c866:	e00b      	b.n	800c880 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c868:	78fb      	ldrb	r3, [r7, #3]
 800c86a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c86e:	68f9      	ldr	r1, [r7, #12]
 800c870:	4613      	mov	r3, r2
 800c872:	00db      	lsls	r3, r3, #3
 800c874:	1a9b      	subs	r3, r3, r2
 800c876:	009b      	lsls	r3, r3, #2
 800c878:	440b      	add	r3, r1
 800c87a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c87e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c880:	4618      	mov	r0, r3
 800c882:	3714      	adds	r7, #20
 800c884:	46bd      	mov	sp, r7
 800c886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88a:	4770      	bx	lr

0800c88c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b084      	sub	sp, #16
 800c890:	af00      	add	r7, sp, #0
 800c892:	6078      	str	r0, [r7, #4]
 800c894:	460b      	mov	r3, r1
 800c896:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c898:	2300      	movs	r3, #0
 800c89a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c89c:	2300      	movs	r3, #0
 800c89e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c8a6:	78fa      	ldrb	r2, [r7, #3]
 800c8a8:	4611      	mov	r1, r2
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	f7f9 fe45 	bl	800653a <HAL_PCD_SetAddress>
 800c8b0:	4603      	mov	r3, r0
 800c8b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c8b4:	7bfb      	ldrb	r3, [r7, #15]
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	f000 f874 	bl	800c9a4 <USBD_Get_USB_Status>
 800c8bc:	4603      	mov	r3, r0
 800c8be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c8c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	3710      	adds	r7, #16
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	bd80      	pop	{r7, pc}

0800c8ca <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c8ca:	b580      	push	{r7, lr}
 800c8cc:	b086      	sub	sp, #24
 800c8ce:	af00      	add	r7, sp, #0
 800c8d0:	60f8      	str	r0, [r7, #12]
 800c8d2:	607a      	str	r2, [r7, #4]
 800c8d4:	603b      	str	r3, [r7, #0]
 800c8d6:	460b      	mov	r3, r1
 800c8d8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8da:	2300      	movs	r3, #0
 800c8dc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c8de:	2300      	movs	r3, #0
 800c8e0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c8e8:	7af9      	ldrb	r1, [r7, #11]
 800c8ea:	683b      	ldr	r3, [r7, #0]
 800c8ec:	687a      	ldr	r2, [r7, #4]
 800c8ee:	f7f9 ff5e 	bl	80067ae <HAL_PCD_EP_Transmit>
 800c8f2:	4603      	mov	r3, r0
 800c8f4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c8f6:	7dfb      	ldrb	r3, [r7, #23]
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	f000 f853 	bl	800c9a4 <USBD_Get_USB_Status>
 800c8fe:	4603      	mov	r3, r0
 800c900:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c902:	7dbb      	ldrb	r3, [r7, #22]
}
 800c904:	4618      	mov	r0, r3
 800c906:	3718      	adds	r7, #24
 800c908:	46bd      	mov	sp, r7
 800c90a:	bd80      	pop	{r7, pc}

0800c90c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b086      	sub	sp, #24
 800c910:	af00      	add	r7, sp, #0
 800c912:	60f8      	str	r0, [r7, #12]
 800c914:	607a      	str	r2, [r7, #4]
 800c916:	603b      	str	r3, [r7, #0]
 800c918:	460b      	mov	r3, r1
 800c91a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c91c:	2300      	movs	r3, #0
 800c91e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c920:	2300      	movs	r3, #0
 800c922:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c92a:	7af9      	ldrb	r1, [r7, #11]
 800c92c:	683b      	ldr	r3, [r7, #0]
 800c92e:	687a      	ldr	r2, [r7, #4]
 800c930:	f7f9 feda 	bl	80066e8 <HAL_PCD_EP_Receive>
 800c934:	4603      	mov	r3, r0
 800c936:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c938:	7dfb      	ldrb	r3, [r7, #23]
 800c93a:	4618      	mov	r0, r3
 800c93c:	f000 f832 	bl	800c9a4 <USBD_Get_USB_Status>
 800c940:	4603      	mov	r3, r0
 800c942:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c944:	7dbb      	ldrb	r3, [r7, #22]
}
 800c946:	4618      	mov	r0, r3
 800c948:	3718      	adds	r7, #24
 800c94a:	46bd      	mov	sp, r7
 800c94c:	bd80      	pop	{r7, pc}

0800c94e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c94e:	b580      	push	{r7, lr}
 800c950:	b082      	sub	sp, #8
 800c952:	af00      	add	r7, sp, #0
 800c954:	6078      	str	r0, [r7, #4]
 800c956:	460b      	mov	r3, r1
 800c958:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c960:	78fa      	ldrb	r2, [r7, #3]
 800c962:	4611      	mov	r1, r2
 800c964:	4618      	mov	r0, r3
 800c966:	f7f9 ff0a 	bl	800677e <HAL_PCD_EP_GetRxCount>
 800c96a:	4603      	mov	r3, r0
}
 800c96c:	4618      	mov	r0, r3
 800c96e:	3708      	adds	r7, #8
 800c970:	46bd      	mov	sp, r7
 800c972:	bd80      	pop	{r7, pc}

0800c974 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c974:	b480      	push	{r7}
 800c976:	b083      	sub	sp, #12
 800c978:	af00      	add	r7, sp, #0
 800c97a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c97c:	4b03      	ldr	r3, [pc, #12]	; (800c98c <USBD_static_malloc+0x18>)
}
 800c97e:	4618      	mov	r0, r3
 800c980:	370c      	adds	r7, #12
 800c982:	46bd      	mov	sp, r7
 800c984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c988:	4770      	bx	lr
 800c98a:	bf00      	nop
 800c98c:	2000afc8 	.word	0x2000afc8

0800c990 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c990:	b480      	push	{r7}
 800c992:	b083      	sub	sp, #12
 800c994:	af00      	add	r7, sp, #0
 800c996:	6078      	str	r0, [r7, #4]

}
 800c998:	bf00      	nop
 800c99a:	370c      	adds	r7, #12
 800c99c:	46bd      	mov	sp, r7
 800c99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a2:	4770      	bx	lr

0800c9a4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c9a4:	b480      	push	{r7}
 800c9a6:	b085      	sub	sp, #20
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	4603      	mov	r3, r0
 800c9ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c9b2:	79fb      	ldrb	r3, [r7, #7]
 800c9b4:	2b03      	cmp	r3, #3
 800c9b6:	d817      	bhi.n	800c9e8 <USBD_Get_USB_Status+0x44>
 800c9b8:	a201      	add	r2, pc, #4	; (adr r2, 800c9c0 <USBD_Get_USB_Status+0x1c>)
 800c9ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9be:	bf00      	nop
 800c9c0:	0800c9d1 	.word	0x0800c9d1
 800c9c4:	0800c9d7 	.word	0x0800c9d7
 800c9c8:	0800c9dd 	.word	0x0800c9dd
 800c9cc:	0800c9e3 	.word	0x0800c9e3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	73fb      	strb	r3, [r7, #15]
    break;
 800c9d4:	e00b      	b.n	800c9ee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c9d6:	2303      	movs	r3, #3
 800c9d8:	73fb      	strb	r3, [r7, #15]
    break;
 800c9da:	e008      	b.n	800c9ee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c9dc:	2301      	movs	r3, #1
 800c9de:	73fb      	strb	r3, [r7, #15]
    break;
 800c9e0:	e005      	b.n	800c9ee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c9e2:	2303      	movs	r3, #3
 800c9e4:	73fb      	strb	r3, [r7, #15]
    break;
 800c9e6:	e002      	b.n	800c9ee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c9e8:	2303      	movs	r3, #3
 800c9ea:	73fb      	strb	r3, [r7, #15]
    break;
 800c9ec:	bf00      	nop
  }
  return usb_status;
 800c9ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	3714      	adds	r7, #20
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fa:	4770      	bx	lr

0800c9fc <__errno>:
 800c9fc:	4b01      	ldr	r3, [pc, #4]	; (800ca04 <__errno+0x8>)
 800c9fe:	6818      	ldr	r0, [r3, #0]
 800ca00:	4770      	bx	lr
 800ca02:	bf00      	nop
 800ca04:	200001b0 	.word	0x200001b0

0800ca08 <__libc_init_array>:
 800ca08:	b570      	push	{r4, r5, r6, lr}
 800ca0a:	4d0d      	ldr	r5, [pc, #52]	; (800ca40 <__libc_init_array+0x38>)
 800ca0c:	4c0d      	ldr	r4, [pc, #52]	; (800ca44 <__libc_init_array+0x3c>)
 800ca0e:	1b64      	subs	r4, r4, r5
 800ca10:	10a4      	asrs	r4, r4, #2
 800ca12:	2600      	movs	r6, #0
 800ca14:	42a6      	cmp	r6, r4
 800ca16:	d109      	bne.n	800ca2c <__libc_init_array+0x24>
 800ca18:	4d0b      	ldr	r5, [pc, #44]	; (800ca48 <__libc_init_array+0x40>)
 800ca1a:	4c0c      	ldr	r4, [pc, #48]	; (800ca4c <__libc_init_array+0x44>)
 800ca1c:	f003 fe1e 	bl	801065c <_init>
 800ca20:	1b64      	subs	r4, r4, r5
 800ca22:	10a4      	asrs	r4, r4, #2
 800ca24:	2600      	movs	r6, #0
 800ca26:	42a6      	cmp	r6, r4
 800ca28:	d105      	bne.n	800ca36 <__libc_init_array+0x2e>
 800ca2a:	bd70      	pop	{r4, r5, r6, pc}
 800ca2c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca30:	4798      	blx	r3
 800ca32:	3601      	adds	r6, #1
 800ca34:	e7ee      	b.n	800ca14 <__libc_init_array+0xc>
 800ca36:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca3a:	4798      	blx	r3
 800ca3c:	3601      	adds	r6, #1
 800ca3e:	e7f2      	b.n	800ca26 <__libc_init_array+0x1e>
 800ca40:	08010ec8 	.word	0x08010ec8
 800ca44:	08010ec8 	.word	0x08010ec8
 800ca48:	08010ec8 	.word	0x08010ec8
 800ca4c:	08010ecc 	.word	0x08010ecc

0800ca50 <memmove>:
 800ca50:	4288      	cmp	r0, r1
 800ca52:	b510      	push	{r4, lr}
 800ca54:	eb01 0402 	add.w	r4, r1, r2
 800ca58:	d902      	bls.n	800ca60 <memmove+0x10>
 800ca5a:	4284      	cmp	r4, r0
 800ca5c:	4623      	mov	r3, r4
 800ca5e:	d807      	bhi.n	800ca70 <memmove+0x20>
 800ca60:	1e43      	subs	r3, r0, #1
 800ca62:	42a1      	cmp	r1, r4
 800ca64:	d008      	beq.n	800ca78 <memmove+0x28>
 800ca66:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ca6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ca6e:	e7f8      	b.n	800ca62 <memmove+0x12>
 800ca70:	4402      	add	r2, r0
 800ca72:	4601      	mov	r1, r0
 800ca74:	428a      	cmp	r2, r1
 800ca76:	d100      	bne.n	800ca7a <memmove+0x2a>
 800ca78:	bd10      	pop	{r4, pc}
 800ca7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ca7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ca82:	e7f7      	b.n	800ca74 <memmove+0x24>

0800ca84 <memset>:
 800ca84:	4402      	add	r2, r0
 800ca86:	4603      	mov	r3, r0
 800ca88:	4293      	cmp	r3, r2
 800ca8a:	d100      	bne.n	800ca8e <memset+0xa>
 800ca8c:	4770      	bx	lr
 800ca8e:	f803 1b01 	strb.w	r1, [r3], #1
 800ca92:	e7f9      	b.n	800ca88 <memset+0x4>

0800ca94 <__cvt>:
 800ca94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ca98:	ec55 4b10 	vmov	r4, r5, d0
 800ca9c:	2d00      	cmp	r5, #0
 800ca9e:	460e      	mov	r6, r1
 800caa0:	4619      	mov	r1, r3
 800caa2:	462b      	mov	r3, r5
 800caa4:	bfbb      	ittet	lt
 800caa6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800caaa:	461d      	movlt	r5, r3
 800caac:	2300      	movge	r3, #0
 800caae:	232d      	movlt	r3, #45	; 0x2d
 800cab0:	700b      	strb	r3, [r1, #0]
 800cab2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cab4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800cab8:	4691      	mov	r9, r2
 800caba:	f023 0820 	bic.w	r8, r3, #32
 800cabe:	bfbc      	itt	lt
 800cac0:	4622      	movlt	r2, r4
 800cac2:	4614      	movlt	r4, r2
 800cac4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cac8:	d005      	beq.n	800cad6 <__cvt+0x42>
 800caca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800cace:	d100      	bne.n	800cad2 <__cvt+0x3e>
 800cad0:	3601      	adds	r6, #1
 800cad2:	2102      	movs	r1, #2
 800cad4:	e000      	b.n	800cad8 <__cvt+0x44>
 800cad6:	2103      	movs	r1, #3
 800cad8:	ab03      	add	r3, sp, #12
 800cada:	9301      	str	r3, [sp, #4]
 800cadc:	ab02      	add	r3, sp, #8
 800cade:	9300      	str	r3, [sp, #0]
 800cae0:	ec45 4b10 	vmov	d0, r4, r5
 800cae4:	4653      	mov	r3, sl
 800cae6:	4632      	mov	r2, r6
 800cae8:	f000 fcea 	bl	800d4c0 <_dtoa_r>
 800caec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800caf0:	4607      	mov	r7, r0
 800caf2:	d102      	bne.n	800cafa <__cvt+0x66>
 800caf4:	f019 0f01 	tst.w	r9, #1
 800caf8:	d022      	beq.n	800cb40 <__cvt+0xac>
 800cafa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cafe:	eb07 0906 	add.w	r9, r7, r6
 800cb02:	d110      	bne.n	800cb26 <__cvt+0x92>
 800cb04:	783b      	ldrb	r3, [r7, #0]
 800cb06:	2b30      	cmp	r3, #48	; 0x30
 800cb08:	d10a      	bne.n	800cb20 <__cvt+0x8c>
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	4620      	mov	r0, r4
 800cb10:	4629      	mov	r1, r5
 800cb12:	f7f3 ffd9 	bl	8000ac8 <__aeabi_dcmpeq>
 800cb16:	b918      	cbnz	r0, 800cb20 <__cvt+0x8c>
 800cb18:	f1c6 0601 	rsb	r6, r6, #1
 800cb1c:	f8ca 6000 	str.w	r6, [sl]
 800cb20:	f8da 3000 	ldr.w	r3, [sl]
 800cb24:	4499      	add	r9, r3
 800cb26:	2200      	movs	r2, #0
 800cb28:	2300      	movs	r3, #0
 800cb2a:	4620      	mov	r0, r4
 800cb2c:	4629      	mov	r1, r5
 800cb2e:	f7f3 ffcb 	bl	8000ac8 <__aeabi_dcmpeq>
 800cb32:	b108      	cbz	r0, 800cb38 <__cvt+0xa4>
 800cb34:	f8cd 900c 	str.w	r9, [sp, #12]
 800cb38:	2230      	movs	r2, #48	; 0x30
 800cb3a:	9b03      	ldr	r3, [sp, #12]
 800cb3c:	454b      	cmp	r3, r9
 800cb3e:	d307      	bcc.n	800cb50 <__cvt+0xbc>
 800cb40:	9b03      	ldr	r3, [sp, #12]
 800cb42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cb44:	1bdb      	subs	r3, r3, r7
 800cb46:	4638      	mov	r0, r7
 800cb48:	6013      	str	r3, [r2, #0]
 800cb4a:	b004      	add	sp, #16
 800cb4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb50:	1c59      	adds	r1, r3, #1
 800cb52:	9103      	str	r1, [sp, #12]
 800cb54:	701a      	strb	r2, [r3, #0]
 800cb56:	e7f0      	b.n	800cb3a <__cvt+0xa6>

0800cb58 <__exponent>:
 800cb58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cb5a:	4603      	mov	r3, r0
 800cb5c:	2900      	cmp	r1, #0
 800cb5e:	bfb8      	it	lt
 800cb60:	4249      	neglt	r1, r1
 800cb62:	f803 2b02 	strb.w	r2, [r3], #2
 800cb66:	bfb4      	ite	lt
 800cb68:	222d      	movlt	r2, #45	; 0x2d
 800cb6a:	222b      	movge	r2, #43	; 0x2b
 800cb6c:	2909      	cmp	r1, #9
 800cb6e:	7042      	strb	r2, [r0, #1]
 800cb70:	dd2a      	ble.n	800cbc8 <__exponent+0x70>
 800cb72:	f10d 0407 	add.w	r4, sp, #7
 800cb76:	46a4      	mov	ip, r4
 800cb78:	270a      	movs	r7, #10
 800cb7a:	46a6      	mov	lr, r4
 800cb7c:	460a      	mov	r2, r1
 800cb7e:	fb91 f6f7 	sdiv	r6, r1, r7
 800cb82:	fb07 1516 	mls	r5, r7, r6, r1
 800cb86:	3530      	adds	r5, #48	; 0x30
 800cb88:	2a63      	cmp	r2, #99	; 0x63
 800cb8a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800cb8e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800cb92:	4631      	mov	r1, r6
 800cb94:	dcf1      	bgt.n	800cb7a <__exponent+0x22>
 800cb96:	3130      	adds	r1, #48	; 0x30
 800cb98:	f1ae 0502 	sub.w	r5, lr, #2
 800cb9c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800cba0:	1c44      	adds	r4, r0, #1
 800cba2:	4629      	mov	r1, r5
 800cba4:	4561      	cmp	r1, ip
 800cba6:	d30a      	bcc.n	800cbbe <__exponent+0x66>
 800cba8:	f10d 0209 	add.w	r2, sp, #9
 800cbac:	eba2 020e 	sub.w	r2, r2, lr
 800cbb0:	4565      	cmp	r5, ip
 800cbb2:	bf88      	it	hi
 800cbb4:	2200      	movhi	r2, #0
 800cbb6:	4413      	add	r3, r2
 800cbb8:	1a18      	subs	r0, r3, r0
 800cbba:	b003      	add	sp, #12
 800cbbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cbc2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800cbc6:	e7ed      	b.n	800cba4 <__exponent+0x4c>
 800cbc8:	2330      	movs	r3, #48	; 0x30
 800cbca:	3130      	adds	r1, #48	; 0x30
 800cbcc:	7083      	strb	r3, [r0, #2]
 800cbce:	70c1      	strb	r1, [r0, #3]
 800cbd0:	1d03      	adds	r3, r0, #4
 800cbd2:	e7f1      	b.n	800cbb8 <__exponent+0x60>

0800cbd4 <_printf_float>:
 800cbd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbd8:	ed2d 8b02 	vpush	{d8}
 800cbdc:	b08d      	sub	sp, #52	; 0x34
 800cbde:	460c      	mov	r4, r1
 800cbe0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800cbe4:	4616      	mov	r6, r2
 800cbe6:	461f      	mov	r7, r3
 800cbe8:	4605      	mov	r5, r0
 800cbea:	f001 fa57 	bl	800e09c <_localeconv_r>
 800cbee:	f8d0 a000 	ldr.w	sl, [r0]
 800cbf2:	4650      	mov	r0, sl
 800cbf4:	f7f3 faec 	bl	80001d0 <strlen>
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	930a      	str	r3, [sp, #40]	; 0x28
 800cbfc:	6823      	ldr	r3, [r4, #0]
 800cbfe:	9305      	str	r3, [sp, #20]
 800cc00:	f8d8 3000 	ldr.w	r3, [r8]
 800cc04:	f894 b018 	ldrb.w	fp, [r4, #24]
 800cc08:	3307      	adds	r3, #7
 800cc0a:	f023 0307 	bic.w	r3, r3, #7
 800cc0e:	f103 0208 	add.w	r2, r3, #8
 800cc12:	f8c8 2000 	str.w	r2, [r8]
 800cc16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc1a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800cc1e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800cc22:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cc26:	9307      	str	r3, [sp, #28]
 800cc28:	f8cd 8018 	str.w	r8, [sp, #24]
 800cc2c:	ee08 0a10 	vmov	s16, r0
 800cc30:	4b9f      	ldr	r3, [pc, #636]	; (800ceb0 <_printf_float+0x2dc>)
 800cc32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cc36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cc3a:	f7f3 ff77 	bl	8000b2c <__aeabi_dcmpun>
 800cc3e:	bb88      	cbnz	r0, 800cca4 <_printf_float+0xd0>
 800cc40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cc44:	4b9a      	ldr	r3, [pc, #616]	; (800ceb0 <_printf_float+0x2dc>)
 800cc46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cc4a:	f7f3 ff51 	bl	8000af0 <__aeabi_dcmple>
 800cc4e:	bb48      	cbnz	r0, 800cca4 <_printf_float+0xd0>
 800cc50:	2200      	movs	r2, #0
 800cc52:	2300      	movs	r3, #0
 800cc54:	4640      	mov	r0, r8
 800cc56:	4649      	mov	r1, r9
 800cc58:	f7f3 ff40 	bl	8000adc <__aeabi_dcmplt>
 800cc5c:	b110      	cbz	r0, 800cc64 <_printf_float+0x90>
 800cc5e:	232d      	movs	r3, #45	; 0x2d
 800cc60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc64:	4b93      	ldr	r3, [pc, #588]	; (800ceb4 <_printf_float+0x2e0>)
 800cc66:	4894      	ldr	r0, [pc, #592]	; (800ceb8 <_printf_float+0x2e4>)
 800cc68:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800cc6c:	bf94      	ite	ls
 800cc6e:	4698      	movls	r8, r3
 800cc70:	4680      	movhi	r8, r0
 800cc72:	2303      	movs	r3, #3
 800cc74:	6123      	str	r3, [r4, #16]
 800cc76:	9b05      	ldr	r3, [sp, #20]
 800cc78:	f023 0204 	bic.w	r2, r3, #4
 800cc7c:	6022      	str	r2, [r4, #0]
 800cc7e:	f04f 0900 	mov.w	r9, #0
 800cc82:	9700      	str	r7, [sp, #0]
 800cc84:	4633      	mov	r3, r6
 800cc86:	aa0b      	add	r2, sp, #44	; 0x2c
 800cc88:	4621      	mov	r1, r4
 800cc8a:	4628      	mov	r0, r5
 800cc8c:	f000 f9d8 	bl	800d040 <_printf_common>
 800cc90:	3001      	adds	r0, #1
 800cc92:	f040 8090 	bne.w	800cdb6 <_printf_float+0x1e2>
 800cc96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cc9a:	b00d      	add	sp, #52	; 0x34
 800cc9c:	ecbd 8b02 	vpop	{d8}
 800cca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cca4:	4642      	mov	r2, r8
 800cca6:	464b      	mov	r3, r9
 800cca8:	4640      	mov	r0, r8
 800ccaa:	4649      	mov	r1, r9
 800ccac:	f7f3 ff3e 	bl	8000b2c <__aeabi_dcmpun>
 800ccb0:	b140      	cbz	r0, 800ccc4 <_printf_float+0xf0>
 800ccb2:	464b      	mov	r3, r9
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	bfbc      	itt	lt
 800ccb8:	232d      	movlt	r3, #45	; 0x2d
 800ccba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ccbe:	487f      	ldr	r0, [pc, #508]	; (800cebc <_printf_float+0x2e8>)
 800ccc0:	4b7f      	ldr	r3, [pc, #508]	; (800cec0 <_printf_float+0x2ec>)
 800ccc2:	e7d1      	b.n	800cc68 <_printf_float+0x94>
 800ccc4:	6863      	ldr	r3, [r4, #4]
 800ccc6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ccca:	9206      	str	r2, [sp, #24]
 800cccc:	1c5a      	adds	r2, r3, #1
 800ccce:	d13f      	bne.n	800cd50 <_printf_float+0x17c>
 800ccd0:	2306      	movs	r3, #6
 800ccd2:	6063      	str	r3, [r4, #4]
 800ccd4:	9b05      	ldr	r3, [sp, #20]
 800ccd6:	6861      	ldr	r1, [r4, #4]
 800ccd8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ccdc:	2300      	movs	r3, #0
 800ccde:	9303      	str	r3, [sp, #12]
 800cce0:	ab0a      	add	r3, sp, #40	; 0x28
 800cce2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800cce6:	ab09      	add	r3, sp, #36	; 0x24
 800cce8:	ec49 8b10 	vmov	d0, r8, r9
 800ccec:	9300      	str	r3, [sp, #0]
 800ccee:	6022      	str	r2, [r4, #0]
 800ccf0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ccf4:	4628      	mov	r0, r5
 800ccf6:	f7ff fecd 	bl	800ca94 <__cvt>
 800ccfa:	9b06      	ldr	r3, [sp, #24]
 800ccfc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ccfe:	2b47      	cmp	r3, #71	; 0x47
 800cd00:	4680      	mov	r8, r0
 800cd02:	d108      	bne.n	800cd16 <_printf_float+0x142>
 800cd04:	1cc8      	adds	r0, r1, #3
 800cd06:	db02      	blt.n	800cd0e <_printf_float+0x13a>
 800cd08:	6863      	ldr	r3, [r4, #4]
 800cd0a:	4299      	cmp	r1, r3
 800cd0c:	dd41      	ble.n	800cd92 <_printf_float+0x1be>
 800cd0e:	f1ab 0b02 	sub.w	fp, fp, #2
 800cd12:	fa5f fb8b 	uxtb.w	fp, fp
 800cd16:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cd1a:	d820      	bhi.n	800cd5e <_printf_float+0x18a>
 800cd1c:	3901      	subs	r1, #1
 800cd1e:	465a      	mov	r2, fp
 800cd20:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cd24:	9109      	str	r1, [sp, #36]	; 0x24
 800cd26:	f7ff ff17 	bl	800cb58 <__exponent>
 800cd2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cd2c:	1813      	adds	r3, r2, r0
 800cd2e:	2a01      	cmp	r2, #1
 800cd30:	4681      	mov	r9, r0
 800cd32:	6123      	str	r3, [r4, #16]
 800cd34:	dc02      	bgt.n	800cd3c <_printf_float+0x168>
 800cd36:	6822      	ldr	r2, [r4, #0]
 800cd38:	07d2      	lsls	r2, r2, #31
 800cd3a:	d501      	bpl.n	800cd40 <_printf_float+0x16c>
 800cd3c:	3301      	adds	r3, #1
 800cd3e:	6123      	str	r3, [r4, #16]
 800cd40:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d09c      	beq.n	800cc82 <_printf_float+0xae>
 800cd48:	232d      	movs	r3, #45	; 0x2d
 800cd4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd4e:	e798      	b.n	800cc82 <_printf_float+0xae>
 800cd50:	9a06      	ldr	r2, [sp, #24]
 800cd52:	2a47      	cmp	r2, #71	; 0x47
 800cd54:	d1be      	bne.n	800ccd4 <_printf_float+0x100>
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d1bc      	bne.n	800ccd4 <_printf_float+0x100>
 800cd5a:	2301      	movs	r3, #1
 800cd5c:	e7b9      	b.n	800ccd2 <_printf_float+0xfe>
 800cd5e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800cd62:	d118      	bne.n	800cd96 <_printf_float+0x1c2>
 800cd64:	2900      	cmp	r1, #0
 800cd66:	6863      	ldr	r3, [r4, #4]
 800cd68:	dd0b      	ble.n	800cd82 <_printf_float+0x1ae>
 800cd6a:	6121      	str	r1, [r4, #16]
 800cd6c:	b913      	cbnz	r3, 800cd74 <_printf_float+0x1a0>
 800cd6e:	6822      	ldr	r2, [r4, #0]
 800cd70:	07d0      	lsls	r0, r2, #31
 800cd72:	d502      	bpl.n	800cd7a <_printf_float+0x1a6>
 800cd74:	3301      	adds	r3, #1
 800cd76:	440b      	add	r3, r1
 800cd78:	6123      	str	r3, [r4, #16]
 800cd7a:	65a1      	str	r1, [r4, #88]	; 0x58
 800cd7c:	f04f 0900 	mov.w	r9, #0
 800cd80:	e7de      	b.n	800cd40 <_printf_float+0x16c>
 800cd82:	b913      	cbnz	r3, 800cd8a <_printf_float+0x1b6>
 800cd84:	6822      	ldr	r2, [r4, #0]
 800cd86:	07d2      	lsls	r2, r2, #31
 800cd88:	d501      	bpl.n	800cd8e <_printf_float+0x1ba>
 800cd8a:	3302      	adds	r3, #2
 800cd8c:	e7f4      	b.n	800cd78 <_printf_float+0x1a4>
 800cd8e:	2301      	movs	r3, #1
 800cd90:	e7f2      	b.n	800cd78 <_printf_float+0x1a4>
 800cd92:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800cd96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd98:	4299      	cmp	r1, r3
 800cd9a:	db05      	blt.n	800cda8 <_printf_float+0x1d4>
 800cd9c:	6823      	ldr	r3, [r4, #0]
 800cd9e:	6121      	str	r1, [r4, #16]
 800cda0:	07d8      	lsls	r0, r3, #31
 800cda2:	d5ea      	bpl.n	800cd7a <_printf_float+0x1a6>
 800cda4:	1c4b      	adds	r3, r1, #1
 800cda6:	e7e7      	b.n	800cd78 <_printf_float+0x1a4>
 800cda8:	2900      	cmp	r1, #0
 800cdaa:	bfd4      	ite	le
 800cdac:	f1c1 0202 	rsble	r2, r1, #2
 800cdb0:	2201      	movgt	r2, #1
 800cdb2:	4413      	add	r3, r2
 800cdb4:	e7e0      	b.n	800cd78 <_printf_float+0x1a4>
 800cdb6:	6823      	ldr	r3, [r4, #0]
 800cdb8:	055a      	lsls	r2, r3, #21
 800cdba:	d407      	bmi.n	800cdcc <_printf_float+0x1f8>
 800cdbc:	6923      	ldr	r3, [r4, #16]
 800cdbe:	4642      	mov	r2, r8
 800cdc0:	4631      	mov	r1, r6
 800cdc2:	4628      	mov	r0, r5
 800cdc4:	47b8      	blx	r7
 800cdc6:	3001      	adds	r0, #1
 800cdc8:	d12c      	bne.n	800ce24 <_printf_float+0x250>
 800cdca:	e764      	b.n	800cc96 <_printf_float+0xc2>
 800cdcc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cdd0:	f240 80e0 	bls.w	800cf94 <_printf_float+0x3c0>
 800cdd4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cdd8:	2200      	movs	r2, #0
 800cdda:	2300      	movs	r3, #0
 800cddc:	f7f3 fe74 	bl	8000ac8 <__aeabi_dcmpeq>
 800cde0:	2800      	cmp	r0, #0
 800cde2:	d034      	beq.n	800ce4e <_printf_float+0x27a>
 800cde4:	4a37      	ldr	r2, [pc, #220]	; (800cec4 <_printf_float+0x2f0>)
 800cde6:	2301      	movs	r3, #1
 800cde8:	4631      	mov	r1, r6
 800cdea:	4628      	mov	r0, r5
 800cdec:	47b8      	blx	r7
 800cdee:	3001      	adds	r0, #1
 800cdf0:	f43f af51 	beq.w	800cc96 <_printf_float+0xc2>
 800cdf4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cdf8:	429a      	cmp	r2, r3
 800cdfa:	db02      	blt.n	800ce02 <_printf_float+0x22e>
 800cdfc:	6823      	ldr	r3, [r4, #0]
 800cdfe:	07d8      	lsls	r0, r3, #31
 800ce00:	d510      	bpl.n	800ce24 <_printf_float+0x250>
 800ce02:	ee18 3a10 	vmov	r3, s16
 800ce06:	4652      	mov	r2, sl
 800ce08:	4631      	mov	r1, r6
 800ce0a:	4628      	mov	r0, r5
 800ce0c:	47b8      	blx	r7
 800ce0e:	3001      	adds	r0, #1
 800ce10:	f43f af41 	beq.w	800cc96 <_printf_float+0xc2>
 800ce14:	f04f 0800 	mov.w	r8, #0
 800ce18:	f104 091a 	add.w	r9, r4, #26
 800ce1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce1e:	3b01      	subs	r3, #1
 800ce20:	4543      	cmp	r3, r8
 800ce22:	dc09      	bgt.n	800ce38 <_printf_float+0x264>
 800ce24:	6823      	ldr	r3, [r4, #0]
 800ce26:	079b      	lsls	r3, r3, #30
 800ce28:	f100 8105 	bmi.w	800d036 <_printf_float+0x462>
 800ce2c:	68e0      	ldr	r0, [r4, #12]
 800ce2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce30:	4298      	cmp	r0, r3
 800ce32:	bfb8      	it	lt
 800ce34:	4618      	movlt	r0, r3
 800ce36:	e730      	b.n	800cc9a <_printf_float+0xc6>
 800ce38:	2301      	movs	r3, #1
 800ce3a:	464a      	mov	r2, r9
 800ce3c:	4631      	mov	r1, r6
 800ce3e:	4628      	mov	r0, r5
 800ce40:	47b8      	blx	r7
 800ce42:	3001      	adds	r0, #1
 800ce44:	f43f af27 	beq.w	800cc96 <_printf_float+0xc2>
 800ce48:	f108 0801 	add.w	r8, r8, #1
 800ce4c:	e7e6      	b.n	800ce1c <_printf_float+0x248>
 800ce4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	dc39      	bgt.n	800cec8 <_printf_float+0x2f4>
 800ce54:	4a1b      	ldr	r2, [pc, #108]	; (800cec4 <_printf_float+0x2f0>)
 800ce56:	2301      	movs	r3, #1
 800ce58:	4631      	mov	r1, r6
 800ce5a:	4628      	mov	r0, r5
 800ce5c:	47b8      	blx	r7
 800ce5e:	3001      	adds	r0, #1
 800ce60:	f43f af19 	beq.w	800cc96 <_printf_float+0xc2>
 800ce64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ce68:	4313      	orrs	r3, r2
 800ce6a:	d102      	bne.n	800ce72 <_printf_float+0x29e>
 800ce6c:	6823      	ldr	r3, [r4, #0]
 800ce6e:	07d9      	lsls	r1, r3, #31
 800ce70:	d5d8      	bpl.n	800ce24 <_printf_float+0x250>
 800ce72:	ee18 3a10 	vmov	r3, s16
 800ce76:	4652      	mov	r2, sl
 800ce78:	4631      	mov	r1, r6
 800ce7a:	4628      	mov	r0, r5
 800ce7c:	47b8      	blx	r7
 800ce7e:	3001      	adds	r0, #1
 800ce80:	f43f af09 	beq.w	800cc96 <_printf_float+0xc2>
 800ce84:	f04f 0900 	mov.w	r9, #0
 800ce88:	f104 0a1a 	add.w	sl, r4, #26
 800ce8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce8e:	425b      	negs	r3, r3
 800ce90:	454b      	cmp	r3, r9
 800ce92:	dc01      	bgt.n	800ce98 <_printf_float+0x2c4>
 800ce94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce96:	e792      	b.n	800cdbe <_printf_float+0x1ea>
 800ce98:	2301      	movs	r3, #1
 800ce9a:	4652      	mov	r2, sl
 800ce9c:	4631      	mov	r1, r6
 800ce9e:	4628      	mov	r0, r5
 800cea0:	47b8      	blx	r7
 800cea2:	3001      	adds	r0, #1
 800cea4:	f43f aef7 	beq.w	800cc96 <_printf_float+0xc2>
 800cea8:	f109 0901 	add.w	r9, r9, #1
 800ceac:	e7ee      	b.n	800ce8c <_printf_float+0x2b8>
 800ceae:	bf00      	nop
 800ceb0:	7fefffff 	.word	0x7fefffff
 800ceb4:	08010ab4 	.word	0x08010ab4
 800ceb8:	08010ab8 	.word	0x08010ab8
 800cebc:	08010ac0 	.word	0x08010ac0
 800cec0:	08010abc 	.word	0x08010abc
 800cec4:	08010ac4 	.word	0x08010ac4
 800cec8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ceca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cecc:	429a      	cmp	r2, r3
 800cece:	bfa8      	it	ge
 800ced0:	461a      	movge	r2, r3
 800ced2:	2a00      	cmp	r2, #0
 800ced4:	4691      	mov	r9, r2
 800ced6:	dc37      	bgt.n	800cf48 <_printf_float+0x374>
 800ced8:	f04f 0b00 	mov.w	fp, #0
 800cedc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cee0:	f104 021a 	add.w	r2, r4, #26
 800cee4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cee6:	9305      	str	r3, [sp, #20]
 800cee8:	eba3 0309 	sub.w	r3, r3, r9
 800ceec:	455b      	cmp	r3, fp
 800ceee:	dc33      	bgt.n	800cf58 <_printf_float+0x384>
 800cef0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cef4:	429a      	cmp	r2, r3
 800cef6:	db3b      	blt.n	800cf70 <_printf_float+0x39c>
 800cef8:	6823      	ldr	r3, [r4, #0]
 800cefa:	07da      	lsls	r2, r3, #31
 800cefc:	d438      	bmi.n	800cf70 <_printf_float+0x39c>
 800cefe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf00:	9a05      	ldr	r2, [sp, #20]
 800cf02:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cf04:	1a9a      	subs	r2, r3, r2
 800cf06:	eba3 0901 	sub.w	r9, r3, r1
 800cf0a:	4591      	cmp	r9, r2
 800cf0c:	bfa8      	it	ge
 800cf0e:	4691      	movge	r9, r2
 800cf10:	f1b9 0f00 	cmp.w	r9, #0
 800cf14:	dc35      	bgt.n	800cf82 <_printf_float+0x3ae>
 800cf16:	f04f 0800 	mov.w	r8, #0
 800cf1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cf1e:	f104 0a1a 	add.w	sl, r4, #26
 800cf22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cf26:	1a9b      	subs	r3, r3, r2
 800cf28:	eba3 0309 	sub.w	r3, r3, r9
 800cf2c:	4543      	cmp	r3, r8
 800cf2e:	f77f af79 	ble.w	800ce24 <_printf_float+0x250>
 800cf32:	2301      	movs	r3, #1
 800cf34:	4652      	mov	r2, sl
 800cf36:	4631      	mov	r1, r6
 800cf38:	4628      	mov	r0, r5
 800cf3a:	47b8      	blx	r7
 800cf3c:	3001      	adds	r0, #1
 800cf3e:	f43f aeaa 	beq.w	800cc96 <_printf_float+0xc2>
 800cf42:	f108 0801 	add.w	r8, r8, #1
 800cf46:	e7ec      	b.n	800cf22 <_printf_float+0x34e>
 800cf48:	4613      	mov	r3, r2
 800cf4a:	4631      	mov	r1, r6
 800cf4c:	4642      	mov	r2, r8
 800cf4e:	4628      	mov	r0, r5
 800cf50:	47b8      	blx	r7
 800cf52:	3001      	adds	r0, #1
 800cf54:	d1c0      	bne.n	800ced8 <_printf_float+0x304>
 800cf56:	e69e      	b.n	800cc96 <_printf_float+0xc2>
 800cf58:	2301      	movs	r3, #1
 800cf5a:	4631      	mov	r1, r6
 800cf5c:	4628      	mov	r0, r5
 800cf5e:	9205      	str	r2, [sp, #20]
 800cf60:	47b8      	blx	r7
 800cf62:	3001      	adds	r0, #1
 800cf64:	f43f ae97 	beq.w	800cc96 <_printf_float+0xc2>
 800cf68:	9a05      	ldr	r2, [sp, #20]
 800cf6a:	f10b 0b01 	add.w	fp, fp, #1
 800cf6e:	e7b9      	b.n	800cee4 <_printf_float+0x310>
 800cf70:	ee18 3a10 	vmov	r3, s16
 800cf74:	4652      	mov	r2, sl
 800cf76:	4631      	mov	r1, r6
 800cf78:	4628      	mov	r0, r5
 800cf7a:	47b8      	blx	r7
 800cf7c:	3001      	adds	r0, #1
 800cf7e:	d1be      	bne.n	800cefe <_printf_float+0x32a>
 800cf80:	e689      	b.n	800cc96 <_printf_float+0xc2>
 800cf82:	9a05      	ldr	r2, [sp, #20]
 800cf84:	464b      	mov	r3, r9
 800cf86:	4442      	add	r2, r8
 800cf88:	4631      	mov	r1, r6
 800cf8a:	4628      	mov	r0, r5
 800cf8c:	47b8      	blx	r7
 800cf8e:	3001      	adds	r0, #1
 800cf90:	d1c1      	bne.n	800cf16 <_printf_float+0x342>
 800cf92:	e680      	b.n	800cc96 <_printf_float+0xc2>
 800cf94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cf96:	2a01      	cmp	r2, #1
 800cf98:	dc01      	bgt.n	800cf9e <_printf_float+0x3ca>
 800cf9a:	07db      	lsls	r3, r3, #31
 800cf9c:	d538      	bpl.n	800d010 <_printf_float+0x43c>
 800cf9e:	2301      	movs	r3, #1
 800cfa0:	4642      	mov	r2, r8
 800cfa2:	4631      	mov	r1, r6
 800cfa4:	4628      	mov	r0, r5
 800cfa6:	47b8      	blx	r7
 800cfa8:	3001      	adds	r0, #1
 800cfaa:	f43f ae74 	beq.w	800cc96 <_printf_float+0xc2>
 800cfae:	ee18 3a10 	vmov	r3, s16
 800cfb2:	4652      	mov	r2, sl
 800cfb4:	4631      	mov	r1, r6
 800cfb6:	4628      	mov	r0, r5
 800cfb8:	47b8      	blx	r7
 800cfba:	3001      	adds	r0, #1
 800cfbc:	f43f ae6b 	beq.w	800cc96 <_printf_float+0xc2>
 800cfc0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	f7f3 fd7e 	bl	8000ac8 <__aeabi_dcmpeq>
 800cfcc:	b9d8      	cbnz	r0, 800d006 <_printf_float+0x432>
 800cfce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cfd0:	f108 0201 	add.w	r2, r8, #1
 800cfd4:	3b01      	subs	r3, #1
 800cfd6:	4631      	mov	r1, r6
 800cfd8:	4628      	mov	r0, r5
 800cfda:	47b8      	blx	r7
 800cfdc:	3001      	adds	r0, #1
 800cfde:	d10e      	bne.n	800cffe <_printf_float+0x42a>
 800cfe0:	e659      	b.n	800cc96 <_printf_float+0xc2>
 800cfe2:	2301      	movs	r3, #1
 800cfe4:	4652      	mov	r2, sl
 800cfe6:	4631      	mov	r1, r6
 800cfe8:	4628      	mov	r0, r5
 800cfea:	47b8      	blx	r7
 800cfec:	3001      	adds	r0, #1
 800cfee:	f43f ae52 	beq.w	800cc96 <_printf_float+0xc2>
 800cff2:	f108 0801 	add.w	r8, r8, #1
 800cff6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cff8:	3b01      	subs	r3, #1
 800cffa:	4543      	cmp	r3, r8
 800cffc:	dcf1      	bgt.n	800cfe2 <_printf_float+0x40e>
 800cffe:	464b      	mov	r3, r9
 800d000:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d004:	e6dc      	b.n	800cdc0 <_printf_float+0x1ec>
 800d006:	f04f 0800 	mov.w	r8, #0
 800d00a:	f104 0a1a 	add.w	sl, r4, #26
 800d00e:	e7f2      	b.n	800cff6 <_printf_float+0x422>
 800d010:	2301      	movs	r3, #1
 800d012:	4642      	mov	r2, r8
 800d014:	e7df      	b.n	800cfd6 <_printf_float+0x402>
 800d016:	2301      	movs	r3, #1
 800d018:	464a      	mov	r2, r9
 800d01a:	4631      	mov	r1, r6
 800d01c:	4628      	mov	r0, r5
 800d01e:	47b8      	blx	r7
 800d020:	3001      	adds	r0, #1
 800d022:	f43f ae38 	beq.w	800cc96 <_printf_float+0xc2>
 800d026:	f108 0801 	add.w	r8, r8, #1
 800d02a:	68e3      	ldr	r3, [r4, #12]
 800d02c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d02e:	1a5b      	subs	r3, r3, r1
 800d030:	4543      	cmp	r3, r8
 800d032:	dcf0      	bgt.n	800d016 <_printf_float+0x442>
 800d034:	e6fa      	b.n	800ce2c <_printf_float+0x258>
 800d036:	f04f 0800 	mov.w	r8, #0
 800d03a:	f104 0919 	add.w	r9, r4, #25
 800d03e:	e7f4      	b.n	800d02a <_printf_float+0x456>

0800d040 <_printf_common>:
 800d040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d044:	4616      	mov	r6, r2
 800d046:	4699      	mov	r9, r3
 800d048:	688a      	ldr	r2, [r1, #8]
 800d04a:	690b      	ldr	r3, [r1, #16]
 800d04c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d050:	4293      	cmp	r3, r2
 800d052:	bfb8      	it	lt
 800d054:	4613      	movlt	r3, r2
 800d056:	6033      	str	r3, [r6, #0]
 800d058:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d05c:	4607      	mov	r7, r0
 800d05e:	460c      	mov	r4, r1
 800d060:	b10a      	cbz	r2, 800d066 <_printf_common+0x26>
 800d062:	3301      	adds	r3, #1
 800d064:	6033      	str	r3, [r6, #0]
 800d066:	6823      	ldr	r3, [r4, #0]
 800d068:	0699      	lsls	r1, r3, #26
 800d06a:	bf42      	ittt	mi
 800d06c:	6833      	ldrmi	r3, [r6, #0]
 800d06e:	3302      	addmi	r3, #2
 800d070:	6033      	strmi	r3, [r6, #0]
 800d072:	6825      	ldr	r5, [r4, #0]
 800d074:	f015 0506 	ands.w	r5, r5, #6
 800d078:	d106      	bne.n	800d088 <_printf_common+0x48>
 800d07a:	f104 0a19 	add.w	sl, r4, #25
 800d07e:	68e3      	ldr	r3, [r4, #12]
 800d080:	6832      	ldr	r2, [r6, #0]
 800d082:	1a9b      	subs	r3, r3, r2
 800d084:	42ab      	cmp	r3, r5
 800d086:	dc26      	bgt.n	800d0d6 <_printf_common+0x96>
 800d088:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d08c:	1e13      	subs	r3, r2, #0
 800d08e:	6822      	ldr	r2, [r4, #0]
 800d090:	bf18      	it	ne
 800d092:	2301      	movne	r3, #1
 800d094:	0692      	lsls	r2, r2, #26
 800d096:	d42b      	bmi.n	800d0f0 <_printf_common+0xb0>
 800d098:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d09c:	4649      	mov	r1, r9
 800d09e:	4638      	mov	r0, r7
 800d0a0:	47c0      	blx	r8
 800d0a2:	3001      	adds	r0, #1
 800d0a4:	d01e      	beq.n	800d0e4 <_printf_common+0xa4>
 800d0a6:	6823      	ldr	r3, [r4, #0]
 800d0a8:	68e5      	ldr	r5, [r4, #12]
 800d0aa:	6832      	ldr	r2, [r6, #0]
 800d0ac:	f003 0306 	and.w	r3, r3, #6
 800d0b0:	2b04      	cmp	r3, #4
 800d0b2:	bf08      	it	eq
 800d0b4:	1aad      	subeq	r5, r5, r2
 800d0b6:	68a3      	ldr	r3, [r4, #8]
 800d0b8:	6922      	ldr	r2, [r4, #16]
 800d0ba:	bf0c      	ite	eq
 800d0bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d0c0:	2500      	movne	r5, #0
 800d0c2:	4293      	cmp	r3, r2
 800d0c4:	bfc4      	itt	gt
 800d0c6:	1a9b      	subgt	r3, r3, r2
 800d0c8:	18ed      	addgt	r5, r5, r3
 800d0ca:	2600      	movs	r6, #0
 800d0cc:	341a      	adds	r4, #26
 800d0ce:	42b5      	cmp	r5, r6
 800d0d0:	d11a      	bne.n	800d108 <_printf_common+0xc8>
 800d0d2:	2000      	movs	r0, #0
 800d0d4:	e008      	b.n	800d0e8 <_printf_common+0xa8>
 800d0d6:	2301      	movs	r3, #1
 800d0d8:	4652      	mov	r2, sl
 800d0da:	4649      	mov	r1, r9
 800d0dc:	4638      	mov	r0, r7
 800d0de:	47c0      	blx	r8
 800d0e0:	3001      	adds	r0, #1
 800d0e2:	d103      	bne.n	800d0ec <_printf_common+0xac>
 800d0e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d0e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0ec:	3501      	adds	r5, #1
 800d0ee:	e7c6      	b.n	800d07e <_printf_common+0x3e>
 800d0f0:	18e1      	adds	r1, r4, r3
 800d0f2:	1c5a      	adds	r2, r3, #1
 800d0f4:	2030      	movs	r0, #48	; 0x30
 800d0f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d0fa:	4422      	add	r2, r4
 800d0fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d100:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d104:	3302      	adds	r3, #2
 800d106:	e7c7      	b.n	800d098 <_printf_common+0x58>
 800d108:	2301      	movs	r3, #1
 800d10a:	4622      	mov	r2, r4
 800d10c:	4649      	mov	r1, r9
 800d10e:	4638      	mov	r0, r7
 800d110:	47c0      	blx	r8
 800d112:	3001      	adds	r0, #1
 800d114:	d0e6      	beq.n	800d0e4 <_printf_common+0xa4>
 800d116:	3601      	adds	r6, #1
 800d118:	e7d9      	b.n	800d0ce <_printf_common+0x8e>
	...

0800d11c <_printf_i>:
 800d11c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d120:	7e0f      	ldrb	r7, [r1, #24]
 800d122:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d124:	2f78      	cmp	r7, #120	; 0x78
 800d126:	4691      	mov	r9, r2
 800d128:	4680      	mov	r8, r0
 800d12a:	460c      	mov	r4, r1
 800d12c:	469a      	mov	sl, r3
 800d12e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d132:	d807      	bhi.n	800d144 <_printf_i+0x28>
 800d134:	2f62      	cmp	r7, #98	; 0x62
 800d136:	d80a      	bhi.n	800d14e <_printf_i+0x32>
 800d138:	2f00      	cmp	r7, #0
 800d13a:	f000 80d8 	beq.w	800d2ee <_printf_i+0x1d2>
 800d13e:	2f58      	cmp	r7, #88	; 0x58
 800d140:	f000 80a3 	beq.w	800d28a <_printf_i+0x16e>
 800d144:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d148:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d14c:	e03a      	b.n	800d1c4 <_printf_i+0xa8>
 800d14e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d152:	2b15      	cmp	r3, #21
 800d154:	d8f6      	bhi.n	800d144 <_printf_i+0x28>
 800d156:	a101      	add	r1, pc, #4	; (adr r1, 800d15c <_printf_i+0x40>)
 800d158:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d15c:	0800d1b5 	.word	0x0800d1b5
 800d160:	0800d1c9 	.word	0x0800d1c9
 800d164:	0800d145 	.word	0x0800d145
 800d168:	0800d145 	.word	0x0800d145
 800d16c:	0800d145 	.word	0x0800d145
 800d170:	0800d145 	.word	0x0800d145
 800d174:	0800d1c9 	.word	0x0800d1c9
 800d178:	0800d145 	.word	0x0800d145
 800d17c:	0800d145 	.word	0x0800d145
 800d180:	0800d145 	.word	0x0800d145
 800d184:	0800d145 	.word	0x0800d145
 800d188:	0800d2d5 	.word	0x0800d2d5
 800d18c:	0800d1f9 	.word	0x0800d1f9
 800d190:	0800d2b7 	.word	0x0800d2b7
 800d194:	0800d145 	.word	0x0800d145
 800d198:	0800d145 	.word	0x0800d145
 800d19c:	0800d2f7 	.word	0x0800d2f7
 800d1a0:	0800d145 	.word	0x0800d145
 800d1a4:	0800d1f9 	.word	0x0800d1f9
 800d1a8:	0800d145 	.word	0x0800d145
 800d1ac:	0800d145 	.word	0x0800d145
 800d1b0:	0800d2bf 	.word	0x0800d2bf
 800d1b4:	682b      	ldr	r3, [r5, #0]
 800d1b6:	1d1a      	adds	r2, r3, #4
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	602a      	str	r2, [r5, #0]
 800d1bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d1c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d1c4:	2301      	movs	r3, #1
 800d1c6:	e0a3      	b.n	800d310 <_printf_i+0x1f4>
 800d1c8:	6820      	ldr	r0, [r4, #0]
 800d1ca:	6829      	ldr	r1, [r5, #0]
 800d1cc:	0606      	lsls	r6, r0, #24
 800d1ce:	f101 0304 	add.w	r3, r1, #4
 800d1d2:	d50a      	bpl.n	800d1ea <_printf_i+0xce>
 800d1d4:	680e      	ldr	r6, [r1, #0]
 800d1d6:	602b      	str	r3, [r5, #0]
 800d1d8:	2e00      	cmp	r6, #0
 800d1da:	da03      	bge.n	800d1e4 <_printf_i+0xc8>
 800d1dc:	232d      	movs	r3, #45	; 0x2d
 800d1de:	4276      	negs	r6, r6
 800d1e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d1e4:	485e      	ldr	r0, [pc, #376]	; (800d360 <_printf_i+0x244>)
 800d1e6:	230a      	movs	r3, #10
 800d1e8:	e019      	b.n	800d21e <_printf_i+0x102>
 800d1ea:	680e      	ldr	r6, [r1, #0]
 800d1ec:	602b      	str	r3, [r5, #0]
 800d1ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d1f2:	bf18      	it	ne
 800d1f4:	b236      	sxthne	r6, r6
 800d1f6:	e7ef      	b.n	800d1d8 <_printf_i+0xbc>
 800d1f8:	682b      	ldr	r3, [r5, #0]
 800d1fa:	6820      	ldr	r0, [r4, #0]
 800d1fc:	1d19      	adds	r1, r3, #4
 800d1fe:	6029      	str	r1, [r5, #0]
 800d200:	0601      	lsls	r1, r0, #24
 800d202:	d501      	bpl.n	800d208 <_printf_i+0xec>
 800d204:	681e      	ldr	r6, [r3, #0]
 800d206:	e002      	b.n	800d20e <_printf_i+0xf2>
 800d208:	0646      	lsls	r6, r0, #25
 800d20a:	d5fb      	bpl.n	800d204 <_printf_i+0xe8>
 800d20c:	881e      	ldrh	r6, [r3, #0]
 800d20e:	4854      	ldr	r0, [pc, #336]	; (800d360 <_printf_i+0x244>)
 800d210:	2f6f      	cmp	r7, #111	; 0x6f
 800d212:	bf0c      	ite	eq
 800d214:	2308      	moveq	r3, #8
 800d216:	230a      	movne	r3, #10
 800d218:	2100      	movs	r1, #0
 800d21a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d21e:	6865      	ldr	r5, [r4, #4]
 800d220:	60a5      	str	r5, [r4, #8]
 800d222:	2d00      	cmp	r5, #0
 800d224:	bfa2      	ittt	ge
 800d226:	6821      	ldrge	r1, [r4, #0]
 800d228:	f021 0104 	bicge.w	r1, r1, #4
 800d22c:	6021      	strge	r1, [r4, #0]
 800d22e:	b90e      	cbnz	r6, 800d234 <_printf_i+0x118>
 800d230:	2d00      	cmp	r5, #0
 800d232:	d04d      	beq.n	800d2d0 <_printf_i+0x1b4>
 800d234:	4615      	mov	r5, r2
 800d236:	fbb6 f1f3 	udiv	r1, r6, r3
 800d23a:	fb03 6711 	mls	r7, r3, r1, r6
 800d23e:	5dc7      	ldrb	r7, [r0, r7]
 800d240:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d244:	4637      	mov	r7, r6
 800d246:	42bb      	cmp	r3, r7
 800d248:	460e      	mov	r6, r1
 800d24a:	d9f4      	bls.n	800d236 <_printf_i+0x11a>
 800d24c:	2b08      	cmp	r3, #8
 800d24e:	d10b      	bne.n	800d268 <_printf_i+0x14c>
 800d250:	6823      	ldr	r3, [r4, #0]
 800d252:	07de      	lsls	r6, r3, #31
 800d254:	d508      	bpl.n	800d268 <_printf_i+0x14c>
 800d256:	6923      	ldr	r3, [r4, #16]
 800d258:	6861      	ldr	r1, [r4, #4]
 800d25a:	4299      	cmp	r1, r3
 800d25c:	bfde      	ittt	le
 800d25e:	2330      	movle	r3, #48	; 0x30
 800d260:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d264:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d268:	1b52      	subs	r2, r2, r5
 800d26a:	6122      	str	r2, [r4, #16]
 800d26c:	f8cd a000 	str.w	sl, [sp]
 800d270:	464b      	mov	r3, r9
 800d272:	aa03      	add	r2, sp, #12
 800d274:	4621      	mov	r1, r4
 800d276:	4640      	mov	r0, r8
 800d278:	f7ff fee2 	bl	800d040 <_printf_common>
 800d27c:	3001      	adds	r0, #1
 800d27e:	d14c      	bne.n	800d31a <_printf_i+0x1fe>
 800d280:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d284:	b004      	add	sp, #16
 800d286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d28a:	4835      	ldr	r0, [pc, #212]	; (800d360 <_printf_i+0x244>)
 800d28c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d290:	6829      	ldr	r1, [r5, #0]
 800d292:	6823      	ldr	r3, [r4, #0]
 800d294:	f851 6b04 	ldr.w	r6, [r1], #4
 800d298:	6029      	str	r1, [r5, #0]
 800d29a:	061d      	lsls	r5, r3, #24
 800d29c:	d514      	bpl.n	800d2c8 <_printf_i+0x1ac>
 800d29e:	07df      	lsls	r7, r3, #31
 800d2a0:	bf44      	itt	mi
 800d2a2:	f043 0320 	orrmi.w	r3, r3, #32
 800d2a6:	6023      	strmi	r3, [r4, #0]
 800d2a8:	b91e      	cbnz	r6, 800d2b2 <_printf_i+0x196>
 800d2aa:	6823      	ldr	r3, [r4, #0]
 800d2ac:	f023 0320 	bic.w	r3, r3, #32
 800d2b0:	6023      	str	r3, [r4, #0]
 800d2b2:	2310      	movs	r3, #16
 800d2b4:	e7b0      	b.n	800d218 <_printf_i+0xfc>
 800d2b6:	6823      	ldr	r3, [r4, #0]
 800d2b8:	f043 0320 	orr.w	r3, r3, #32
 800d2bc:	6023      	str	r3, [r4, #0]
 800d2be:	2378      	movs	r3, #120	; 0x78
 800d2c0:	4828      	ldr	r0, [pc, #160]	; (800d364 <_printf_i+0x248>)
 800d2c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d2c6:	e7e3      	b.n	800d290 <_printf_i+0x174>
 800d2c8:	0659      	lsls	r1, r3, #25
 800d2ca:	bf48      	it	mi
 800d2cc:	b2b6      	uxthmi	r6, r6
 800d2ce:	e7e6      	b.n	800d29e <_printf_i+0x182>
 800d2d0:	4615      	mov	r5, r2
 800d2d2:	e7bb      	b.n	800d24c <_printf_i+0x130>
 800d2d4:	682b      	ldr	r3, [r5, #0]
 800d2d6:	6826      	ldr	r6, [r4, #0]
 800d2d8:	6961      	ldr	r1, [r4, #20]
 800d2da:	1d18      	adds	r0, r3, #4
 800d2dc:	6028      	str	r0, [r5, #0]
 800d2de:	0635      	lsls	r5, r6, #24
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	d501      	bpl.n	800d2e8 <_printf_i+0x1cc>
 800d2e4:	6019      	str	r1, [r3, #0]
 800d2e6:	e002      	b.n	800d2ee <_printf_i+0x1d2>
 800d2e8:	0670      	lsls	r0, r6, #25
 800d2ea:	d5fb      	bpl.n	800d2e4 <_printf_i+0x1c8>
 800d2ec:	8019      	strh	r1, [r3, #0]
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	6123      	str	r3, [r4, #16]
 800d2f2:	4615      	mov	r5, r2
 800d2f4:	e7ba      	b.n	800d26c <_printf_i+0x150>
 800d2f6:	682b      	ldr	r3, [r5, #0]
 800d2f8:	1d1a      	adds	r2, r3, #4
 800d2fa:	602a      	str	r2, [r5, #0]
 800d2fc:	681d      	ldr	r5, [r3, #0]
 800d2fe:	6862      	ldr	r2, [r4, #4]
 800d300:	2100      	movs	r1, #0
 800d302:	4628      	mov	r0, r5
 800d304:	f7f2 ff6c 	bl	80001e0 <memchr>
 800d308:	b108      	cbz	r0, 800d30e <_printf_i+0x1f2>
 800d30a:	1b40      	subs	r0, r0, r5
 800d30c:	6060      	str	r0, [r4, #4]
 800d30e:	6863      	ldr	r3, [r4, #4]
 800d310:	6123      	str	r3, [r4, #16]
 800d312:	2300      	movs	r3, #0
 800d314:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d318:	e7a8      	b.n	800d26c <_printf_i+0x150>
 800d31a:	6923      	ldr	r3, [r4, #16]
 800d31c:	462a      	mov	r2, r5
 800d31e:	4649      	mov	r1, r9
 800d320:	4640      	mov	r0, r8
 800d322:	47d0      	blx	sl
 800d324:	3001      	adds	r0, #1
 800d326:	d0ab      	beq.n	800d280 <_printf_i+0x164>
 800d328:	6823      	ldr	r3, [r4, #0]
 800d32a:	079b      	lsls	r3, r3, #30
 800d32c:	d413      	bmi.n	800d356 <_printf_i+0x23a>
 800d32e:	68e0      	ldr	r0, [r4, #12]
 800d330:	9b03      	ldr	r3, [sp, #12]
 800d332:	4298      	cmp	r0, r3
 800d334:	bfb8      	it	lt
 800d336:	4618      	movlt	r0, r3
 800d338:	e7a4      	b.n	800d284 <_printf_i+0x168>
 800d33a:	2301      	movs	r3, #1
 800d33c:	4632      	mov	r2, r6
 800d33e:	4649      	mov	r1, r9
 800d340:	4640      	mov	r0, r8
 800d342:	47d0      	blx	sl
 800d344:	3001      	adds	r0, #1
 800d346:	d09b      	beq.n	800d280 <_printf_i+0x164>
 800d348:	3501      	adds	r5, #1
 800d34a:	68e3      	ldr	r3, [r4, #12]
 800d34c:	9903      	ldr	r1, [sp, #12]
 800d34e:	1a5b      	subs	r3, r3, r1
 800d350:	42ab      	cmp	r3, r5
 800d352:	dcf2      	bgt.n	800d33a <_printf_i+0x21e>
 800d354:	e7eb      	b.n	800d32e <_printf_i+0x212>
 800d356:	2500      	movs	r5, #0
 800d358:	f104 0619 	add.w	r6, r4, #25
 800d35c:	e7f5      	b.n	800d34a <_printf_i+0x22e>
 800d35e:	bf00      	nop
 800d360:	08010ac6 	.word	0x08010ac6
 800d364:	08010ad7 	.word	0x08010ad7

0800d368 <siprintf>:
 800d368:	b40e      	push	{r1, r2, r3}
 800d36a:	b500      	push	{lr}
 800d36c:	b09c      	sub	sp, #112	; 0x70
 800d36e:	ab1d      	add	r3, sp, #116	; 0x74
 800d370:	9002      	str	r0, [sp, #8]
 800d372:	9006      	str	r0, [sp, #24]
 800d374:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d378:	4809      	ldr	r0, [pc, #36]	; (800d3a0 <siprintf+0x38>)
 800d37a:	9107      	str	r1, [sp, #28]
 800d37c:	9104      	str	r1, [sp, #16]
 800d37e:	4909      	ldr	r1, [pc, #36]	; (800d3a4 <siprintf+0x3c>)
 800d380:	f853 2b04 	ldr.w	r2, [r3], #4
 800d384:	9105      	str	r1, [sp, #20]
 800d386:	6800      	ldr	r0, [r0, #0]
 800d388:	9301      	str	r3, [sp, #4]
 800d38a:	a902      	add	r1, sp, #8
 800d38c:	f001 fb76 	bl	800ea7c <_svfiprintf_r>
 800d390:	9b02      	ldr	r3, [sp, #8]
 800d392:	2200      	movs	r2, #0
 800d394:	701a      	strb	r2, [r3, #0]
 800d396:	b01c      	add	sp, #112	; 0x70
 800d398:	f85d eb04 	ldr.w	lr, [sp], #4
 800d39c:	b003      	add	sp, #12
 800d39e:	4770      	bx	lr
 800d3a0:	200001b0 	.word	0x200001b0
 800d3a4:	ffff0208 	.word	0xffff0208

0800d3a8 <quorem>:
 800d3a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3ac:	6903      	ldr	r3, [r0, #16]
 800d3ae:	690c      	ldr	r4, [r1, #16]
 800d3b0:	42a3      	cmp	r3, r4
 800d3b2:	4607      	mov	r7, r0
 800d3b4:	f2c0 8081 	blt.w	800d4ba <quorem+0x112>
 800d3b8:	3c01      	subs	r4, #1
 800d3ba:	f101 0814 	add.w	r8, r1, #20
 800d3be:	f100 0514 	add.w	r5, r0, #20
 800d3c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d3c6:	9301      	str	r3, [sp, #4]
 800d3c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d3cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d3d0:	3301      	adds	r3, #1
 800d3d2:	429a      	cmp	r2, r3
 800d3d4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d3d8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d3dc:	fbb2 f6f3 	udiv	r6, r2, r3
 800d3e0:	d331      	bcc.n	800d446 <quorem+0x9e>
 800d3e2:	f04f 0e00 	mov.w	lr, #0
 800d3e6:	4640      	mov	r0, r8
 800d3e8:	46ac      	mov	ip, r5
 800d3ea:	46f2      	mov	sl, lr
 800d3ec:	f850 2b04 	ldr.w	r2, [r0], #4
 800d3f0:	b293      	uxth	r3, r2
 800d3f2:	fb06 e303 	mla	r3, r6, r3, lr
 800d3f6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d3fa:	b29b      	uxth	r3, r3
 800d3fc:	ebaa 0303 	sub.w	r3, sl, r3
 800d400:	f8dc a000 	ldr.w	sl, [ip]
 800d404:	0c12      	lsrs	r2, r2, #16
 800d406:	fa13 f38a 	uxtah	r3, r3, sl
 800d40a:	fb06 e202 	mla	r2, r6, r2, lr
 800d40e:	9300      	str	r3, [sp, #0]
 800d410:	9b00      	ldr	r3, [sp, #0]
 800d412:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d416:	b292      	uxth	r2, r2
 800d418:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d41c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d420:	f8bd 3000 	ldrh.w	r3, [sp]
 800d424:	4581      	cmp	r9, r0
 800d426:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d42a:	f84c 3b04 	str.w	r3, [ip], #4
 800d42e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d432:	d2db      	bcs.n	800d3ec <quorem+0x44>
 800d434:	f855 300b 	ldr.w	r3, [r5, fp]
 800d438:	b92b      	cbnz	r3, 800d446 <quorem+0x9e>
 800d43a:	9b01      	ldr	r3, [sp, #4]
 800d43c:	3b04      	subs	r3, #4
 800d43e:	429d      	cmp	r5, r3
 800d440:	461a      	mov	r2, r3
 800d442:	d32e      	bcc.n	800d4a2 <quorem+0xfa>
 800d444:	613c      	str	r4, [r7, #16]
 800d446:	4638      	mov	r0, r7
 800d448:	f001 f8c4 	bl	800e5d4 <__mcmp>
 800d44c:	2800      	cmp	r0, #0
 800d44e:	db24      	blt.n	800d49a <quorem+0xf2>
 800d450:	3601      	adds	r6, #1
 800d452:	4628      	mov	r0, r5
 800d454:	f04f 0c00 	mov.w	ip, #0
 800d458:	f858 2b04 	ldr.w	r2, [r8], #4
 800d45c:	f8d0 e000 	ldr.w	lr, [r0]
 800d460:	b293      	uxth	r3, r2
 800d462:	ebac 0303 	sub.w	r3, ip, r3
 800d466:	0c12      	lsrs	r2, r2, #16
 800d468:	fa13 f38e 	uxtah	r3, r3, lr
 800d46c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d470:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d474:	b29b      	uxth	r3, r3
 800d476:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d47a:	45c1      	cmp	r9, r8
 800d47c:	f840 3b04 	str.w	r3, [r0], #4
 800d480:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d484:	d2e8      	bcs.n	800d458 <quorem+0xb0>
 800d486:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d48a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d48e:	b922      	cbnz	r2, 800d49a <quorem+0xf2>
 800d490:	3b04      	subs	r3, #4
 800d492:	429d      	cmp	r5, r3
 800d494:	461a      	mov	r2, r3
 800d496:	d30a      	bcc.n	800d4ae <quorem+0x106>
 800d498:	613c      	str	r4, [r7, #16]
 800d49a:	4630      	mov	r0, r6
 800d49c:	b003      	add	sp, #12
 800d49e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4a2:	6812      	ldr	r2, [r2, #0]
 800d4a4:	3b04      	subs	r3, #4
 800d4a6:	2a00      	cmp	r2, #0
 800d4a8:	d1cc      	bne.n	800d444 <quorem+0x9c>
 800d4aa:	3c01      	subs	r4, #1
 800d4ac:	e7c7      	b.n	800d43e <quorem+0x96>
 800d4ae:	6812      	ldr	r2, [r2, #0]
 800d4b0:	3b04      	subs	r3, #4
 800d4b2:	2a00      	cmp	r2, #0
 800d4b4:	d1f0      	bne.n	800d498 <quorem+0xf0>
 800d4b6:	3c01      	subs	r4, #1
 800d4b8:	e7eb      	b.n	800d492 <quorem+0xea>
 800d4ba:	2000      	movs	r0, #0
 800d4bc:	e7ee      	b.n	800d49c <quorem+0xf4>
	...

0800d4c0 <_dtoa_r>:
 800d4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4c4:	ed2d 8b04 	vpush	{d8-d9}
 800d4c8:	ec57 6b10 	vmov	r6, r7, d0
 800d4cc:	b093      	sub	sp, #76	; 0x4c
 800d4ce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d4d0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d4d4:	9106      	str	r1, [sp, #24]
 800d4d6:	ee10 aa10 	vmov	sl, s0
 800d4da:	4604      	mov	r4, r0
 800d4dc:	9209      	str	r2, [sp, #36]	; 0x24
 800d4de:	930c      	str	r3, [sp, #48]	; 0x30
 800d4e0:	46bb      	mov	fp, r7
 800d4e2:	b975      	cbnz	r5, 800d502 <_dtoa_r+0x42>
 800d4e4:	2010      	movs	r0, #16
 800d4e6:	f000 fddd 	bl	800e0a4 <malloc>
 800d4ea:	4602      	mov	r2, r0
 800d4ec:	6260      	str	r0, [r4, #36]	; 0x24
 800d4ee:	b920      	cbnz	r0, 800d4fa <_dtoa_r+0x3a>
 800d4f0:	4ba7      	ldr	r3, [pc, #668]	; (800d790 <_dtoa_r+0x2d0>)
 800d4f2:	21ea      	movs	r1, #234	; 0xea
 800d4f4:	48a7      	ldr	r0, [pc, #668]	; (800d794 <_dtoa_r+0x2d4>)
 800d4f6:	f001 fbd1 	bl	800ec9c <__assert_func>
 800d4fa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d4fe:	6005      	str	r5, [r0, #0]
 800d500:	60c5      	str	r5, [r0, #12]
 800d502:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d504:	6819      	ldr	r1, [r3, #0]
 800d506:	b151      	cbz	r1, 800d51e <_dtoa_r+0x5e>
 800d508:	685a      	ldr	r2, [r3, #4]
 800d50a:	604a      	str	r2, [r1, #4]
 800d50c:	2301      	movs	r3, #1
 800d50e:	4093      	lsls	r3, r2
 800d510:	608b      	str	r3, [r1, #8]
 800d512:	4620      	mov	r0, r4
 800d514:	f000 fe1c 	bl	800e150 <_Bfree>
 800d518:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d51a:	2200      	movs	r2, #0
 800d51c:	601a      	str	r2, [r3, #0]
 800d51e:	1e3b      	subs	r3, r7, #0
 800d520:	bfaa      	itet	ge
 800d522:	2300      	movge	r3, #0
 800d524:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800d528:	f8c8 3000 	strge.w	r3, [r8]
 800d52c:	4b9a      	ldr	r3, [pc, #616]	; (800d798 <_dtoa_r+0x2d8>)
 800d52e:	bfbc      	itt	lt
 800d530:	2201      	movlt	r2, #1
 800d532:	f8c8 2000 	strlt.w	r2, [r8]
 800d536:	ea33 030b 	bics.w	r3, r3, fp
 800d53a:	d11b      	bne.n	800d574 <_dtoa_r+0xb4>
 800d53c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d53e:	f242 730f 	movw	r3, #9999	; 0x270f
 800d542:	6013      	str	r3, [r2, #0]
 800d544:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d548:	4333      	orrs	r3, r6
 800d54a:	f000 8592 	beq.w	800e072 <_dtoa_r+0xbb2>
 800d54e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d550:	b963      	cbnz	r3, 800d56c <_dtoa_r+0xac>
 800d552:	4b92      	ldr	r3, [pc, #584]	; (800d79c <_dtoa_r+0x2dc>)
 800d554:	e022      	b.n	800d59c <_dtoa_r+0xdc>
 800d556:	4b92      	ldr	r3, [pc, #584]	; (800d7a0 <_dtoa_r+0x2e0>)
 800d558:	9301      	str	r3, [sp, #4]
 800d55a:	3308      	adds	r3, #8
 800d55c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d55e:	6013      	str	r3, [r2, #0]
 800d560:	9801      	ldr	r0, [sp, #4]
 800d562:	b013      	add	sp, #76	; 0x4c
 800d564:	ecbd 8b04 	vpop	{d8-d9}
 800d568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d56c:	4b8b      	ldr	r3, [pc, #556]	; (800d79c <_dtoa_r+0x2dc>)
 800d56e:	9301      	str	r3, [sp, #4]
 800d570:	3303      	adds	r3, #3
 800d572:	e7f3      	b.n	800d55c <_dtoa_r+0x9c>
 800d574:	2200      	movs	r2, #0
 800d576:	2300      	movs	r3, #0
 800d578:	4650      	mov	r0, sl
 800d57a:	4659      	mov	r1, fp
 800d57c:	f7f3 faa4 	bl	8000ac8 <__aeabi_dcmpeq>
 800d580:	ec4b ab19 	vmov	d9, sl, fp
 800d584:	4680      	mov	r8, r0
 800d586:	b158      	cbz	r0, 800d5a0 <_dtoa_r+0xe0>
 800d588:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d58a:	2301      	movs	r3, #1
 800d58c:	6013      	str	r3, [r2, #0]
 800d58e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d590:	2b00      	cmp	r3, #0
 800d592:	f000 856b 	beq.w	800e06c <_dtoa_r+0xbac>
 800d596:	4883      	ldr	r0, [pc, #524]	; (800d7a4 <_dtoa_r+0x2e4>)
 800d598:	6018      	str	r0, [r3, #0]
 800d59a:	1e43      	subs	r3, r0, #1
 800d59c:	9301      	str	r3, [sp, #4]
 800d59e:	e7df      	b.n	800d560 <_dtoa_r+0xa0>
 800d5a0:	ec4b ab10 	vmov	d0, sl, fp
 800d5a4:	aa10      	add	r2, sp, #64	; 0x40
 800d5a6:	a911      	add	r1, sp, #68	; 0x44
 800d5a8:	4620      	mov	r0, r4
 800d5aa:	f001 f8b9 	bl	800e720 <__d2b>
 800d5ae:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800d5b2:	ee08 0a10 	vmov	s16, r0
 800d5b6:	2d00      	cmp	r5, #0
 800d5b8:	f000 8084 	beq.w	800d6c4 <_dtoa_r+0x204>
 800d5bc:	ee19 3a90 	vmov	r3, s19
 800d5c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d5c4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d5c8:	4656      	mov	r6, sl
 800d5ca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d5ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d5d2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800d5d6:	4b74      	ldr	r3, [pc, #464]	; (800d7a8 <_dtoa_r+0x2e8>)
 800d5d8:	2200      	movs	r2, #0
 800d5da:	4630      	mov	r0, r6
 800d5dc:	4639      	mov	r1, r7
 800d5de:	f7f2 fe53 	bl	8000288 <__aeabi_dsub>
 800d5e2:	a365      	add	r3, pc, #404	; (adr r3, 800d778 <_dtoa_r+0x2b8>)
 800d5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5e8:	f7f3 f806 	bl	80005f8 <__aeabi_dmul>
 800d5ec:	a364      	add	r3, pc, #400	; (adr r3, 800d780 <_dtoa_r+0x2c0>)
 800d5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5f2:	f7f2 fe4b 	bl	800028c <__adddf3>
 800d5f6:	4606      	mov	r6, r0
 800d5f8:	4628      	mov	r0, r5
 800d5fa:	460f      	mov	r7, r1
 800d5fc:	f7f2 ff92 	bl	8000524 <__aeabi_i2d>
 800d600:	a361      	add	r3, pc, #388	; (adr r3, 800d788 <_dtoa_r+0x2c8>)
 800d602:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d606:	f7f2 fff7 	bl	80005f8 <__aeabi_dmul>
 800d60a:	4602      	mov	r2, r0
 800d60c:	460b      	mov	r3, r1
 800d60e:	4630      	mov	r0, r6
 800d610:	4639      	mov	r1, r7
 800d612:	f7f2 fe3b 	bl	800028c <__adddf3>
 800d616:	4606      	mov	r6, r0
 800d618:	460f      	mov	r7, r1
 800d61a:	f7f3 fa9d 	bl	8000b58 <__aeabi_d2iz>
 800d61e:	2200      	movs	r2, #0
 800d620:	9000      	str	r0, [sp, #0]
 800d622:	2300      	movs	r3, #0
 800d624:	4630      	mov	r0, r6
 800d626:	4639      	mov	r1, r7
 800d628:	f7f3 fa58 	bl	8000adc <__aeabi_dcmplt>
 800d62c:	b150      	cbz	r0, 800d644 <_dtoa_r+0x184>
 800d62e:	9800      	ldr	r0, [sp, #0]
 800d630:	f7f2 ff78 	bl	8000524 <__aeabi_i2d>
 800d634:	4632      	mov	r2, r6
 800d636:	463b      	mov	r3, r7
 800d638:	f7f3 fa46 	bl	8000ac8 <__aeabi_dcmpeq>
 800d63c:	b910      	cbnz	r0, 800d644 <_dtoa_r+0x184>
 800d63e:	9b00      	ldr	r3, [sp, #0]
 800d640:	3b01      	subs	r3, #1
 800d642:	9300      	str	r3, [sp, #0]
 800d644:	9b00      	ldr	r3, [sp, #0]
 800d646:	2b16      	cmp	r3, #22
 800d648:	d85a      	bhi.n	800d700 <_dtoa_r+0x240>
 800d64a:	9a00      	ldr	r2, [sp, #0]
 800d64c:	4b57      	ldr	r3, [pc, #348]	; (800d7ac <_dtoa_r+0x2ec>)
 800d64e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d652:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d656:	ec51 0b19 	vmov	r0, r1, d9
 800d65a:	f7f3 fa3f 	bl	8000adc <__aeabi_dcmplt>
 800d65e:	2800      	cmp	r0, #0
 800d660:	d050      	beq.n	800d704 <_dtoa_r+0x244>
 800d662:	9b00      	ldr	r3, [sp, #0]
 800d664:	3b01      	subs	r3, #1
 800d666:	9300      	str	r3, [sp, #0]
 800d668:	2300      	movs	r3, #0
 800d66a:	930b      	str	r3, [sp, #44]	; 0x2c
 800d66c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d66e:	1b5d      	subs	r5, r3, r5
 800d670:	1e6b      	subs	r3, r5, #1
 800d672:	9305      	str	r3, [sp, #20]
 800d674:	bf45      	ittet	mi
 800d676:	f1c5 0301 	rsbmi	r3, r5, #1
 800d67a:	9304      	strmi	r3, [sp, #16]
 800d67c:	2300      	movpl	r3, #0
 800d67e:	2300      	movmi	r3, #0
 800d680:	bf4c      	ite	mi
 800d682:	9305      	strmi	r3, [sp, #20]
 800d684:	9304      	strpl	r3, [sp, #16]
 800d686:	9b00      	ldr	r3, [sp, #0]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	db3d      	blt.n	800d708 <_dtoa_r+0x248>
 800d68c:	9b05      	ldr	r3, [sp, #20]
 800d68e:	9a00      	ldr	r2, [sp, #0]
 800d690:	920a      	str	r2, [sp, #40]	; 0x28
 800d692:	4413      	add	r3, r2
 800d694:	9305      	str	r3, [sp, #20]
 800d696:	2300      	movs	r3, #0
 800d698:	9307      	str	r3, [sp, #28]
 800d69a:	9b06      	ldr	r3, [sp, #24]
 800d69c:	2b09      	cmp	r3, #9
 800d69e:	f200 8089 	bhi.w	800d7b4 <_dtoa_r+0x2f4>
 800d6a2:	2b05      	cmp	r3, #5
 800d6a4:	bfc4      	itt	gt
 800d6a6:	3b04      	subgt	r3, #4
 800d6a8:	9306      	strgt	r3, [sp, #24]
 800d6aa:	9b06      	ldr	r3, [sp, #24]
 800d6ac:	f1a3 0302 	sub.w	r3, r3, #2
 800d6b0:	bfcc      	ite	gt
 800d6b2:	2500      	movgt	r5, #0
 800d6b4:	2501      	movle	r5, #1
 800d6b6:	2b03      	cmp	r3, #3
 800d6b8:	f200 8087 	bhi.w	800d7ca <_dtoa_r+0x30a>
 800d6bc:	e8df f003 	tbb	[pc, r3]
 800d6c0:	59383a2d 	.word	0x59383a2d
 800d6c4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d6c8:	441d      	add	r5, r3
 800d6ca:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d6ce:	2b20      	cmp	r3, #32
 800d6d0:	bfc1      	itttt	gt
 800d6d2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d6d6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d6da:	fa0b f303 	lslgt.w	r3, fp, r3
 800d6de:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d6e2:	bfda      	itte	le
 800d6e4:	f1c3 0320 	rsble	r3, r3, #32
 800d6e8:	fa06 f003 	lslle.w	r0, r6, r3
 800d6ec:	4318      	orrgt	r0, r3
 800d6ee:	f7f2 ff09 	bl	8000504 <__aeabi_ui2d>
 800d6f2:	2301      	movs	r3, #1
 800d6f4:	4606      	mov	r6, r0
 800d6f6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d6fa:	3d01      	subs	r5, #1
 800d6fc:	930e      	str	r3, [sp, #56]	; 0x38
 800d6fe:	e76a      	b.n	800d5d6 <_dtoa_r+0x116>
 800d700:	2301      	movs	r3, #1
 800d702:	e7b2      	b.n	800d66a <_dtoa_r+0x1aa>
 800d704:	900b      	str	r0, [sp, #44]	; 0x2c
 800d706:	e7b1      	b.n	800d66c <_dtoa_r+0x1ac>
 800d708:	9b04      	ldr	r3, [sp, #16]
 800d70a:	9a00      	ldr	r2, [sp, #0]
 800d70c:	1a9b      	subs	r3, r3, r2
 800d70e:	9304      	str	r3, [sp, #16]
 800d710:	4253      	negs	r3, r2
 800d712:	9307      	str	r3, [sp, #28]
 800d714:	2300      	movs	r3, #0
 800d716:	930a      	str	r3, [sp, #40]	; 0x28
 800d718:	e7bf      	b.n	800d69a <_dtoa_r+0x1da>
 800d71a:	2300      	movs	r3, #0
 800d71c:	9308      	str	r3, [sp, #32]
 800d71e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d720:	2b00      	cmp	r3, #0
 800d722:	dc55      	bgt.n	800d7d0 <_dtoa_r+0x310>
 800d724:	2301      	movs	r3, #1
 800d726:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d72a:	461a      	mov	r2, r3
 800d72c:	9209      	str	r2, [sp, #36]	; 0x24
 800d72e:	e00c      	b.n	800d74a <_dtoa_r+0x28a>
 800d730:	2301      	movs	r3, #1
 800d732:	e7f3      	b.n	800d71c <_dtoa_r+0x25c>
 800d734:	2300      	movs	r3, #0
 800d736:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d738:	9308      	str	r3, [sp, #32]
 800d73a:	9b00      	ldr	r3, [sp, #0]
 800d73c:	4413      	add	r3, r2
 800d73e:	9302      	str	r3, [sp, #8]
 800d740:	3301      	adds	r3, #1
 800d742:	2b01      	cmp	r3, #1
 800d744:	9303      	str	r3, [sp, #12]
 800d746:	bfb8      	it	lt
 800d748:	2301      	movlt	r3, #1
 800d74a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d74c:	2200      	movs	r2, #0
 800d74e:	6042      	str	r2, [r0, #4]
 800d750:	2204      	movs	r2, #4
 800d752:	f102 0614 	add.w	r6, r2, #20
 800d756:	429e      	cmp	r6, r3
 800d758:	6841      	ldr	r1, [r0, #4]
 800d75a:	d93d      	bls.n	800d7d8 <_dtoa_r+0x318>
 800d75c:	4620      	mov	r0, r4
 800d75e:	f000 fcb7 	bl	800e0d0 <_Balloc>
 800d762:	9001      	str	r0, [sp, #4]
 800d764:	2800      	cmp	r0, #0
 800d766:	d13b      	bne.n	800d7e0 <_dtoa_r+0x320>
 800d768:	4b11      	ldr	r3, [pc, #68]	; (800d7b0 <_dtoa_r+0x2f0>)
 800d76a:	4602      	mov	r2, r0
 800d76c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d770:	e6c0      	b.n	800d4f4 <_dtoa_r+0x34>
 800d772:	2301      	movs	r3, #1
 800d774:	e7df      	b.n	800d736 <_dtoa_r+0x276>
 800d776:	bf00      	nop
 800d778:	636f4361 	.word	0x636f4361
 800d77c:	3fd287a7 	.word	0x3fd287a7
 800d780:	8b60c8b3 	.word	0x8b60c8b3
 800d784:	3fc68a28 	.word	0x3fc68a28
 800d788:	509f79fb 	.word	0x509f79fb
 800d78c:	3fd34413 	.word	0x3fd34413
 800d790:	08010af5 	.word	0x08010af5
 800d794:	08010b0c 	.word	0x08010b0c
 800d798:	7ff00000 	.word	0x7ff00000
 800d79c:	08010af1 	.word	0x08010af1
 800d7a0:	08010ae8 	.word	0x08010ae8
 800d7a4:	08010ac5 	.word	0x08010ac5
 800d7a8:	3ff80000 	.word	0x3ff80000
 800d7ac:	08010c00 	.word	0x08010c00
 800d7b0:	08010b67 	.word	0x08010b67
 800d7b4:	2501      	movs	r5, #1
 800d7b6:	2300      	movs	r3, #0
 800d7b8:	9306      	str	r3, [sp, #24]
 800d7ba:	9508      	str	r5, [sp, #32]
 800d7bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d7c0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d7c4:	2200      	movs	r2, #0
 800d7c6:	2312      	movs	r3, #18
 800d7c8:	e7b0      	b.n	800d72c <_dtoa_r+0x26c>
 800d7ca:	2301      	movs	r3, #1
 800d7cc:	9308      	str	r3, [sp, #32]
 800d7ce:	e7f5      	b.n	800d7bc <_dtoa_r+0x2fc>
 800d7d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7d2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d7d6:	e7b8      	b.n	800d74a <_dtoa_r+0x28a>
 800d7d8:	3101      	adds	r1, #1
 800d7da:	6041      	str	r1, [r0, #4]
 800d7dc:	0052      	lsls	r2, r2, #1
 800d7de:	e7b8      	b.n	800d752 <_dtoa_r+0x292>
 800d7e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d7e2:	9a01      	ldr	r2, [sp, #4]
 800d7e4:	601a      	str	r2, [r3, #0]
 800d7e6:	9b03      	ldr	r3, [sp, #12]
 800d7e8:	2b0e      	cmp	r3, #14
 800d7ea:	f200 809d 	bhi.w	800d928 <_dtoa_r+0x468>
 800d7ee:	2d00      	cmp	r5, #0
 800d7f0:	f000 809a 	beq.w	800d928 <_dtoa_r+0x468>
 800d7f4:	9b00      	ldr	r3, [sp, #0]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	dd32      	ble.n	800d860 <_dtoa_r+0x3a0>
 800d7fa:	4ab7      	ldr	r2, [pc, #732]	; (800dad8 <_dtoa_r+0x618>)
 800d7fc:	f003 030f 	and.w	r3, r3, #15
 800d800:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d804:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d808:	9b00      	ldr	r3, [sp, #0]
 800d80a:	05d8      	lsls	r0, r3, #23
 800d80c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800d810:	d516      	bpl.n	800d840 <_dtoa_r+0x380>
 800d812:	4bb2      	ldr	r3, [pc, #712]	; (800dadc <_dtoa_r+0x61c>)
 800d814:	ec51 0b19 	vmov	r0, r1, d9
 800d818:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d81c:	f7f3 f816 	bl	800084c <__aeabi_ddiv>
 800d820:	f007 070f 	and.w	r7, r7, #15
 800d824:	4682      	mov	sl, r0
 800d826:	468b      	mov	fp, r1
 800d828:	2503      	movs	r5, #3
 800d82a:	4eac      	ldr	r6, [pc, #688]	; (800dadc <_dtoa_r+0x61c>)
 800d82c:	b957      	cbnz	r7, 800d844 <_dtoa_r+0x384>
 800d82e:	4642      	mov	r2, r8
 800d830:	464b      	mov	r3, r9
 800d832:	4650      	mov	r0, sl
 800d834:	4659      	mov	r1, fp
 800d836:	f7f3 f809 	bl	800084c <__aeabi_ddiv>
 800d83a:	4682      	mov	sl, r0
 800d83c:	468b      	mov	fp, r1
 800d83e:	e028      	b.n	800d892 <_dtoa_r+0x3d2>
 800d840:	2502      	movs	r5, #2
 800d842:	e7f2      	b.n	800d82a <_dtoa_r+0x36a>
 800d844:	07f9      	lsls	r1, r7, #31
 800d846:	d508      	bpl.n	800d85a <_dtoa_r+0x39a>
 800d848:	4640      	mov	r0, r8
 800d84a:	4649      	mov	r1, r9
 800d84c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d850:	f7f2 fed2 	bl	80005f8 <__aeabi_dmul>
 800d854:	3501      	adds	r5, #1
 800d856:	4680      	mov	r8, r0
 800d858:	4689      	mov	r9, r1
 800d85a:	107f      	asrs	r7, r7, #1
 800d85c:	3608      	adds	r6, #8
 800d85e:	e7e5      	b.n	800d82c <_dtoa_r+0x36c>
 800d860:	f000 809b 	beq.w	800d99a <_dtoa_r+0x4da>
 800d864:	9b00      	ldr	r3, [sp, #0]
 800d866:	4f9d      	ldr	r7, [pc, #628]	; (800dadc <_dtoa_r+0x61c>)
 800d868:	425e      	negs	r6, r3
 800d86a:	4b9b      	ldr	r3, [pc, #620]	; (800dad8 <_dtoa_r+0x618>)
 800d86c:	f006 020f 	and.w	r2, r6, #15
 800d870:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d878:	ec51 0b19 	vmov	r0, r1, d9
 800d87c:	f7f2 febc 	bl	80005f8 <__aeabi_dmul>
 800d880:	1136      	asrs	r6, r6, #4
 800d882:	4682      	mov	sl, r0
 800d884:	468b      	mov	fp, r1
 800d886:	2300      	movs	r3, #0
 800d888:	2502      	movs	r5, #2
 800d88a:	2e00      	cmp	r6, #0
 800d88c:	d17a      	bne.n	800d984 <_dtoa_r+0x4c4>
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d1d3      	bne.n	800d83a <_dtoa_r+0x37a>
 800d892:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d894:	2b00      	cmp	r3, #0
 800d896:	f000 8082 	beq.w	800d99e <_dtoa_r+0x4de>
 800d89a:	4b91      	ldr	r3, [pc, #580]	; (800dae0 <_dtoa_r+0x620>)
 800d89c:	2200      	movs	r2, #0
 800d89e:	4650      	mov	r0, sl
 800d8a0:	4659      	mov	r1, fp
 800d8a2:	f7f3 f91b 	bl	8000adc <__aeabi_dcmplt>
 800d8a6:	2800      	cmp	r0, #0
 800d8a8:	d079      	beq.n	800d99e <_dtoa_r+0x4de>
 800d8aa:	9b03      	ldr	r3, [sp, #12]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d076      	beq.n	800d99e <_dtoa_r+0x4de>
 800d8b0:	9b02      	ldr	r3, [sp, #8]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	dd36      	ble.n	800d924 <_dtoa_r+0x464>
 800d8b6:	9b00      	ldr	r3, [sp, #0]
 800d8b8:	4650      	mov	r0, sl
 800d8ba:	4659      	mov	r1, fp
 800d8bc:	1e5f      	subs	r7, r3, #1
 800d8be:	2200      	movs	r2, #0
 800d8c0:	4b88      	ldr	r3, [pc, #544]	; (800dae4 <_dtoa_r+0x624>)
 800d8c2:	f7f2 fe99 	bl	80005f8 <__aeabi_dmul>
 800d8c6:	9e02      	ldr	r6, [sp, #8]
 800d8c8:	4682      	mov	sl, r0
 800d8ca:	468b      	mov	fp, r1
 800d8cc:	3501      	adds	r5, #1
 800d8ce:	4628      	mov	r0, r5
 800d8d0:	f7f2 fe28 	bl	8000524 <__aeabi_i2d>
 800d8d4:	4652      	mov	r2, sl
 800d8d6:	465b      	mov	r3, fp
 800d8d8:	f7f2 fe8e 	bl	80005f8 <__aeabi_dmul>
 800d8dc:	4b82      	ldr	r3, [pc, #520]	; (800dae8 <_dtoa_r+0x628>)
 800d8de:	2200      	movs	r2, #0
 800d8e0:	f7f2 fcd4 	bl	800028c <__adddf3>
 800d8e4:	46d0      	mov	r8, sl
 800d8e6:	46d9      	mov	r9, fp
 800d8e8:	4682      	mov	sl, r0
 800d8ea:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800d8ee:	2e00      	cmp	r6, #0
 800d8f0:	d158      	bne.n	800d9a4 <_dtoa_r+0x4e4>
 800d8f2:	4b7e      	ldr	r3, [pc, #504]	; (800daec <_dtoa_r+0x62c>)
 800d8f4:	2200      	movs	r2, #0
 800d8f6:	4640      	mov	r0, r8
 800d8f8:	4649      	mov	r1, r9
 800d8fa:	f7f2 fcc5 	bl	8000288 <__aeabi_dsub>
 800d8fe:	4652      	mov	r2, sl
 800d900:	465b      	mov	r3, fp
 800d902:	4680      	mov	r8, r0
 800d904:	4689      	mov	r9, r1
 800d906:	f7f3 f907 	bl	8000b18 <__aeabi_dcmpgt>
 800d90a:	2800      	cmp	r0, #0
 800d90c:	f040 8295 	bne.w	800de3a <_dtoa_r+0x97a>
 800d910:	4652      	mov	r2, sl
 800d912:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d916:	4640      	mov	r0, r8
 800d918:	4649      	mov	r1, r9
 800d91a:	f7f3 f8df 	bl	8000adc <__aeabi_dcmplt>
 800d91e:	2800      	cmp	r0, #0
 800d920:	f040 8289 	bne.w	800de36 <_dtoa_r+0x976>
 800d924:	ec5b ab19 	vmov	sl, fp, d9
 800d928:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	f2c0 8148 	blt.w	800dbc0 <_dtoa_r+0x700>
 800d930:	9a00      	ldr	r2, [sp, #0]
 800d932:	2a0e      	cmp	r2, #14
 800d934:	f300 8144 	bgt.w	800dbc0 <_dtoa_r+0x700>
 800d938:	4b67      	ldr	r3, [pc, #412]	; (800dad8 <_dtoa_r+0x618>)
 800d93a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d93e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d942:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d944:	2b00      	cmp	r3, #0
 800d946:	f280 80d5 	bge.w	800daf4 <_dtoa_r+0x634>
 800d94a:	9b03      	ldr	r3, [sp, #12]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	f300 80d1 	bgt.w	800daf4 <_dtoa_r+0x634>
 800d952:	f040 826f 	bne.w	800de34 <_dtoa_r+0x974>
 800d956:	4b65      	ldr	r3, [pc, #404]	; (800daec <_dtoa_r+0x62c>)
 800d958:	2200      	movs	r2, #0
 800d95a:	4640      	mov	r0, r8
 800d95c:	4649      	mov	r1, r9
 800d95e:	f7f2 fe4b 	bl	80005f8 <__aeabi_dmul>
 800d962:	4652      	mov	r2, sl
 800d964:	465b      	mov	r3, fp
 800d966:	f7f3 f8cd 	bl	8000b04 <__aeabi_dcmpge>
 800d96a:	9e03      	ldr	r6, [sp, #12]
 800d96c:	4637      	mov	r7, r6
 800d96e:	2800      	cmp	r0, #0
 800d970:	f040 8245 	bne.w	800ddfe <_dtoa_r+0x93e>
 800d974:	9d01      	ldr	r5, [sp, #4]
 800d976:	2331      	movs	r3, #49	; 0x31
 800d978:	f805 3b01 	strb.w	r3, [r5], #1
 800d97c:	9b00      	ldr	r3, [sp, #0]
 800d97e:	3301      	adds	r3, #1
 800d980:	9300      	str	r3, [sp, #0]
 800d982:	e240      	b.n	800de06 <_dtoa_r+0x946>
 800d984:	07f2      	lsls	r2, r6, #31
 800d986:	d505      	bpl.n	800d994 <_dtoa_r+0x4d4>
 800d988:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d98c:	f7f2 fe34 	bl	80005f8 <__aeabi_dmul>
 800d990:	3501      	adds	r5, #1
 800d992:	2301      	movs	r3, #1
 800d994:	1076      	asrs	r6, r6, #1
 800d996:	3708      	adds	r7, #8
 800d998:	e777      	b.n	800d88a <_dtoa_r+0x3ca>
 800d99a:	2502      	movs	r5, #2
 800d99c:	e779      	b.n	800d892 <_dtoa_r+0x3d2>
 800d99e:	9f00      	ldr	r7, [sp, #0]
 800d9a0:	9e03      	ldr	r6, [sp, #12]
 800d9a2:	e794      	b.n	800d8ce <_dtoa_r+0x40e>
 800d9a4:	9901      	ldr	r1, [sp, #4]
 800d9a6:	4b4c      	ldr	r3, [pc, #304]	; (800dad8 <_dtoa_r+0x618>)
 800d9a8:	4431      	add	r1, r6
 800d9aa:	910d      	str	r1, [sp, #52]	; 0x34
 800d9ac:	9908      	ldr	r1, [sp, #32]
 800d9ae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d9b2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d9b6:	2900      	cmp	r1, #0
 800d9b8:	d043      	beq.n	800da42 <_dtoa_r+0x582>
 800d9ba:	494d      	ldr	r1, [pc, #308]	; (800daf0 <_dtoa_r+0x630>)
 800d9bc:	2000      	movs	r0, #0
 800d9be:	f7f2 ff45 	bl	800084c <__aeabi_ddiv>
 800d9c2:	4652      	mov	r2, sl
 800d9c4:	465b      	mov	r3, fp
 800d9c6:	f7f2 fc5f 	bl	8000288 <__aeabi_dsub>
 800d9ca:	9d01      	ldr	r5, [sp, #4]
 800d9cc:	4682      	mov	sl, r0
 800d9ce:	468b      	mov	fp, r1
 800d9d0:	4649      	mov	r1, r9
 800d9d2:	4640      	mov	r0, r8
 800d9d4:	f7f3 f8c0 	bl	8000b58 <__aeabi_d2iz>
 800d9d8:	4606      	mov	r6, r0
 800d9da:	f7f2 fda3 	bl	8000524 <__aeabi_i2d>
 800d9de:	4602      	mov	r2, r0
 800d9e0:	460b      	mov	r3, r1
 800d9e2:	4640      	mov	r0, r8
 800d9e4:	4649      	mov	r1, r9
 800d9e6:	f7f2 fc4f 	bl	8000288 <__aeabi_dsub>
 800d9ea:	3630      	adds	r6, #48	; 0x30
 800d9ec:	f805 6b01 	strb.w	r6, [r5], #1
 800d9f0:	4652      	mov	r2, sl
 800d9f2:	465b      	mov	r3, fp
 800d9f4:	4680      	mov	r8, r0
 800d9f6:	4689      	mov	r9, r1
 800d9f8:	f7f3 f870 	bl	8000adc <__aeabi_dcmplt>
 800d9fc:	2800      	cmp	r0, #0
 800d9fe:	d163      	bne.n	800dac8 <_dtoa_r+0x608>
 800da00:	4642      	mov	r2, r8
 800da02:	464b      	mov	r3, r9
 800da04:	4936      	ldr	r1, [pc, #216]	; (800dae0 <_dtoa_r+0x620>)
 800da06:	2000      	movs	r0, #0
 800da08:	f7f2 fc3e 	bl	8000288 <__aeabi_dsub>
 800da0c:	4652      	mov	r2, sl
 800da0e:	465b      	mov	r3, fp
 800da10:	f7f3 f864 	bl	8000adc <__aeabi_dcmplt>
 800da14:	2800      	cmp	r0, #0
 800da16:	f040 80b5 	bne.w	800db84 <_dtoa_r+0x6c4>
 800da1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800da1c:	429d      	cmp	r5, r3
 800da1e:	d081      	beq.n	800d924 <_dtoa_r+0x464>
 800da20:	4b30      	ldr	r3, [pc, #192]	; (800dae4 <_dtoa_r+0x624>)
 800da22:	2200      	movs	r2, #0
 800da24:	4650      	mov	r0, sl
 800da26:	4659      	mov	r1, fp
 800da28:	f7f2 fde6 	bl	80005f8 <__aeabi_dmul>
 800da2c:	4b2d      	ldr	r3, [pc, #180]	; (800dae4 <_dtoa_r+0x624>)
 800da2e:	4682      	mov	sl, r0
 800da30:	468b      	mov	fp, r1
 800da32:	4640      	mov	r0, r8
 800da34:	4649      	mov	r1, r9
 800da36:	2200      	movs	r2, #0
 800da38:	f7f2 fdde 	bl	80005f8 <__aeabi_dmul>
 800da3c:	4680      	mov	r8, r0
 800da3e:	4689      	mov	r9, r1
 800da40:	e7c6      	b.n	800d9d0 <_dtoa_r+0x510>
 800da42:	4650      	mov	r0, sl
 800da44:	4659      	mov	r1, fp
 800da46:	f7f2 fdd7 	bl	80005f8 <__aeabi_dmul>
 800da4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800da4c:	9d01      	ldr	r5, [sp, #4]
 800da4e:	930f      	str	r3, [sp, #60]	; 0x3c
 800da50:	4682      	mov	sl, r0
 800da52:	468b      	mov	fp, r1
 800da54:	4649      	mov	r1, r9
 800da56:	4640      	mov	r0, r8
 800da58:	f7f3 f87e 	bl	8000b58 <__aeabi_d2iz>
 800da5c:	4606      	mov	r6, r0
 800da5e:	f7f2 fd61 	bl	8000524 <__aeabi_i2d>
 800da62:	3630      	adds	r6, #48	; 0x30
 800da64:	4602      	mov	r2, r0
 800da66:	460b      	mov	r3, r1
 800da68:	4640      	mov	r0, r8
 800da6a:	4649      	mov	r1, r9
 800da6c:	f7f2 fc0c 	bl	8000288 <__aeabi_dsub>
 800da70:	f805 6b01 	strb.w	r6, [r5], #1
 800da74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800da76:	429d      	cmp	r5, r3
 800da78:	4680      	mov	r8, r0
 800da7a:	4689      	mov	r9, r1
 800da7c:	f04f 0200 	mov.w	r2, #0
 800da80:	d124      	bne.n	800dacc <_dtoa_r+0x60c>
 800da82:	4b1b      	ldr	r3, [pc, #108]	; (800daf0 <_dtoa_r+0x630>)
 800da84:	4650      	mov	r0, sl
 800da86:	4659      	mov	r1, fp
 800da88:	f7f2 fc00 	bl	800028c <__adddf3>
 800da8c:	4602      	mov	r2, r0
 800da8e:	460b      	mov	r3, r1
 800da90:	4640      	mov	r0, r8
 800da92:	4649      	mov	r1, r9
 800da94:	f7f3 f840 	bl	8000b18 <__aeabi_dcmpgt>
 800da98:	2800      	cmp	r0, #0
 800da9a:	d173      	bne.n	800db84 <_dtoa_r+0x6c4>
 800da9c:	4652      	mov	r2, sl
 800da9e:	465b      	mov	r3, fp
 800daa0:	4913      	ldr	r1, [pc, #76]	; (800daf0 <_dtoa_r+0x630>)
 800daa2:	2000      	movs	r0, #0
 800daa4:	f7f2 fbf0 	bl	8000288 <__aeabi_dsub>
 800daa8:	4602      	mov	r2, r0
 800daaa:	460b      	mov	r3, r1
 800daac:	4640      	mov	r0, r8
 800daae:	4649      	mov	r1, r9
 800dab0:	f7f3 f814 	bl	8000adc <__aeabi_dcmplt>
 800dab4:	2800      	cmp	r0, #0
 800dab6:	f43f af35 	beq.w	800d924 <_dtoa_r+0x464>
 800daba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800dabc:	1e6b      	subs	r3, r5, #1
 800dabe:	930f      	str	r3, [sp, #60]	; 0x3c
 800dac0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dac4:	2b30      	cmp	r3, #48	; 0x30
 800dac6:	d0f8      	beq.n	800daba <_dtoa_r+0x5fa>
 800dac8:	9700      	str	r7, [sp, #0]
 800daca:	e049      	b.n	800db60 <_dtoa_r+0x6a0>
 800dacc:	4b05      	ldr	r3, [pc, #20]	; (800dae4 <_dtoa_r+0x624>)
 800dace:	f7f2 fd93 	bl	80005f8 <__aeabi_dmul>
 800dad2:	4680      	mov	r8, r0
 800dad4:	4689      	mov	r9, r1
 800dad6:	e7bd      	b.n	800da54 <_dtoa_r+0x594>
 800dad8:	08010c00 	.word	0x08010c00
 800dadc:	08010bd8 	.word	0x08010bd8
 800dae0:	3ff00000 	.word	0x3ff00000
 800dae4:	40240000 	.word	0x40240000
 800dae8:	401c0000 	.word	0x401c0000
 800daec:	40140000 	.word	0x40140000
 800daf0:	3fe00000 	.word	0x3fe00000
 800daf4:	9d01      	ldr	r5, [sp, #4]
 800daf6:	4656      	mov	r6, sl
 800daf8:	465f      	mov	r7, fp
 800dafa:	4642      	mov	r2, r8
 800dafc:	464b      	mov	r3, r9
 800dafe:	4630      	mov	r0, r6
 800db00:	4639      	mov	r1, r7
 800db02:	f7f2 fea3 	bl	800084c <__aeabi_ddiv>
 800db06:	f7f3 f827 	bl	8000b58 <__aeabi_d2iz>
 800db0a:	4682      	mov	sl, r0
 800db0c:	f7f2 fd0a 	bl	8000524 <__aeabi_i2d>
 800db10:	4642      	mov	r2, r8
 800db12:	464b      	mov	r3, r9
 800db14:	f7f2 fd70 	bl	80005f8 <__aeabi_dmul>
 800db18:	4602      	mov	r2, r0
 800db1a:	460b      	mov	r3, r1
 800db1c:	4630      	mov	r0, r6
 800db1e:	4639      	mov	r1, r7
 800db20:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800db24:	f7f2 fbb0 	bl	8000288 <__aeabi_dsub>
 800db28:	f805 6b01 	strb.w	r6, [r5], #1
 800db2c:	9e01      	ldr	r6, [sp, #4]
 800db2e:	9f03      	ldr	r7, [sp, #12]
 800db30:	1bae      	subs	r6, r5, r6
 800db32:	42b7      	cmp	r7, r6
 800db34:	4602      	mov	r2, r0
 800db36:	460b      	mov	r3, r1
 800db38:	d135      	bne.n	800dba6 <_dtoa_r+0x6e6>
 800db3a:	f7f2 fba7 	bl	800028c <__adddf3>
 800db3e:	4642      	mov	r2, r8
 800db40:	464b      	mov	r3, r9
 800db42:	4606      	mov	r6, r0
 800db44:	460f      	mov	r7, r1
 800db46:	f7f2 ffe7 	bl	8000b18 <__aeabi_dcmpgt>
 800db4a:	b9d0      	cbnz	r0, 800db82 <_dtoa_r+0x6c2>
 800db4c:	4642      	mov	r2, r8
 800db4e:	464b      	mov	r3, r9
 800db50:	4630      	mov	r0, r6
 800db52:	4639      	mov	r1, r7
 800db54:	f7f2 ffb8 	bl	8000ac8 <__aeabi_dcmpeq>
 800db58:	b110      	cbz	r0, 800db60 <_dtoa_r+0x6a0>
 800db5a:	f01a 0f01 	tst.w	sl, #1
 800db5e:	d110      	bne.n	800db82 <_dtoa_r+0x6c2>
 800db60:	4620      	mov	r0, r4
 800db62:	ee18 1a10 	vmov	r1, s16
 800db66:	f000 faf3 	bl	800e150 <_Bfree>
 800db6a:	2300      	movs	r3, #0
 800db6c:	9800      	ldr	r0, [sp, #0]
 800db6e:	702b      	strb	r3, [r5, #0]
 800db70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800db72:	3001      	adds	r0, #1
 800db74:	6018      	str	r0, [r3, #0]
 800db76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800db78:	2b00      	cmp	r3, #0
 800db7a:	f43f acf1 	beq.w	800d560 <_dtoa_r+0xa0>
 800db7e:	601d      	str	r5, [r3, #0]
 800db80:	e4ee      	b.n	800d560 <_dtoa_r+0xa0>
 800db82:	9f00      	ldr	r7, [sp, #0]
 800db84:	462b      	mov	r3, r5
 800db86:	461d      	mov	r5, r3
 800db88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800db8c:	2a39      	cmp	r2, #57	; 0x39
 800db8e:	d106      	bne.n	800db9e <_dtoa_r+0x6de>
 800db90:	9a01      	ldr	r2, [sp, #4]
 800db92:	429a      	cmp	r2, r3
 800db94:	d1f7      	bne.n	800db86 <_dtoa_r+0x6c6>
 800db96:	9901      	ldr	r1, [sp, #4]
 800db98:	2230      	movs	r2, #48	; 0x30
 800db9a:	3701      	adds	r7, #1
 800db9c:	700a      	strb	r2, [r1, #0]
 800db9e:	781a      	ldrb	r2, [r3, #0]
 800dba0:	3201      	adds	r2, #1
 800dba2:	701a      	strb	r2, [r3, #0]
 800dba4:	e790      	b.n	800dac8 <_dtoa_r+0x608>
 800dba6:	4ba6      	ldr	r3, [pc, #664]	; (800de40 <_dtoa_r+0x980>)
 800dba8:	2200      	movs	r2, #0
 800dbaa:	f7f2 fd25 	bl	80005f8 <__aeabi_dmul>
 800dbae:	2200      	movs	r2, #0
 800dbb0:	2300      	movs	r3, #0
 800dbb2:	4606      	mov	r6, r0
 800dbb4:	460f      	mov	r7, r1
 800dbb6:	f7f2 ff87 	bl	8000ac8 <__aeabi_dcmpeq>
 800dbba:	2800      	cmp	r0, #0
 800dbbc:	d09d      	beq.n	800dafa <_dtoa_r+0x63a>
 800dbbe:	e7cf      	b.n	800db60 <_dtoa_r+0x6a0>
 800dbc0:	9a08      	ldr	r2, [sp, #32]
 800dbc2:	2a00      	cmp	r2, #0
 800dbc4:	f000 80d7 	beq.w	800dd76 <_dtoa_r+0x8b6>
 800dbc8:	9a06      	ldr	r2, [sp, #24]
 800dbca:	2a01      	cmp	r2, #1
 800dbcc:	f300 80ba 	bgt.w	800dd44 <_dtoa_r+0x884>
 800dbd0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dbd2:	2a00      	cmp	r2, #0
 800dbd4:	f000 80b2 	beq.w	800dd3c <_dtoa_r+0x87c>
 800dbd8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800dbdc:	9e07      	ldr	r6, [sp, #28]
 800dbde:	9d04      	ldr	r5, [sp, #16]
 800dbe0:	9a04      	ldr	r2, [sp, #16]
 800dbe2:	441a      	add	r2, r3
 800dbe4:	9204      	str	r2, [sp, #16]
 800dbe6:	9a05      	ldr	r2, [sp, #20]
 800dbe8:	2101      	movs	r1, #1
 800dbea:	441a      	add	r2, r3
 800dbec:	4620      	mov	r0, r4
 800dbee:	9205      	str	r2, [sp, #20]
 800dbf0:	f000 fb66 	bl	800e2c0 <__i2b>
 800dbf4:	4607      	mov	r7, r0
 800dbf6:	2d00      	cmp	r5, #0
 800dbf8:	dd0c      	ble.n	800dc14 <_dtoa_r+0x754>
 800dbfa:	9b05      	ldr	r3, [sp, #20]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	dd09      	ble.n	800dc14 <_dtoa_r+0x754>
 800dc00:	42ab      	cmp	r3, r5
 800dc02:	9a04      	ldr	r2, [sp, #16]
 800dc04:	bfa8      	it	ge
 800dc06:	462b      	movge	r3, r5
 800dc08:	1ad2      	subs	r2, r2, r3
 800dc0a:	9204      	str	r2, [sp, #16]
 800dc0c:	9a05      	ldr	r2, [sp, #20]
 800dc0e:	1aed      	subs	r5, r5, r3
 800dc10:	1ad3      	subs	r3, r2, r3
 800dc12:	9305      	str	r3, [sp, #20]
 800dc14:	9b07      	ldr	r3, [sp, #28]
 800dc16:	b31b      	cbz	r3, 800dc60 <_dtoa_r+0x7a0>
 800dc18:	9b08      	ldr	r3, [sp, #32]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	f000 80af 	beq.w	800dd7e <_dtoa_r+0x8be>
 800dc20:	2e00      	cmp	r6, #0
 800dc22:	dd13      	ble.n	800dc4c <_dtoa_r+0x78c>
 800dc24:	4639      	mov	r1, r7
 800dc26:	4632      	mov	r2, r6
 800dc28:	4620      	mov	r0, r4
 800dc2a:	f000 fc09 	bl	800e440 <__pow5mult>
 800dc2e:	ee18 2a10 	vmov	r2, s16
 800dc32:	4601      	mov	r1, r0
 800dc34:	4607      	mov	r7, r0
 800dc36:	4620      	mov	r0, r4
 800dc38:	f000 fb58 	bl	800e2ec <__multiply>
 800dc3c:	ee18 1a10 	vmov	r1, s16
 800dc40:	4680      	mov	r8, r0
 800dc42:	4620      	mov	r0, r4
 800dc44:	f000 fa84 	bl	800e150 <_Bfree>
 800dc48:	ee08 8a10 	vmov	s16, r8
 800dc4c:	9b07      	ldr	r3, [sp, #28]
 800dc4e:	1b9a      	subs	r2, r3, r6
 800dc50:	d006      	beq.n	800dc60 <_dtoa_r+0x7a0>
 800dc52:	ee18 1a10 	vmov	r1, s16
 800dc56:	4620      	mov	r0, r4
 800dc58:	f000 fbf2 	bl	800e440 <__pow5mult>
 800dc5c:	ee08 0a10 	vmov	s16, r0
 800dc60:	2101      	movs	r1, #1
 800dc62:	4620      	mov	r0, r4
 800dc64:	f000 fb2c 	bl	800e2c0 <__i2b>
 800dc68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	4606      	mov	r6, r0
 800dc6e:	f340 8088 	ble.w	800dd82 <_dtoa_r+0x8c2>
 800dc72:	461a      	mov	r2, r3
 800dc74:	4601      	mov	r1, r0
 800dc76:	4620      	mov	r0, r4
 800dc78:	f000 fbe2 	bl	800e440 <__pow5mult>
 800dc7c:	9b06      	ldr	r3, [sp, #24]
 800dc7e:	2b01      	cmp	r3, #1
 800dc80:	4606      	mov	r6, r0
 800dc82:	f340 8081 	ble.w	800dd88 <_dtoa_r+0x8c8>
 800dc86:	f04f 0800 	mov.w	r8, #0
 800dc8a:	6933      	ldr	r3, [r6, #16]
 800dc8c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800dc90:	6918      	ldr	r0, [r3, #16]
 800dc92:	f000 fac5 	bl	800e220 <__hi0bits>
 800dc96:	f1c0 0020 	rsb	r0, r0, #32
 800dc9a:	9b05      	ldr	r3, [sp, #20]
 800dc9c:	4418      	add	r0, r3
 800dc9e:	f010 001f 	ands.w	r0, r0, #31
 800dca2:	f000 8092 	beq.w	800ddca <_dtoa_r+0x90a>
 800dca6:	f1c0 0320 	rsb	r3, r0, #32
 800dcaa:	2b04      	cmp	r3, #4
 800dcac:	f340 808a 	ble.w	800ddc4 <_dtoa_r+0x904>
 800dcb0:	f1c0 001c 	rsb	r0, r0, #28
 800dcb4:	9b04      	ldr	r3, [sp, #16]
 800dcb6:	4403      	add	r3, r0
 800dcb8:	9304      	str	r3, [sp, #16]
 800dcba:	9b05      	ldr	r3, [sp, #20]
 800dcbc:	4403      	add	r3, r0
 800dcbe:	4405      	add	r5, r0
 800dcc0:	9305      	str	r3, [sp, #20]
 800dcc2:	9b04      	ldr	r3, [sp, #16]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	dd07      	ble.n	800dcd8 <_dtoa_r+0x818>
 800dcc8:	ee18 1a10 	vmov	r1, s16
 800dccc:	461a      	mov	r2, r3
 800dcce:	4620      	mov	r0, r4
 800dcd0:	f000 fc10 	bl	800e4f4 <__lshift>
 800dcd4:	ee08 0a10 	vmov	s16, r0
 800dcd8:	9b05      	ldr	r3, [sp, #20]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	dd05      	ble.n	800dcea <_dtoa_r+0x82a>
 800dcde:	4631      	mov	r1, r6
 800dce0:	461a      	mov	r2, r3
 800dce2:	4620      	mov	r0, r4
 800dce4:	f000 fc06 	bl	800e4f4 <__lshift>
 800dce8:	4606      	mov	r6, r0
 800dcea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d06e      	beq.n	800ddce <_dtoa_r+0x90e>
 800dcf0:	ee18 0a10 	vmov	r0, s16
 800dcf4:	4631      	mov	r1, r6
 800dcf6:	f000 fc6d 	bl	800e5d4 <__mcmp>
 800dcfa:	2800      	cmp	r0, #0
 800dcfc:	da67      	bge.n	800ddce <_dtoa_r+0x90e>
 800dcfe:	9b00      	ldr	r3, [sp, #0]
 800dd00:	3b01      	subs	r3, #1
 800dd02:	ee18 1a10 	vmov	r1, s16
 800dd06:	9300      	str	r3, [sp, #0]
 800dd08:	220a      	movs	r2, #10
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	4620      	mov	r0, r4
 800dd0e:	f000 fa41 	bl	800e194 <__multadd>
 800dd12:	9b08      	ldr	r3, [sp, #32]
 800dd14:	ee08 0a10 	vmov	s16, r0
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	f000 81b1 	beq.w	800e080 <_dtoa_r+0xbc0>
 800dd1e:	2300      	movs	r3, #0
 800dd20:	4639      	mov	r1, r7
 800dd22:	220a      	movs	r2, #10
 800dd24:	4620      	mov	r0, r4
 800dd26:	f000 fa35 	bl	800e194 <__multadd>
 800dd2a:	9b02      	ldr	r3, [sp, #8]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	4607      	mov	r7, r0
 800dd30:	f300 808e 	bgt.w	800de50 <_dtoa_r+0x990>
 800dd34:	9b06      	ldr	r3, [sp, #24]
 800dd36:	2b02      	cmp	r3, #2
 800dd38:	dc51      	bgt.n	800ddde <_dtoa_r+0x91e>
 800dd3a:	e089      	b.n	800de50 <_dtoa_r+0x990>
 800dd3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dd3e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800dd42:	e74b      	b.n	800dbdc <_dtoa_r+0x71c>
 800dd44:	9b03      	ldr	r3, [sp, #12]
 800dd46:	1e5e      	subs	r6, r3, #1
 800dd48:	9b07      	ldr	r3, [sp, #28]
 800dd4a:	42b3      	cmp	r3, r6
 800dd4c:	bfbf      	itttt	lt
 800dd4e:	9b07      	ldrlt	r3, [sp, #28]
 800dd50:	9607      	strlt	r6, [sp, #28]
 800dd52:	1af2      	sublt	r2, r6, r3
 800dd54:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800dd56:	bfb6      	itet	lt
 800dd58:	189b      	addlt	r3, r3, r2
 800dd5a:	1b9e      	subge	r6, r3, r6
 800dd5c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800dd5e:	9b03      	ldr	r3, [sp, #12]
 800dd60:	bfb8      	it	lt
 800dd62:	2600      	movlt	r6, #0
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	bfb7      	itett	lt
 800dd68:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800dd6c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800dd70:	1a9d      	sublt	r5, r3, r2
 800dd72:	2300      	movlt	r3, #0
 800dd74:	e734      	b.n	800dbe0 <_dtoa_r+0x720>
 800dd76:	9e07      	ldr	r6, [sp, #28]
 800dd78:	9d04      	ldr	r5, [sp, #16]
 800dd7a:	9f08      	ldr	r7, [sp, #32]
 800dd7c:	e73b      	b.n	800dbf6 <_dtoa_r+0x736>
 800dd7e:	9a07      	ldr	r2, [sp, #28]
 800dd80:	e767      	b.n	800dc52 <_dtoa_r+0x792>
 800dd82:	9b06      	ldr	r3, [sp, #24]
 800dd84:	2b01      	cmp	r3, #1
 800dd86:	dc18      	bgt.n	800ddba <_dtoa_r+0x8fa>
 800dd88:	f1ba 0f00 	cmp.w	sl, #0
 800dd8c:	d115      	bne.n	800ddba <_dtoa_r+0x8fa>
 800dd8e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dd92:	b993      	cbnz	r3, 800ddba <_dtoa_r+0x8fa>
 800dd94:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dd98:	0d1b      	lsrs	r3, r3, #20
 800dd9a:	051b      	lsls	r3, r3, #20
 800dd9c:	b183      	cbz	r3, 800ddc0 <_dtoa_r+0x900>
 800dd9e:	9b04      	ldr	r3, [sp, #16]
 800dda0:	3301      	adds	r3, #1
 800dda2:	9304      	str	r3, [sp, #16]
 800dda4:	9b05      	ldr	r3, [sp, #20]
 800dda6:	3301      	adds	r3, #1
 800dda8:	9305      	str	r3, [sp, #20]
 800ddaa:	f04f 0801 	mov.w	r8, #1
 800ddae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	f47f af6a 	bne.w	800dc8a <_dtoa_r+0x7ca>
 800ddb6:	2001      	movs	r0, #1
 800ddb8:	e76f      	b.n	800dc9a <_dtoa_r+0x7da>
 800ddba:	f04f 0800 	mov.w	r8, #0
 800ddbe:	e7f6      	b.n	800ddae <_dtoa_r+0x8ee>
 800ddc0:	4698      	mov	r8, r3
 800ddc2:	e7f4      	b.n	800ddae <_dtoa_r+0x8ee>
 800ddc4:	f43f af7d 	beq.w	800dcc2 <_dtoa_r+0x802>
 800ddc8:	4618      	mov	r0, r3
 800ddca:	301c      	adds	r0, #28
 800ddcc:	e772      	b.n	800dcb4 <_dtoa_r+0x7f4>
 800ddce:	9b03      	ldr	r3, [sp, #12]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	dc37      	bgt.n	800de44 <_dtoa_r+0x984>
 800ddd4:	9b06      	ldr	r3, [sp, #24]
 800ddd6:	2b02      	cmp	r3, #2
 800ddd8:	dd34      	ble.n	800de44 <_dtoa_r+0x984>
 800ddda:	9b03      	ldr	r3, [sp, #12]
 800dddc:	9302      	str	r3, [sp, #8]
 800ddde:	9b02      	ldr	r3, [sp, #8]
 800dde0:	b96b      	cbnz	r3, 800ddfe <_dtoa_r+0x93e>
 800dde2:	4631      	mov	r1, r6
 800dde4:	2205      	movs	r2, #5
 800dde6:	4620      	mov	r0, r4
 800dde8:	f000 f9d4 	bl	800e194 <__multadd>
 800ddec:	4601      	mov	r1, r0
 800ddee:	4606      	mov	r6, r0
 800ddf0:	ee18 0a10 	vmov	r0, s16
 800ddf4:	f000 fbee 	bl	800e5d4 <__mcmp>
 800ddf8:	2800      	cmp	r0, #0
 800ddfa:	f73f adbb 	bgt.w	800d974 <_dtoa_r+0x4b4>
 800ddfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de00:	9d01      	ldr	r5, [sp, #4]
 800de02:	43db      	mvns	r3, r3
 800de04:	9300      	str	r3, [sp, #0]
 800de06:	f04f 0800 	mov.w	r8, #0
 800de0a:	4631      	mov	r1, r6
 800de0c:	4620      	mov	r0, r4
 800de0e:	f000 f99f 	bl	800e150 <_Bfree>
 800de12:	2f00      	cmp	r7, #0
 800de14:	f43f aea4 	beq.w	800db60 <_dtoa_r+0x6a0>
 800de18:	f1b8 0f00 	cmp.w	r8, #0
 800de1c:	d005      	beq.n	800de2a <_dtoa_r+0x96a>
 800de1e:	45b8      	cmp	r8, r7
 800de20:	d003      	beq.n	800de2a <_dtoa_r+0x96a>
 800de22:	4641      	mov	r1, r8
 800de24:	4620      	mov	r0, r4
 800de26:	f000 f993 	bl	800e150 <_Bfree>
 800de2a:	4639      	mov	r1, r7
 800de2c:	4620      	mov	r0, r4
 800de2e:	f000 f98f 	bl	800e150 <_Bfree>
 800de32:	e695      	b.n	800db60 <_dtoa_r+0x6a0>
 800de34:	2600      	movs	r6, #0
 800de36:	4637      	mov	r7, r6
 800de38:	e7e1      	b.n	800ddfe <_dtoa_r+0x93e>
 800de3a:	9700      	str	r7, [sp, #0]
 800de3c:	4637      	mov	r7, r6
 800de3e:	e599      	b.n	800d974 <_dtoa_r+0x4b4>
 800de40:	40240000 	.word	0x40240000
 800de44:	9b08      	ldr	r3, [sp, #32]
 800de46:	2b00      	cmp	r3, #0
 800de48:	f000 80ca 	beq.w	800dfe0 <_dtoa_r+0xb20>
 800de4c:	9b03      	ldr	r3, [sp, #12]
 800de4e:	9302      	str	r3, [sp, #8]
 800de50:	2d00      	cmp	r5, #0
 800de52:	dd05      	ble.n	800de60 <_dtoa_r+0x9a0>
 800de54:	4639      	mov	r1, r7
 800de56:	462a      	mov	r2, r5
 800de58:	4620      	mov	r0, r4
 800de5a:	f000 fb4b 	bl	800e4f4 <__lshift>
 800de5e:	4607      	mov	r7, r0
 800de60:	f1b8 0f00 	cmp.w	r8, #0
 800de64:	d05b      	beq.n	800df1e <_dtoa_r+0xa5e>
 800de66:	6879      	ldr	r1, [r7, #4]
 800de68:	4620      	mov	r0, r4
 800de6a:	f000 f931 	bl	800e0d0 <_Balloc>
 800de6e:	4605      	mov	r5, r0
 800de70:	b928      	cbnz	r0, 800de7e <_dtoa_r+0x9be>
 800de72:	4b87      	ldr	r3, [pc, #540]	; (800e090 <_dtoa_r+0xbd0>)
 800de74:	4602      	mov	r2, r0
 800de76:	f240 21ea 	movw	r1, #746	; 0x2ea
 800de7a:	f7ff bb3b 	b.w	800d4f4 <_dtoa_r+0x34>
 800de7e:	693a      	ldr	r2, [r7, #16]
 800de80:	3202      	adds	r2, #2
 800de82:	0092      	lsls	r2, r2, #2
 800de84:	f107 010c 	add.w	r1, r7, #12
 800de88:	300c      	adds	r0, #12
 800de8a:	f000 f913 	bl	800e0b4 <memcpy>
 800de8e:	2201      	movs	r2, #1
 800de90:	4629      	mov	r1, r5
 800de92:	4620      	mov	r0, r4
 800de94:	f000 fb2e 	bl	800e4f4 <__lshift>
 800de98:	9b01      	ldr	r3, [sp, #4]
 800de9a:	f103 0901 	add.w	r9, r3, #1
 800de9e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800dea2:	4413      	add	r3, r2
 800dea4:	9305      	str	r3, [sp, #20]
 800dea6:	f00a 0301 	and.w	r3, sl, #1
 800deaa:	46b8      	mov	r8, r7
 800deac:	9304      	str	r3, [sp, #16]
 800deae:	4607      	mov	r7, r0
 800deb0:	4631      	mov	r1, r6
 800deb2:	ee18 0a10 	vmov	r0, s16
 800deb6:	f7ff fa77 	bl	800d3a8 <quorem>
 800deba:	4641      	mov	r1, r8
 800debc:	9002      	str	r0, [sp, #8]
 800debe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800dec2:	ee18 0a10 	vmov	r0, s16
 800dec6:	f000 fb85 	bl	800e5d4 <__mcmp>
 800deca:	463a      	mov	r2, r7
 800decc:	9003      	str	r0, [sp, #12]
 800dece:	4631      	mov	r1, r6
 800ded0:	4620      	mov	r0, r4
 800ded2:	f000 fb9b 	bl	800e60c <__mdiff>
 800ded6:	68c2      	ldr	r2, [r0, #12]
 800ded8:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800dedc:	4605      	mov	r5, r0
 800dede:	bb02      	cbnz	r2, 800df22 <_dtoa_r+0xa62>
 800dee0:	4601      	mov	r1, r0
 800dee2:	ee18 0a10 	vmov	r0, s16
 800dee6:	f000 fb75 	bl	800e5d4 <__mcmp>
 800deea:	4602      	mov	r2, r0
 800deec:	4629      	mov	r1, r5
 800deee:	4620      	mov	r0, r4
 800def0:	9207      	str	r2, [sp, #28]
 800def2:	f000 f92d 	bl	800e150 <_Bfree>
 800def6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800defa:	ea43 0102 	orr.w	r1, r3, r2
 800defe:	9b04      	ldr	r3, [sp, #16]
 800df00:	430b      	orrs	r3, r1
 800df02:	464d      	mov	r5, r9
 800df04:	d10f      	bne.n	800df26 <_dtoa_r+0xa66>
 800df06:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800df0a:	d02a      	beq.n	800df62 <_dtoa_r+0xaa2>
 800df0c:	9b03      	ldr	r3, [sp, #12]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	dd02      	ble.n	800df18 <_dtoa_r+0xa58>
 800df12:	9b02      	ldr	r3, [sp, #8]
 800df14:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800df18:	f88b a000 	strb.w	sl, [fp]
 800df1c:	e775      	b.n	800de0a <_dtoa_r+0x94a>
 800df1e:	4638      	mov	r0, r7
 800df20:	e7ba      	b.n	800de98 <_dtoa_r+0x9d8>
 800df22:	2201      	movs	r2, #1
 800df24:	e7e2      	b.n	800deec <_dtoa_r+0xa2c>
 800df26:	9b03      	ldr	r3, [sp, #12]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	db04      	blt.n	800df36 <_dtoa_r+0xa76>
 800df2c:	9906      	ldr	r1, [sp, #24]
 800df2e:	430b      	orrs	r3, r1
 800df30:	9904      	ldr	r1, [sp, #16]
 800df32:	430b      	orrs	r3, r1
 800df34:	d122      	bne.n	800df7c <_dtoa_r+0xabc>
 800df36:	2a00      	cmp	r2, #0
 800df38:	ddee      	ble.n	800df18 <_dtoa_r+0xa58>
 800df3a:	ee18 1a10 	vmov	r1, s16
 800df3e:	2201      	movs	r2, #1
 800df40:	4620      	mov	r0, r4
 800df42:	f000 fad7 	bl	800e4f4 <__lshift>
 800df46:	4631      	mov	r1, r6
 800df48:	ee08 0a10 	vmov	s16, r0
 800df4c:	f000 fb42 	bl	800e5d4 <__mcmp>
 800df50:	2800      	cmp	r0, #0
 800df52:	dc03      	bgt.n	800df5c <_dtoa_r+0xa9c>
 800df54:	d1e0      	bne.n	800df18 <_dtoa_r+0xa58>
 800df56:	f01a 0f01 	tst.w	sl, #1
 800df5a:	d0dd      	beq.n	800df18 <_dtoa_r+0xa58>
 800df5c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800df60:	d1d7      	bne.n	800df12 <_dtoa_r+0xa52>
 800df62:	2339      	movs	r3, #57	; 0x39
 800df64:	f88b 3000 	strb.w	r3, [fp]
 800df68:	462b      	mov	r3, r5
 800df6a:	461d      	mov	r5, r3
 800df6c:	3b01      	subs	r3, #1
 800df6e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800df72:	2a39      	cmp	r2, #57	; 0x39
 800df74:	d071      	beq.n	800e05a <_dtoa_r+0xb9a>
 800df76:	3201      	adds	r2, #1
 800df78:	701a      	strb	r2, [r3, #0]
 800df7a:	e746      	b.n	800de0a <_dtoa_r+0x94a>
 800df7c:	2a00      	cmp	r2, #0
 800df7e:	dd07      	ble.n	800df90 <_dtoa_r+0xad0>
 800df80:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800df84:	d0ed      	beq.n	800df62 <_dtoa_r+0xaa2>
 800df86:	f10a 0301 	add.w	r3, sl, #1
 800df8a:	f88b 3000 	strb.w	r3, [fp]
 800df8e:	e73c      	b.n	800de0a <_dtoa_r+0x94a>
 800df90:	9b05      	ldr	r3, [sp, #20]
 800df92:	f809 ac01 	strb.w	sl, [r9, #-1]
 800df96:	4599      	cmp	r9, r3
 800df98:	d047      	beq.n	800e02a <_dtoa_r+0xb6a>
 800df9a:	ee18 1a10 	vmov	r1, s16
 800df9e:	2300      	movs	r3, #0
 800dfa0:	220a      	movs	r2, #10
 800dfa2:	4620      	mov	r0, r4
 800dfa4:	f000 f8f6 	bl	800e194 <__multadd>
 800dfa8:	45b8      	cmp	r8, r7
 800dfaa:	ee08 0a10 	vmov	s16, r0
 800dfae:	f04f 0300 	mov.w	r3, #0
 800dfb2:	f04f 020a 	mov.w	r2, #10
 800dfb6:	4641      	mov	r1, r8
 800dfb8:	4620      	mov	r0, r4
 800dfba:	d106      	bne.n	800dfca <_dtoa_r+0xb0a>
 800dfbc:	f000 f8ea 	bl	800e194 <__multadd>
 800dfc0:	4680      	mov	r8, r0
 800dfc2:	4607      	mov	r7, r0
 800dfc4:	f109 0901 	add.w	r9, r9, #1
 800dfc8:	e772      	b.n	800deb0 <_dtoa_r+0x9f0>
 800dfca:	f000 f8e3 	bl	800e194 <__multadd>
 800dfce:	4639      	mov	r1, r7
 800dfd0:	4680      	mov	r8, r0
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	220a      	movs	r2, #10
 800dfd6:	4620      	mov	r0, r4
 800dfd8:	f000 f8dc 	bl	800e194 <__multadd>
 800dfdc:	4607      	mov	r7, r0
 800dfde:	e7f1      	b.n	800dfc4 <_dtoa_r+0xb04>
 800dfe0:	9b03      	ldr	r3, [sp, #12]
 800dfe2:	9302      	str	r3, [sp, #8]
 800dfe4:	9d01      	ldr	r5, [sp, #4]
 800dfe6:	ee18 0a10 	vmov	r0, s16
 800dfea:	4631      	mov	r1, r6
 800dfec:	f7ff f9dc 	bl	800d3a8 <quorem>
 800dff0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800dff4:	9b01      	ldr	r3, [sp, #4]
 800dff6:	f805 ab01 	strb.w	sl, [r5], #1
 800dffa:	1aea      	subs	r2, r5, r3
 800dffc:	9b02      	ldr	r3, [sp, #8]
 800dffe:	4293      	cmp	r3, r2
 800e000:	dd09      	ble.n	800e016 <_dtoa_r+0xb56>
 800e002:	ee18 1a10 	vmov	r1, s16
 800e006:	2300      	movs	r3, #0
 800e008:	220a      	movs	r2, #10
 800e00a:	4620      	mov	r0, r4
 800e00c:	f000 f8c2 	bl	800e194 <__multadd>
 800e010:	ee08 0a10 	vmov	s16, r0
 800e014:	e7e7      	b.n	800dfe6 <_dtoa_r+0xb26>
 800e016:	9b02      	ldr	r3, [sp, #8]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	bfc8      	it	gt
 800e01c:	461d      	movgt	r5, r3
 800e01e:	9b01      	ldr	r3, [sp, #4]
 800e020:	bfd8      	it	le
 800e022:	2501      	movle	r5, #1
 800e024:	441d      	add	r5, r3
 800e026:	f04f 0800 	mov.w	r8, #0
 800e02a:	ee18 1a10 	vmov	r1, s16
 800e02e:	2201      	movs	r2, #1
 800e030:	4620      	mov	r0, r4
 800e032:	f000 fa5f 	bl	800e4f4 <__lshift>
 800e036:	4631      	mov	r1, r6
 800e038:	ee08 0a10 	vmov	s16, r0
 800e03c:	f000 faca 	bl	800e5d4 <__mcmp>
 800e040:	2800      	cmp	r0, #0
 800e042:	dc91      	bgt.n	800df68 <_dtoa_r+0xaa8>
 800e044:	d102      	bne.n	800e04c <_dtoa_r+0xb8c>
 800e046:	f01a 0f01 	tst.w	sl, #1
 800e04a:	d18d      	bne.n	800df68 <_dtoa_r+0xaa8>
 800e04c:	462b      	mov	r3, r5
 800e04e:	461d      	mov	r5, r3
 800e050:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e054:	2a30      	cmp	r2, #48	; 0x30
 800e056:	d0fa      	beq.n	800e04e <_dtoa_r+0xb8e>
 800e058:	e6d7      	b.n	800de0a <_dtoa_r+0x94a>
 800e05a:	9a01      	ldr	r2, [sp, #4]
 800e05c:	429a      	cmp	r2, r3
 800e05e:	d184      	bne.n	800df6a <_dtoa_r+0xaaa>
 800e060:	9b00      	ldr	r3, [sp, #0]
 800e062:	3301      	adds	r3, #1
 800e064:	9300      	str	r3, [sp, #0]
 800e066:	2331      	movs	r3, #49	; 0x31
 800e068:	7013      	strb	r3, [r2, #0]
 800e06a:	e6ce      	b.n	800de0a <_dtoa_r+0x94a>
 800e06c:	4b09      	ldr	r3, [pc, #36]	; (800e094 <_dtoa_r+0xbd4>)
 800e06e:	f7ff ba95 	b.w	800d59c <_dtoa_r+0xdc>
 800e072:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e074:	2b00      	cmp	r3, #0
 800e076:	f47f aa6e 	bne.w	800d556 <_dtoa_r+0x96>
 800e07a:	4b07      	ldr	r3, [pc, #28]	; (800e098 <_dtoa_r+0xbd8>)
 800e07c:	f7ff ba8e 	b.w	800d59c <_dtoa_r+0xdc>
 800e080:	9b02      	ldr	r3, [sp, #8]
 800e082:	2b00      	cmp	r3, #0
 800e084:	dcae      	bgt.n	800dfe4 <_dtoa_r+0xb24>
 800e086:	9b06      	ldr	r3, [sp, #24]
 800e088:	2b02      	cmp	r3, #2
 800e08a:	f73f aea8 	bgt.w	800ddde <_dtoa_r+0x91e>
 800e08e:	e7a9      	b.n	800dfe4 <_dtoa_r+0xb24>
 800e090:	08010b67 	.word	0x08010b67
 800e094:	08010ac4 	.word	0x08010ac4
 800e098:	08010ae8 	.word	0x08010ae8

0800e09c <_localeconv_r>:
 800e09c:	4800      	ldr	r0, [pc, #0]	; (800e0a0 <_localeconv_r+0x4>)
 800e09e:	4770      	bx	lr
 800e0a0:	20000304 	.word	0x20000304

0800e0a4 <malloc>:
 800e0a4:	4b02      	ldr	r3, [pc, #8]	; (800e0b0 <malloc+0xc>)
 800e0a6:	4601      	mov	r1, r0
 800e0a8:	6818      	ldr	r0, [r3, #0]
 800e0aa:	f000 bc17 	b.w	800e8dc <_malloc_r>
 800e0ae:	bf00      	nop
 800e0b0:	200001b0 	.word	0x200001b0

0800e0b4 <memcpy>:
 800e0b4:	440a      	add	r2, r1
 800e0b6:	4291      	cmp	r1, r2
 800e0b8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800e0bc:	d100      	bne.n	800e0c0 <memcpy+0xc>
 800e0be:	4770      	bx	lr
 800e0c0:	b510      	push	{r4, lr}
 800e0c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e0c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e0ca:	4291      	cmp	r1, r2
 800e0cc:	d1f9      	bne.n	800e0c2 <memcpy+0xe>
 800e0ce:	bd10      	pop	{r4, pc}

0800e0d0 <_Balloc>:
 800e0d0:	b570      	push	{r4, r5, r6, lr}
 800e0d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e0d4:	4604      	mov	r4, r0
 800e0d6:	460d      	mov	r5, r1
 800e0d8:	b976      	cbnz	r6, 800e0f8 <_Balloc+0x28>
 800e0da:	2010      	movs	r0, #16
 800e0dc:	f7ff ffe2 	bl	800e0a4 <malloc>
 800e0e0:	4602      	mov	r2, r0
 800e0e2:	6260      	str	r0, [r4, #36]	; 0x24
 800e0e4:	b920      	cbnz	r0, 800e0f0 <_Balloc+0x20>
 800e0e6:	4b18      	ldr	r3, [pc, #96]	; (800e148 <_Balloc+0x78>)
 800e0e8:	4818      	ldr	r0, [pc, #96]	; (800e14c <_Balloc+0x7c>)
 800e0ea:	2166      	movs	r1, #102	; 0x66
 800e0ec:	f000 fdd6 	bl	800ec9c <__assert_func>
 800e0f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e0f4:	6006      	str	r6, [r0, #0]
 800e0f6:	60c6      	str	r6, [r0, #12]
 800e0f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e0fa:	68f3      	ldr	r3, [r6, #12]
 800e0fc:	b183      	cbz	r3, 800e120 <_Balloc+0x50>
 800e0fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e100:	68db      	ldr	r3, [r3, #12]
 800e102:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e106:	b9b8      	cbnz	r0, 800e138 <_Balloc+0x68>
 800e108:	2101      	movs	r1, #1
 800e10a:	fa01 f605 	lsl.w	r6, r1, r5
 800e10e:	1d72      	adds	r2, r6, #5
 800e110:	0092      	lsls	r2, r2, #2
 800e112:	4620      	mov	r0, r4
 800e114:	f000 fb60 	bl	800e7d8 <_calloc_r>
 800e118:	b160      	cbz	r0, 800e134 <_Balloc+0x64>
 800e11a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e11e:	e00e      	b.n	800e13e <_Balloc+0x6e>
 800e120:	2221      	movs	r2, #33	; 0x21
 800e122:	2104      	movs	r1, #4
 800e124:	4620      	mov	r0, r4
 800e126:	f000 fb57 	bl	800e7d8 <_calloc_r>
 800e12a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e12c:	60f0      	str	r0, [r6, #12]
 800e12e:	68db      	ldr	r3, [r3, #12]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d1e4      	bne.n	800e0fe <_Balloc+0x2e>
 800e134:	2000      	movs	r0, #0
 800e136:	bd70      	pop	{r4, r5, r6, pc}
 800e138:	6802      	ldr	r2, [r0, #0]
 800e13a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e13e:	2300      	movs	r3, #0
 800e140:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e144:	e7f7      	b.n	800e136 <_Balloc+0x66>
 800e146:	bf00      	nop
 800e148:	08010af5 	.word	0x08010af5
 800e14c:	08010b78 	.word	0x08010b78

0800e150 <_Bfree>:
 800e150:	b570      	push	{r4, r5, r6, lr}
 800e152:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e154:	4605      	mov	r5, r0
 800e156:	460c      	mov	r4, r1
 800e158:	b976      	cbnz	r6, 800e178 <_Bfree+0x28>
 800e15a:	2010      	movs	r0, #16
 800e15c:	f7ff ffa2 	bl	800e0a4 <malloc>
 800e160:	4602      	mov	r2, r0
 800e162:	6268      	str	r0, [r5, #36]	; 0x24
 800e164:	b920      	cbnz	r0, 800e170 <_Bfree+0x20>
 800e166:	4b09      	ldr	r3, [pc, #36]	; (800e18c <_Bfree+0x3c>)
 800e168:	4809      	ldr	r0, [pc, #36]	; (800e190 <_Bfree+0x40>)
 800e16a:	218a      	movs	r1, #138	; 0x8a
 800e16c:	f000 fd96 	bl	800ec9c <__assert_func>
 800e170:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e174:	6006      	str	r6, [r0, #0]
 800e176:	60c6      	str	r6, [r0, #12]
 800e178:	b13c      	cbz	r4, 800e18a <_Bfree+0x3a>
 800e17a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e17c:	6862      	ldr	r2, [r4, #4]
 800e17e:	68db      	ldr	r3, [r3, #12]
 800e180:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e184:	6021      	str	r1, [r4, #0]
 800e186:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e18a:	bd70      	pop	{r4, r5, r6, pc}
 800e18c:	08010af5 	.word	0x08010af5
 800e190:	08010b78 	.word	0x08010b78

0800e194 <__multadd>:
 800e194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e198:	690d      	ldr	r5, [r1, #16]
 800e19a:	4607      	mov	r7, r0
 800e19c:	460c      	mov	r4, r1
 800e19e:	461e      	mov	r6, r3
 800e1a0:	f101 0c14 	add.w	ip, r1, #20
 800e1a4:	2000      	movs	r0, #0
 800e1a6:	f8dc 3000 	ldr.w	r3, [ip]
 800e1aa:	b299      	uxth	r1, r3
 800e1ac:	fb02 6101 	mla	r1, r2, r1, r6
 800e1b0:	0c1e      	lsrs	r6, r3, #16
 800e1b2:	0c0b      	lsrs	r3, r1, #16
 800e1b4:	fb02 3306 	mla	r3, r2, r6, r3
 800e1b8:	b289      	uxth	r1, r1
 800e1ba:	3001      	adds	r0, #1
 800e1bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e1c0:	4285      	cmp	r5, r0
 800e1c2:	f84c 1b04 	str.w	r1, [ip], #4
 800e1c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e1ca:	dcec      	bgt.n	800e1a6 <__multadd+0x12>
 800e1cc:	b30e      	cbz	r6, 800e212 <__multadd+0x7e>
 800e1ce:	68a3      	ldr	r3, [r4, #8]
 800e1d0:	42ab      	cmp	r3, r5
 800e1d2:	dc19      	bgt.n	800e208 <__multadd+0x74>
 800e1d4:	6861      	ldr	r1, [r4, #4]
 800e1d6:	4638      	mov	r0, r7
 800e1d8:	3101      	adds	r1, #1
 800e1da:	f7ff ff79 	bl	800e0d0 <_Balloc>
 800e1de:	4680      	mov	r8, r0
 800e1e0:	b928      	cbnz	r0, 800e1ee <__multadd+0x5a>
 800e1e2:	4602      	mov	r2, r0
 800e1e4:	4b0c      	ldr	r3, [pc, #48]	; (800e218 <__multadd+0x84>)
 800e1e6:	480d      	ldr	r0, [pc, #52]	; (800e21c <__multadd+0x88>)
 800e1e8:	21b5      	movs	r1, #181	; 0xb5
 800e1ea:	f000 fd57 	bl	800ec9c <__assert_func>
 800e1ee:	6922      	ldr	r2, [r4, #16]
 800e1f0:	3202      	adds	r2, #2
 800e1f2:	f104 010c 	add.w	r1, r4, #12
 800e1f6:	0092      	lsls	r2, r2, #2
 800e1f8:	300c      	adds	r0, #12
 800e1fa:	f7ff ff5b 	bl	800e0b4 <memcpy>
 800e1fe:	4621      	mov	r1, r4
 800e200:	4638      	mov	r0, r7
 800e202:	f7ff ffa5 	bl	800e150 <_Bfree>
 800e206:	4644      	mov	r4, r8
 800e208:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e20c:	3501      	adds	r5, #1
 800e20e:	615e      	str	r6, [r3, #20]
 800e210:	6125      	str	r5, [r4, #16]
 800e212:	4620      	mov	r0, r4
 800e214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e218:	08010b67 	.word	0x08010b67
 800e21c:	08010b78 	.word	0x08010b78

0800e220 <__hi0bits>:
 800e220:	0c03      	lsrs	r3, r0, #16
 800e222:	041b      	lsls	r3, r3, #16
 800e224:	b9d3      	cbnz	r3, 800e25c <__hi0bits+0x3c>
 800e226:	0400      	lsls	r0, r0, #16
 800e228:	2310      	movs	r3, #16
 800e22a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e22e:	bf04      	itt	eq
 800e230:	0200      	lsleq	r0, r0, #8
 800e232:	3308      	addeq	r3, #8
 800e234:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e238:	bf04      	itt	eq
 800e23a:	0100      	lsleq	r0, r0, #4
 800e23c:	3304      	addeq	r3, #4
 800e23e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e242:	bf04      	itt	eq
 800e244:	0080      	lsleq	r0, r0, #2
 800e246:	3302      	addeq	r3, #2
 800e248:	2800      	cmp	r0, #0
 800e24a:	db05      	blt.n	800e258 <__hi0bits+0x38>
 800e24c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e250:	f103 0301 	add.w	r3, r3, #1
 800e254:	bf08      	it	eq
 800e256:	2320      	moveq	r3, #32
 800e258:	4618      	mov	r0, r3
 800e25a:	4770      	bx	lr
 800e25c:	2300      	movs	r3, #0
 800e25e:	e7e4      	b.n	800e22a <__hi0bits+0xa>

0800e260 <__lo0bits>:
 800e260:	6803      	ldr	r3, [r0, #0]
 800e262:	f013 0207 	ands.w	r2, r3, #7
 800e266:	4601      	mov	r1, r0
 800e268:	d00b      	beq.n	800e282 <__lo0bits+0x22>
 800e26a:	07da      	lsls	r2, r3, #31
 800e26c:	d423      	bmi.n	800e2b6 <__lo0bits+0x56>
 800e26e:	0798      	lsls	r0, r3, #30
 800e270:	bf49      	itett	mi
 800e272:	085b      	lsrmi	r3, r3, #1
 800e274:	089b      	lsrpl	r3, r3, #2
 800e276:	2001      	movmi	r0, #1
 800e278:	600b      	strmi	r3, [r1, #0]
 800e27a:	bf5c      	itt	pl
 800e27c:	600b      	strpl	r3, [r1, #0]
 800e27e:	2002      	movpl	r0, #2
 800e280:	4770      	bx	lr
 800e282:	b298      	uxth	r0, r3
 800e284:	b9a8      	cbnz	r0, 800e2b2 <__lo0bits+0x52>
 800e286:	0c1b      	lsrs	r3, r3, #16
 800e288:	2010      	movs	r0, #16
 800e28a:	b2da      	uxtb	r2, r3
 800e28c:	b90a      	cbnz	r2, 800e292 <__lo0bits+0x32>
 800e28e:	3008      	adds	r0, #8
 800e290:	0a1b      	lsrs	r3, r3, #8
 800e292:	071a      	lsls	r2, r3, #28
 800e294:	bf04      	itt	eq
 800e296:	091b      	lsreq	r3, r3, #4
 800e298:	3004      	addeq	r0, #4
 800e29a:	079a      	lsls	r2, r3, #30
 800e29c:	bf04      	itt	eq
 800e29e:	089b      	lsreq	r3, r3, #2
 800e2a0:	3002      	addeq	r0, #2
 800e2a2:	07da      	lsls	r2, r3, #31
 800e2a4:	d403      	bmi.n	800e2ae <__lo0bits+0x4e>
 800e2a6:	085b      	lsrs	r3, r3, #1
 800e2a8:	f100 0001 	add.w	r0, r0, #1
 800e2ac:	d005      	beq.n	800e2ba <__lo0bits+0x5a>
 800e2ae:	600b      	str	r3, [r1, #0]
 800e2b0:	4770      	bx	lr
 800e2b2:	4610      	mov	r0, r2
 800e2b4:	e7e9      	b.n	800e28a <__lo0bits+0x2a>
 800e2b6:	2000      	movs	r0, #0
 800e2b8:	4770      	bx	lr
 800e2ba:	2020      	movs	r0, #32
 800e2bc:	4770      	bx	lr
	...

0800e2c0 <__i2b>:
 800e2c0:	b510      	push	{r4, lr}
 800e2c2:	460c      	mov	r4, r1
 800e2c4:	2101      	movs	r1, #1
 800e2c6:	f7ff ff03 	bl	800e0d0 <_Balloc>
 800e2ca:	4602      	mov	r2, r0
 800e2cc:	b928      	cbnz	r0, 800e2da <__i2b+0x1a>
 800e2ce:	4b05      	ldr	r3, [pc, #20]	; (800e2e4 <__i2b+0x24>)
 800e2d0:	4805      	ldr	r0, [pc, #20]	; (800e2e8 <__i2b+0x28>)
 800e2d2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e2d6:	f000 fce1 	bl	800ec9c <__assert_func>
 800e2da:	2301      	movs	r3, #1
 800e2dc:	6144      	str	r4, [r0, #20]
 800e2de:	6103      	str	r3, [r0, #16]
 800e2e0:	bd10      	pop	{r4, pc}
 800e2e2:	bf00      	nop
 800e2e4:	08010b67 	.word	0x08010b67
 800e2e8:	08010b78 	.word	0x08010b78

0800e2ec <__multiply>:
 800e2ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2f0:	4691      	mov	r9, r2
 800e2f2:	690a      	ldr	r2, [r1, #16]
 800e2f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e2f8:	429a      	cmp	r2, r3
 800e2fa:	bfb8      	it	lt
 800e2fc:	460b      	movlt	r3, r1
 800e2fe:	460c      	mov	r4, r1
 800e300:	bfbc      	itt	lt
 800e302:	464c      	movlt	r4, r9
 800e304:	4699      	movlt	r9, r3
 800e306:	6927      	ldr	r7, [r4, #16]
 800e308:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e30c:	68a3      	ldr	r3, [r4, #8]
 800e30e:	6861      	ldr	r1, [r4, #4]
 800e310:	eb07 060a 	add.w	r6, r7, sl
 800e314:	42b3      	cmp	r3, r6
 800e316:	b085      	sub	sp, #20
 800e318:	bfb8      	it	lt
 800e31a:	3101      	addlt	r1, #1
 800e31c:	f7ff fed8 	bl	800e0d0 <_Balloc>
 800e320:	b930      	cbnz	r0, 800e330 <__multiply+0x44>
 800e322:	4602      	mov	r2, r0
 800e324:	4b44      	ldr	r3, [pc, #272]	; (800e438 <__multiply+0x14c>)
 800e326:	4845      	ldr	r0, [pc, #276]	; (800e43c <__multiply+0x150>)
 800e328:	f240 115d 	movw	r1, #349	; 0x15d
 800e32c:	f000 fcb6 	bl	800ec9c <__assert_func>
 800e330:	f100 0514 	add.w	r5, r0, #20
 800e334:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e338:	462b      	mov	r3, r5
 800e33a:	2200      	movs	r2, #0
 800e33c:	4543      	cmp	r3, r8
 800e33e:	d321      	bcc.n	800e384 <__multiply+0x98>
 800e340:	f104 0314 	add.w	r3, r4, #20
 800e344:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e348:	f109 0314 	add.w	r3, r9, #20
 800e34c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e350:	9202      	str	r2, [sp, #8]
 800e352:	1b3a      	subs	r2, r7, r4
 800e354:	3a15      	subs	r2, #21
 800e356:	f022 0203 	bic.w	r2, r2, #3
 800e35a:	3204      	adds	r2, #4
 800e35c:	f104 0115 	add.w	r1, r4, #21
 800e360:	428f      	cmp	r7, r1
 800e362:	bf38      	it	cc
 800e364:	2204      	movcc	r2, #4
 800e366:	9201      	str	r2, [sp, #4]
 800e368:	9a02      	ldr	r2, [sp, #8]
 800e36a:	9303      	str	r3, [sp, #12]
 800e36c:	429a      	cmp	r2, r3
 800e36e:	d80c      	bhi.n	800e38a <__multiply+0x9e>
 800e370:	2e00      	cmp	r6, #0
 800e372:	dd03      	ble.n	800e37c <__multiply+0x90>
 800e374:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d05a      	beq.n	800e432 <__multiply+0x146>
 800e37c:	6106      	str	r6, [r0, #16]
 800e37e:	b005      	add	sp, #20
 800e380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e384:	f843 2b04 	str.w	r2, [r3], #4
 800e388:	e7d8      	b.n	800e33c <__multiply+0x50>
 800e38a:	f8b3 a000 	ldrh.w	sl, [r3]
 800e38e:	f1ba 0f00 	cmp.w	sl, #0
 800e392:	d024      	beq.n	800e3de <__multiply+0xf2>
 800e394:	f104 0e14 	add.w	lr, r4, #20
 800e398:	46a9      	mov	r9, r5
 800e39a:	f04f 0c00 	mov.w	ip, #0
 800e39e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e3a2:	f8d9 1000 	ldr.w	r1, [r9]
 800e3a6:	fa1f fb82 	uxth.w	fp, r2
 800e3aa:	b289      	uxth	r1, r1
 800e3ac:	fb0a 110b 	mla	r1, sl, fp, r1
 800e3b0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e3b4:	f8d9 2000 	ldr.w	r2, [r9]
 800e3b8:	4461      	add	r1, ip
 800e3ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e3be:	fb0a c20b 	mla	r2, sl, fp, ip
 800e3c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e3c6:	b289      	uxth	r1, r1
 800e3c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e3cc:	4577      	cmp	r7, lr
 800e3ce:	f849 1b04 	str.w	r1, [r9], #4
 800e3d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e3d6:	d8e2      	bhi.n	800e39e <__multiply+0xb2>
 800e3d8:	9a01      	ldr	r2, [sp, #4]
 800e3da:	f845 c002 	str.w	ip, [r5, r2]
 800e3de:	9a03      	ldr	r2, [sp, #12]
 800e3e0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e3e4:	3304      	adds	r3, #4
 800e3e6:	f1b9 0f00 	cmp.w	r9, #0
 800e3ea:	d020      	beq.n	800e42e <__multiply+0x142>
 800e3ec:	6829      	ldr	r1, [r5, #0]
 800e3ee:	f104 0c14 	add.w	ip, r4, #20
 800e3f2:	46ae      	mov	lr, r5
 800e3f4:	f04f 0a00 	mov.w	sl, #0
 800e3f8:	f8bc b000 	ldrh.w	fp, [ip]
 800e3fc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e400:	fb09 220b 	mla	r2, r9, fp, r2
 800e404:	4492      	add	sl, r2
 800e406:	b289      	uxth	r1, r1
 800e408:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e40c:	f84e 1b04 	str.w	r1, [lr], #4
 800e410:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e414:	f8be 1000 	ldrh.w	r1, [lr]
 800e418:	0c12      	lsrs	r2, r2, #16
 800e41a:	fb09 1102 	mla	r1, r9, r2, r1
 800e41e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e422:	4567      	cmp	r7, ip
 800e424:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e428:	d8e6      	bhi.n	800e3f8 <__multiply+0x10c>
 800e42a:	9a01      	ldr	r2, [sp, #4]
 800e42c:	50a9      	str	r1, [r5, r2]
 800e42e:	3504      	adds	r5, #4
 800e430:	e79a      	b.n	800e368 <__multiply+0x7c>
 800e432:	3e01      	subs	r6, #1
 800e434:	e79c      	b.n	800e370 <__multiply+0x84>
 800e436:	bf00      	nop
 800e438:	08010b67 	.word	0x08010b67
 800e43c:	08010b78 	.word	0x08010b78

0800e440 <__pow5mult>:
 800e440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e444:	4615      	mov	r5, r2
 800e446:	f012 0203 	ands.w	r2, r2, #3
 800e44a:	4606      	mov	r6, r0
 800e44c:	460f      	mov	r7, r1
 800e44e:	d007      	beq.n	800e460 <__pow5mult+0x20>
 800e450:	4c25      	ldr	r4, [pc, #148]	; (800e4e8 <__pow5mult+0xa8>)
 800e452:	3a01      	subs	r2, #1
 800e454:	2300      	movs	r3, #0
 800e456:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e45a:	f7ff fe9b 	bl	800e194 <__multadd>
 800e45e:	4607      	mov	r7, r0
 800e460:	10ad      	asrs	r5, r5, #2
 800e462:	d03d      	beq.n	800e4e0 <__pow5mult+0xa0>
 800e464:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e466:	b97c      	cbnz	r4, 800e488 <__pow5mult+0x48>
 800e468:	2010      	movs	r0, #16
 800e46a:	f7ff fe1b 	bl	800e0a4 <malloc>
 800e46e:	4602      	mov	r2, r0
 800e470:	6270      	str	r0, [r6, #36]	; 0x24
 800e472:	b928      	cbnz	r0, 800e480 <__pow5mult+0x40>
 800e474:	4b1d      	ldr	r3, [pc, #116]	; (800e4ec <__pow5mult+0xac>)
 800e476:	481e      	ldr	r0, [pc, #120]	; (800e4f0 <__pow5mult+0xb0>)
 800e478:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e47c:	f000 fc0e 	bl	800ec9c <__assert_func>
 800e480:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e484:	6004      	str	r4, [r0, #0]
 800e486:	60c4      	str	r4, [r0, #12]
 800e488:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e48c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e490:	b94c      	cbnz	r4, 800e4a6 <__pow5mult+0x66>
 800e492:	f240 2171 	movw	r1, #625	; 0x271
 800e496:	4630      	mov	r0, r6
 800e498:	f7ff ff12 	bl	800e2c0 <__i2b>
 800e49c:	2300      	movs	r3, #0
 800e49e:	f8c8 0008 	str.w	r0, [r8, #8]
 800e4a2:	4604      	mov	r4, r0
 800e4a4:	6003      	str	r3, [r0, #0]
 800e4a6:	f04f 0900 	mov.w	r9, #0
 800e4aa:	07eb      	lsls	r3, r5, #31
 800e4ac:	d50a      	bpl.n	800e4c4 <__pow5mult+0x84>
 800e4ae:	4639      	mov	r1, r7
 800e4b0:	4622      	mov	r2, r4
 800e4b2:	4630      	mov	r0, r6
 800e4b4:	f7ff ff1a 	bl	800e2ec <__multiply>
 800e4b8:	4639      	mov	r1, r7
 800e4ba:	4680      	mov	r8, r0
 800e4bc:	4630      	mov	r0, r6
 800e4be:	f7ff fe47 	bl	800e150 <_Bfree>
 800e4c2:	4647      	mov	r7, r8
 800e4c4:	106d      	asrs	r5, r5, #1
 800e4c6:	d00b      	beq.n	800e4e0 <__pow5mult+0xa0>
 800e4c8:	6820      	ldr	r0, [r4, #0]
 800e4ca:	b938      	cbnz	r0, 800e4dc <__pow5mult+0x9c>
 800e4cc:	4622      	mov	r2, r4
 800e4ce:	4621      	mov	r1, r4
 800e4d0:	4630      	mov	r0, r6
 800e4d2:	f7ff ff0b 	bl	800e2ec <__multiply>
 800e4d6:	6020      	str	r0, [r4, #0]
 800e4d8:	f8c0 9000 	str.w	r9, [r0]
 800e4dc:	4604      	mov	r4, r0
 800e4de:	e7e4      	b.n	800e4aa <__pow5mult+0x6a>
 800e4e0:	4638      	mov	r0, r7
 800e4e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4e6:	bf00      	nop
 800e4e8:	08010cc8 	.word	0x08010cc8
 800e4ec:	08010af5 	.word	0x08010af5
 800e4f0:	08010b78 	.word	0x08010b78

0800e4f4 <__lshift>:
 800e4f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4f8:	460c      	mov	r4, r1
 800e4fa:	6849      	ldr	r1, [r1, #4]
 800e4fc:	6923      	ldr	r3, [r4, #16]
 800e4fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e502:	68a3      	ldr	r3, [r4, #8]
 800e504:	4607      	mov	r7, r0
 800e506:	4691      	mov	r9, r2
 800e508:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e50c:	f108 0601 	add.w	r6, r8, #1
 800e510:	42b3      	cmp	r3, r6
 800e512:	db0b      	blt.n	800e52c <__lshift+0x38>
 800e514:	4638      	mov	r0, r7
 800e516:	f7ff fddb 	bl	800e0d0 <_Balloc>
 800e51a:	4605      	mov	r5, r0
 800e51c:	b948      	cbnz	r0, 800e532 <__lshift+0x3e>
 800e51e:	4602      	mov	r2, r0
 800e520:	4b2a      	ldr	r3, [pc, #168]	; (800e5cc <__lshift+0xd8>)
 800e522:	482b      	ldr	r0, [pc, #172]	; (800e5d0 <__lshift+0xdc>)
 800e524:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e528:	f000 fbb8 	bl	800ec9c <__assert_func>
 800e52c:	3101      	adds	r1, #1
 800e52e:	005b      	lsls	r3, r3, #1
 800e530:	e7ee      	b.n	800e510 <__lshift+0x1c>
 800e532:	2300      	movs	r3, #0
 800e534:	f100 0114 	add.w	r1, r0, #20
 800e538:	f100 0210 	add.w	r2, r0, #16
 800e53c:	4618      	mov	r0, r3
 800e53e:	4553      	cmp	r3, sl
 800e540:	db37      	blt.n	800e5b2 <__lshift+0xbe>
 800e542:	6920      	ldr	r0, [r4, #16]
 800e544:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e548:	f104 0314 	add.w	r3, r4, #20
 800e54c:	f019 091f 	ands.w	r9, r9, #31
 800e550:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e554:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e558:	d02f      	beq.n	800e5ba <__lshift+0xc6>
 800e55a:	f1c9 0e20 	rsb	lr, r9, #32
 800e55e:	468a      	mov	sl, r1
 800e560:	f04f 0c00 	mov.w	ip, #0
 800e564:	681a      	ldr	r2, [r3, #0]
 800e566:	fa02 f209 	lsl.w	r2, r2, r9
 800e56a:	ea42 020c 	orr.w	r2, r2, ip
 800e56e:	f84a 2b04 	str.w	r2, [sl], #4
 800e572:	f853 2b04 	ldr.w	r2, [r3], #4
 800e576:	4298      	cmp	r0, r3
 800e578:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e57c:	d8f2      	bhi.n	800e564 <__lshift+0x70>
 800e57e:	1b03      	subs	r3, r0, r4
 800e580:	3b15      	subs	r3, #21
 800e582:	f023 0303 	bic.w	r3, r3, #3
 800e586:	3304      	adds	r3, #4
 800e588:	f104 0215 	add.w	r2, r4, #21
 800e58c:	4290      	cmp	r0, r2
 800e58e:	bf38      	it	cc
 800e590:	2304      	movcc	r3, #4
 800e592:	f841 c003 	str.w	ip, [r1, r3]
 800e596:	f1bc 0f00 	cmp.w	ip, #0
 800e59a:	d001      	beq.n	800e5a0 <__lshift+0xac>
 800e59c:	f108 0602 	add.w	r6, r8, #2
 800e5a0:	3e01      	subs	r6, #1
 800e5a2:	4638      	mov	r0, r7
 800e5a4:	612e      	str	r6, [r5, #16]
 800e5a6:	4621      	mov	r1, r4
 800e5a8:	f7ff fdd2 	bl	800e150 <_Bfree>
 800e5ac:	4628      	mov	r0, r5
 800e5ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5b2:	f842 0f04 	str.w	r0, [r2, #4]!
 800e5b6:	3301      	adds	r3, #1
 800e5b8:	e7c1      	b.n	800e53e <__lshift+0x4a>
 800e5ba:	3904      	subs	r1, #4
 800e5bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800e5c0:	f841 2f04 	str.w	r2, [r1, #4]!
 800e5c4:	4298      	cmp	r0, r3
 800e5c6:	d8f9      	bhi.n	800e5bc <__lshift+0xc8>
 800e5c8:	e7ea      	b.n	800e5a0 <__lshift+0xac>
 800e5ca:	bf00      	nop
 800e5cc:	08010b67 	.word	0x08010b67
 800e5d0:	08010b78 	.word	0x08010b78

0800e5d4 <__mcmp>:
 800e5d4:	b530      	push	{r4, r5, lr}
 800e5d6:	6902      	ldr	r2, [r0, #16]
 800e5d8:	690c      	ldr	r4, [r1, #16]
 800e5da:	1b12      	subs	r2, r2, r4
 800e5dc:	d10e      	bne.n	800e5fc <__mcmp+0x28>
 800e5de:	f100 0314 	add.w	r3, r0, #20
 800e5e2:	3114      	adds	r1, #20
 800e5e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e5e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e5ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e5f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e5f4:	42a5      	cmp	r5, r4
 800e5f6:	d003      	beq.n	800e600 <__mcmp+0x2c>
 800e5f8:	d305      	bcc.n	800e606 <__mcmp+0x32>
 800e5fa:	2201      	movs	r2, #1
 800e5fc:	4610      	mov	r0, r2
 800e5fe:	bd30      	pop	{r4, r5, pc}
 800e600:	4283      	cmp	r3, r0
 800e602:	d3f3      	bcc.n	800e5ec <__mcmp+0x18>
 800e604:	e7fa      	b.n	800e5fc <__mcmp+0x28>
 800e606:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e60a:	e7f7      	b.n	800e5fc <__mcmp+0x28>

0800e60c <__mdiff>:
 800e60c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e610:	460c      	mov	r4, r1
 800e612:	4606      	mov	r6, r0
 800e614:	4611      	mov	r1, r2
 800e616:	4620      	mov	r0, r4
 800e618:	4690      	mov	r8, r2
 800e61a:	f7ff ffdb 	bl	800e5d4 <__mcmp>
 800e61e:	1e05      	subs	r5, r0, #0
 800e620:	d110      	bne.n	800e644 <__mdiff+0x38>
 800e622:	4629      	mov	r1, r5
 800e624:	4630      	mov	r0, r6
 800e626:	f7ff fd53 	bl	800e0d0 <_Balloc>
 800e62a:	b930      	cbnz	r0, 800e63a <__mdiff+0x2e>
 800e62c:	4b3a      	ldr	r3, [pc, #232]	; (800e718 <__mdiff+0x10c>)
 800e62e:	4602      	mov	r2, r0
 800e630:	f240 2132 	movw	r1, #562	; 0x232
 800e634:	4839      	ldr	r0, [pc, #228]	; (800e71c <__mdiff+0x110>)
 800e636:	f000 fb31 	bl	800ec9c <__assert_func>
 800e63a:	2301      	movs	r3, #1
 800e63c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e640:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e644:	bfa4      	itt	ge
 800e646:	4643      	movge	r3, r8
 800e648:	46a0      	movge	r8, r4
 800e64a:	4630      	mov	r0, r6
 800e64c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e650:	bfa6      	itte	ge
 800e652:	461c      	movge	r4, r3
 800e654:	2500      	movge	r5, #0
 800e656:	2501      	movlt	r5, #1
 800e658:	f7ff fd3a 	bl	800e0d0 <_Balloc>
 800e65c:	b920      	cbnz	r0, 800e668 <__mdiff+0x5c>
 800e65e:	4b2e      	ldr	r3, [pc, #184]	; (800e718 <__mdiff+0x10c>)
 800e660:	4602      	mov	r2, r0
 800e662:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e666:	e7e5      	b.n	800e634 <__mdiff+0x28>
 800e668:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e66c:	6926      	ldr	r6, [r4, #16]
 800e66e:	60c5      	str	r5, [r0, #12]
 800e670:	f104 0914 	add.w	r9, r4, #20
 800e674:	f108 0514 	add.w	r5, r8, #20
 800e678:	f100 0e14 	add.w	lr, r0, #20
 800e67c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e680:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e684:	f108 0210 	add.w	r2, r8, #16
 800e688:	46f2      	mov	sl, lr
 800e68a:	2100      	movs	r1, #0
 800e68c:	f859 3b04 	ldr.w	r3, [r9], #4
 800e690:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e694:	fa1f f883 	uxth.w	r8, r3
 800e698:	fa11 f18b 	uxtah	r1, r1, fp
 800e69c:	0c1b      	lsrs	r3, r3, #16
 800e69e:	eba1 0808 	sub.w	r8, r1, r8
 800e6a2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e6a6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e6aa:	fa1f f888 	uxth.w	r8, r8
 800e6ae:	1419      	asrs	r1, r3, #16
 800e6b0:	454e      	cmp	r6, r9
 800e6b2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e6b6:	f84a 3b04 	str.w	r3, [sl], #4
 800e6ba:	d8e7      	bhi.n	800e68c <__mdiff+0x80>
 800e6bc:	1b33      	subs	r3, r6, r4
 800e6be:	3b15      	subs	r3, #21
 800e6c0:	f023 0303 	bic.w	r3, r3, #3
 800e6c4:	3304      	adds	r3, #4
 800e6c6:	3415      	adds	r4, #21
 800e6c8:	42a6      	cmp	r6, r4
 800e6ca:	bf38      	it	cc
 800e6cc:	2304      	movcc	r3, #4
 800e6ce:	441d      	add	r5, r3
 800e6d0:	4473      	add	r3, lr
 800e6d2:	469e      	mov	lr, r3
 800e6d4:	462e      	mov	r6, r5
 800e6d6:	4566      	cmp	r6, ip
 800e6d8:	d30e      	bcc.n	800e6f8 <__mdiff+0xec>
 800e6da:	f10c 0203 	add.w	r2, ip, #3
 800e6de:	1b52      	subs	r2, r2, r5
 800e6e0:	f022 0203 	bic.w	r2, r2, #3
 800e6e4:	3d03      	subs	r5, #3
 800e6e6:	45ac      	cmp	ip, r5
 800e6e8:	bf38      	it	cc
 800e6ea:	2200      	movcc	r2, #0
 800e6ec:	441a      	add	r2, r3
 800e6ee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e6f2:	b17b      	cbz	r3, 800e714 <__mdiff+0x108>
 800e6f4:	6107      	str	r7, [r0, #16]
 800e6f6:	e7a3      	b.n	800e640 <__mdiff+0x34>
 800e6f8:	f856 8b04 	ldr.w	r8, [r6], #4
 800e6fc:	fa11 f288 	uxtah	r2, r1, r8
 800e700:	1414      	asrs	r4, r2, #16
 800e702:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e706:	b292      	uxth	r2, r2
 800e708:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e70c:	f84e 2b04 	str.w	r2, [lr], #4
 800e710:	1421      	asrs	r1, r4, #16
 800e712:	e7e0      	b.n	800e6d6 <__mdiff+0xca>
 800e714:	3f01      	subs	r7, #1
 800e716:	e7ea      	b.n	800e6ee <__mdiff+0xe2>
 800e718:	08010b67 	.word	0x08010b67
 800e71c:	08010b78 	.word	0x08010b78

0800e720 <__d2b>:
 800e720:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e724:	4689      	mov	r9, r1
 800e726:	2101      	movs	r1, #1
 800e728:	ec57 6b10 	vmov	r6, r7, d0
 800e72c:	4690      	mov	r8, r2
 800e72e:	f7ff fccf 	bl	800e0d0 <_Balloc>
 800e732:	4604      	mov	r4, r0
 800e734:	b930      	cbnz	r0, 800e744 <__d2b+0x24>
 800e736:	4602      	mov	r2, r0
 800e738:	4b25      	ldr	r3, [pc, #148]	; (800e7d0 <__d2b+0xb0>)
 800e73a:	4826      	ldr	r0, [pc, #152]	; (800e7d4 <__d2b+0xb4>)
 800e73c:	f240 310a 	movw	r1, #778	; 0x30a
 800e740:	f000 faac 	bl	800ec9c <__assert_func>
 800e744:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e748:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e74c:	bb35      	cbnz	r5, 800e79c <__d2b+0x7c>
 800e74e:	2e00      	cmp	r6, #0
 800e750:	9301      	str	r3, [sp, #4]
 800e752:	d028      	beq.n	800e7a6 <__d2b+0x86>
 800e754:	4668      	mov	r0, sp
 800e756:	9600      	str	r6, [sp, #0]
 800e758:	f7ff fd82 	bl	800e260 <__lo0bits>
 800e75c:	9900      	ldr	r1, [sp, #0]
 800e75e:	b300      	cbz	r0, 800e7a2 <__d2b+0x82>
 800e760:	9a01      	ldr	r2, [sp, #4]
 800e762:	f1c0 0320 	rsb	r3, r0, #32
 800e766:	fa02 f303 	lsl.w	r3, r2, r3
 800e76a:	430b      	orrs	r3, r1
 800e76c:	40c2      	lsrs	r2, r0
 800e76e:	6163      	str	r3, [r4, #20]
 800e770:	9201      	str	r2, [sp, #4]
 800e772:	9b01      	ldr	r3, [sp, #4]
 800e774:	61a3      	str	r3, [r4, #24]
 800e776:	2b00      	cmp	r3, #0
 800e778:	bf14      	ite	ne
 800e77a:	2202      	movne	r2, #2
 800e77c:	2201      	moveq	r2, #1
 800e77e:	6122      	str	r2, [r4, #16]
 800e780:	b1d5      	cbz	r5, 800e7b8 <__d2b+0x98>
 800e782:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e786:	4405      	add	r5, r0
 800e788:	f8c9 5000 	str.w	r5, [r9]
 800e78c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e790:	f8c8 0000 	str.w	r0, [r8]
 800e794:	4620      	mov	r0, r4
 800e796:	b003      	add	sp, #12
 800e798:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e79c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e7a0:	e7d5      	b.n	800e74e <__d2b+0x2e>
 800e7a2:	6161      	str	r1, [r4, #20]
 800e7a4:	e7e5      	b.n	800e772 <__d2b+0x52>
 800e7a6:	a801      	add	r0, sp, #4
 800e7a8:	f7ff fd5a 	bl	800e260 <__lo0bits>
 800e7ac:	9b01      	ldr	r3, [sp, #4]
 800e7ae:	6163      	str	r3, [r4, #20]
 800e7b0:	2201      	movs	r2, #1
 800e7b2:	6122      	str	r2, [r4, #16]
 800e7b4:	3020      	adds	r0, #32
 800e7b6:	e7e3      	b.n	800e780 <__d2b+0x60>
 800e7b8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e7bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e7c0:	f8c9 0000 	str.w	r0, [r9]
 800e7c4:	6918      	ldr	r0, [r3, #16]
 800e7c6:	f7ff fd2b 	bl	800e220 <__hi0bits>
 800e7ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e7ce:	e7df      	b.n	800e790 <__d2b+0x70>
 800e7d0:	08010b67 	.word	0x08010b67
 800e7d4:	08010b78 	.word	0x08010b78

0800e7d8 <_calloc_r>:
 800e7d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e7da:	fba1 2402 	umull	r2, r4, r1, r2
 800e7de:	b94c      	cbnz	r4, 800e7f4 <_calloc_r+0x1c>
 800e7e0:	4611      	mov	r1, r2
 800e7e2:	9201      	str	r2, [sp, #4]
 800e7e4:	f000 f87a 	bl	800e8dc <_malloc_r>
 800e7e8:	9a01      	ldr	r2, [sp, #4]
 800e7ea:	4605      	mov	r5, r0
 800e7ec:	b930      	cbnz	r0, 800e7fc <_calloc_r+0x24>
 800e7ee:	4628      	mov	r0, r5
 800e7f0:	b003      	add	sp, #12
 800e7f2:	bd30      	pop	{r4, r5, pc}
 800e7f4:	220c      	movs	r2, #12
 800e7f6:	6002      	str	r2, [r0, #0]
 800e7f8:	2500      	movs	r5, #0
 800e7fa:	e7f8      	b.n	800e7ee <_calloc_r+0x16>
 800e7fc:	4621      	mov	r1, r4
 800e7fe:	f7fe f941 	bl	800ca84 <memset>
 800e802:	e7f4      	b.n	800e7ee <_calloc_r+0x16>

0800e804 <_free_r>:
 800e804:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e806:	2900      	cmp	r1, #0
 800e808:	d044      	beq.n	800e894 <_free_r+0x90>
 800e80a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e80e:	9001      	str	r0, [sp, #4]
 800e810:	2b00      	cmp	r3, #0
 800e812:	f1a1 0404 	sub.w	r4, r1, #4
 800e816:	bfb8      	it	lt
 800e818:	18e4      	addlt	r4, r4, r3
 800e81a:	f000 fa81 	bl	800ed20 <__malloc_lock>
 800e81e:	4a1e      	ldr	r2, [pc, #120]	; (800e898 <_free_r+0x94>)
 800e820:	9801      	ldr	r0, [sp, #4]
 800e822:	6813      	ldr	r3, [r2, #0]
 800e824:	b933      	cbnz	r3, 800e834 <_free_r+0x30>
 800e826:	6063      	str	r3, [r4, #4]
 800e828:	6014      	str	r4, [r2, #0]
 800e82a:	b003      	add	sp, #12
 800e82c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e830:	f000 ba7c 	b.w	800ed2c <__malloc_unlock>
 800e834:	42a3      	cmp	r3, r4
 800e836:	d908      	bls.n	800e84a <_free_r+0x46>
 800e838:	6825      	ldr	r5, [r4, #0]
 800e83a:	1961      	adds	r1, r4, r5
 800e83c:	428b      	cmp	r3, r1
 800e83e:	bf01      	itttt	eq
 800e840:	6819      	ldreq	r1, [r3, #0]
 800e842:	685b      	ldreq	r3, [r3, #4]
 800e844:	1949      	addeq	r1, r1, r5
 800e846:	6021      	streq	r1, [r4, #0]
 800e848:	e7ed      	b.n	800e826 <_free_r+0x22>
 800e84a:	461a      	mov	r2, r3
 800e84c:	685b      	ldr	r3, [r3, #4]
 800e84e:	b10b      	cbz	r3, 800e854 <_free_r+0x50>
 800e850:	42a3      	cmp	r3, r4
 800e852:	d9fa      	bls.n	800e84a <_free_r+0x46>
 800e854:	6811      	ldr	r1, [r2, #0]
 800e856:	1855      	adds	r5, r2, r1
 800e858:	42a5      	cmp	r5, r4
 800e85a:	d10b      	bne.n	800e874 <_free_r+0x70>
 800e85c:	6824      	ldr	r4, [r4, #0]
 800e85e:	4421      	add	r1, r4
 800e860:	1854      	adds	r4, r2, r1
 800e862:	42a3      	cmp	r3, r4
 800e864:	6011      	str	r1, [r2, #0]
 800e866:	d1e0      	bne.n	800e82a <_free_r+0x26>
 800e868:	681c      	ldr	r4, [r3, #0]
 800e86a:	685b      	ldr	r3, [r3, #4]
 800e86c:	6053      	str	r3, [r2, #4]
 800e86e:	4421      	add	r1, r4
 800e870:	6011      	str	r1, [r2, #0]
 800e872:	e7da      	b.n	800e82a <_free_r+0x26>
 800e874:	d902      	bls.n	800e87c <_free_r+0x78>
 800e876:	230c      	movs	r3, #12
 800e878:	6003      	str	r3, [r0, #0]
 800e87a:	e7d6      	b.n	800e82a <_free_r+0x26>
 800e87c:	6825      	ldr	r5, [r4, #0]
 800e87e:	1961      	adds	r1, r4, r5
 800e880:	428b      	cmp	r3, r1
 800e882:	bf04      	itt	eq
 800e884:	6819      	ldreq	r1, [r3, #0]
 800e886:	685b      	ldreq	r3, [r3, #4]
 800e888:	6063      	str	r3, [r4, #4]
 800e88a:	bf04      	itt	eq
 800e88c:	1949      	addeq	r1, r1, r5
 800e88e:	6021      	streq	r1, [r4, #0]
 800e890:	6054      	str	r4, [r2, #4]
 800e892:	e7ca      	b.n	800e82a <_free_r+0x26>
 800e894:	b003      	add	sp, #12
 800e896:	bd30      	pop	{r4, r5, pc}
 800e898:	2000b1e8 	.word	0x2000b1e8

0800e89c <sbrk_aligned>:
 800e89c:	b570      	push	{r4, r5, r6, lr}
 800e89e:	4e0e      	ldr	r6, [pc, #56]	; (800e8d8 <sbrk_aligned+0x3c>)
 800e8a0:	460c      	mov	r4, r1
 800e8a2:	6831      	ldr	r1, [r6, #0]
 800e8a4:	4605      	mov	r5, r0
 800e8a6:	b911      	cbnz	r1, 800e8ae <sbrk_aligned+0x12>
 800e8a8:	f000 f9e8 	bl	800ec7c <_sbrk_r>
 800e8ac:	6030      	str	r0, [r6, #0]
 800e8ae:	4621      	mov	r1, r4
 800e8b0:	4628      	mov	r0, r5
 800e8b2:	f000 f9e3 	bl	800ec7c <_sbrk_r>
 800e8b6:	1c43      	adds	r3, r0, #1
 800e8b8:	d00a      	beq.n	800e8d0 <sbrk_aligned+0x34>
 800e8ba:	1cc4      	adds	r4, r0, #3
 800e8bc:	f024 0403 	bic.w	r4, r4, #3
 800e8c0:	42a0      	cmp	r0, r4
 800e8c2:	d007      	beq.n	800e8d4 <sbrk_aligned+0x38>
 800e8c4:	1a21      	subs	r1, r4, r0
 800e8c6:	4628      	mov	r0, r5
 800e8c8:	f000 f9d8 	bl	800ec7c <_sbrk_r>
 800e8cc:	3001      	adds	r0, #1
 800e8ce:	d101      	bne.n	800e8d4 <sbrk_aligned+0x38>
 800e8d0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e8d4:	4620      	mov	r0, r4
 800e8d6:	bd70      	pop	{r4, r5, r6, pc}
 800e8d8:	2000b1ec 	.word	0x2000b1ec

0800e8dc <_malloc_r>:
 800e8dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8e0:	1ccd      	adds	r5, r1, #3
 800e8e2:	f025 0503 	bic.w	r5, r5, #3
 800e8e6:	3508      	adds	r5, #8
 800e8e8:	2d0c      	cmp	r5, #12
 800e8ea:	bf38      	it	cc
 800e8ec:	250c      	movcc	r5, #12
 800e8ee:	2d00      	cmp	r5, #0
 800e8f0:	4607      	mov	r7, r0
 800e8f2:	db01      	blt.n	800e8f8 <_malloc_r+0x1c>
 800e8f4:	42a9      	cmp	r1, r5
 800e8f6:	d905      	bls.n	800e904 <_malloc_r+0x28>
 800e8f8:	230c      	movs	r3, #12
 800e8fa:	603b      	str	r3, [r7, #0]
 800e8fc:	2600      	movs	r6, #0
 800e8fe:	4630      	mov	r0, r6
 800e900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e904:	4e2e      	ldr	r6, [pc, #184]	; (800e9c0 <_malloc_r+0xe4>)
 800e906:	f000 fa0b 	bl	800ed20 <__malloc_lock>
 800e90a:	6833      	ldr	r3, [r6, #0]
 800e90c:	461c      	mov	r4, r3
 800e90e:	bb34      	cbnz	r4, 800e95e <_malloc_r+0x82>
 800e910:	4629      	mov	r1, r5
 800e912:	4638      	mov	r0, r7
 800e914:	f7ff ffc2 	bl	800e89c <sbrk_aligned>
 800e918:	1c43      	adds	r3, r0, #1
 800e91a:	4604      	mov	r4, r0
 800e91c:	d14d      	bne.n	800e9ba <_malloc_r+0xde>
 800e91e:	6834      	ldr	r4, [r6, #0]
 800e920:	4626      	mov	r6, r4
 800e922:	2e00      	cmp	r6, #0
 800e924:	d140      	bne.n	800e9a8 <_malloc_r+0xcc>
 800e926:	6823      	ldr	r3, [r4, #0]
 800e928:	4631      	mov	r1, r6
 800e92a:	4638      	mov	r0, r7
 800e92c:	eb04 0803 	add.w	r8, r4, r3
 800e930:	f000 f9a4 	bl	800ec7c <_sbrk_r>
 800e934:	4580      	cmp	r8, r0
 800e936:	d13a      	bne.n	800e9ae <_malloc_r+0xd2>
 800e938:	6821      	ldr	r1, [r4, #0]
 800e93a:	3503      	adds	r5, #3
 800e93c:	1a6d      	subs	r5, r5, r1
 800e93e:	f025 0503 	bic.w	r5, r5, #3
 800e942:	3508      	adds	r5, #8
 800e944:	2d0c      	cmp	r5, #12
 800e946:	bf38      	it	cc
 800e948:	250c      	movcc	r5, #12
 800e94a:	4629      	mov	r1, r5
 800e94c:	4638      	mov	r0, r7
 800e94e:	f7ff ffa5 	bl	800e89c <sbrk_aligned>
 800e952:	3001      	adds	r0, #1
 800e954:	d02b      	beq.n	800e9ae <_malloc_r+0xd2>
 800e956:	6823      	ldr	r3, [r4, #0]
 800e958:	442b      	add	r3, r5
 800e95a:	6023      	str	r3, [r4, #0]
 800e95c:	e00e      	b.n	800e97c <_malloc_r+0xa0>
 800e95e:	6822      	ldr	r2, [r4, #0]
 800e960:	1b52      	subs	r2, r2, r5
 800e962:	d41e      	bmi.n	800e9a2 <_malloc_r+0xc6>
 800e964:	2a0b      	cmp	r2, #11
 800e966:	d916      	bls.n	800e996 <_malloc_r+0xba>
 800e968:	1961      	adds	r1, r4, r5
 800e96a:	42a3      	cmp	r3, r4
 800e96c:	6025      	str	r5, [r4, #0]
 800e96e:	bf18      	it	ne
 800e970:	6059      	strne	r1, [r3, #4]
 800e972:	6863      	ldr	r3, [r4, #4]
 800e974:	bf08      	it	eq
 800e976:	6031      	streq	r1, [r6, #0]
 800e978:	5162      	str	r2, [r4, r5]
 800e97a:	604b      	str	r3, [r1, #4]
 800e97c:	4638      	mov	r0, r7
 800e97e:	f104 060b 	add.w	r6, r4, #11
 800e982:	f000 f9d3 	bl	800ed2c <__malloc_unlock>
 800e986:	f026 0607 	bic.w	r6, r6, #7
 800e98a:	1d23      	adds	r3, r4, #4
 800e98c:	1af2      	subs	r2, r6, r3
 800e98e:	d0b6      	beq.n	800e8fe <_malloc_r+0x22>
 800e990:	1b9b      	subs	r3, r3, r6
 800e992:	50a3      	str	r3, [r4, r2]
 800e994:	e7b3      	b.n	800e8fe <_malloc_r+0x22>
 800e996:	6862      	ldr	r2, [r4, #4]
 800e998:	42a3      	cmp	r3, r4
 800e99a:	bf0c      	ite	eq
 800e99c:	6032      	streq	r2, [r6, #0]
 800e99e:	605a      	strne	r2, [r3, #4]
 800e9a0:	e7ec      	b.n	800e97c <_malloc_r+0xa0>
 800e9a2:	4623      	mov	r3, r4
 800e9a4:	6864      	ldr	r4, [r4, #4]
 800e9a6:	e7b2      	b.n	800e90e <_malloc_r+0x32>
 800e9a8:	4634      	mov	r4, r6
 800e9aa:	6876      	ldr	r6, [r6, #4]
 800e9ac:	e7b9      	b.n	800e922 <_malloc_r+0x46>
 800e9ae:	230c      	movs	r3, #12
 800e9b0:	603b      	str	r3, [r7, #0]
 800e9b2:	4638      	mov	r0, r7
 800e9b4:	f000 f9ba 	bl	800ed2c <__malloc_unlock>
 800e9b8:	e7a1      	b.n	800e8fe <_malloc_r+0x22>
 800e9ba:	6025      	str	r5, [r4, #0]
 800e9bc:	e7de      	b.n	800e97c <_malloc_r+0xa0>
 800e9be:	bf00      	nop
 800e9c0:	2000b1e8 	.word	0x2000b1e8

0800e9c4 <__ssputs_r>:
 800e9c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e9c8:	688e      	ldr	r6, [r1, #8]
 800e9ca:	429e      	cmp	r6, r3
 800e9cc:	4682      	mov	sl, r0
 800e9ce:	460c      	mov	r4, r1
 800e9d0:	4690      	mov	r8, r2
 800e9d2:	461f      	mov	r7, r3
 800e9d4:	d838      	bhi.n	800ea48 <__ssputs_r+0x84>
 800e9d6:	898a      	ldrh	r2, [r1, #12]
 800e9d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e9dc:	d032      	beq.n	800ea44 <__ssputs_r+0x80>
 800e9de:	6825      	ldr	r5, [r4, #0]
 800e9e0:	6909      	ldr	r1, [r1, #16]
 800e9e2:	eba5 0901 	sub.w	r9, r5, r1
 800e9e6:	6965      	ldr	r5, [r4, #20]
 800e9e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e9ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e9f0:	3301      	adds	r3, #1
 800e9f2:	444b      	add	r3, r9
 800e9f4:	106d      	asrs	r5, r5, #1
 800e9f6:	429d      	cmp	r5, r3
 800e9f8:	bf38      	it	cc
 800e9fa:	461d      	movcc	r5, r3
 800e9fc:	0553      	lsls	r3, r2, #21
 800e9fe:	d531      	bpl.n	800ea64 <__ssputs_r+0xa0>
 800ea00:	4629      	mov	r1, r5
 800ea02:	f7ff ff6b 	bl	800e8dc <_malloc_r>
 800ea06:	4606      	mov	r6, r0
 800ea08:	b950      	cbnz	r0, 800ea20 <__ssputs_r+0x5c>
 800ea0a:	230c      	movs	r3, #12
 800ea0c:	f8ca 3000 	str.w	r3, [sl]
 800ea10:	89a3      	ldrh	r3, [r4, #12]
 800ea12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea16:	81a3      	strh	r3, [r4, #12]
 800ea18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ea1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea20:	6921      	ldr	r1, [r4, #16]
 800ea22:	464a      	mov	r2, r9
 800ea24:	f7ff fb46 	bl	800e0b4 <memcpy>
 800ea28:	89a3      	ldrh	r3, [r4, #12]
 800ea2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ea2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ea32:	81a3      	strh	r3, [r4, #12]
 800ea34:	6126      	str	r6, [r4, #16]
 800ea36:	6165      	str	r5, [r4, #20]
 800ea38:	444e      	add	r6, r9
 800ea3a:	eba5 0509 	sub.w	r5, r5, r9
 800ea3e:	6026      	str	r6, [r4, #0]
 800ea40:	60a5      	str	r5, [r4, #8]
 800ea42:	463e      	mov	r6, r7
 800ea44:	42be      	cmp	r6, r7
 800ea46:	d900      	bls.n	800ea4a <__ssputs_r+0x86>
 800ea48:	463e      	mov	r6, r7
 800ea4a:	6820      	ldr	r0, [r4, #0]
 800ea4c:	4632      	mov	r2, r6
 800ea4e:	4641      	mov	r1, r8
 800ea50:	f7fd fffe 	bl	800ca50 <memmove>
 800ea54:	68a3      	ldr	r3, [r4, #8]
 800ea56:	1b9b      	subs	r3, r3, r6
 800ea58:	60a3      	str	r3, [r4, #8]
 800ea5a:	6823      	ldr	r3, [r4, #0]
 800ea5c:	4433      	add	r3, r6
 800ea5e:	6023      	str	r3, [r4, #0]
 800ea60:	2000      	movs	r0, #0
 800ea62:	e7db      	b.n	800ea1c <__ssputs_r+0x58>
 800ea64:	462a      	mov	r2, r5
 800ea66:	f000 f967 	bl	800ed38 <_realloc_r>
 800ea6a:	4606      	mov	r6, r0
 800ea6c:	2800      	cmp	r0, #0
 800ea6e:	d1e1      	bne.n	800ea34 <__ssputs_r+0x70>
 800ea70:	6921      	ldr	r1, [r4, #16]
 800ea72:	4650      	mov	r0, sl
 800ea74:	f7ff fec6 	bl	800e804 <_free_r>
 800ea78:	e7c7      	b.n	800ea0a <__ssputs_r+0x46>
	...

0800ea7c <_svfiprintf_r>:
 800ea7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea80:	4698      	mov	r8, r3
 800ea82:	898b      	ldrh	r3, [r1, #12]
 800ea84:	061b      	lsls	r3, r3, #24
 800ea86:	b09d      	sub	sp, #116	; 0x74
 800ea88:	4607      	mov	r7, r0
 800ea8a:	460d      	mov	r5, r1
 800ea8c:	4614      	mov	r4, r2
 800ea8e:	d50e      	bpl.n	800eaae <_svfiprintf_r+0x32>
 800ea90:	690b      	ldr	r3, [r1, #16]
 800ea92:	b963      	cbnz	r3, 800eaae <_svfiprintf_r+0x32>
 800ea94:	2140      	movs	r1, #64	; 0x40
 800ea96:	f7ff ff21 	bl	800e8dc <_malloc_r>
 800ea9a:	6028      	str	r0, [r5, #0]
 800ea9c:	6128      	str	r0, [r5, #16]
 800ea9e:	b920      	cbnz	r0, 800eaaa <_svfiprintf_r+0x2e>
 800eaa0:	230c      	movs	r3, #12
 800eaa2:	603b      	str	r3, [r7, #0]
 800eaa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eaa8:	e0d1      	b.n	800ec4e <_svfiprintf_r+0x1d2>
 800eaaa:	2340      	movs	r3, #64	; 0x40
 800eaac:	616b      	str	r3, [r5, #20]
 800eaae:	2300      	movs	r3, #0
 800eab0:	9309      	str	r3, [sp, #36]	; 0x24
 800eab2:	2320      	movs	r3, #32
 800eab4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eab8:	f8cd 800c 	str.w	r8, [sp, #12]
 800eabc:	2330      	movs	r3, #48	; 0x30
 800eabe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ec68 <_svfiprintf_r+0x1ec>
 800eac2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eac6:	f04f 0901 	mov.w	r9, #1
 800eaca:	4623      	mov	r3, r4
 800eacc:	469a      	mov	sl, r3
 800eace:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ead2:	b10a      	cbz	r2, 800ead8 <_svfiprintf_r+0x5c>
 800ead4:	2a25      	cmp	r2, #37	; 0x25
 800ead6:	d1f9      	bne.n	800eacc <_svfiprintf_r+0x50>
 800ead8:	ebba 0b04 	subs.w	fp, sl, r4
 800eadc:	d00b      	beq.n	800eaf6 <_svfiprintf_r+0x7a>
 800eade:	465b      	mov	r3, fp
 800eae0:	4622      	mov	r2, r4
 800eae2:	4629      	mov	r1, r5
 800eae4:	4638      	mov	r0, r7
 800eae6:	f7ff ff6d 	bl	800e9c4 <__ssputs_r>
 800eaea:	3001      	adds	r0, #1
 800eaec:	f000 80aa 	beq.w	800ec44 <_svfiprintf_r+0x1c8>
 800eaf0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eaf2:	445a      	add	r2, fp
 800eaf4:	9209      	str	r2, [sp, #36]	; 0x24
 800eaf6:	f89a 3000 	ldrb.w	r3, [sl]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	f000 80a2 	beq.w	800ec44 <_svfiprintf_r+0x1c8>
 800eb00:	2300      	movs	r3, #0
 800eb02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eb06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eb0a:	f10a 0a01 	add.w	sl, sl, #1
 800eb0e:	9304      	str	r3, [sp, #16]
 800eb10:	9307      	str	r3, [sp, #28]
 800eb12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eb16:	931a      	str	r3, [sp, #104]	; 0x68
 800eb18:	4654      	mov	r4, sl
 800eb1a:	2205      	movs	r2, #5
 800eb1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb20:	4851      	ldr	r0, [pc, #324]	; (800ec68 <_svfiprintf_r+0x1ec>)
 800eb22:	f7f1 fb5d 	bl	80001e0 <memchr>
 800eb26:	9a04      	ldr	r2, [sp, #16]
 800eb28:	b9d8      	cbnz	r0, 800eb62 <_svfiprintf_r+0xe6>
 800eb2a:	06d0      	lsls	r0, r2, #27
 800eb2c:	bf44      	itt	mi
 800eb2e:	2320      	movmi	r3, #32
 800eb30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eb34:	0711      	lsls	r1, r2, #28
 800eb36:	bf44      	itt	mi
 800eb38:	232b      	movmi	r3, #43	; 0x2b
 800eb3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eb3e:	f89a 3000 	ldrb.w	r3, [sl]
 800eb42:	2b2a      	cmp	r3, #42	; 0x2a
 800eb44:	d015      	beq.n	800eb72 <_svfiprintf_r+0xf6>
 800eb46:	9a07      	ldr	r2, [sp, #28]
 800eb48:	4654      	mov	r4, sl
 800eb4a:	2000      	movs	r0, #0
 800eb4c:	f04f 0c0a 	mov.w	ip, #10
 800eb50:	4621      	mov	r1, r4
 800eb52:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eb56:	3b30      	subs	r3, #48	; 0x30
 800eb58:	2b09      	cmp	r3, #9
 800eb5a:	d94e      	bls.n	800ebfa <_svfiprintf_r+0x17e>
 800eb5c:	b1b0      	cbz	r0, 800eb8c <_svfiprintf_r+0x110>
 800eb5e:	9207      	str	r2, [sp, #28]
 800eb60:	e014      	b.n	800eb8c <_svfiprintf_r+0x110>
 800eb62:	eba0 0308 	sub.w	r3, r0, r8
 800eb66:	fa09 f303 	lsl.w	r3, r9, r3
 800eb6a:	4313      	orrs	r3, r2
 800eb6c:	9304      	str	r3, [sp, #16]
 800eb6e:	46a2      	mov	sl, r4
 800eb70:	e7d2      	b.n	800eb18 <_svfiprintf_r+0x9c>
 800eb72:	9b03      	ldr	r3, [sp, #12]
 800eb74:	1d19      	adds	r1, r3, #4
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	9103      	str	r1, [sp, #12]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	bfbb      	ittet	lt
 800eb7e:	425b      	neglt	r3, r3
 800eb80:	f042 0202 	orrlt.w	r2, r2, #2
 800eb84:	9307      	strge	r3, [sp, #28]
 800eb86:	9307      	strlt	r3, [sp, #28]
 800eb88:	bfb8      	it	lt
 800eb8a:	9204      	strlt	r2, [sp, #16]
 800eb8c:	7823      	ldrb	r3, [r4, #0]
 800eb8e:	2b2e      	cmp	r3, #46	; 0x2e
 800eb90:	d10c      	bne.n	800ebac <_svfiprintf_r+0x130>
 800eb92:	7863      	ldrb	r3, [r4, #1]
 800eb94:	2b2a      	cmp	r3, #42	; 0x2a
 800eb96:	d135      	bne.n	800ec04 <_svfiprintf_r+0x188>
 800eb98:	9b03      	ldr	r3, [sp, #12]
 800eb9a:	1d1a      	adds	r2, r3, #4
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	9203      	str	r2, [sp, #12]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	bfb8      	it	lt
 800eba4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800eba8:	3402      	adds	r4, #2
 800ebaa:	9305      	str	r3, [sp, #20]
 800ebac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ec78 <_svfiprintf_r+0x1fc>
 800ebb0:	7821      	ldrb	r1, [r4, #0]
 800ebb2:	2203      	movs	r2, #3
 800ebb4:	4650      	mov	r0, sl
 800ebb6:	f7f1 fb13 	bl	80001e0 <memchr>
 800ebba:	b140      	cbz	r0, 800ebce <_svfiprintf_r+0x152>
 800ebbc:	2340      	movs	r3, #64	; 0x40
 800ebbe:	eba0 000a 	sub.w	r0, r0, sl
 800ebc2:	fa03 f000 	lsl.w	r0, r3, r0
 800ebc6:	9b04      	ldr	r3, [sp, #16]
 800ebc8:	4303      	orrs	r3, r0
 800ebca:	3401      	adds	r4, #1
 800ebcc:	9304      	str	r3, [sp, #16]
 800ebce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ebd2:	4826      	ldr	r0, [pc, #152]	; (800ec6c <_svfiprintf_r+0x1f0>)
 800ebd4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ebd8:	2206      	movs	r2, #6
 800ebda:	f7f1 fb01 	bl	80001e0 <memchr>
 800ebde:	2800      	cmp	r0, #0
 800ebe0:	d038      	beq.n	800ec54 <_svfiprintf_r+0x1d8>
 800ebe2:	4b23      	ldr	r3, [pc, #140]	; (800ec70 <_svfiprintf_r+0x1f4>)
 800ebe4:	bb1b      	cbnz	r3, 800ec2e <_svfiprintf_r+0x1b2>
 800ebe6:	9b03      	ldr	r3, [sp, #12]
 800ebe8:	3307      	adds	r3, #7
 800ebea:	f023 0307 	bic.w	r3, r3, #7
 800ebee:	3308      	adds	r3, #8
 800ebf0:	9303      	str	r3, [sp, #12]
 800ebf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ebf4:	4433      	add	r3, r6
 800ebf6:	9309      	str	r3, [sp, #36]	; 0x24
 800ebf8:	e767      	b.n	800eaca <_svfiprintf_r+0x4e>
 800ebfa:	fb0c 3202 	mla	r2, ip, r2, r3
 800ebfe:	460c      	mov	r4, r1
 800ec00:	2001      	movs	r0, #1
 800ec02:	e7a5      	b.n	800eb50 <_svfiprintf_r+0xd4>
 800ec04:	2300      	movs	r3, #0
 800ec06:	3401      	adds	r4, #1
 800ec08:	9305      	str	r3, [sp, #20]
 800ec0a:	4619      	mov	r1, r3
 800ec0c:	f04f 0c0a 	mov.w	ip, #10
 800ec10:	4620      	mov	r0, r4
 800ec12:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ec16:	3a30      	subs	r2, #48	; 0x30
 800ec18:	2a09      	cmp	r2, #9
 800ec1a:	d903      	bls.n	800ec24 <_svfiprintf_r+0x1a8>
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d0c5      	beq.n	800ebac <_svfiprintf_r+0x130>
 800ec20:	9105      	str	r1, [sp, #20]
 800ec22:	e7c3      	b.n	800ebac <_svfiprintf_r+0x130>
 800ec24:	fb0c 2101 	mla	r1, ip, r1, r2
 800ec28:	4604      	mov	r4, r0
 800ec2a:	2301      	movs	r3, #1
 800ec2c:	e7f0      	b.n	800ec10 <_svfiprintf_r+0x194>
 800ec2e:	ab03      	add	r3, sp, #12
 800ec30:	9300      	str	r3, [sp, #0]
 800ec32:	462a      	mov	r2, r5
 800ec34:	4b0f      	ldr	r3, [pc, #60]	; (800ec74 <_svfiprintf_r+0x1f8>)
 800ec36:	a904      	add	r1, sp, #16
 800ec38:	4638      	mov	r0, r7
 800ec3a:	f7fd ffcb 	bl	800cbd4 <_printf_float>
 800ec3e:	1c42      	adds	r2, r0, #1
 800ec40:	4606      	mov	r6, r0
 800ec42:	d1d6      	bne.n	800ebf2 <_svfiprintf_r+0x176>
 800ec44:	89ab      	ldrh	r3, [r5, #12]
 800ec46:	065b      	lsls	r3, r3, #25
 800ec48:	f53f af2c 	bmi.w	800eaa4 <_svfiprintf_r+0x28>
 800ec4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ec4e:	b01d      	add	sp, #116	; 0x74
 800ec50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec54:	ab03      	add	r3, sp, #12
 800ec56:	9300      	str	r3, [sp, #0]
 800ec58:	462a      	mov	r2, r5
 800ec5a:	4b06      	ldr	r3, [pc, #24]	; (800ec74 <_svfiprintf_r+0x1f8>)
 800ec5c:	a904      	add	r1, sp, #16
 800ec5e:	4638      	mov	r0, r7
 800ec60:	f7fe fa5c 	bl	800d11c <_printf_i>
 800ec64:	e7eb      	b.n	800ec3e <_svfiprintf_r+0x1c2>
 800ec66:	bf00      	nop
 800ec68:	08010cd4 	.word	0x08010cd4
 800ec6c:	08010cde 	.word	0x08010cde
 800ec70:	0800cbd5 	.word	0x0800cbd5
 800ec74:	0800e9c5 	.word	0x0800e9c5
 800ec78:	08010cda 	.word	0x08010cda

0800ec7c <_sbrk_r>:
 800ec7c:	b538      	push	{r3, r4, r5, lr}
 800ec7e:	4d06      	ldr	r5, [pc, #24]	; (800ec98 <_sbrk_r+0x1c>)
 800ec80:	2300      	movs	r3, #0
 800ec82:	4604      	mov	r4, r0
 800ec84:	4608      	mov	r0, r1
 800ec86:	602b      	str	r3, [r5, #0]
 800ec88:	f7f3 ff42 	bl	8002b10 <_sbrk>
 800ec8c:	1c43      	adds	r3, r0, #1
 800ec8e:	d102      	bne.n	800ec96 <_sbrk_r+0x1a>
 800ec90:	682b      	ldr	r3, [r5, #0]
 800ec92:	b103      	cbz	r3, 800ec96 <_sbrk_r+0x1a>
 800ec94:	6023      	str	r3, [r4, #0]
 800ec96:	bd38      	pop	{r3, r4, r5, pc}
 800ec98:	2000b1f0 	.word	0x2000b1f0

0800ec9c <__assert_func>:
 800ec9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ec9e:	4614      	mov	r4, r2
 800eca0:	461a      	mov	r2, r3
 800eca2:	4b09      	ldr	r3, [pc, #36]	; (800ecc8 <__assert_func+0x2c>)
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	4605      	mov	r5, r0
 800eca8:	68d8      	ldr	r0, [r3, #12]
 800ecaa:	b14c      	cbz	r4, 800ecc0 <__assert_func+0x24>
 800ecac:	4b07      	ldr	r3, [pc, #28]	; (800eccc <__assert_func+0x30>)
 800ecae:	9100      	str	r1, [sp, #0]
 800ecb0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ecb4:	4906      	ldr	r1, [pc, #24]	; (800ecd0 <__assert_func+0x34>)
 800ecb6:	462b      	mov	r3, r5
 800ecb8:	f000 f80e 	bl	800ecd8 <fiprintf>
 800ecbc:	f000 fa92 	bl	800f1e4 <abort>
 800ecc0:	4b04      	ldr	r3, [pc, #16]	; (800ecd4 <__assert_func+0x38>)
 800ecc2:	461c      	mov	r4, r3
 800ecc4:	e7f3      	b.n	800ecae <__assert_func+0x12>
 800ecc6:	bf00      	nop
 800ecc8:	200001b0 	.word	0x200001b0
 800eccc:	08010ce5 	.word	0x08010ce5
 800ecd0:	08010cf2 	.word	0x08010cf2
 800ecd4:	08010d20 	.word	0x08010d20

0800ecd8 <fiprintf>:
 800ecd8:	b40e      	push	{r1, r2, r3}
 800ecda:	b503      	push	{r0, r1, lr}
 800ecdc:	4601      	mov	r1, r0
 800ecde:	ab03      	add	r3, sp, #12
 800ece0:	4805      	ldr	r0, [pc, #20]	; (800ecf8 <fiprintf+0x20>)
 800ece2:	f853 2b04 	ldr.w	r2, [r3], #4
 800ece6:	6800      	ldr	r0, [r0, #0]
 800ece8:	9301      	str	r3, [sp, #4]
 800ecea:	f000 f87d 	bl	800ede8 <_vfiprintf_r>
 800ecee:	b002      	add	sp, #8
 800ecf0:	f85d eb04 	ldr.w	lr, [sp], #4
 800ecf4:	b003      	add	sp, #12
 800ecf6:	4770      	bx	lr
 800ecf8:	200001b0 	.word	0x200001b0

0800ecfc <__ascii_mbtowc>:
 800ecfc:	b082      	sub	sp, #8
 800ecfe:	b901      	cbnz	r1, 800ed02 <__ascii_mbtowc+0x6>
 800ed00:	a901      	add	r1, sp, #4
 800ed02:	b142      	cbz	r2, 800ed16 <__ascii_mbtowc+0x1a>
 800ed04:	b14b      	cbz	r3, 800ed1a <__ascii_mbtowc+0x1e>
 800ed06:	7813      	ldrb	r3, [r2, #0]
 800ed08:	600b      	str	r3, [r1, #0]
 800ed0a:	7812      	ldrb	r2, [r2, #0]
 800ed0c:	1e10      	subs	r0, r2, #0
 800ed0e:	bf18      	it	ne
 800ed10:	2001      	movne	r0, #1
 800ed12:	b002      	add	sp, #8
 800ed14:	4770      	bx	lr
 800ed16:	4610      	mov	r0, r2
 800ed18:	e7fb      	b.n	800ed12 <__ascii_mbtowc+0x16>
 800ed1a:	f06f 0001 	mvn.w	r0, #1
 800ed1e:	e7f8      	b.n	800ed12 <__ascii_mbtowc+0x16>

0800ed20 <__malloc_lock>:
 800ed20:	4801      	ldr	r0, [pc, #4]	; (800ed28 <__malloc_lock+0x8>)
 800ed22:	f000 bc1f 	b.w	800f564 <__retarget_lock_acquire_recursive>
 800ed26:	bf00      	nop
 800ed28:	2000b1f4 	.word	0x2000b1f4

0800ed2c <__malloc_unlock>:
 800ed2c:	4801      	ldr	r0, [pc, #4]	; (800ed34 <__malloc_unlock+0x8>)
 800ed2e:	f000 bc1a 	b.w	800f566 <__retarget_lock_release_recursive>
 800ed32:	bf00      	nop
 800ed34:	2000b1f4 	.word	0x2000b1f4

0800ed38 <_realloc_r>:
 800ed38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed3c:	4680      	mov	r8, r0
 800ed3e:	4614      	mov	r4, r2
 800ed40:	460e      	mov	r6, r1
 800ed42:	b921      	cbnz	r1, 800ed4e <_realloc_r+0x16>
 800ed44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ed48:	4611      	mov	r1, r2
 800ed4a:	f7ff bdc7 	b.w	800e8dc <_malloc_r>
 800ed4e:	b92a      	cbnz	r2, 800ed5c <_realloc_r+0x24>
 800ed50:	f7ff fd58 	bl	800e804 <_free_r>
 800ed54:	4625      	mov	r5, r4
 800ed56:	4628      	mov	r0, r5
 800ed58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed5c:	f000 fc6a 	bl	800f634 <_malloc_usable_size_r>
 800ed60:	4284      	cmp	r4, r0
 800ed62:	4607      	mov	r7, r0
 800ed64:	d802      	bhi.n	800ed6c <_realloc_r+0x34>
 800ed66:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ed6a:	d812      	bhi.n	800ed92 <_realloc_r+0x5a>
 800ed6c:	4621      	mov	r1, r4
 800ed6e:	4640      	mov	r0, r8
 800ed70:	f7ff fdb4 	bl	800e8dc <_malloc_r>
 800ed74:	4605      	mov	r5, r0
 800ed76:	2800      	cmp	r0, #0
 800ed78:	d0ed      	beq.n	800ed56 <_realloc_r+0x1e>
 800ed7a:	42bc      	cmp	r4, r7
 800ed7c:	4622      	mov	r2, r4
 800ed7e:	4631      	mov	r1, r6
 800ed80:	bf28      	it	cs
 800ed82:	463a      	movcs	r2, r7
 800ed84:	f7ff f996 	bl	800e0b4 <memcpy>
 800ed88:	4631      	mov	r1, r6
 800ed8a:	4640      	mov	r0, r8
 800ed8c:	f7ff fd3a 	bl	800e804 <_free_r>
 800ed90:	e7e1      	b.n	800ed56 <_realloc_r+0x1e>
 800ed92:	4635      	mov	r5, r6
 800ed94:	e7df      	b.n	800ed56 <_realloc_r+0x1e>

0800ed96 <__sfputc_r>:
 800ed96:	6893      	ldr	r3, [r2, #8]
 800ed98:	3b01      	subs	r3, #1
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	b410      	push	{r4}
 800ed9e:	6093      	str	r3, [r2, #8]
 800eda0:	da08      	bge.n	800edb4 <__sfputc_r+0x1e>
 800eda2:	6994      	ldr	r4, [r2, #24]
 800eda4:	42a3      	cmp	r3, r4
 800eda6:	db01      	blt.n	800edac <__sfputc_r+0x16>
 800eda8:	290a      	cmp	r1, #10
 800edaa:	d103      	bne.n	800edb4 <__sfputc_r+0x1e>
 800edac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800edb0:	f000 b94a 	b.w	800f048 <__swbuf_r>
 800edb4:	6813      	ldr	r3, [r2, #0]
 800edb6:	1c58      	adds	r0, r3, #1
 800edb8:	6010      	str	r0, [r2, #0]
 800edba:	7019      	strb	r1, [r3, #0]
 800edbc:	4608      	mov	r0, r1
 800edbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800edc2:	4770      	bx	lr

0800edc4 <__sfputs_r>:
 800edc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edc6:	4606      	mov	r6, r0
 800edc8:	460f      	mov	r7, r1
 800edca:	4614      	mov	r4, r2
 800edcc:	18d5      	adds	r5, r2, r3
 800edce:	42ac      	cmp	r4, r5
 800edd0:	d101      	bne.n	800edd6 <__sfputs_r+0x12>
 800edd2:	2000      	movs	r0, #0
 800edd4:	e007      	b.n	800ede6 <__sfputs_r+0x22>
 800edd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800edda:	463a      	mov	r2, r7
 800eddc:	4630      	mov	r0, r6
 800edde:	f7ff ffda 	bl	800ed96 <__sfputc_r>
 800ede2:	1c43      	adds	r3, r0, #1
 800ede4:	d1f3      	bne.n	800edce <__sfputs_r+0xa>
 800ede6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ede8 <_vfiprintf_r>:
 800ede8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edec:	460d      	mov	r5, r1
 800edee:	b09d      	sub	sp, #116	; 0x74
 800edf0:	4614      	mov	r4, r2
 800edf2:	4698      	mov	r8, r3
 800edf4:	4606      	mov	r6, r0
 800edf6:	b118      	cbz	r0, 800ee00 <_vfiprintf_r+0x18>
 800edf8:	6983      	ldr	r3, [r0, #24]
 800edfa:	b90b      	cbnz	r3, 800ee00 <_vfiprintf_r+0x18>
 800edfc:	f000 fb14 	bl	800f428 <__sinit>
 800ee00:	4b89      	ldr	r3, [pc, #548]	; (800f028 <_vfiprintf_r+0x240>)
 800ee02:	429d      	cmp	r5, r3
 800ee04:	d11b      	bne.n	800ee3e <_vfiprintf_r+0x56>
 800ee06:	6875      	ldr	r5, [r6, #4]
 800ee08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ee0a:	07d9      	lsls	r1, r3, #31
 800ee0c:	d405      	bmi.n	800ee1a <_vfiprintf_r+0x32>
 800ee0e:	89ab      	ldrh	r3, [r5, #12]
 800ee10:	059a      	lsls	r2, r3, #22
 800ee12:	d402      	bmi.n	800ee1a <_vfiprintf_r+0x32>
 800ee14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ee16:	f000 fba5 	bl	800f564 <__retarget_lock_acquire_recursive>
 800ee1a:	89ab      	ldrh	r3, [r5, #12]
 800ee1c:	071b      	lsls	r3, r3, #28
 800ee1e:	d501      	bpl.n	800ee24 <_vfiprintf_r+0x3c>
 800ee20:	692b      	ldr	r3, [r5, #16]
 800ee22:	b9eb      	cbnz	r3, 800ee60 <_vfiprintf_r+0x78>
 800ee24:	4629      	mov	r1, r5
 800ee26:	4630      	mov	r0, r6
 800ee28:	f000 f96e 	bl	800f108 <__swsetup_r>
 800ee2c:	b1c0      	cbz	r0, 800ee60 <_vfiprintf_r+0x78>
 800ee2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ee30:	07dc      	lsls	r4, r3, #31
 800ee32:	d50e      	bpl.n	800ee52 <_vfiprintf_r+0x6a>
 800ee34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ee38:	b01d      	add	sp, #116	; 0x74
 800ee3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee3e:	4b7b      	ldr	r3, [pc, #492]	; (800f02c <_vfiprintf_r+0x244>)
 800ee40:	429d      	cmp	r5, r3
 800ee42:	d101      	bne.n	800ee48 <_vfiprintf_r+0x60>
 800ee44:	68b5      	ldr	r5, [r6, #8]
 800ee46:	e7df      	b.n	800ee08 <_vfiprintf_r+0x20>
 800ee48:	4b79      	ldr	r3, [pc, #484]	; (800f030 <_vfiprintf_r+0x248>)
 800ee4a:	429d      	cmp	r5, r3
 800ee4c:	bf08      	it	eq
 800ee4e:	68f5      	ldreq	r5, [r6, #12]
 800ee50:	e7da      	b.n	800ee08 <_vfiprintf_r+0x20>
 800ee52:	89ab      	ldrh	r3, [r5, #12]
 800ee54:	0598      	lsls	r0, r3, #22
 800ee56:	d4ed      	bmi.n	800ee34 <_vfiprintf_r+0x4c>
 800ee58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ee5a:	f000 fb84 	bl	800f566 <__retarget_lock_release_recursive>
 800ee5e:	e7e9      	b.n	800ee34 <_vfiprintf_r+0x4c>
 800ee60:	2300      	movs	r3, #0
 800ee62:	9309      	str	r3, [sp, #36]	; 0x24
 800ee64:	2320      	movs	r3, #32
 800ee66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ee6a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ee6e:	2330      	movs	r3, #48	; 0x30
 800ee70:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f034 <_vfiprintf_r+0x24c>
 800ee74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ee78:	f04f 0901 	mov.w	r9, #1
 800ee7c:	4623      	mov	r3, r4
 800ee7e:	469a      	mov	sl, r3
 800ee80:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ee84:	b10a      	cbz	r2, 800ee8a <_vfiprintf_r+0xa2>
 800ee86:	2a25      	cmp	r2, #37	; 0x25
 800ee88:	d1f9      	bne.n	800ee7e <_vfiprintf_r+0x96>
 800ee8a:	ebba 0b04 	subs.w	fp, sl, r4
 800ee8e:	d00b      	beq.n	800eea8 <_vfiprintf_r+0xc0>
 800ee90:	465b      	mov	r3, fp
 800ee92:	4622      	mov	r2, r4
 800ee94:	4629      	mov	r1, r5
 800ee96:	4630      	mov	r0, r6
 800ee98:	f7ff ff94 	bl	800edc4 <__sfputs_r>
 800ee9c:	3001      	adds	r0, #1
 800ee9e:	f000 80aa 	beq.w	800eff6 <_vfiprintf_r+0x20e>
 800eea2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eea4:	445a      	add	r2, fp
 800eea6:	9209      	str	r2, [sp, #36]	; 0x24
 800eea8:	f89a 3000 	ldrb.w	r3, [sl]
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	f000 80a2 	beq.w	800eff6 <_vfiprintf_r+0x20e>
 800eeb2:	2300      	movs	r3, #0
 800eeb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eeb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eebc:	f10a 0a01 	add.w	sl, sl, #1
 800eec0:	9304      	str	r3, [sp, #16]
 800eec2:	9307      	str	r3, [sp, #28]
 800eec4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eec8:	931a      	str	r3, [sp, #104]	; 0x68
 800eeca:	4654      	mov	r4, sl
 800eecc:	2205      	movs	r2, #5
 800eece:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eed2:	4858      	ldr	r0, [pc, #352]	; (800f034 <_vfiprintf_r+0x24c>)
 800eed4:	f7f1 f984 	bl	80001e0 <memchr>
 800eed8:	9a04      	ldr	r2, [sp, #16]
 800eeda:	b9d8      	cbnz	r0, 800ef14 <_vfiprintf_r+0x12c>
 800eedc:	06d1      	lsls	r1, r2, #27
 800eede:	bf44      	itt	mi
 800eee0:	2320      	movmi	r3, #32
 800eee2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eee6:	0713      	lsls	r3, r2, #28
 800eee8:	bf44      	itt	mi
 800eeea:	232b      	movmi	r3, #43	; 0x2b
 800eeec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eef0:	f89a 3000 	ldrb.w	r3, [sl]
 800eef4:	2b2a      	cmp	r3, #42	; 0x2a
 800eef6:	d015      	beq.n	800ef24 <_vfiprintf_r+0x13c>
 800eef8:	9a07      	ldr	r2, [sp, #28]
 800eefa:	4654      	mov	r4, sl
 800eefc:	2000      	movs	r0, #0
 800eefe:	f04f 0c0a 	mov.w	ip, #10
 800ef02:	4621      	mov	r1, r4
 800ef04:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ef08:	3b30      	subs	r3, #48	; 0x30
 800ef0a:	2b09      	cmp	r3, #9
 800ef0c:	d94e      	bls.n	800efac <_vfiprintf_r+0x1c4>
 800ef0e:	b1b0      	cbz	r0, 800ef3e <_vfiprintf_r+0x156>
 800ef10:	9207      	str	r2, [sp, #28]
 800ef12:	e014      	b.n	800ef3e <_vfiprintf_r+0x156>
 800ef14:	eba0 0308 	sub.w	r3, r0, r8
 800ef18:	fa09 f303 	lsl.w	r3, r9, r3
 800ef1c:	4313      	orrs	r3, r2
 800ef1e:	9304      	str	r3, [sp, #16]
 800ef20:	46a2      	mov	sl, r4
 800ef22:	e7d2      	b.n	800eeca <_vfiprintf_r+0xe2>
 800ef24:	9b03      	ldr	r3, [sp, #12]
 800ef26:	1d19      	adds	r1, r3, #4
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	9103      	str	r1, [sp, #12]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	bfbb      	ittet	lt
 800ef30:	425b      	neglt	r3, r3
 800ef32:	f042 0202 	orrlt.w	r2, r2, #2
 800ef36:	9307      	strge	r3, [sp, #28]
 800ef38:	9307      	strlt	r3, [sp, #28]
 800ef3a:	bfb8      	it	lt
 800ef3c:	9204      	strlt	r2, [sp, #16]
 800ef3e:	7823      	ldrb	r3, [r4, #0]
 800ef40:	2b2e      	cmp	r3, #46	; 0x2e
 800ef42:	d10c      	bne.n	800ef5e <_vfiprintf_r+0x176>
 800ef44:	7863      	ldrb	r3, [r4, #1]
 800ef46:	2b2a      	cmp	r3, #42	; 0x2a
 800ef48:	d135      	bne.n	800efb6 <_vfiprintf_r+0x1ce>
 800ef4a:	9b03      	ldr	r3, [sp, #12]
 800ef4c:	1d1a      	adds	r2, r3, #4
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	9203      	str	r2, [sp, #12]
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	bfb8      	it	lt
 800ef56:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ef5a:	3402      	adds	r4, #2
 800ef5c:	9305      	str	r3, [sp, #20]
 800ef5e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f044 <_vfiprintf_r+0x25c>
 800ef62:	7821      	ldrb	r1, [r4, #0]
 800ef64:	2203      	movs	r2, #3
 800ef66:	4650      	mov	r0, sl
 800ef68:	f7f1 f93a 	bl	80001e0 <memchr>
 800ef6c:	b140      	cbz	r0, 800ef80 <_vfiprintf_r+0x198>
 800ef6e:	2340      	movs	r3, #64	; 0x40
 800ef70:	eba0 000a 	sub.w	r0, r0, sl
 800ef74:	fa03 f000 	lsl.w	r0, r3, r0
 800ef78:	9b04      	ldr	r3, [sp, #16]
 800ef7a:	4303      	orrs	r3, r0
 800ef7c:	3401      	adds	r4, #1
 800ef7e:	9304      	str	r3, [sp, #16]
 800ef80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef84:	482c      	ldr	r0, [pc, #176]	; (800f038 <_vfiprintf_r+0x250>)
 800ef86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ef8a:	2206      	movs	r2, #6
 800ef8c:	f7f1 f928 	bl	80001e0 <memchr>
 800ef90:	2800      	cmp	r0, #0
 800ef92:	d03f      	beq.n	800f014 <_vfiprintf_r+0x22c>
 800ef94:	4b29      	ldr	r3, [pc, #164]	; (800f03c <_vfiprintf_r+0x254>)
 800ef96:	bb1b      	cbnz	r3, 800efe0 <_vfiprintf_r+0x1f8>
 800ef98:	9b03      	ldr	r3, [sp, #12]
 800ef9a:	3307      	adds	r3, #7
 800ef9c:	f023 0307 	bic.w	r3, r3, #7
 800efa0:	3308      	adds	r3, #8
 800efa2:	9303      	str	r3, [sp, #12]
 800efa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800efa6:	443b      	add	r3, r7
 800efa8:	9309      	str	r3, [sp, #36]	; 0x24
 800efaa:	e767      	b.n	800ee7c <_vfiprintf_r+0x94>
 800efac:	fb0c 3202 	mla	r2, ip, r2, r3
 800efb0:	460c      	mov	r4, r1
 800efb2:	2001      	movs	r0, #1
 800efb4:	e7a5      	b.n	800ef02 <_vfiprintf_r+0x11a>
 800efb6:	2300      	movs	r3, #0
 800efb8:	3401      	adds	r4, #1
 800efba:	9305      	str	r3, [sp, #20]
 800efbc:	4619      	mov	r1, r3
 800efbe:	f04f 0c0a 	mov.w	ip, #10
 800efc2:	4620      	mov	r0, r4
 800efc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800efc8:	3a30      	subs	r2, #48	; 0x30
 800efca:	2a09      	cmp	r2, #9
 800efcc:	d903      	bls.n	800efd6 <_vfiprintf_r+0x1ee>
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d0c5      	beq.n	800ef5e <_vfiprintf_r+0x176>
 800efd2:	9105      	str	r1, [sp, #20]
 800efd4:	e7c3      	b.n	800ef5e <_vfiprintf_r+0x176>
 800efd6:	fb0c 2101 	mla	r1, ip, r1, r2
 800efda:	4604      	mov	r4, r0
 800efdc:	2301      	movs	r3, #1
 800efde:	e7f0      	b.n	800efc2 <_vfiprintf_r+0x1da>
 800efe0:	ab03      	add	r3, sp, #12
 800efe2:	9300      	str	r3, [sp, #0]
 800efe4:	462a      	mov	r2, r5
 800efe6:	4b16      	ldr	r3, [pc, #88]	; (800f040 <_vfiprintf_r+0x258>)
 800efe8:	a904      	add	r1, sp, #16
 800efea:	4630      	mov	r0, r6
 800efec:	f7fd fdf2 	bl	800cbd4 <_printf_float>
 800eff0:	4607      	mov	r7, r0
 800eff2:	1c78      	adds	r0, r7, #1
 800eff4:	d1d6      	bne.n	800efa4 <_vfiprintf_r+0x1bc>
 800eff6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eff8:	07d9      	lsls	r1, r3, #31
 800effa:	d405      	bmi.n	800f008 <_vfiprintf_r+0x220>
 800effc:	89ab      	ldrh	r3, [r5, #12]
 800effe:	059a      	lsls	r2, r3, #22
 800f000:	d402      	bmi.n	800f008 <_vfiprintf_r+0x220>
 800f002:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f004:	f000 faaf 	bl	800f566 <__retarget_lock_release_recursive>
 800f008:	89ab      	ldrh	r3, [r5, #12]
 800f00a:	065b      	lsls	r3, r3, #25
 800f00c:	f53f af12 	bmi.w	800ee34 <_vfiprintf_r+0x4c>
 800f010:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f012:	e711      	b.n	800ee38 <_vfiprintf_r+0x50>
 800f014:	ab03      	add	r3, sp, #12
 800f016:	9300      	str	r3, [sp, #0]
 800f018:	462a      	mov	r2, r5
 800f01a:	4b09      	ldr	r3, [pc, #36]	; (800f040 <_vfiprintf_r+0x258>)
 800f01c:	a904      	add	r1, sp, #16
 800f01e:	4630      	mov	r0, r6
 800f020:	f7fe f87c 	bl	800d11c <_printf_i>
 800f024:	e7e4      	b.n	800eff0 <_vfiprintf_r+0x208>
 800f026:	bf00      	nop
 800f028:	08010e4c 	.word	0x08010e4c
 800f02c:	08010e6c 	.word	0x08010e6c
 800f030:	08010e2c 	.word	0x08010e2c
 800f034:	08010cd4 	.word	0x08010cd4
 800f038:	08010cde 	.word	0x08010cde
 800f03c:	0800cbd5 	.word	0x0800cbd5
 800f040:	0800edc5 	.word	0x0800edc5
 800f044:	08010cda 	.word	0x08010cda

0800f048 <__swbuf_r>:
 800f048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f04a:	460e      	mov	r6, r1
 800f04c:	4614      	mov	r4, r2
 800f04e:	4605      	mov	r5, r0
 800f050:	b118      	cbz	r0, 800f05a <__swbuf_r+0x12>
 800f052:	6983      	ldr	r3, [r0, #24]
 800f054:	b90b      	cbnz	r3, 800f05a <__swbuf_r+0x12>
 800f056:	f000 f9e7 	bl	800f428 <__sinit>
 800f05a:	4b21      	ldr	r3, [pc, #132]	; (800f0e0 <__swbuf_r+0x98>)
 800f05c:	429c      	cmp	r4, r3
 800f05e:	d12b      	bne.n	800f0b8 <__swbuf_r+0x70>
 800f060:	686c      	ldr	r4, [r5, #4]
 800f062:	69a3      	ldr	r3, [r4, #24]
 800f064:	60a3      	str	r3, [r4, #8]
 800f066:	89a3      	ldrh	r3, [r4, #12]
 800f068:	071a      	lsls	r2, r3, #28
 800f06a:	d52f      	bpl.n	800f0cc <__swbuf_r+0x84>
 800f06c:	6923      	ldr	r3, [r4, #16]
 800f06e:	b36b      	cbz	r3, 800f0cc <__swbuf_r+0x84>
 800f070:	6923      	ldr	r3, [r4, #16]
 800f072:	6820      	ldr	r0, [r4, #0]
 800f074:	1ac0      	subs	r0, r0, r3
 800f076:	6963      	ldr	r3, [r4, #20]
 800f078:	b2f6      	uxtb	r6, r6
 800f07a:	4283      	cmp	r3, r0
 800f07c:	4637      	mov	r7, r6
 800f07e:	dc04      	bgt.n	800f08a <__swbuf_r+0x42>
 800f080:	4621      	mov	r1, r4
 800f082:	4628      	mov	r0, r5
 800f084:	f000 f93c 	bl	800f300 <_fflush_r>
 800f088:	bb30      	cbnz	r0, 800f0d8 <__swbuf_r+0x90>
 800f08a:	68a3      	ldr	r3, [r4, #8]
 800f08c:	3b01      	subs	r3, #1
 800f08e:	60a3      	str	r3, [r4, #8]
 800f090:	6823      	ldr	r3, [r4, #0]
 800f092:	1c5a      	adds	r2, r3, #1
 800f094:	6022      	str	r2, [r4, #0]
 800f096:	701e      	strb	r6, [r3, #0]
 800f098:	6963      	ldr	r3, [r4, #20]
 800f09a:	3001      	adds	r0, #1
 800f09c:	4283      	cmp	r3, r0
 800f09e:	d004      	beq.n	800f0aa <__swbuf_r+0x62>
 800f0a0:	89a3      	ldrh	r3, [r4, #12]
 800f0a2:	07db      	lsls	r3, r3, #31
 800f0a4:	d506      	bpl.n	800f0b4 <__swbuf_r+0x6c>
 800f0a6:	2e0a      	cmp	r6, #10
 800f0a8:	d104      	bne.n	800f0b4 <__swbuf_r+0x6c>
 800f0aa:	4621      	mov	r1, r4
 800f0ac:	4628      	mov	r0, r5
 800f0ae:	f000 f927 	bl	800f300 <_fflush_r>
 800f0b2:	b988      	cbnz	r0, 800f0d8 <__swbuf_r+0x90>
 800f0b4:	4638      	mov	r0, r7
 800f0b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f0b8:	4b0a      	ldr	r3, [pc, #40]	; (800f0e4 <__swbuf_r+0x9c>)
 800f0ba:	429c      	cmp	r4, r3
 800f0bc:	d101      	bne.n	800f0c2 <__swbuf_r+0x7a>
 800f0be:	68ac      	ldr	r4, [r5, #8]
 800f0c0:	e7cf      	b.n	800f062 <__swbuf_r+0x1a>
 800f0c2:	4b09      	ldr	r3, [pc, #36]	; (800f0e8 <__swbuf_r+0xa0>)
 800f0c4:	429c      	cmp	r4, r3
 800f0c6:	bf08      	it	eq
 800f0c8:	68ec      	ldreq	r4, [r5, #12]
 800f0ca:	e7ca      	b.n	800f062 <__swbuf_r+0x1a>
 800f0cc:	4621      	mov	r1, r4
 800f0ce:	4628      	mov	r0, r5
 800f0d0:	f000 f81a 	bl	800f108 <__swsetup_r>
 800f0d4:	2800      	cmp	r0, #0
 800f0d6:	d0cb      	beq.n	800f070 <__swbuf_r+0x28>
 800f0d8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800f0dc:	e7ea      	b.n	800f0b4 <__swbuf_r+0x6c>
 800f0de:	bf00      	nop
 800f0e0:	08010e4c 	.word	0x08010e4c
 800f0e4:	08010e6c 	.word	0x08010e6c
 800f0e8:	08010e2c 	.word	0x08010e2c

0800f0ec <__ascii_wctomb>:
 800f0ec:	b149      	cbz	r1, 800f102 <__ascii_wctomb+0x16>
 800f0ee:	2aff      	cmp	r2, #255	; 0xff
 800f0f0:	bf85      	ittet	hi
 800f0f2:	238a      	movhi	r3, #138	; 0x8a
 800f0f4:	6003      	strhi	r3, [r0, #0]
 800f0f6:	700a      	strbls	r2, [r1, #0]
 800f0f8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800f0fc:	bf98      	it	ls
 800f0fe:	2001      	movls	r0, #1
 800f100:	4770      	bx	lr
 800f102:	4608      	mov	r0, r1
 800f104:	4770      	bx	lr
	...

0800f108 <__swsetup_r>:
 800f108:	4b32      	ldr	r3, [pc, #200]	; (800f1d4 <__swsetup_r+0xcc>)
 800f10a:	b570      	push	{r4, r5, r6, lr}
 800f10c:	681d      	ldr	r5, [r3, #0]
 800f10e:	4606      	mov	r6, r0
 800f110:	460c      	mov	r4, r1
 800f112:	b125      	cbz	r5, 800f11e <__swsetup_r+0x16>
 800f114:	69ab      	ldr	r3, [r5, #24]
 800f116:	b913      	cbnz	r3, 800f11e <__swsetup_r+0x16>
 800f118:	4628      	mov	r0, r5
 800f11a:	f000 f985 	bl	800f428 <__sinit>
 800f11e:	4b2e      	ldr	r3, [pc, #184]	; (800f1d8 <__swsetup_r+0xd0>)
 800f120:	429c      	cmp	r4, r3
 800f122:	d10f      	bne.n	800f144 <__swsetup_r+0x3c>
 800f124:	686c      	ldr	r4, [r5, #4]
 800f126:	89a3      	ldrh	r3, [r4, #12]
 800f128:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f12c:	0719      	lsls	r1, r3, #28
 800f12e:	d42c      	bmi.n	800f18a <__swsetup_r+0x82>
 800f130:	06dd      	lsls	r5, r3, #27
 800f132:	d411      	bmi.n	800f158 <__swsetup_r+0x50>
 800f134:	2309      	movs	r3, #9
 800f136:	6033      	str	r3, [r6, #0]
 800f138:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f13c:	81a3      	strh	r3, [r4, #12]
 800f13e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f142:	e03e      	b.n	800f1c2 <__swsetup_r+0xba>
 800f144:	4b25      	ldr	r3, [pc, #148]	; (800f1dc <__swsetup_r+0xd4>)
 800f146:	429c      	cmp	r4, r3
 800f148:	d101      	bne.n	800f14e <__swsetup_r+0x46>
 800f14a:	68ac      	ldr	r4, [r5, #8]
 800f14c:	e7eb      	b.n	800f126 <__swsetup_r+0x1e>
 800f14e:	4b24      	ldr	r3, [pc, #144]	; (800f1e0 <__swsetup_r+0xd8>)
 800f150:	429c      	cmp	r4, r3
 800f152:	bf08      	it	eq
 800f154:	68ec      	ldreq	r4, [r5, #12]
 800f156:	e7e6      	b.n	800f126 <__swsetup_r+0x1e>
 800f158:	0758      	lsls	r0, r3, #29
 800f15a:	d512      	bpl.n	800f182 <__swsetup_r+0x7a>
 800f15c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f15e:	b141      	cbz	r1, 800f172 <__swsetup_r+0x6a>
 800f160:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f164:	4299      	cmp	r1, r3
 800f166:	d002      	beq.n	800f16e <__swsetup_r+0x66>
 800f168:	4630      	mov	r0, r6
 800f16a:	f7ff fb4b 	bl	800e804 <_free_r>
 800f16e:	2300      	movs	r3, #0
 800f170:	6363      	str	r3, [r4, #52]	; 0x34
 800f172:	89a3      	ldrh	r3, [r4, #12]
 800f174:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f178:	81a3      	strh	r3, [r4, #12]
 800f17a:	2300      	movs	r3, #0
 800f17c:	6063      	str	r3, [r4, #4]
 800f17e:	6923      	ldr	r3, [r4, #16]
 800f180:	6023      	str	r3, [r4, #0]
 800f182:	89a3      	ldrh	r3, [r4, #12]
 800f184:	f043 0308 	orr.w	r3, r3, #8
 800f188:	81a3      	strh	r3, [r4, #12]
 800f18a:	6923      	ldr	r3, [r4, #16]
 800f18c:	b94b      	cbnz	r3, 800f1a2 <__swsetup_r+0x9a>
 800f18e:	89a3      	ldrh	r3, [r4, #12]
 800f190:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f194:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f198:	d003      	beq.n	800f1a2 <__swsetup_r+0x9a>
 800f19a:	4621      	mov	r1, r4
 800f19c:	4630      	mov	r0, r6
 800f19e:	f000 fa09 	bl	800f5b4 <__smakebuf_r>
 800f1a2:	89a0      	ldrh	r0, [r4, #12]
 800f1a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f1a8:	f010 0301 	ands.w	r3, r0, #1
 800f1ac:	d00a      	beq.n	800f1c4 <__swsetup_r+0xbc>
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	60a3      	str	r3, [r4, #8]
 800f1b2:	6963      	ldr	r3, [r4, #20]
 800f1b4:	425b      	negs	r3, r3
 800f1b6:	61a3      	str	r3, [r4, #24]
 800f1b8:	6923      	ldr	r3, [r4, #16]
 800f1ba:	b943      	cbnz	r3, 800f1ce <__swsetup_r+0xc6>
 800f1bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f1c0:	d1ba      	bne.n	800f138 <__swsetup_r+0x30>
 800f1c2:	bd70      	pop	{r4, r5, r6, pc}
 800f1c4:	0781      	lsls	r1, r0, #30
 800f1c6:	bf58      	it	pl
 800f1c8:	6963      	ldrpl	r3, [r4, #20]
 800f1ca:	60a3      	str	r3, [r4, #8]
 800f1cc:	e7f4      	b.n	800f1b8 <__swsetup_r+0xb0>
 800f1ce:	2000      	movs	r0, #0
 800f1d0:	e7f7      	b.n	800f1c2 <__swsetup_r+0xba>
 800f1d2:	bf00      	nop
 800f1d4:	200001b0 	.word	0x200001b0
 800f1d8:	08010e4c 	.word	0x08010e4c
 800f1dc:	08010e6c 	.word	0x08010e6c
 800f1e0:	08010e2c 	.word	0x08010e2c

0800f1e4 <abort>:
 800f1e4:	b508      	push	{r3, lr}
 800f1e6:	2006      	movs	r0, #6
 800f1e8:	f000 fa54 	bl	800f694 <raise>
 800f1ec:	2001      	movs	r0, #1
 800f1ee:	f7f3 fc17 	bl	8002a20 <_exit>
	...

0800f1f4 <__sflush_r>:
 800f1f4:	898a      	ldrh	r2, [r1, #12]
 800f1f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1fa:	4605      	mov	r5, r0
 800f1fc:	0710      	lsls	r0, r2, #28
 800f1fe:	460c      	mov	r4, r1
 800f200:	d458      	bmi.n	800f2b4 <__sflush_r+0xc0>
 800f202:	684b      	ldr	r3, [r1, #4]
 800f204:	2b00      	cmp	r3, #0
 800f206:	dc05      	bgt.n	800f214 <__sflush_r+0x20>
 800f208:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	dc02      	bgt.n	800f214 <__sflush_r+0x20>
 800f20e:	2000      	movs	r0, #0
 800f210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f214:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f216:	2e00      	cmp	r6, #0
 800f218:	d0f9      	beq.n	800f20e <__sflush_r+0x1a>
 800f21a:	2300      	movs	r3, #0
 800f21c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f220:	682f      	ldr	r7, [r5, #0]
 800f222:	602b      	str	r3, [r5, #0]
 800f224:	d032      	beq.n	800f28c <__sflush_r+0x98>
 800f226:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f228:	89a3      	ldrh	r3, [r4, #12]
 800f22a:	075a      	lsls	r2, r3, #29
 800f22c:	d505      	bpl.n	800f23a <__sflush_r+0x46>
 800f22e:	6863      	ldr	r3, [r4, #4]
 800f230:	1ac0      	subs	r0, r0, r3
 800f232:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f234:	b10b      	cbz	r3, 800f23a <__sflush_r+0x46>
 800f236:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f238:	1ac0      	subs	r0, r0, r3
 800f23a:	2300      	movs	r3, #0
 800f23c:	4602      	mov	r2, r0
 800f23e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f240:	6a21      	ldr	r1, [r4, #32]
 800f242:	4628      	mov	r0, r5
 800f244:	47b0      	blx	r6
 800f246:	1c43      	adds	r3, r0, #1
 800f248:	89a3      	ldrh	r3, [r4, #12]
 800f24a:	d106      	bne.n	800f25a <__sflush_r+0x66>
 800f24c:	6829      	ldr	r1, [r5, #0]
 800f24e:	291d      	cmp	r1, #29
 800f250:	d82c      	bhi.n	800f2ac <__sflush_r+0xb8>
 800f252:	4a2a      	ldr	r2, [pc, #168]	; (800f2fc <__sflush_r+0x108>)
 800f254:	40ca      	lsrs	r2, r1
 800f256:	07d6      	lsls	r6, r2, #31
 800f258:	d528      	bpl.n	800f2ac <__sflush_r+0xb8>
 800f25a:	2200      	movs	r2, #0
 800f25c:	6062      	str	r2, [r4, #4]
 800f25e:	04d9      	lsls	r1, r3, #19
 800f260:	6922      	ldr	r2, [r4, #16]
 800f262:	6022      	str	r2, [r4, #0]
 800f264:	d504      	bpl.n	800f270 <__sflush_r+0x7c>
 800f266:	1c42      	adds	r2, r0, #1
 800f268:	d101      	bne.n	800f26e <__sflush_r+0x7a>
 800f26a:	682b      	ldr	r3, [r5, #0]
 800f26c:	b903      	cbnz	r3, 800f270 <__sflush_r+0x7c>
 800f26e:	6560      	str	r0, [r4, #84]	; 0x54
 800f270:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f272:	602f      	str	r7, [r5, #0]
 800f274:	2900      	cmp	r1, #0
 800f276:	d0ca      	beq.n	800f20e <__sflush_r+0x1a>
 800f278:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f27c:	4299      	cmp	r1, r3
 800f27e:	d002      	beq.n	800f286 <__sflush_r+0x92>
 800f280:	4628      	mov	r0, r5
 800f282:	f7ff fabf 	bl	800e804 <_free_r>
 800f286:	2000      	movs	r0, #0
 800f288:	6360      	str	r0, [r4, #52]	; 0x34
 800f28a:	e7c1      	b.n	800f210 <__sflush_r+0x1c>
 800f28c:	6a21      	ldr	r1, [r4, #32]
 800f28e:	2301      	movs	r3, #1
 800f290:	4628      	mov	r0, r5
 800f292:	47b0      	blx	r6
 800f294:	1c41      	adds	r1, r0, #1
 800f296:	d1c7      	bne.n	800f228 <__sflush_r+0x34>
 800f298:	682b      	ldr	r3, [r5, #0]
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d0c4      	beq.n	800f228 <__sflush_r+0x34>
 800f29e:	2b1d      	cmp	r3, #29
 800f2a0:	d001      	beq.n	800f2a6 <__sflush_r+0xb2>
 800f2a2:	2b16      	cmp	r3, #22
 800f2a4:	d101      	bne.n	800f2aa <__sflush_r+0xb6>
 800f2a6:	602f      	str	r7, [r5, #0]
 800f2a8:	e7b1      	b.n	800f20e <__sflush_r+0x1a>
 800f2aa:	89a3      	ldrh	r3, [r4, #12]
 800f2ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f2b0:	81a3      	strh	r3, [r4, #12]
 800f2b2:	e7ad      	b.n	800f210 <__sflush_r+0x1c>
 800f2b4:	690f      	ldr	r7, [r1, #16]
 800f2b6:	2f00      	cmp	r7, #0
 800f2b8:	d0a9      	beq.n	800f20e <__sflush_r+0x1a>
 800f2ba:	0793      	lsls	r3, r2, #30
 800f2bc:	680e      	ldr	r6, [r1, #0]
 800f2be:	bf08      	it	eq
 800f2c0:	694b      	ldreq	r3, [r1, #20]
 800f2c2:	600f      	str	r7, [r1, #0]
 800f2c4:	bf18      	it	ne
 800f2c6:	2300      	movne	r3, #0
 800f2c8:	eba6 0807 	sub.w	r8, r6, r7
 800f2cc:	608b      	str	r3, [r1, #8]
 800f2ce:	f1b8 0f00 	cmp.w	r8, #0
 800f2d2:	dd9c      	ble.n	800f20e <__sflush_r+0x1a>
 800f2d4:	6a21      	ldr	r1, [r4, #32]
 800f2d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f2d8:	4643      	mov	r3, r8
 800f2da:	463a      	mov	r2, r7
 800f2dc:	4628      	mov	r0, r5
 800f2de:	47b0      	blx	r6
 800f2e0:	2800      	cmp	r0, #0
 800f2e2:	dc06      	bgt.n	800f2f2 <__sflush_r+0xfe>
 800f2e4:	89a3      	ldrh	r3, [r4, #12]
 800f2e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f2ea:	81a3      	strh	r3, [r4, #12]
 800f2ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f2f0:	e78e      	b.n	800f210 <__sflush_r+0x1c>
 800f2f2:	4407      	add	r7, r0
 800f2f4:	eba8 0800 	sub.w	r8, r8, r0
 800f2f8:	e7e9      	b.n	800f2ce <__sflush_r+0xda>
 800f2fa:	bf00      	nop
 800f2fc:	20400001 	.word	0x20400001

0800f300 <_fflush_r>:
 800f300:	b538      	push	{r3, r4, r5, lr}
 800f302:	690b      	ldr	r3, [r1, #16]
 800f304:	4605      	mov	r5, r0
 800f306:	460c      	mov	r4, r1
 800f308:	b913      	cbnz	r3, 800f310 <_fflush_r+0x10>
 800f30a:	2500      	movs	r5, #0
 800f30c:	4628      	mov	r0, r5
 800f30e:	bd38      	pop	{r3, r4, r5, pc}
 800f310:	b118      	cbz	r0, 800f31a <_fflush_r+0x1a>
 800f312:	6983      	ldr	r3, [r0, #24]
 800f314:	b90b      	cbnz	r3, 800f31a <_fflush_r+0x1a>
 800f316:	f000 f887 	bl	800f428 <__sinit>
 800f31a:	4b14      	ldr	r3, [pc, #80]	; (800f36c <_fflush_r+0x6c>)
 800f31c:	429c      	cmp	r4, r3
 800f31e:	d11b      	bne.n	800f358 <_fflush_r+0x58>
 800f320:	686c      	ldr	r4, [r5, #4]
 800f322:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f326:	2b00      	cmp	r3, #0
 800f328:	d0ef      	beq.n	800f30a <_fflush_r+0xa>
 800f32a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f32c:	07d0      	lsls	r0, r2, #31
 800f32e:	d404      	bmi.n	800f33a <_fflush_r+0x3a>
 800f330:	0599      	lsls	r1, r3, #22
 800f332:	d402      	bmi.n	800f33a <_fflush_r+0x3a>
 800f334:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f336:	f000 f915 	bl	800f564 <__retarget_lock_acquire_recursive>
 800f33a:	4628      	mov	r0, r5
 800f33c:	4621      	mov	r1, r4
 800f33e:	f7ff ff59 	bl	800f1f4 <__sflush_r>
 800f342:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f344:	07da      	lsls	r2, r3, #31
 800f346:	4605      	mov	r5, r0
 800f348:	d4e0      	bmi.n	800f30c <_fflush_r+0xc>
 800f34a:	89a3      	ldrh	r3, [r4, #12]
 800f34c:	059b      	lsls	r3, r3, #22
 800f34e:	d4dd      	bmi.n	800f30c <_fflush_r+0xc>
 800f350:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f352:	f000 f908 	bl	800f566 <__retarget_lock_release_recursive>
 800f356:	e7d9      	b.n	800f30c <_fflush_r+0xc>
 800f358:	4b05      	ldr	r3, [pc, #20]	; (800f370 <_fflush_r+0x70>)
 800f35a:	429c      	cmp	r4, r3
 800f35c:	d101      	bne.n	800f362 <_fflush_r+0x62>
 800f35e:	68ac      	ldr	r4, [r5, #8]
 800f360:	e7df      	b.n	800f322 <_fflush_r+0x22>
 800f362:	4b04      	ldr	r3, [pc, #16]	; (800f374 <_fflush_r+0x74>)
 800f364:	429c      	cmp	r4, r3
 800f366:	bf08      	it	eq
 800f368:	68ec      	ldreq	r4, [r5, #12]
 800f36a:	e7da      	b.n	800f322 <_fflush_r+0x22>
 800f36c:	08010e4c 	.word	0x08010e4c
 800f370:	08010e6c 	.word	0x08010e6c
 800f374:	08010e2c 	.word	0x08010e2c

0800f378 <std>:
 800f378:	2300      	movs	r3, #0
 800f37a:	b510      	push	{r4, lr}
 800f37c:	4604      	mov	r4, r0
 800f37e:	e9c0 3300 	strd	r3, r3, [r0]
 800f382:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f386:	6083      	str	r3, [r0, #8]
 800f388:	8181      	strh	r1, [r0, #12]
 800f38a:	6643      	str	r3, [r0, #100]	; 0x64
 800f38c:	81c2      	strh	r2, [r0, #14]
 800f38e:	6183      	str	r3, [r0, #24]
 800f390:	4619      	mov	r1, r3
 800f392:	2208      	movs	r2, #8
 800f394:	305c      	adds	r0, #92	; 0x5c
 800f396:	f7fd fb75 	bl	800ca84 <memset>
 800f39a:	4b05      	ldr	r3, [pc, #20]	; (800f3b0 <std+0x38>)
 800f39c:	6263      	str	r3, [r4, #36]	; 0x24
 800f39e:	4b05      	ldr	r3, [pc, #20]	; (800f3b4 <std+0x3c>)
 800f3a0:	62a3      	str	r3, [r4, #40]	; 0x28
 800f3a2:	4b05      	ldr	r3, [pc, #20]	; (800f3b8 <std+0x40>)
 800f3a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f3a6:	4b05      	ldr	r3, [pc, #20]	; (800f3bc <std+0x44>)
 800f3a8:	6224      	str	r4, [r4, #32]
 800f3aa:	6323      	str	r3, [r4, #48]	; 0x30
 800f3ac:	bd10      	pop	{r4, pc}
 800f3ae:	bf00      	nop
 800f3b0:	0800f6cd 	.word	0x0800f6cd
 800f3b4:	0800f6ef 	.word	0x0800f6ef
 800f3b8:	0800f727 	.word	0x0800f727
 800f3bc:	0800f74b 	.word	0x0800f74b

0800f3c0 <_cleanup_r>:
 800f3c0:	4901      	ldr	r1, [pc, #4]	; (800f3c8 <_cleanup_r+0x8>)
 800f3c2:	f000 b8af 	b.w	800f524 <_fwalk_reent>
 800f3c6:	bf00      	nop
 800f3c8:	0800f301 	.word	0x0800f301

0800f3cc <__sfmoreglue>:
 800f3cc:	b570      	push	{r4, r5, r6, lr}
 800f3ce:	2268      	movs	r2, #104	; 0x68
 800f3d0:	1e4d      	subs	r5, r1, #1
 800f3d2:	4355      	muls	r5, r2
 800f3d4:	460e      	mov	r6, r1
 800f3d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f3da:	f7ff fa7f 	bl	800e8dc <_malloc_r>
 800f3de:	4604      	mov	r4, r0
 800f3e0:	b140      	cbz	r0, 800f3f4 <__sfmoreglue+0x28>
 800f3e2:	2100      	movs	r1, #0
 800f3e4:	e9c0 1600 	strd	r1, r6, [r0]
 800f3e8:	300c      	adds	r0, #12
 800f3ea:	60a0      	str	r0, [r4, #8]
 800f3ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f3f0:	f7fd fb48 	bl	800ca84 <memset>
 800f3f4:	4620      	mov	r0, r4
 800f3f6:	bd70      	pop	{r4, r5, r6, pc}

0800f3f8 <__sfp_lock_acquire>:
 800f3f8:	4801      	ldr	r0, [pc, #4]	; (800f400 <__sfp_lock_acquire+0x8>)
 800f3fa:	f000 b8b3 	b.w	800f564 <__retarget_lock_acquire_recursive>
 800f3fe:	bf00      	nop
 800f400:	2000b1f5 	.word	0x2000b1f5

0800f404 <__sfp_lock_release>:
 800f404:	4801      	ldr	r0, [pc, #4]	; (800f40c <__sfp_lock_release+0x8>)
 800f406:	f000 b8ae 	b.w	800f566 <__retarget_lock_release_recursive>
 800f40a:	bf00      	nop
 800f40c:	2000b1f5 	.word	0x2000b1f5

0800f410 <__sinit_lock_acquire>:
 800f410:	4801      	ldr	r0, [pc, #4]	; (800f418 <__sinit_lock_acquire+0x8>)
 800f412:	f000 b8a7 	b.w	800f564 <__retarget_lock_acquire_recursive>
 800f416:	bf00      	nop
 800f418:	2000b1f6 	.word	0x2000b1f6

0800f41c <__sinit_lock_release>:
 800f41c:	4801      	ldr	r0, [pc, #4]	; (800f424 <__sinit_lock_release+0x8>)
 800f41e:	f000 b8a2 	b.w	800f566 <__retarget_lock_release_recursive>
 800f422:	bf00      	nop
 800f424:	2000b1f6 	.word	0x2000b1f6

0800f428 <__sinit>:
 800f428:	b510      	push	{r4, lr}
 800f42a:	4604      	mov	r4, r0
 800f42c:	f7ff fff0 	bl	800f410 <__sinit_lock_acquire>
 800f430:	69a3      	ldr	r3, [r4, #24]
 800f432:	b11b      	cbz	r3, 800f43c <__sinit+0x14>
 800f434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f438:	f7ff bff0 	b.w	800f41c <__sinit_lock_release>
 800f43c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f440:	6523      	str	r3, [r4, #80]	; 0x50
 800f442:	4b13      	ldr	r3, [pc, #76]	; (800f490 <__sinit+0x68>)
 800f444:	4a13      	ldr	r2, [pc, #76]	; (800f494 <__sinit+0x6c>)
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	62a2      	str	r2, [r4, #40]	; 0x28
 800f44a:	42a3      	cmp	r3, r4
 800f44c:	bf04      	itt	eq
 800f44e:	2301      	moveq	r3, #1
 800f450:	61a3      	streq	r3, [r4, #24]
 800f452:	4620      	mov	r0, r4
 800f454:	f000 f820 	bl	800f498 <__sfp>
 800f458:	6060      	str	r0, [r4, #4]
 800f45a:	4620      	mov	r0, r4
 800f45c:	f000 f81c 	bl	800f498 <__sfp>
 800f460:	60a0      	str	r0, [r4, #8]
 800f462:	4620      	mov	r0, r4
 800f464:	f000 f818 	bl	800f498 <__sfp>
 800f468:	2200      	movs	r2, #0
 800f46a:	60e0      	str	r0, [r4, #12]
 800f46c:	2104      	movs	r1, #4
 800f46e:	6860      	ldr	r0, [r4, #4]
 800f470:	f7ff ff82 	bl	800f378 <std>
 800f474:	68a0      	ldr	r0, [r4, #8]
 800f476:	2201      	movs	r2, #1
 800f478:	2109      	movs	r1, #9
 800f47a:	f7ff ff7d 	bl	800f378 <std>
 800f47e:	68e0      	ldr	r0, [r4, #12]
 800f480:	2202      	movs	r2, #2
 800f482:	2112      	movs	r1, #18
 800f484:	f7ff ff78 	bl	800f378 <std>
 800f488:	2301      	movs	r3, #1
 800f48a:	61a3      	str	r3, [r4, #24]
 800f48c:	e7d2      	b.n	800f434 <__sinit+0xc>
 800f48e:	bf00      	nop
 800f490:	08010ab0 	.word	0x08010ab0
 800f494:	0800f3c1 	.word	0x0800f3c1

0800f498 <__sfp>:
 800f498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f49a:	4607      	mov	r7, r0
 800f49c:	f7ff ffac 	bl	800f3f8 <__sfp_lock_acquire>
 800f4a0:	4b1e      	ldr	r3, [pc, #120]	; (800f51c <__sfp+0x84>)
 800f4a2:	681e      	ldr	r6, [r3, #0]
 800f4a4:	69b3      	ldr	r3, [r6, #24]
 800f4a6:	b913      	cbnz	r3, 800f4ae <__sfp+0x16>
 800f4a8:	4630      	mov	r0, r6
 800f4aa:	f7ff ffbd 	bl	800f428 <__sinit>
 800f4ae:	3648      	adds	r6, #72	; 0x48
 800f4b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f4b4:	3b01      	subs	r3, #1
 800f4b6:	d503      	bpl.n	800f4c0 <__sfp+0x28>
 800f4b8:	6833      	ldr	r3, [r6, #0]
 800f4ba:	b30b      	cbz	r3, 800f500 <__sfp+0x68>
 800f4bc:	6836      	ldr	r6, [r6, #0]
 800f4be:	e7f7      	b.n	800f4b0 <__sfp+0x18>
 800f4c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f4c4:	b9d5      	cbnz	r5, 800f4fc <__sfp+0x64>
 800f4c6:	4b16      	ldr	r3, [pc, #88]	; (800f520 <__sfp+0x88>)
 800f4c8:	60e3      	str	r3, [r4, #12]
 800f4ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f4ce:	6665      	str	r5, [r4, #100]	; 0x64
 800f4d0:	f000 f847 	bl	800f562 <__retarget_lock_init_recursive>
 800f4d4:	f7ff ff96 	bl	800f404 <__sfp_lock_release>
 800f4d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f4dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f4e0:	6025      	str	r5, [r4, #0]
 800f4e2:	61a5      	str	r5, [r4, #24]
 800f4e4:	2208      	movs	r2, #8
 800f4e6:	4629      	mov	r1, r5
 800f4e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f4ec:	f7fd faca 	bl	800ca84 <memset>
 800f4f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f4f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f4f8:	4620      	mov	r0, r4
 800f4fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f4fc:	3468      	adds	r4, #104	; 0x68
 800f4fe:	e7d9      	b.n	800f4b4 <__sfp+0x1c>
 800f500:	2104      	movs	r1, #4
 800f502:	4638      	mov	r0, r7
 800f504:	f7ff ff62 	bl	800f3cc <__sfmoreglue>
 800f508:	4604      	mov	r4, r0
 800f50a:	6030      	str	r0, [r6, #0]
 800f50c:	2800      	cmp	r0, #0
 800f50e:	d1d5      	bne.n	800f4bc <__sfp+0x24>
 800f510:	f7ff ff78 	bl	800f404 <__sfp_lock_release>
 800f514:	230c      	movs	r3, #12
 800f516:	603b      	str	r3, [r7, #0]
 800f518:	e7ee      	b.n	800f4f8 <__sfp+0x60>
 800f51a:	bf00      	nop
 800f51c:	08010ab0 	.word	0x08010ab0
 800f520:	ffff0001 	.word	0xffff0001

0800f524 <_fwalk_reent>:
 800f524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f528:	4606      	mov	r6, r0
 800f52a:	4688      	mov	r8, r1
 800f52c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f530:	2700      	movs	r7, #0
 800f532:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f536:	f1b9 0901 	subs.w	r9, r9, #1
 800f53a:	d505      	bpl.n	800f548 <_fwalk_reent+0x24>
 800f53c:	6824      	ldr	r4, [r4, #0]
 800f53e:	2c00      	cmp	r4, #0
 800f540:	d1f7      	bne.n	800f532 <_fwalk_reent+0xe>
 800f542:	4638      	mov	r0, r7
 800f544:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f548:	89ab      	ldrh	r3, [r5, #12]
 800f54a:	2b01      	cmp	r3, #1
 800f54c:	d907      	bls.n	800f55e <_fwalk_reent+0x3a>
 800f54e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f552:	3301      	adds	r3, #1
 800f554:	d003      	beq.n	800f55e <_fwalk_reent+0x3a>
 800f556:	4629      	mov	r1, r5
 800f558:	4630      	mov	r0, r6
 800f55a:	47c0      	blx	r8
 800f55c:	4307      	orrs	r7, r0
 800f55e:	3568      	adds	r5, #104	; 0x68
 800f560:	e7e9      	b.n	800f536 <_fwalk_reent+0x12>

0800f562 <__retarget_lock_init_recursive>:
 800f562:	4770      	bx	lr

0800f564 <__retarget_lock_acquire_recursive>:
 800f564:	4770      	bx	lr

0800f566 <__retarget_lock_release_recursive>:
 800f566:	4770      	bx	lr

0800f568 <__swhatbuf_r>:
 800f568:	b570      	push	{r4, r5, r6, lr}
 800f56a:	460e      	mov	r6, r1
 800f56c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f570:	2900      	cmp	r1, #0
 800f572:	b096      	sub	sp, #88	; 0x58
 800f574:	4614      	mov	r4, r2
 800f576:	461d      	mov	r5, r3
 800f578:	da08      	bge.n	800f58c <__swhatbuf_r+0x24>
 800f57a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f57e:	2200      	movs	r2, #0
 800f580:	602a      	str	r2, [r5, #0]
 800f582:	061a      	lsls	r2, r3, #24
 800f584:	d410      	bmi.n	800f5a8 <__swhatbuf_r+0x40>
 800f586:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f58a:	e00e      	b.n	800f5aa <__swhatbuf_r+0x42>
 800f58c:	466a      	mov	r2, sp
 800f58e:	f000 f903 	bl	800f798 <_fstat_r>
 800f592:	2800      	cmp	r0, #0
 800f594:	dbf1      	blt.n	800f57a <__swhatbuf_r+0x12>
 800f596:	9a01      	ldr	r2, [sp, #4]
 800f598:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f59c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f5a0:	425a      	negs	r2, r3
 800f5a2:	415a      	adcs	r2, r3
 800f5a4:	602a      	str	r2, [r5, #0]
 800f5a6:	e7ee      	b.n	800f586 <__swhatbuf_r+0x1e>
 800f5a8:	2340      	movs	r3, #64	; 0x40
 800f5aa:	2000      	movs	r0, #0
 800f5ac:	6023      	str	r3, [r4, #0]
 800f5ae:	b016      	add	sp, #88	; 0x58
 800f5b0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f5b4 <__smakebuf_r>:
 800f5b4:	898b      	ldrh	r3, [r1, #12]
 800f5b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f5b8:	079d      	lsls	r5, r3, #30
 800f5ba:	4606      	mov	r6, r0
 800f5bc:	460c      	mov	r4, r1
 800f5be:	d507      	bpl.n	800f5d0 <__smakebuf_r+0x1c>
 800f5c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f5c4:	6023      	str	r3, [r4, #0]
 800f5c6:	6123      	str	r3, [r4, #16]
 800f5c8:	2301      	movs	r3, #1
 800f5ca:	6163      	str	r3, [r4, #20]
 800f5cc:	b002      	add	sp, #8
 800f5ce:	bd70      	pop	{r4, r5, r6, pc}
 800f5d0:	ab01      	add	r3, sp, #4
 800f5d2:	466a      	mov	r2, sp
 800f5d4:	f7ff ffc8 	bl	800f568 <__swhatbuf_r>
 800f5d8:	9900      	ldr	r1, [sp, #0]
 800f5da:	4605      	mov	r5, r0
 800f5dc:	4630      	mov	r0, r6
 800f5de:	f7ff f97d 	bl	800e8dc <_malloc_r>
 800f5e2:	b948      	cbnz	r0, 800f5f8 <__smakebuf_r+0x44>
 800f5e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f5e8:	059a      	lsls	r2, r3, #22
 800f5ea:	d4ef      	bmi.n	800f5cc <__smakebuf_r+0x18>
 800f5ec:	f023 0303 	bic.w	r3, r3, #3
 800f5f0:	f043 0302 	orr.w	r3, r3, #2
 800f5f4:	81a3      	strh	r3, [r4, #12]
 800f5f6:	e7e3      	b.n	800f5c0 <__smakebuf_r+0xc>
 800f5f8:	4b0d      	ldr	r3, [pc, #52]	; (800f630 <__smakebuf_r+0x7c>)
 800f5fa:	62b3      	str	r3, [r6, #40]	; 0x28
 800f5fc:	89a3      	ldrh	r3, [r4, #12]
 800f5fe:	6020      	str	r0, [r4, #0]
 800f600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f604:	81a3      	strh	r3, [r4, #12]
 800f606:	9b00      	ldr	r3, [sp, #0]
 800f608:	6163      	str	r3, [r4, #20]
 800f60a:	9b01      	ldr	r3, [sp, #4]
 800f60c:	6120      	str	r0, [r4, #16]
 800f60e:	b15b      	cbz	r3, 800f628 <__smakebuf_r+0x74>
 800f610:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f614:	4630      	mov	r0, r6
 800f616:	f000 f8d1 	bl	800f7bc <_isatty_r>
 800f61a:	b128      	cbz	r0, 800f628 <__smakebuf_r+0x74>
 800f61c:	89a3      	ldrh	r3, [r4, #12]
 800f61e:	f023 0303 	bic.w	r3, r3, #3
 800f622:	f043 0301 	orr.w	r3, r3, #1
 800f626:	81a3      	strh	r3, [r4, #12]
 800f628:	89a0      	ldrh	r0, [r4, #12]
 800f62a:	4305      	orrs	r5, r0
 800f62c:	81a5      	strh	r5, [r4, #12]
 800f62e:	e7cd      	b.n	800f5cc <__smakebuf_r+0x18>
 800f630:	0800f3c1 	.word	0x0800f3c1

0800f634 <_malloc_usable_size_r>:
 800f634:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f638:	1f18      	subs	r0, r3, #4
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	bfbc      	itt	lt
 800f63e:	580b      	ldrlt	r3, [r1, r0]
 800f640:	18c0      	addlt	r0, r0, r3
 800f642:	4770      	bx	lr

0800f644 <_raise_r>:
 800f644:	291f      	cmp	r1, #31
 800f646:	b538      	push	{r3, r4, r5, lr}
 800f648:	4604      	mov	r4, r0
 800f64a:	460d      	mov	r5, r1
 800f64c:	d904      	bls.n	800f658 <_raise_r+0x14>
 800f64e:	2316      	movs	r3, #22
 800f650:	6003      	str	r3, [r0, #0]
 800f652:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f656:	bd38      	pop	{r3, r4, r5, pc}
 800f658:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f65a:	b112      	cbz	r2, 800f662 <_raise_r+0x1e>
 800f65c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f660:	b94b      	cbnz	r3, 800f676 <_raise_r+0x32>
 800f662:	4620      	mov	r0, r4
 800f664:	f000 f830 	bl	800f6c8 <_getpid_r>
 800f668:	462a      	mov	r2, r5
 800f66a:	4601      	mov	r1, r0
 800f66c:	4620      	mov	r0, r4
 800f66e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f672:	f000 b817 	b.w	800f6a4 <_kill_r>
 800f676:	2b01      	cmp	r3, #1
 800f678:	d00a      	beq.n	800f690 <_raise_r+0x4c>
 800f67a:	1c59      	adds	r1, r3, #1
 800f67c:	d103      	bne.n	800f686 <_raise_r+0x42>
 800f67e:	2316      	movs	r3, #22
 800f680:	6003      	str	r3, [r0, #0]
 800f682:	2001      	movs	r0, #1
 800f684:	e7e7      	b.n	800f656 <_raise_r+0x12>
 800f686:	2400      	movs	r4, #0
 800f688:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f68c:	4628      	mov	r0, r5
 800f68e:	4798      	blx	r3
 800f690:	2000      	movs	r0, #0
 800f692:	e7e0      	b.n	800f656 <_raise_r+0x12>

0800f694 <raise>:
 800f694:	4b02      	ldr	r3, [pc, #8]	; (800f6a0 <raise+0xc>)
 800f696:	4601      	mov	r1, r0
 800f698:	6818      	ldr	r0, [r3, #0]
 800f69a:	f7ff bfd3 	b.w	800f644 <_raise_r>
 800f69e:	bf00      	nop
 800f6a0:	200001b0 	.word	0x200001b0

0800f6a4 <_kill_r>:
 800f6a4:	b538      	push	{r3, r4, r5, lr}
 800f6a6:	4d07      	ldr	r5, [pc, #28]	; (800f6c4 <_kill_r+0x20>)
 800f6a8:	2300      	movs	r3, #0
 800f6aa:	4604      	mov	r4, r0
 800f6ac:	4608      	mov	r0, r1
 800f6ae:	4611      	mov	r1, r2
 800f6b0:	602b      	str	r3, [r5, #0]
 800f6b2:	f7f3 f9a5 	bl	8002a00 <_kill>
 800f6b6:	1c43      	adds	r3, r0, #1
 800f6b8:	d102      	bne.n	800f6c0 <_kill_r+0x1c>
 800f6ba:	682b      	ldr	r3, [r5, #0]
 800f6bc:	b103      	cbz	r3, 800f6c0 <_kill_r+0x1c>
 800f6be:	6023      	str	r3, [r4, #0]
 800f6c0:	bd38      	pop	{r3, r4, r5, pc}
 800f6c2:	bf00      	nop
 800f6c4:	2000b1f0 	.word	0x2000b1f0

0800f6c8 <_getpid_r>:
 800f6c8:	f7f3 b992 	b.w	80029f0 <_getpid>

0800f6cc <__sread>:
 800f6cc:	b510      	push	{r4, lr}
 800f6ce:	460c      	mov	r4, r1
 800f6d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6d4:	f000 f894 	bl	800f800 <_read_r>
 800f6d8:	2800      	cmp	r0, #0
 800f6da:	bfab      	itete	ge
 800f6dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f6de:	89a3      	ldrhlt	r3, [r4, #12]
 800f6e0:	181b      	addge	r3, r3, r0
 800f6e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f6e6:	bfac      	ite	ge
 800f6e8:	6563      	strge	r3, [r4, #84]	; 0x54
 800f6ea:	81a3      	strhlt	r3, [r4, #12]
 800f6ec:	bd10      	pop	{r4, pc}

0800f6ee <__swrite>:
 800f6ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6f2:	461f      	mov	r7, r3
 800f6f4:	898b      	ldrh	r3, [r1, #12]
 800f6f6:	05db      	lsls	r3, r3, #23
 800f6f8:	4605      	mov	r5, r0
 800f6fa:	460c      	mov	r4, r1
 800f6fc:	4616      	mov	r6, r2
 800f6fe:	d505      	bpl.n	800f70c <__swrite+0x1e>
 800f700:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f704:	2302      	movs	r3, #2
 800f706:	2200      	movs	r2, #0
 800f708:	f000 f868 	bl	800f7dc <_lseek_r>
 800f70c:	89a3      	ldrh	r3, [r4, #12]
 800f70e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f712:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f716:	81a3      	strh	r3, [r4, #12]
 800f718:	4632      	mov	r2, r6
 800f71a:	463b      	mov	r3, r7
 800f71c:	4628      	mov	r0, r5
 800f71e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f722:	f000 b817 	b.w	800f754 <_write_r>

0800f726 <__sseek>:
 800f726:	b510      	push	{r4, lr}
 800f728:	460c      	mov	r4, r1
 800f72a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f72e:	f000 f855 	bl	800f7dc <_lseek_r>
 800f732:	1c43      	adds	r3, r0, #1
 800f734:	89a3      	ldrh	r3, [r4, #12]
 800f736:	bf15      	itete	ne
 800f738:	6560      	strne	r0, [r4, #84]	; 0x54
 800f73a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f73e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f742:	81a3      	strheq	r3, [r4, #12]
 800f744:	bf18      	it	ne
 800f746:	81a3      	strhne	r3, [r4, #12]
 800f748:	bd10      	pop	{r4, pc}

0800f74a <__sclose>:
 800f74a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f74e:	f000 b813 	b.w	800f778 <_close_r>
	...

0800f754 <_write_r>:
 800f754:	b538      	push	{r3, r4, r5, lr}
 800f756:	4d07      	ldr	r5, [pc, #28]	; (800f774 <_write_r+0x20>)
 800f758:	4604      	mov	r4, r0
 800f75a:	4608      	mov	r0, r1
 800f75c:	4611      	mov	r1, r2
 800f75e:	2200      	movs	r2, #0
 800f760:	602a      	str	r2, [r5, #0]
 800f762:	461a      	mov	r2, r3
 800f764:	f7f3 f983 	bl	8002a6e <_write>
 800f768:	1c43      	adds	r3, r0, #1
 800f76a:	d102      	bne.n	800f772 <_write_r+0x1e>
 800f76c:	682b      	ldr	r3, [r5, #0]
 800f76e:	b103      	cbz	r3, 800f772 <_write_r+0x1e>
 800f770:	6023      	str	r3, [r4, #0]
 800f772:	bd38      	pop	{r3, r4, r5, pc}
 800f774:	2000b1f0 	.word	0x2000b1f0

0800f778 <_close_r>:
 800f778:	b538      	push	{r3, r4, r5, lr}
 800f77a:	4d06      	ldr	r5, [pc, #24]	; (800f794 <_close_r+0x1c>)
 800f77c:	2300      	movs	r3, #0
 800f77e:	4604      	mov	r4, r0
 800f780:	4608      	mov	r0, r1
 800f782:	602b      	str	r3, [r5, #0]
 800f784:	f7f3 f98f 	bl	8002aa6 <_close>
 800f788:	1c43      	adds	r3, r0, #1
 800f78a:	d102      	bne.n	800f792 <_close_r+0x1a>
 800f78c:	682b      	ldr	r3, [r5, #0]
 800f78e:	b103      	cbz	r3, 800f792 <_close_r+0x1a>
 800f790:	6023      	str	r3, [r4, #0]
 800f792:	bd38      	pop	{r3, r4, r5, pc}
 800f794:	2000b1f0 	.word	0x2000b1f0

0800f798 <_fstat_r>:
 800f798:	b538      	push	{r3, r4, r5, lr}
 800f79a:	4d07      	ldr	r5, [pc, #28]	; (800f7b8 <_fstat_r+0x20>)
 800f79c:	2300      	movs	r3, #0
 800f79e:	4604      	mov	r4, r0
 800f7a0:	4608      	mov	r0, r1
 800f7a2:	4611      	mov	r1, r2
 800f7a4:	602b      	str	r3, [r5, #0]
 800f7a6:	f7f3 f98a 	bl	8002abe <_fstat>
 800f7aa:	1c43      	adds	r3, r0, #1
 800f7ac:	d102      	bne.n	800f7b4 <_fstat_r+0x1c>
 800f7ae:	682b      	ldr	r3, [r5, #0]
 800f7b0:	b103      	cbz	r3, 800f7b4 <_fstat_r+0x1c>
 800f7b2:	6023      	str	r3, [r4, #0]
 800f7b4:	bd38      	pop	{r3, r4, r5, pc}
 800f7b6:	bf00      	nop
 800f7b8:	2000b1f0 	.word	0x2000b1f0

0800f7bc <_isatty_r>:
 800f7bc:	b538      	push	{r3, r4, r5, lr}
 800f7be:	4d06      	ldr	r5, [pc, #24]	; (800f7d8 <_isatty_r+0x1c>)
 800f7c0:	2300      	movs	r3, #0
 800f7c2:	4604      	mov	r4, r0
 800f7c4:	4608      	mov	r0, r1
 800f7c6:	602b      	str	r3, [r5, #0]
 800f7c8:	f7f3 f989 	bl	8002ade <_isatty>
 800f7cc:	1c43      	adds	r3, r0, #1
 800f7ce:	d102      	bne.n	800f7d6 <_isatty_r+0x1a>
 800f7d0:	682b      	ldr	r3, [r5, #0]
 800f7d2:	b103      	cbz	r3, 800f7d6 <_isatty_r+0x1a>
 800f7d4:	6023      	str	r3, [r4, #0]
 800f7d6:	bd38      	pop	{r3, r4, r5, pc}
 800f7d8:	2000b1f0 	.word	0x2000b1f0

0800f7dc <_lseek_r>:
 800f7dc:	b538      	push	{r3, r4, r5, lr}
 800f7de:	4d07      	ldr	r5, [pc, #28]	; (800f7fc <_lseek_r+0x20>)
 800f7e0:	4604      	mov	r4, r0
 800f7e2:	4608      	mov	r0, r1
 800f7e4:	4611      	mov	r1, r2
 800f7e6:	2200      	movs	r2, #0
 800f7e8:	602a      	str	r2, [r5, #0]
 800f7ea:	461a      	mov	r2, r3
 800f7ec:	f7f3 f982 	bl	8002af4 <_lseek>
 800f7f0:	1c43      	adds	r3, r0, #1
 800f7f2:	d102      	bne.n	800f7fa <_lseek_r+0x1e>
 800f7f4:	682b      	ldr	r3, [r5, #0]
 800f7f6:	b103      	cbz	r3, 800f7fa <_lseek_r+0x1e>
 800f7f8:	6023      	str	r3, [r4, #0]
 800f7fa:	bd38      	pop	{r3, r4, r5, pc}
 800f7fc:	2000b1f0 	.word	0x2000b1f0

0800f800 <_read_r>:
 800f800:	b538      	push	{r3, r4, r5, lr}
 800f802:	4d07      	ldr	r5, [pc, #28]	; (800f820 <_read_r+0x20>)
 800f804:	4604      	mov	r4, r0
 800f806:	4608      	mov	r0, r1
 800f808:	4611      	mov	r1, r2
 800f80a:	2200      	movs	r2, #0
 800f80c:	602a      	str	r2, [r5, #0]
 800f80e:	461a      	mov	r2, r3
 800f810:	f7f3 f910 	bl	8002a34 <_read>
 800f814:	1c43      	adds	r3, r0, #1
 800f816:	d102      	bne.n	800f81e <_read_r+0x1e>
 800f818:	682b      	ldr	r3, [r5, #0]
 800f81a:	b103      	cbz	r3, 800f81e <_read_r+0x1e>
 800f81c:	6023      	str	r3, [r4, #0]
 800f81e:	bd38      	pop	{r3, r4, r5, pc}
 800f820:	2000b1f0 	.word	0x2000b1f0

0800f824 <pow>:
 800f824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f826:	ed2d 8b02 	vpush	{d8}
 800f82a:	eeb0 8a40 	vmov.f32	s16, s0
 800f82e:	eef0 8a60 	vmov.f32	s17, s1
 800f832:	ec55 4b11 	vmov	r4, r5, d1
 800f836:	f000 f867 	bl	800f908 <__ieee754_pow>
 800f83a:	4622      	mov	r2, r4
 800f83c:	462b      	mov	r3, r5
 800f83e:	4620      	mov	r0, r4
 800f840:	4629      	mov	r1, r5
 800f842:	ec57 6b10 	vmov	r6, r7, d0
 800f846:	f7f1 f971 	bl	8000b2c <__aeabi_dcmpun>
 800f84a:	2800      	cmp	r0, #0
 800f84c:	d13b      	bne.n	800f8c6 <pow+0xa2>
 800f84e:	ec51 0b18 	vmov	r0, r1, d8
 800f852:	2200      	movs	r2, #0
 800f854:	2300      	movs	r3, #0
 800f856:	f7f1 f937 	bl	8000ac8 <__aeabi_dcmpeq>
 800f85a:	b1b8      	cbz	r0, 800f88c <pow+0x68>
 800f85c:	2200      	movs	r2, #0
 800f85e:	2300      	movs	r3, #0
 800f860:	4620      	mov	r0, r4
 800f862:	4629      	mov	r1, r5
 800f864:	f7f1 f930 	bl	8000ac8 <__aeabi_dcmpeq>
 800f868:	2800      	cmp	r0, #0
 800f86a:	d146      	bne.n	800f8fa <pow+0xd6>
 800f86c:	ec45 4b10 	vmov	d0, r4, r5
 800f870:	f000 fe63 	bl	801053a <finite>
 800f874:	b338      	cbz	r0, 800f8c6 <pow+0xa2>
 800f876:	2200      	movs	r2, #0
 800f878:	2300      	movs	r3, #0
 800f87a:	4620      	mov	r0, r4
 800f87c:	4629      	mov	r1, r5
 800f87e:	f7f1 f92d 	bl	8000adc <__aeabi_dcmplt>
 800f882:	b300      	cbz	r0, 800f8c6 <pow+0xa2>
 800f884:	f7fd f8ba 	bl	800c9fc <__errno>
 800f888:	2322      	movs	r3, #34	; 0x22
 800f88a:	e01b      	b.n	800f8c4 <pow+0xa0>
 800f88c:	ec47 6b10 	vmov	d0, r6, r7
 800f890:	f000 fe53 	bl	801053a <finite>
 800f894:	b9e0      	cbnz	r0, 800f8d0 <pow+0xac>
 800f896:	eeb0 0a48 	vmov.f32	s0, s16
 800f89a:	eef0 0a68 	vmov.f32	s1, s17
 800f89e:	f000 fe4c 	bl	801053a <finite>
 800f8a2:	b1a8      	cbz	r0, 800f8d0 <pow+0xac>
 800f8a4:	ec45 4b10 	vmov	d0, r4, r5
 800f8a8:	f000 fe47 	bl	801053a <finite>
 800f8ac:	b180      	cbz	r0, 800f8d0 <pow+0xac>
 800f8ae:	4632      	mov	r2, r6
 800f8b0:	463b      	mov	r3, r7
 800f8b2:	4630      	mov	r0, r6
 800f8b4:	4639      	mov	r1, r7
 800f8b6:	f7f1 f939 	bl	8000b2c <__aeabi_dcmpun>
 800f8ba:	2800      	cmp	r0, #0
 800f8bc:	d0e2      	beq.n	800f884 <pow+0x60>
 800f8be:	f7fd f89d 	bl	800c9fc <__errno>
 800f8c2:	2321      	movs	r3, #33	; 0x21
 800f8c4:	6003      	str	r3, [r0, #0]
 800f8c6:	ecbd 8b02 	vpop	{d8}
 800f8ca:	ec47 6b10 	vmov	d0, r6, r7
 800f8ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f8d0:	2200      	movs	r2, #0
 800f8d2:	2300      	movs	r3, #0
 800f8d4:	4630      	mov	r0, r6
 800f8d6:	4639      	mov	r1, r7
 800f8d8:	f7f1 f8f6 	bl	8000ac8 <__aeabi_dcmpeq>
 800f8dc:	2800      	cmp	r0, #0
 800f8de:	d0f2      	beq.n	800f8c6 <pow+0xa2>
 800f8e0:	eeb0 0a48 	vmov.f32	s0, s16
 800f8e4:	eef0 0a68 	vmov.f32	s1, s17
 800f8e8:	f000 fe27 	bl	801053a <finite>
 800f8ec:	2800      	cmp	r0, #0
 800f8ee:	d0ea      	beq.n	800f8c6 <pow+0xa2>
 800f8f0:	ec45 4b10 	vmov	d0, r4, r5
 800f8f4:	f000 fe21 	bl	801053a <finite>
 800f8f8:	e7c3      	b.n	800f882 <pow+0x5e>
 800f8fa:	4f01      	ldr	r7, [pc, #4]	; (800f900 <pow+0xdc>)
 800f8fc:	2600      	movs	r6, #0
 800f8fe:	e7e2      	b.n	800f8c6 <pow+0xa2>
 800f900:	3ff00000 	.word	0x3ff00000
 800f904:	00000000 	.word	0x00000000

0800f908 <__ieee754_pow>:
 800f908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f90c:	ed2d 8b06 	vpush	{d8-d10}
 800f910:	b089      	sub	sp, #36	; 0x24
 800f912:	ed8d 1b00 	vstr	d1, [sp]
 800f916:	e9dd 2900 	ldrd	r2, r9, [sp]
 800f91a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800f91e:	ea58 0102 	orrs.w	r1, r8, r2
 800f922:	ec57 6b10 	vmov	r6, r7, d0
 800f926:	d115      	bne.n	800f954 <__ieee754_pow+0x4c>
 800f928:	19b3      	adds	r3, r6, r6
 800f92a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800f92e:	4152      	adcs	r2, r2
 800f930:	4299      	cmp	r1, r3
 800f932:	4b89      	ldr	r3, [pc, #548]	; (800fb58 <__ieee754_pow+0x250>)
 800f934:	4193      	sbcs	r3, r2
 800f936:	f080 84d2 	bcs.w	80102de <__ieee754_pow+0x9d6>
 800f93a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f93e:	4630      	mov	r0, r6
 800f940:	4639      	mov	r1, r7
 800f942:	f7f0 fca3 	bl	800028c <__adddf3>
 800f946:	ec41 0b10 	vmov	d0, r0, r1
 800f94a:	b009      	add	sp, #36	; 0x24
 800f94c:	ecbd 8b06 	vpop	{d8-d10}
 800f950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f954:	4b81      	ldr	r3, [pc, #516]	; (800fb5c <__ieee754_pow+0x254>)
 800f956:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800f95a:	429c      	cmp	r4, r3
 800f95c:	ee10 aa10 	vmov	sl, s0
 800f960:	463d      	mov	r5, r7
 800f962:	dc06      	bgt.n	800f972 <__ieee754_pow+0x6a>
 800f964:	d101      	bne.n	800f96a <__ieee754_pow+0x62>
 800f966:	2e00      	cmp	r6, #0
 800f968:	d1e7      	bne.n	800f93a <__ieee754_pow+0x32>
 800f96a:	4598      	cmp	r8, r3
 800f96c:	dc01      	bgt.n	800f972 <__ieee754_pow+0x6a>
 800f96e:	d10f      	bne.n	800f990 <__ieee754_pow+0x88>
 800f970:	b172      	cbz	r2, 800f990 <__ieee754_pow+0x88>
 800f972:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800f976:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800f97a:	ea55 050a 	orrs.w	r5, r5, sl
 800f97e:	d1dc      	bne.n	800f93a <__ieee754_pow+0x32>
 800f980:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f984:	18db      	adds	r3, r3, r3
 800f986:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800f98a:	4152      	adcs	r2, r2
 800f98c:	429d      	cmp	r5, r3
 800f98e:	e7d0      	b.n	800f932 <__ieee754_pow+0x2a>
 800f990:	2d00      	cmp	r5, #0
 800f992:	da3b      	bge.n	800fa0c <__ieee754_pow+0x104>
 800f994:	4b72      	ldr	r3, [pc, #456]	; (800fb60 <__ieee754_pow+0x258>)
 800f996:	4598      	cmp	r8, r3
 800f998:	dc51      	bgt.n	800fa3e <__ieee754_pow+0x136>
 800f99a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800f99e:	4598      	cmp	r8, r3
 800f9a0:	f340 84ac 	ble.w	80102fc <__ieee754_pow+0x9f4>
 800f9a4:	ea4f 5328 	mov.w	r3, r8, asr #20
 800f9a8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f9ac:	2b14      	cmp	r3, #20
 800f9ae:	dd0f      	ble.n	800f9d0 <__ieee754_pow+0xc8>
 800f9b0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800f9b4:	fa22 f103 	lsr.w	r1, r2, r3
 800f9b8:	fa01 f303 	lsl.w	r3, r1, r3
 800f9bc:	4293      	cmp	r3, r2
 800f9be:	f040 849d 	bne.w	80102fc <__ieee754_pow+0x9f4>
 800f9c2:	f001 0101 	and.w	r1, r1, #1
 800f9c6:	f1c1 0302 	rsb	r3, r1, #2
 800f9ca:	9304      	str	r3, [sp, #16]
 800f9cc:	b182      	cbz	r2, 800f9f0 <__ieee754_pow+0xe8>
 800f9ce:	e05f      	b.n	800fa90 <__ieee754_pow+0x188>
 800f9d0:	2a00      	cmp	r2, #0
 800f9d2:	d15b      	bne.n	800fa8c <__ieee754_pow+0x184>
 800f9d4:	f1c3 0314 	rsb	r3, r3, #20
 800f9d8:	fa48 f103 	asr.w	r1, r8, r3
 800f9dc:	fa01 f303 	lsl.w	r3, r1, r3
 800f9e0:	4543      	cmp	r3, r8
 800f9e2:	f040 8488 	bne.w	80102f6 <__ieee754_pow+0x9ee>
 800f9e6:	f001 0101 	and.w	r1, r1, #1
 800f9ea:	f1c1 0302 	rsb	r3, r1, #2
 800f9ee:	9304      	str	r3, [sp, #16]
 800f9f0:	4b5c      	ldr	r3, [pc, #368]	; (800fb64 <__ieee754_pow+0x25c>)
 800f9f2:	4598      	cmp	r8, r3
 800f9f4:	d132      	bne.n	800fa5c <__ieee754_pow+0x154>
 800f9f6:	f1b9 0f00 	cmp.w	r9, #0
 800f9fa:	f280 8478 	bge.w	80102ee <__ieee754_pow+0x9e6>
 800f9fe:	4959      	ldr	r1, [pc, #356]	; (800fb64 <__ieee754_pow+0x25c>)
 800fa00:	4632      	mov	r2, r6
 800fa02:	463b      	mov	r3, r7
 800fa04:	2000      	movs	r0, #0
 800fa06:	f7f0 ff21 	bl	800084c <__aeabi_ddiv>
 800fa0a:	e79c      	b.n	800f946 <__ieee754_pow+0x3e>
 800fa0c:	2300      	movs	r3, #0
 800fa0e:	9304      	str	r3, [sp, #16]
 800fa10:	2a00      	cmp	r2, #0
 800fa12:	d13d      	bne.n	800fa90 <__ieee754_pow+0x188>
 800fa14:	4b51      	ldr	r3, [pc, #324]	; (800fb5c <__ieee754_pow+0x254>)
 800fa16:	4598      	cmp	r8, r3
 800fa18:	d1ea      	bne.n	800f9f0 <__ieee754_pow+0xe8>
 800fa1a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800fa1e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800fa22:	ea53 030a 	orrs.w	r3, r3, sl
 800fa26:	f000 845a 	beq.w	80102de <__ieee754_pow+0x9d6>
 800fa2a:	4b4f      	ldr	r3, [pc, #316]	; (800fb68 <__ieee754_pow+0x260>)
 800fa2c:	429c      	cmp	r4, r3
 800fa2e:	dd08      	ble.n	800fa42 <__ieee754_pow+0x13a>
 800fa30:	f1b9 0f00 	cmp.w	r9, #0
 800fa34:	f2c0 8457 	blt.w	80102e6 <__ieee754_pow+0x9de>
 800fa38:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fa3c:	e783      	b.n	800f946 <__ieee754_pow+0x3e>
 800fa3e:	2302      	movs	r3, #2
 800fa40:	e7e5      	b.n	800fa0e <__ieee754_pow+0x106>
 800fa42:	f1b9 0f00 	cmp.w	r9, #0
 800fa46:	f04f 0000 	mov.w	r0, #0
 800fa4a:	f04f 0100 	mov.w	r1, #0
 800fa4e:	f6bf af7a 	bge.w	800f946 <__ieee754_pow+0x3e>
 800fa52:	e9dd 0300 	ldrd	r0, r3, [sp]
 800fa56:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800fa5a:	e774      	b.n	800f946 <__ieee754_pow+0x3e>
 800fa5c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800fa60:	d106      	bne.n	800fa70 <__ieee754_pow+0x168>
 800fa62:	4632      	mov	r2, r6
 800fa64:	463b      	mov	r3, r7
 800fa66:	4630      	mov	r0, r6
 800fa68:	4639      	mov	r1, r7
 800fa6a:	f7f0 fdc5 	bl	80005f8 <__aeabi_dmul>
 800fa6e:	e76a      	b.n	800f946 <__ieee754_pow+0x3e>
 800fa70:	4b3e      	ldr	r3, [pc, #248]	; (800fb6c <__ieee754_pow+0x264>)
 800fa72:	4599      	cmp	r9, r3
 800fa74:	d10c      	bne.n	800fa90 <__ieee754_pow+0x188>
 800fa76:	2d00      	cmp	r5, #0
 800fa78:	db0a      	blt.n	800fa90 <__ieee754_pow+0x188>
 800fa7a:	ec47 6b10 	vmov	d0, r6, r7
 800fa7e:	b009      	add	sp, #36	; 0x24
 800fa80:	ecbd 8b06 	vpop	{d8-d10}
 800fa84:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa88:	f000 bc6c 	b.w	8010364 <__ieee754_sqrt>
 800fa8c:	2300      	movs	r3, #0
 800fa8e:	9304      	str	r3, [sp, #16]
 800fa90:	ec47 6b10 	vmov	d0, r6, r7
 800fa94:	f000 fd48 	bl	8010528 <fabs>
 800fa98:	ec51 0b10 	vmov	r0, r1, d0
 800fa9c:	f1ba 0f00 	cmp.w	sl, #0
 800faa0:	d129      	bne.n	800faf6 <__ieee754_pow+0x1ee>
 800faa2:	b124      	cbz	r4, 800faae <__ieee754_pow+0x1a6>
 800faa4:	4b2f      	ldr	r3, [pc, #188]	; (800fb64 <__ieee754_pow+0x25c>)
 800faa6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800faaa:	429a      	cmp	r2, r3
 800faac:	d123      	bne.n	800faf6 <__ieee754_pow+0x1ee>
 800faae:	f1b9 0f00 	cmp.w	r9, #0
 800fab2:	da05      	bge.n	800fac0 <__ieee754_pow+0x1b8>
 800fab4:	4602      	mov	r2, r0
 800fab6:	460b      	mov	r3, r1
 800fab8:	2000      	movs	r0, #0
 800faba:	492a      	ldr	r1, [pc, #168]	; (800fb64 <__ieee754_pow+0x25c>)
 800fabc:	f7f0 fec6 	bl	800084c <__aeabi_ddiv>
 800fac0:	2d00      	cmp	r5, #0
 800fac2:	f6bf af40 	bge.w	800f946 <__ieee754_pow+0x3e>
 800fac6:	9b04      	ldr	r3, [sp, #16]
 800fac8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800facc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800fad0:	4323      	orrs	r3, r4
 800fad2:	d108      	bne.n	800fae6 <__ieee754_pow+0x1de>
 800fad4:	4602      	mov	r2, r0
 800fad6:	460b      	mov	r3, r1
 800fad8:	4610      	mov	r0, r2
 800fada:	4619      	mov	r1, r3
 800fadc:	f7f0 fbd4 	bl	8000288 <__aeabi_dsub>
 800fae0:	4602      	mov	r2, r0
 800fae2:	460b      	mov	r3, r1
 800fae4:	e78f      	b.n	800fa06 <__ieee754_pow+0xfe>
 800fae6:	9b04      	ldr	r3, [sp, #16]
 800fae8:	2b01      	cmp	r3, #1
 800faea:	f47f af2c 	bne.w	800f946 <__ieee754_pow+0x3e>
 800faee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800faf2:	4619      	mov	r1, r3
 800faf4:	e727      	b.n	800f946 <__ieee754_pow+0x3e>
 800faf6:	0feb      	lsrs	r3, r5, #31
 800faf8:	3b01      	subs	r3, #1
 800fafa:	9306      	str	r3, [sp, #24]
 800fafc:	9a06      	ldr	r2, [sp, #24]
 800fafe:	9b04      	ldr	r3, [sp, #16]
 800fb00:	4313      	orrs	r3, r2
 800fb02:	d102      	bne.n	800fb0a <__ieee754_pow+0x202>
 800fb04:	4632      	mov	r2, r6
 800fb06:	463b      	mov	r3, r7
 800fb08:	e7e6      	b.n	800fad8 <__ieee754_pow+0x1d0>
 800fb0a:	4b19      	ldr	r3, [pc, #100]	; (800fb70 <__ieee754_pow+0x268>)
 800fb0c:	4598      	cmp	r8, r3
 800fb0e:	f340 80fb 	ble.w	800fd08 <__ieee754_pow+0x400>
 800fb12:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800fb16:	4598      	cmp	r8, r3
 800fb18:	4b13      	ldr	r3, [pc, #76]	; (800fb68 <__ieee754_pow+0x260>)
 800fb1a:	dd0c      	ble.n	800fb36 <__ieee754_pow+0x22e>
 800fb1c:	429c      	cmp	r4, r3
 800fb1e:	dc0f      	bgt.n	800fb40 <__ieee754_pow+0x238>
 800fb20:	f1b9 0f00 	cmp.w	r9, #0
 800fb24:	da0f      	bge.n	800fb46 <__ieee754_pow+0x23e>
 800fb26:	2000      	movs	r0, #0
 800fb28:	b009      	add	sp, #36	; 0x24
 800fb2a:	ecbd 8b06 	vpop	{d8-d10}
 800fb2e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb32:	f000 bcf0 	b.w	8010516 <__math_oflow>
 800fb36:	429c      	cmp	r4, r3
 800fb38:	dbf2      	blt.n	800fb20 <__ieee754_pow+0x218>
 800fb3a:	4b0a      	ldr	r3, [pc, #40]	; (800fb64 <__ieee754_pow+0x25c>)
 800fb3c:	429c      	cmp	r4, r3
 800fb3e:	dd19      	ble.n	800fb74 <__ieee754_pow+0x26c>
 800fb40:	f1b9 0f00 	cmp.w	r9, #0
 800fb44:	dcef      	bgt.n	800fb26 <__ieee754_pow+0x21e>
 800fb46:	2000      	movs	r0, #0
 800fb48:	b009      	add	sp, #36	; 0x24
 800fb4a:	ecbd 8b06 	vpop	{d8-d10}
 800fb4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb52:	f000 bcd7 	b.w	8010504 <__math_uflow>
 800fb56:	bf00      	nop
 800fb58:	fff00000 	.word	0xfff00000
 800fb5c:	7ff00000 	.word	0x7ff00000
 800fb60:	433fffff 	.word	0x433fffff
 800fb64:	3ff00000 	.word	0x3ff00000
 800fb68:	3fefffff 	.word	0x3fefffff
 800fb6c:	3fe00000 	.word	0x3fe00000
 800fb70:	41e00000 	.word	0x41e00000
 800fb74:	4b60      	ldr	r3, [pc, #384]	; (800fcf8 <__ieee754_pow+0x3f0>)
 800fb76:	2200      	movs	r2, #0
 800fb78:	f7f0 fb86 	bl	8000288 <__aeabi_dsub>
 800fb7c:	a354      	add	r3, pc, #336	; (adr r3, 800fcd0 <__ieee754_pow+0x3c8>)
 800fb7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb82:	4604      	mov	r4, r0
 800fb84:	460d      	mov	r5, r1
 800fb86:	f7f0 fd37 	bl	80005f8 <__aeabi_dmul>
 800fb8a:	a353      	add	r3, pc, #332	; (adr r3, 800fcd8 <__ieee754_pow+0x3d0>)
 800fb8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb90:	4606      	mov	r6, r0
 800fb92:	460f      	mov	r7, r1
 800fb94:	4620      	mov	r0, r4
 800fb96:	4629      	mov	r1, r5
 800fb98:	f7f0 fd2e 	bl	80005f8 <__aeabi_dmul>
 800fb9c:	4b57      	ldr	r3, [pc, #348]	; (800fcfc <__ieee754_pow+0x3f4>)
 800fb9e:	4682      	mov	sl, r0
 800fba0:	468b      	mov	fp, r1
 800fba2:	2200      	movs	r2, #0
 800fba4:	4620      	mov	r0, r4
 800fba6:	4629      	mov	r1, r5
 800fba8:	f7f0 fd26 	bl	80005f8 <__aeabi_dmul>
 800fbac:	4602      	mov	r2, r0
 800fbae:	460b      	mov	r3, r1
 800fbb0:	a14b      	add	r1, pc, #300	; (adr r1, 800fce0 <__ieee754_pow+0x3d8>)
 800fbb2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fbb6:	f7f0 fb67 	bl	8000288 <__aeabi_dsub>
 800fbba:	4622      	mov	r2, r4
 800fbbc:	462b      	mov	r3, r5
 800fbbe:	f7f0 fd1b 	bl	80005f8 <__aeabi_dmul>
 800fbc2:	4602      	mov	r2, r0
 800fbc4:	460b      	mov	r3, r1
 800fbc6:	2000      	movs	r0, #0
 800fbc8:	494d      	ldr	r1, [pc, #308]	; (800fd00 <__ieee754_pow+0x3f8>)
 800fbca:	f7f0 fb5d 	bl	8000288 <__aeabi_dsub>
 800fbce:	4622      	mov	r2, r4
 800fbd0:	4680      	mov	r8, r0
 800fbd2:	4689      	mov	r9, r1
 800fbd4:	462b      	mov	r3, r5
 800fbd6:	4620      	mov	r0, r4
 800fbd8:	4629      	mov	r1, r5
 800fbda:	f7f0 fd0d 	bl	80005f8 <__aeabi_dmul>
 800fbde:	4602      	mov	r2, r0
 800fbe0:	460b      	mov	r3, r1
 800fbe2:	4640      	mov	r0, r8
 800fbe4:	4649      	mov	r1, r9
 800fbe6:	f7f0 fd07 	bl	80005f8 <__aeabi_dmul>
 800fbea:	a33f      	add	r3, pc, #252	; (adr r3, 800fce8 <__ieee754_pow+0x3e0>)
 800fbec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbf0:	f7f0 fd02 	bl	80005f8 <__aeabi_dmul>
 800fbf4:	4602      	mov	r2, r0
 800fbf6:	460b      	mov	r3, r1
 800fbf8:	4650      	mov	r0, sl
 800fbfa:	4659      	mov	r1, fp
 800fbfc:	f7f0 fb44 	bl	8000288 <__aeabi_dsub>
 800fc00:	4602      	mov	r2, r0
 800fc02:	460b      	mov	r3, r1
 800fc04:	4680      	mov	r8, r0
 800fc06:	4689      	mov	r9, r1
 800fc08:	4630      	mov	r0, r6
 800fc0a:	4639      	mov	r1, r7
 800fc0c:	f7f0 fb3e 	bl	800028c <__adddf3>
 800fc10:	2000      	movs	r0, #0
 800fc12:	4632      	mov	r2, r6
 800fc14:	463b      	mov	r3, r7
 800fc16:	4604      	mov	r4, r0
 800fc18:	460d      	mov	r5, r1
 800fc1a:	f7f0 fb35 	bl	8000288 <__aeabi_dsub>
 800fc1e:	4602      	mov	r2, r0
 800fc20:	460b      	mov	r3, r1
 800fc22:	4640      	mov	r0, r8
 800fc24:	4649      	mov	r1, r9
 800fc26:	f7f0 fb2f 	bl	8000288 <__aeabi_dsub>
 800fc2a:	9b04      	ldr	r3, [sp, #16]
 800fc2c:	9a06      	ldr	r2, [sp, #24]
 800fc2e:	3b01      	subs	r3, #1
 800fc30:	4313      	orrs	r3, r2
 800fc32:	4682      	mov	sl, r0
 800fc34:	468b      	mov	fp, r1
 800fc36:	f040 81e7 	bne.w	8010008 <__ieee754_pow+0x700>
 800fc3a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800fcf0 <__ieee754_pow+0x3e8>
 800fc3e:	eeb0 8a47 	vmov.f32	s16, s14
 800fc42:	eef0 8a67 	vmov.f32	s17, s15
 800fc46:	e9dd 6700 	ldrd	r6, r7, [sp]
 800fc4a:	2600      	movs	r6, #0
 800fc4c:	4632      	mov	r2, r6
 800fc4e:	463b      	mov	r3, r7
 800fc50:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fc54:	f7f0 fb18 	bl	8000288 <__aeabi_dsub>
 800fc58:	4622      	mov	r2, r4
 800fc5a:	462b      	mov	r3, r5
 800fc5c:	f7f0 fccc 	bl	80005f8 <__aeabi_dmul>
 800fc60:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fc64:	4680      	mov	r8, r0
 800fc66:	4689      	mov	r9, r1
 800fc68:	4650      	mov	r0, sl
 800fc6a:	4659      	mov	r1, fp
 800fc6c:	f7f0 fcc4 	bl	80005f8 <__aeabi_dmul>
 800fc70:	4602      	mov	r2, r0
 800fc72:	460b      	mov	r3, r1
 800fc74:	4640      	mov	r0, r8
 800fc76:	4649      	mov	r1, r9
 800fc78:	f7f0 fb08 	bl	800028c <__adddf3>
 800fc7c:	4632      	mov	r2, r6
 800fc7e:	463b      	mov	r3, r7
 800fc80:	4680      	mov	r8, r0
 800fc82:	4689      	mov	r9, r1
 800fc84:	4620      	mov	r0, r4
 800fc86:	4629      	mov	r1, r5
 800fc88:	f7f0 fcb6 	bl	80005f8 <__aeabi_dmul>
 800fc8c:	460b      	mov	r3, r1
 800fc8e:	4604      	mov	r4, r0
 800fc90:	460d      	mov	r5, r1
 800fc92:	4602      	mov	r2, r0
 800fc94:	4649      	mov	r1, r9
 800fc96:	4640      	mov	r0, r8
 800fc98:	f7f0 faf8 	bl	800028c <__adddf3>
 800fc9c:	4b19      	ldr	r3, [pc, #100]	; (800fd04 <__ieee754_pow+0x3fc>)
 800fc9e:	4299      	cmp	r1, r3
 800fca0:	ec45 4b19 	vmov	d9, r4, r5
 800fca4:	4606      	mov	r6, r0
 800fca6:	460f      	mov	r7, r1
 800fca8:	468b      	mov	fp, r1
 800fcaa:	f340 82f1 	ble.w	8010290 <__ieee754_pow+0x988>
 800fcae:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800fcb2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800fcb6:	4303      	orrs	r3, r0
 800fcb8:	f000 81e4 	beq.w	8010084 <__ieee754_pow+0x77c>
 800fcbc:	ec51 0b18 	vmov	r0, r1, d8
 800fcc0:	2200      	movs	r2, #0
 800fcc2:	2300      	movs	r3, #0
 800fcc4:	f7f0 ff0a 	bl	8000adc <__aeabi_dcmplt>
 800fcc8:	3800      	subs	r0, #0
 800fcca:	bf18      	it	ne
 800fccc:	2001      	movne	r0, #1
 800fcce:	e72b      	b.n	800fb28 <__ieee754_pow+0x220>
 800fcd0:	60000000 	.word	0x60000000
 800fcd4:	3ff71547 	.word	0x3ff71547
 800fcd8:	f85ddf44 	.word	0xf85ddf44
 800fcdc:	3e54ae0b 	.word	0x3e54ae0b
 800fce0:	55555555 	.word	0x55555555
 800fce4:	3fd55555 	.word	0x3fd55555
 800fce8:	652b82fe 	.word	0x652b82fe
 800fcec:	3ff71547 	.word	0x3ff71547
 800fcf0:	00000000 	.word	0x00000000
 800fcf4:	bff00000 	.word	0xbff00000
 800fcf8:	3ff00000 	.word	0x3ff00000
 800fcfc:	3fd00000 	.word	0x3fd00000
 800fd00:	3fe00000 	.word	0x3fe00000
 800fd04:	408fffff 	.word	0x408fffff
 800fd08:	4bd5      	ldr	r3, [pc, #852]	; (8010060 <__ieee754_pow+0x758>)
 800fd0a:	402b      	ands	r3, r5
 800fd0c:	2200      	movs	r2, #0
 800fd0e:	b92b      	cbnz	r3, 800fd1c <__ieee754_pow+0x414>
 800fd10:	4bd4      	ldr	r3, [pc, #848]	; (8010064 <__ieee754_pow+0x75c>)
 800fd12:	f7f0 fc71 	bl	80005f8 <__aeabi_dmul>
 800fd16:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800fd1a:	460c      	mov	r4, r1
 800fd1c:	1523      	asrs	r3, r4, #20
 800fd1e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800fd22:	4413      	add	r3, r2
 800fd24:	9305      	str	r3, [sp, #20]
 800fd26:	4bd0      	ldr	r3, [pc, #832]	; (8010068 <__ieee754_pow+0x760>)
 800fd28:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800fd2c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800fd30:	429c      	cmp	r4, r3
 800fd32:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800fd36:	dd08      	ble.n	800fd4a <__ieee754_pow+0x442>
 800fd38:	4bcc      	ldr	r3, [pc, #816]	; (801006c <__ieee754_pow+0x764>)
 800fd3a:	429c      	cmp	r4, r3
 800fd3c:	f340 8162 	ble.w	8010004 <__ieee754_pow+0x6fc>
 800fd40:	9b05      	ldr	r3, [sp, #20]
 800fd42:	3301      	adds	r3, #1
 800fd44:	9305      	str	r3, [sp, #20]
 800fd46:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800fd4a:	2400      	movs	r4, #0
 800fd4c:	00e3      	lsls	r3, r4, #3
 800fd4e:	9307      	str	r3, [sp, #28]
 800fd50:	4bc7      	ldr	r3, [pc, #796]	; (8010070 <__ieee754_pow+0x768>)
 800fd52:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fd56:	ed93 7b00 	vldr	d7, [r3]
 800fd5a:	4629      	mov	r1, r5
 800fd5c:	ec53 2b17 	vmov	r2, r3, d7
 800fd60:	eeb0 9a47 	vmov.f32	s18, s14
 800fd64:	eef0 9a67 	vmov.f32	s19, s15
 800fd68:	4682      	mov	sl, r0
 800fd6a:	f7f0 fa8d 	bl	8000288 <__aeabi_dsub>
 800fd6e:	4652      	mov	r2, sl
 800fd70:	4606      	mov	r6, r0
 800fd72:	460f      	mov	r7, r1
 800fd74:	462b      	mov	r3, r5
 800fd76:	ec51 0b19 	vmov	r0, r1, d9
 800fd7a:	f7f0 fa87 	bl	800028c <__adddf3>
 800fd7e:	4602      	mov	r2, r0
 800fd80:	460b      	mov	r3, r1
 800fd82:	2000      	movs	r0, #0
 800fd84:	49bb      	ldr	r1, [pc, #748]	; (8010074 <__ieee754_pow+0x76c>)
 800fd86:	f7f0 fd61 	bl	800084c <__aeabi_ddiv>
 800fd8a:	ec41 0b1a 	vmov	d10, r0, r1
 800fd8e:	4602      	mov	r2, r0
 800fd90:	460b      	mov	r3, r1
 800fd92:	4630      	mov	r0, r6
 800fd94:	4639      	mov	r1, r7
 800fd96:	f7f0 fc2f 	bl	80005f8 <__aeabi_dmul>
 800fd9a:	2300      	movs	r3, #0
 800fd9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fda0:	9302      	str	r3, [sp, #8]
 800fda2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800fda6:	46ab      	mov	fp, r5
 800fda8:	106d      	asrs	r5, r5, #1
 800fdaa:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800fdae:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800fdb2:	ec41 0b18 	vmov	d8, r0, r1
 800fdb6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800fdba:	2200      	movs	r2, #0
 800fdbc:	4640      	mov	r0, r8
 800fdbe:	4649      	mov	r1, r9
 800fdc0:	4614      	mov	r4, r2
 800fdc2:	461d      	mov	r5, r3
 800fdc4:	f7f0 fc18 	bl	80005f8 <__aeabi_dmul>
 800fdc8:	4602      	mov	r2, r0
 800fdca:	460b      	mov	r3, r1
 800fdcc:	4630      	mov	r0, r6
 800fdce:	4639      	mov	r1, r7
 800fdd0:	f7f0 fa5a 	bl	8000288 <__aeabi_dsub>
 800fdd4:	ec53 2b19 	vmov	r2, r3, d9
 800fdd8:	4606      	mov	r6, r0
 800fdda:	460f      	mov	r7, r1
 800fddc:	4620      	mov	r0, r4
 800fdde:	4629      	mov	r1, r5
 800fde0:	f7f0 fa52 	bl	8000288 <__aeabi_dsub>
 800fde4:	4602      	mov	r2, r0
 800fde6:	460b      	mov	r3, r1
 800fde8:	4650      	mov	r0, sl
 800fdea:	4659      	mov	r1, fp
 800fdec:	f7f0 fa4c 	bl	8000288 <__aeabi_dsub>
 800fdf0:	4642      	mov	r2, r8
 800fdf2:	464b      	mov	r3, r9
 800fdf4:	f7f0 fc00 	bl	80005f8 <__aeabi_dmul>
 800fdf8:	4602      	mov	r2, r0
 800fdfa:	460b      	mov	r3, r1
 800fdfc:	4630      	mov	r0, r6
 800fdfe:	4639      	mov	r1, r7
 800fe00:	f7f0 fa42 	bl	8000288 <__aeabi_dsub>
 800fe04:	ec53 2b1a 	vmov	r2, r3, d10
 800fe08:	f7f0 fbf6 	bl	80005f8 <__aeabi_dmul>
 800fe0c:	ec53 2b18 	vmov	r2, r3, d8
 800fe10:	ec41 0b19 	vmov	d9, r0, r1
 800fe14:	ec51 0b18 	vmov	r0, r1, d8
 800fe18:	f7f0 fbee 	bl	80005f8 <__aeabi_dmul>
 800fe1c:	a37c      	add	r3, pc, #496	; (adr r3, 8010010 <__ieee754_pow+0x708>)
 800fe1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe22:	4604      	mov	r4, r0
 800fe24:	460d      	mov	r5, r1
 800fe26:	f7f0 fbe7 	bl	80005f8 <__aeabi_dmul>
 800fe2a:	a37b      	add	r3, pc, #492	; (adr r3, 8010018 <__ieee754_pow+0x710>)
 800fe2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe30:	f7f0 fa2c 	bl	800028c <__adddf3>
 800fe34:	4622      	mov	r2, r4
 800fe36:	462b      	mov	r3, r5
 800fe38:	f7f0 fbde 	bl	80005f8 <__aeabi_dmul>
 800fe3c:	a378      	add	r3, pc, #480	; (adr r3, 8010020 <__ieee754_pow+0x718>)
 800fe3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe42:	f7f0 fa23 	bl	800028c <__adddf3>
 800fe46:	4622      	mov	r2, r4
 800fe48:	462b      	mov	r3, r5
 800fe4a:	f7f0 fbd5 	bl	80005f8 <__aeabi_dmul>
 800fe4e:	a376      	add	r3, pc, #472	; (adr r3, 8010028 <__ieee754_pow+0x720>)
 800fe50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe54:	f7f0 fa1a 	bl	800028c <__adddf3>
 800fe58:	4622      	mov	r2, r4
 800fe5a:	462b      	mov	r3, r5
 800fe5c:	f7f0 fbcc 	bl	80005f8 <__aeabi_dmul>
 800fe60:	a373      	add	r3, pc, #460	; (adr r3, 8010030 <__ieee754_pow+0x728>)
 800fe62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe66:	f7f0 fa11 	bl	800028c <__adddf3>
 800fe6a:	4622      	mov	r2, r4
 800fe6c:	462b      	mov	r3, r5
 800fe6e:	f7f0 fbc3 	bl	80005f8 <__aeabi_dmul>
 800fe72:	a371      	add	r3, pc, #452	; (adr r3, 8010038 <__ieee754_pow+0x730>)
 800fe74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe78:	f7f0 fa08 	bl	800028c <__adddf3>
 800fe7c:	4622      	mov	r2, r4
 800fe7e:	4606      	mov	r6, r0
 800fe80:	460f      	mov	r7, r1
 800fe82:	462b      	mov	r3, r5
 800fe84:	4620      	mov	r0, r4
 800fe86:	4629      	mov	r1, r5
 800fe88:	f7f0 fbb6 	bl	80005f8 <__aeabi_dmul>
 800fe8c:	4602      	mov	r2, r0
 800fe8e:	460b      	mov	r3, r1
 800fe90:	4630      	mov	r0, r6
 800fe92:	4639      	mov	r1, r7
 800fe94:	f7f0 fbb0 	bl	80005f8 <__aeabi_dmul>
 800fe98:	4642      	mov	r2, r8
 800fe9a:	4604      	mov	r4, r0
 800fe9c:	460d      	mov	r5, r1
 800fe9e:	464b      	mov	r3, r9
 800fea0:	ec51 0b18 	vmov	r0, r1, d8
 800fea4:	f7f0 f9f2 	bl	800028c <__adddf3>
 800fea8:	ec53 2b19 	vmov	r2, r3, d9
 800feac:	f7f0 fba4 	bl	80005f8 <__aeabi_dmul>
 800feb0:	4622      	mov	r2, r4
 800feb2:	462b      	mov	r3, r5
 800feb4:	f7f0 f9ea 	bl	800028c <__adddf3>
 800feb8:	4642      	mov	r2, r8
 800feba:	4682      	mov	sl, r0
 800febc:	468b      	mov	fp, r1
 800febe:	464b      	mov	r3, r9
 800fec0:	4640      	mov	r0, r8
 800fec2:	4649      	mov	r1, r9
 800fec4:	f7f0 fb98 	bl	80005f8 <__aeabi_dmul>
 800fec8:	4b6b      	ldr	r3, [pc, #428]	; (8010078 <__ieee754_pow+0x770>)
 800feca:	2200      	movs	r2, #0
 800fecc:	4606      	mov	r6, r0
 800fece:	460f      	mov	r7, r1
 800fed0:	f7f0 f9dc 	bl	800028c <__adddf3>
 800fed4:	4652      	mov	r2, sl
 800fed6:	465b      	mov	r3, fp
 800fed8:	f7f0 f9d8 	bl	800028c <__adddf3>
 800fedc:	2000      	movs	r0, #0
 800fede:	4604      	mov	r4, r0
 800fee0:	460d      	mov	r5, r1
 800fee2:	4602      	mov	r2, r0
 800fee4:	460b      	mov	r3, r1
 800fee6:	4640      	mov	r0, r8
 800fee8:	4649      	mov	r1, r9
 800feea:	f7f0 fb85 	bl	80005f8 <__aeabi_dmul>
 800feee:	4b62      	ldr	r3, [pc, #392]	; (8010078 <__ieee754_pow+0x770>)
 800fef0:	4680      	mov	r8, r0
 800fef2:	4689      	mov	r9, r1
 800fef4:	2200      	movs	r2, #0
 800fef6:	4620      	mov	r0, r4
 800fef8:	4629      	mov	r1, r5
 800fefa:	f7f0 f9c5 	bl	8000288 <__aeabi_dsub>
 800fefe:	4632      	mov	r2, r6
 800ff00:	463b      	mov	r3, r7
 800ff02:	f7f0 f9c1 	bl	8000288 <__aeabi_dsub>
 800ff06:	4602      	mov	r2, r0
 800ff08:	460b      	mov	r3, r1
 800ff0a:	4650      	mov	r0, sl
 800ff0c:	4659      	mov	r1, fp
 800ff0e:	f7f0 f9bb 	bl	8000288 <__aeabi_dsub>
 800ff12:	ec53 2b18 	vmov	r2, r3, d8
 800ff16:	f7f0 fb6f 	bl	80005f8 <__aeabi_dmul>
 800ff1a:	4622      	mov	r2, r4
 800ff1c:	4606      	mov	r6, r0
 800ff1e:	460f      	mov	r7, r1
 800ff20:	462b      	mov	r3, r5
 800ff22:	ec51 0b19 	vmov	r0, r1, d9
 800ff26:	f7f0 fb67 	bl	80005f8 <__aeabi_dmul>
 800ff2a:	4602      	mov	r2, r0
 800ff2c:	460b      	mov	r3, r1
 800ff2e:	4630      	mov	r0, r6
 800ff30:	4639      	mov	r1, r7
 800ff32:	f7f0 f9ab 	bl	800028c <__adddf3>
 800ff36:	4606      	mov	r6, r0
 800ff38:	460f      	mov	r7, r1
 800ff3a:	4602      	mov	r2, r0
 800ff3c:	460b      	mov	r3, r1
 800ff3e:	4640      	mov	r0, r8
 800ff40:	4649      	mov	r1, r9
 800ff42:	f7f0 f9a3 	bl	800028c <__adddf3>
 800ff46:	a33e      	add	r3, pc, #248	; (adr r3, 8010040 <__ieee754_pow+0x738>)
 800ff48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff4c:	2000      	movs	r0, #0
 800ff4e:	4604      	mov	r4, r0
 800ff50:	460d      	mov	r5, r1
 800ff52:	f7f0 fb51 	bl	80005f8 <__aeabi_dmul>
 800ff56:	4642      	mov	r2, r8
 800ff58:	ec41 0b18 	vmov	d8, r0, r1
 800ff5c:	464b      	mov	r3, r9
 800ff5e:	4620      	mov	r0, r4
 800ff60:	4629      	mov	r1, r5
 800ff62:	f7f0 f991 	bl	8000288 <__aeabi_dsub>
 800ff66:	4602      	mov	r2, r0
 800ff68:	460b      	mov	r3, r1
 800ff6a:	4630      	mov	r0, r6
 800ff6c:	4639      	mov	r1, r7
 800ff6e:	f7f0 f98b 	bl	8000288 <__aeabi_dsub>
 800ff72:	a335      	add	r3, pc, #212	; (adr r3, 8010048 <__ieee754_pow+0x740>)
 800ff74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff78:	f7f0 fb3e 	bl	80005f8 <__aeabi_dmul>
 800ff7c:	a334      	add	r3, pc, #208	; (adr r3, 8010050 <__ieee754_pow+0x748>)
 800ff7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff82:	4606      	mov	r6, r0
 800ff84:	460f      	mov	r7, r1
 800ff86:	4620      	mov	r0, r4
 800ff88:	4629      	mov	r1, r5
 800ff8a:	f7f0 fb35 	bl	80005f8 <__aeabi_dmul>
 800ff8e:	4602      	mov	r2, r0
 800ff90:	460b      	mov	r3, r1
 800ff92:	4630      	mov	r0, r6
 800ff94:	4639      	mov	r1, r7
 800ff96:	f7f0 f979 	bl	800028c <__adddf3>
 800ff9a:	9a07      	ldr	r2, [sp, #28]
 800ff9c:	4b37      	ldr	r3, [pc, #220]	; (801007c <__ieee754_pow+0x774>)
 800ff9e:	4413      	add	r3, r2
 800ffa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffa4:	f7f0 f972 	bl	800028c <__adddf3>
 800ffa8:	4682      	mov	sl, r0
 800ffaa:	9805      	ldr	r0, [sp, #20]
 800ffac:	468b      	mov	fp, r1
 800ffae:	f7f0 fab9 	bl	8000524 <__aeabi_i2d>
 800ffb2:	9a07      	ldr	r2, [sp, #28]
 800ffb4:	4b32      	ldr	r3, [pc, #200]	; (8010080 <__ieee754_pow+0x778>)
 800ffb6:	4413      	add	r3, r2
 800ffb8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ffbc:	4606      	mov	r6, r0
 800ffbe:	460f      	mov	r7, r1
 800ffc0:	4652      	mov	r2, sl
 800ffc2:	465b      	mov	r3, fp
 800ffc4:	ec51 0b18 	vmov	r0, r1, d8
 800ffc8:	f7f0 f960 	bl	800028c <__adddf3>
 800ffcc:	4642      	mov	r2, r8
 800ffce:	464b      	mov	r3, r9
 800ffd0:	f7f0 f95c 	bl	800028c <__adddf3>
 800ffd4:	4632      	mov	r2, r6
 800ffd6:	463b      	mov	r3, r7
 800ffd8:	f7f0 f958 	bl	800028c <__adddf3>
 800ffdc:	2000      	movs	r0, #0
 800ffde:	4632      	mov	r2, r6
 800ffe0:	463b      	mov	r3, r7
 800ffe2:	4604      	mov	r4, r0
 800ffe4:	460d      	mov	r5, r1
 800ffe6:	f7f0 f94f 	bl	8000288 <__aeabi_dsub>
 800ffea:	4642      	mov	r2, r8
 800ffec:	464b      	mov	r3, r9
 800ffee:	f7f0 f94b 	bl	8000288 <__aeabi_dsub>
 800fff2:	ec53 2b18 	vmov	r2, r3, d8
 800fff6:	f7f0 f947 	bl	8000288 <__aeabi_dsub>
 800fffa:	4602      	mov	r2, r0
 800fffc:	460b      	mov	r3, r1
 800fffe:	4650      	mov	r0, sl
 8010000:	4659      	mov	r1, fp
 8010002:	e610      	b.n	800fc26 <__ieee754_pow+0x31e>
 8010004:	2401      	movs	r4, #1
 8010006:	e6a1      	b.n	800fd4c <__ieee754_pow+0x444>
 8010008:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8010058 <__ieee754_pow+0x750>
 801000c:	e617      	b.n	800fc3e <__ieee754_pow+0x336>
 801000e:	bf00      	nop
 8010010:	4a454eef 	.word	0x4a454eef
 8010014:	3fca7e28 	.word	0x3fca7e28
 8010018:	93c9db65 	.word	0x93c9db65
 801001c:	3fcd864a 	.word	0x3fcd864a
 8010020:	a91d4101 	.word	0xa91d4101
 8010024:	3fd17460 	.word	0x3fd17460
 8010028:	518f264d 	.word	0x518f264d
 801002c:	3fd55555 	.word	0x3fd55555
 8010030:	db6fabff 	.word	0xdb6fabff
 8010034:	3fdb6db6 	.word	0x3fdb6db6
 8010038:	33333303 	.word	0x33333303
 801003c:	3fe33333 	.word	0x3fe33333
 8010040:	e0000000 	.word	0xe0000000
 8010044:	3feec709 	.word	0x3feec709
 8010048:	dc3a03fd 	.word	0xdc3a03fd
 801004c:	3feec709 	.word	0x3feec709
 8010050:	145b01f5 	.word	0x145b01f5
 8010054:	be3e2fe0 	.word	0xbe3e2fe0
 8010058:	00000000 	.word	0x00000000
 801005c:	3ff00000 	.word	0x3ff00000
 8010060:	7ff00000 	.word	0x7ff00000
 8010064:	43400000 	.word	0x43400000
 8010068:	0003988e 	.word	0x0003988e
 801006c:	000bb679 	.word	0x000bb679
 8010070:	08010e90 	.word	0x08010e90
 8010074:	3ff00000 	.word	0x3ff00000
 8010078:	40080000 	.word	0x40080000
 801007c:	08010eb0 	.word	0x08010eb0
 8010080:	08010ea0 	.word	0x08010ea0
 8010084:	a3b5      	add	r3, pc, #724	; (adr r3, 801035c <__ieee754_pow+0xa54>)
 8010086:	e9d3 2300 	ldrd	r2, r3, [r3]
 801008a:	4640      	mov	r0, r8
 801008c:	4649      	mov	r1, r9
 801008e:	f7f0 f8fd 	bl	800028c <__adddf3>
 8010092:	4622      	mov	r2, r4
 8010094:	ec41 0b1a 	vmov	d10, r0, r1
 8010098:	462b      	mov	r3, r5
 801009a:	4630      	mov	r0, r6
 801009c:	4639      	mov	r1, r7
 801009e:	f7f0 f8f3 	bl	8000288 <__aeabi_dsub>
 80100a2:	4602      	mov	r2, r0
 80100a4:	460b      	mov	r3, r1
 80100a6:	ec51 0b1a 	vmov	r0, r1, d10
 80100aa:	f7f0 fd35 	bl	8000b18 <__aeabi_dcmpgt>
 80100ae:	2800      	cmp	r0, #0
 80100b0:	f47f ae04 	bne.w	800fcbc <__ieee754_pow+0x3b4>
 80100b4:	4aa4      	ldr	r2, [pc, #656]	; (8010348 <__ieee754_pow+0xa40>)
 80100b6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80100ba:	4293      	cmp	r3, r2
 80100bc:	f340 8108 	ble.w	80102d0 <__ieee754_pow+0x9c8>
 80100c0:	151b      	asrs	r3, r3, #20
 80100c2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80100c6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80100ca:	fa4a f303 	asr.w	r3, sl, r3
 80100ce:	445b      	add	r3, fp
 80100d0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80100d4:	4e9d      	ldr	r6, [pc, #628]	; (801034c <__ieee754_pow+0xa44>)
 80100d6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80100da:	4116      	asrs	r6, r2
 80100dc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80100e0:	2000      	movs	r0, #0
 80100e2:	ea23 0106 	bic.w	r1, r3, r6
 80100e6:	f1c2 0214 	rsb	r2, r2, #20
 80100ea:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80100ee:	fa4a fa02 	asr.w	sl, sl, r2
 80100f2:	f1bb 0f00 	cmp.w	fp, #0
 80100f6:	4602      	mov	r2, r0
 80100f8:	460b      	mov	r3, r1
 80100fa:	4620      	mov	r0, r4
 80100fc:	4629      	mov	r1, r5
 80100fe:	bfb8      	it	lt
 8010100:	f1ca 0a00 	rsblt	sl, sl, #0
 8010104:	f7f0 f8c0 	bl	8000288 <__aeabi_dsub>
 8010108:	ec41 0b19 	vmov	d9, r0, r1
 801010c:	4642      	mov	r2, r8
 801010e:	464b      	mov	r3, r9
 8010110:	ec51 0b19 	vmov	r0, r1, d9
 8010114:	f7f0 f8ba 	bl	800028c <__adddf3>
 8010118:	a37b      	add	r3, pc, #492	; (adr r3, 8010308 <__ieee754_pow+0xa00>)
 801011a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801011e:	2000      	movs	r0, #0
 8010120:	4604      	mov	r4, r0
 8010122:	460d      	mov	r5, r1
 8010124:	f7f0 fa68 	bl	80005f8 <__aeabi_dmul>
 8010128:	ec53 2b19 	vmov	r2, r3, d9
 801012c:	4606      	mov	r6, r0
 801012e:	460f      	mov	r7, r1
 8010130:	4620      	mov	r0, r4
 8010132:	4629      	mov	r1, r5
 8010134:	f7f0 f8a8 	bl	8000288 <__aeabi_dsub>
 8010138:	4602      	mov	r2, r0
 801013a:	460b      	mov	r3, r1
 801013c:	4640      	mov	r0, r8
 801013e:	4649      	mov	r1, r9
 8010140:	f7f0 f8a2 	bl	8000288 <__aeabi_dsub>
 8010144:	a372      	add	r3, pc, #456	; (adr r3, 8010310 <__ieee754_pow+0xa08>)
 8010146:	e9d3 2300 	ldrd	r2, r3, [r3]
 801014a:	f7f0 fa55 	bl	80005f8 <__aeabi_dmul>
 801014e:	a372      	add	r3, pc, #456	; (adr r3, 8010318 <__ieee754_pow+0xa10>)
 8010150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010154:	4680      	mov	r8, r0
 8010156:	4689      	mov	r9, r1
 8010158:	4620      	mov	r0, r4
 801015a:	4629      	mov	r1, r5
 801015c:	f7f0 fa4c 	bl	80005f8 <__aeabi_dmul>
 8010160:	4602      	mov	r2, r0
 8010162:	460b      	mov	r3, r1
 8010164:	4640      	mov	r0, r8
 8010166:	4649      	mov	r1, r9
 8010168:	f7f0 f890 	bl	800028c <__adddf3>
 801016c:	4604      	mov	r4, r0
 801016e:	460d      	mov	r5, r1
 8010170:	4602      	mov	r2, r0
 8010172:	460b      	mov	r3, r1
 8010174:	4630      	mov	r0, r6
 8010176:	4639      	mov	r1, r7
 8010178:	f7f0 f888 	bl	800028c <__adddf3>
 801017c:	4632      	mov	r2, r6
 801017e:	463b      	mov	r3, r7
 8010180:	4680      	mov	r8, r0
 8010182:	4689      	mov	r9, r1
 8010184:	f7f0 f880 	bl	8000288 <__aeabi_dsub>
 8010188:	4602      	mov	r2, r0
 801018a:	460b      	mov	r3, r1
 801018c:	4620      	mov	r0, r4
 801018e:	4629      	mov	r1, r5
 8010190:	f7f0 f87a 	bl	8000288 <__aeabi_dsub>
 8010194:	4642      	mov	r2, r8
 8010196:	4606      	mov	r6, r0
 8010198:	460f      	mov	r7, r1
 801019a:	464b      	mov	r3, r9
 801019c:	4640      	mov	r0, r8
 801019e:	4649      	mov	r1, r9
 80101a0:	f7f0 fa2a 	bl	80005f8 <__aeabi_dmul>
 80101a4:	a35e      	add	r3, pc, #376	; (adr r3, 8010320 <__ieee754_pow+0xa18>)
 80101a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101aa:	4604      	mov	r4, r0
 80101ac:	460d      	mov	r5, r1
 80101ae:	f7f0 fa23 	bl	80005f8 <__aeabi_dmul>
 80101b2:	a35d      	add	r3, pc, #372	; (adr r3, 8010328 <__ieee754_pow+0xa20>)
 80101b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101b8:	f7f0 f866 	bl	8000288 <__aeabi_dsub>
 80101bc:	4622      	mov	r2, r4
 80101be:	462b      	mov	r3, r5
 80101c0:	f7f0 fa1a 	bl	80005f8 <__aeabi_dmul>
 80101c4:	a35a      	add	r3, pc, #360	; (adr r3, 8010330 <__ieee754_pow+0xa28>)
 80101c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101ca:	f7f0 f85f 	bl	800028c <__adddf3>
 80101ce:	4622      	mov	r2, r4
 80101d0:	462b      	mov	r3, r5
 80101d2:	f7f0 fa11 	bl	80005f8 <__aeabi_dmul>
 80101d6:	a358      	add	r3, pc, #352	; (adr r3, 8010338 <__ieee754_pow+0xa30>)
 80101d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101dc:	f7f0 f854 	bl	8000288 <__aeabi_dsub>
 80101e0:	4622      	mov	r2, r4
 80101e2:	462b      	mov	r3, r5
 80101e4:	f7f0 fa08 	bl	80005f8 <__aeabi_dmul>
 80101e8:	a355      	add	r3, pc, #340	; (adr r3, 8010340 <__ieee754_pow+0xa38>)
 80101ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101ee:	f7f0 f84d 	bl	800028c <__adddf3>
 80101f2:	4622      	mov	r2, r4
 80101f4:	462b      	mov	r3, r5
 80101f6:	f7f0 f9ff 	bl	80005f8 <__aeabi_dmul>
 80101fa:	4602      	mov	r2, r0
 80101fc:	460b      	mov	r3, r1
 80101fe:	4640      	mov	r0, r8
 8010200:	4649      	mov	r1, r9
 8010202:	f7f0 f841 	bl	8000288 <__aeabi_dsub>
 8010206:	4604      	mov	r4, r0
 8010208:	460d      	mov	r5, r1
 801020a:	4602      	mov	r2, r0
 801020c:	460b      	mov	r3, r1
 801020e:	4640      	mov	r0, r8
 8010210:	4649      	mov	r1, r9
 8010212:	f7f0 f9f1 	bl	80005f8 <__aeabi_dmul>
 8010216:	2200      	movs	r2, #0
 8010218:	ec41 0b19 	vmov	d9, r0, r1
 801021c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010220:	4620      	mov	r0, r4
 8010222:	4629      	mov	r1, r5
 8010224:	f7f0 f830 	bl	8000288 <__aeabi_dsub>
 8010228:	4602      	mov	r2, r0
 801022a:	460b      	mov	r3, r1
 801022c:	ec51 0b19 	vmov	r0, r1, d9
 8010230:	f7f0 fb0c 	bl	800084c <__aeabi_ddiv>
 8010234:	4632      	mov	r2, r6
 8010236:	4604      	mov	r4, r0
 8010238:	460d      	mov	r5, r1
 801023a:	463b      	mov	r3, r7
 801023c:	4640      	mov	r0, r8
 801023e:	4649      	mov	r1, r9
 8010240:	f7f0 f9da 	bl	80005f8 <__aeabi_dmul>
 8010244:	4632      	mov	r2, r6
 8010246:	463b      	mov	r3, r7
 8010248:	f7f0 f820 	bl	800028c <__adddf3>
 801024c:	4602      	mov	r2, r0
 801024e:	460b      	mov	r3, r1
 8010250:	4620      	mov	r0, r4
 8010252:	4629      	mov	r1, r5
 8010254:	f7f0 f818 	bl	8000288 <__aeabi_dsub>
 8010258:	4642      	mov	r2, r8
 801025a:	464b      	mov	r3, r9
 801025c:	f7f0 f814 	bl	8000288 <__aeabi_dsub>
 8010260:	460b      	mov	r3, r1
 8010262:	4602      	mov	r2, r0
 8010264:	493a      	ldr	r1, [pc, #232]	; (8010350 <__ieee754_pow+0xa48>)
 8010266:	2000      	movs	r0, #0
 8010268:	f7f0 f80e 	bl	8000288 <__aeabi_dsub>
 801026c:	ec41 0b10 	vmov	d0, r0, r1
 8010270:	ee10 3a90 	vmov	r3, s1
 8010274:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8010278:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801027c:	da2b      	bge.n	80102d6 <__ieee754_pow+0x9ce>
 801027e:	4650      	mov	r0, sl
 8010280:	f000 f966 	bl	8010550 <scalbn>
 8010284:	ec51 0b10 	vmov	r0, r1, d0
 8010288:	ec53 2b18 	vmov	r2, r3, d8
 801028c:	f7ff bbed 	b.w	800fa6a <__ieee754_pow+0x162>
 8010290:	4b30      	ldr	r3, [pc, #192]	; (8010354 <__ieee754_pow+0xa4c>)
 8010292:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8010296:	429e      	cmp	r6, r3
 8010298:	f77f af0c 	ble.w	80100b4 <__ieee754_pow+0x7ac>
 801029c:	4b2e      	ldr	r3, [pc, #184]	; (8010358 <__ieee754_pow+0xa50>)
 801029e:	440b      	add	r3, r1
 80102a0:	4303      	orrs	r3, r0
 80102a2:	d009      	beq.n	80102b8 <__ieee754_pow+0x9b0>
 80102a4:	ec51 0b18 	vmov	r0, r1, d8
 80102a8:	2200      	movs	r2, #0
 80102aa:	2300      	movs	r3, #0
 80102ac:	f7f0 fc16 	bl	8000adc <__aeabi_dcmplt>
 80102b0:	3800      	subs	r0, #0
 80102b2:	bf18      	it	ne
 80102b4:	2001      	movne	r0, #1
 80102b6:	e447      	b.n	800fb48 <__ieee754_pow+0x240>
 80102b8:	4622      	mov	r2, r4
 80102ba:	462b      	mov	r3, r5
 80102bc:	f7ef ffe4 	bl	8000288 <__aeabi_dsub>
 80102c0:	4642      	mov	r2, r8
 80102c2:	464b      	mov	r3, r9
 80102c4:	f7f0 fc1e 	bl	8000b04 <__aeabi_dcmpge>
 80102c8:	2800      	cmp	r0, #0
 80102ca:	f43f aef3 	beq.w	80100b4 <__ieee754_pow+0x7ac>
 80102ce:	e7e9      	b.n	80102a4 <__ieee754_pow+0x99c>
 80102d0:	f04f 0a00 	mov.w	sl, #0
 80102d4:	e71a      	b.n	801010c <__ieee754_pow+0x804>
 80102d6:	ec51 0b10 	vmov	r0, r1, d0
 80102da:	4619      	mov	r1, r3
 80102dc:	e7d4      	b.n	8010288 <__ieee754_pow+0x980>
 80102de:	491c      	ldr	r1, [pc, #112]	; (8010350 <__ieee754_pow+0xa48>)
 80102e0:	2000      	movs	r0, #0
 80102e2:	f7ff bb30 	b.w	800f946 <__ieee754_pow+0x3e>
 80102e6:	2000      	movs	r0, #0
 80102e8:	2100      	movs	r1, #0
 80102ea:	f7ff bb2c 	b.w	800f946 <__ieee754_pow+0x3e>
 80102ee:	4630      	mov	r0, r6
 80102f0:	4639      	mov	r1, r7
 80102f2:	f7ff bb28 	b.w	800f946 <__ieee754_pow+0x3e>
 80102f6:	9204      	str	r2, [sp, #16]
 80102f8:	f7ff bb7a 	b.w	800f9f0 <__ieee754_pow+0xe8>
 80102fc:	2300      	movs	r3, #0
 80102fe:	f7ff bb64 	b.w	800f9ca <__ieee754_pow+0xc2>
 8010302:	bf00      	nop
 8010304:	f3af 8000 	nop.w
 8010308:	00000000 	.word	0x00000000
 801030c:	3fe62e43 	.word	0x3fe62e43
 8010310:	fefa39ef 	.word	0xfefa39ef
 8010314:	3fe62e42 	.word	0x3fe62e42
 8010318:	0ca86c39 	.word	0x0ca86c39
 801031c:	be205c61 	.word	0xbe205c61
 8010320:	72bea4d0 	.word	0x72bea4d0
 8010324:	3e663769 	.word	0x3e663769
 8010328:	c5d26bf1 	.word	0xc5d26bf1
 801032c:	3ebbbd41 	.word	0x3ebbbd41
 8010330:	af25de2c 	.word	0xaf25de2c
 8010334:	3f11566a 	.word	0x3f11566a
 8010338:	16bebd93 	.word	0x16bebd93
 801033c:	3f66c16c 	.word	0x3f66c16c
 8010340:	5555553e 	.word	0x5555553e
 8010344:	3fc55555 	.word	0x3fc55555
 8010348:	3fe00000 	.word	0x3fe00000
 801034c:	000fffff 	.word	0x000fffff
 8010350:	3ff00000 	.word	0x3ff00000
 8010354:	4090cbff 	.word	0x4090cbff
 8010358:	3f6f3400 	.word	0x3f6f3400
 801035c:	652b82fe 	.word	0x652b82fe
 8010360:	3c971547 	.word	0x3c971547

08010364 <__ieee754_sqrt>:
 8010364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010368:	ec55 4b10 	vmov	r4, r5, d0
 801036c:	4e55      	ldr	r6, [pc, #340]	; (80104c4 <__ieee754_sqrt+0x160>)
 801036e:	43ae      	bics	r6, r5
 8010370:	ee10 0a10 	vmov	r0, s0
 8010374:	ee10 3a10 	vmov	r3, s0
 8010378:	462a      	mov	r2, r5
 801037a:	4629      	mov	r1, r5
 801037c:	d110      	bne.n	80103a0 <__ieee754_sqrt+0x3c>
 801037e:	ee10 2a10 	vmov	r2, s0
 8010382:	462b      	mov	r3, r5
 8010384:	f7f0 f938 	bl	80005f8 <__aeabi_dmul>
 8010388:	4602      	mov	r2, r0
 801038a:	460b      	mov	r3, r1
 801038c:	4620      	mov	r0, r4
 801038e:	4629      	mov	r1, r5
 8010390:	f7ef ff7c 	bl	800028c <__adddf3>
 8010394:	4604      	mov	r4, r0
 8010396:	460d      	mov	r5, r1
 8010398:	ec45 4b10 	vmov	d0, r4, r5
 801039c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103a0:	2d00      	cmp	r5, #0
 80103a2:	dc10      	bgt.n	80103c6 <__ieee754_sqrt+0x62>
 80103a4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80103a8:	4330      	orrs	r0, r6
 80103aa:	d0f5      	beq.n	8010398 <__ieee754_sqrt+0x34>
 80103ac:	b15d      	cbz	r5, 80103c6 <__ieee754_sqrt+0x62>
 80103ae:	ee10 2a10 	vmov	r2, s0
 80103b2:	462b      	mov	r3, r5
 80103b4:	ee10 0a10 	vmov	r0, s0
 80103b8:	f7ef ff66 	bl	8000288 <__aeabi_dsub>
 80103bc:	4602      	mov	r2, r0
 80103be:	460b      	mov	r3, r1
 80103c0:	f7f0 fa44 	bl	800084c <__aeabi_ddiv>
 80103c4:	e7e6      	b.n	8010394 <__ieee754_sqrt+0x30>
 80103c6:	1512      	asrs	r2, r2, #20
 80103c8:	d074      	beq.n	80104b4 <__ieee754_sqrt+0x150>
 80103ca:	07d4      	lsls	r4, r2, #31
 80103cc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80103d0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80103d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80103d8:	bf5e      	ittt	pl
 80103da:	0fda      	lsrpl	r2, r3, #31
 80103dc:	005b      	lslpl	r3, r3, #1
 80103de:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80103e2:	2400      	movs	r4, #0
 80103e4:	0fda      	lsrs	r2, r3, #31
 80103e6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80103ea:	107f      	asrs	r7, r7, #1
 80103ec:	005b      	lsls	r3, r3, #1
 80103ee:	2516      	movs	r5, #22
 80103f0:	4620      	mov	r0, r4
 80103f2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80103f6:	1886      	adds	r6, r0, r2
 80103f8:	428e      	cmp	r6, r1
 80103fa:	bfde      	ittt	le
 80103fc:	1b89      	suble	r1, r1, r6
 80103fe:	18b0      	addle	r0, r6, r2
 8010400:	18a4      	addle	r4, r4, r2
 8010402:	0049      	lsls	r1, r1, #1
 8010404:	3d01      	subs	r5, #1
 8010406:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 801040a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801040e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010412:	d1f0      	bne.n	80103f6 <__ieee754_sqrt+0x92>
 8010414:	462a      	mov	r2, r5
 8010416:	f04f 0e20 	mov.w	lr, #32
 801041a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801041e:	4281      	cmp	r1, r0
 8010420:	eb06 0c05 	add.w	ip, r6, r5
 8010424:	dc02      	bgt.n	801042c <__ieee754_sqrt+0xc8>
 8010426:	d113      	bne.n	8010450 <__ieee754_sqrt+0xec>
 8010428:	459c      	cmp	ip, r3
 801042a:	d811      	bhi.n	8010450 <__ieee754_sqrt+0xec>
 801042c:	f1bc 0f00 	cmp.w	ip, #0
 8010430:	eb0c 0506 	add.w	r5, ip, r6
 8010434:	da43      	bge.n	80104be <__ieee754_sqrt+0x15a>
 8010436:	2d00      	cmp	r5, #0
 8010438:	db41      	blt.n	80104be <__ieee754_sqrt+0x15a>
 801043a:	f100 0801 	add.w	r8, r0, #1
 801043e:	1a09      	subs	r1, r1, r0
 8010440:	459c      	cmp	ip, r3
 8010442:	bf88      	it	hi
 8010444:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 8010448:	eba3 030c 	sub.w	r3, r3, ip
 801044c:	4432      	add	r2, r6
 801044e:	4640      	mov	r0, r8
 8010450:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8010454:	f1be 0e01 	subs.w	lr, lr, #1
 8010458:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 801045c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010460:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8010464:	d1db      	bne.n	801041e <__ieee754_sqrt+0xba>
 8010466:	430b      	orrs	r3, r1
 8010468:	d006      	beq.n	8010478 <__ieee754_sqrt+0x114>
 801046a:	1c50      	adds	r0, r2, #1
 801046c:	bf13      	iteet	ne
 801046e:	3201      	addne	r2, #1
 8010470:	3401      	addeq	r4, #1
 8010472:	4672      	moveq	r2, lr
 8010474:	f022 0201 	bicne.w	r2, r2, #1
 8010478:	1063      	asrs	r3, r4, #1
 801047a:	0852      	lsrs	r2, r2, #1
 801047c:	07e1      	lsls	r1, r4, #31
 801047e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8010482:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8010486:	bf48      	it	mi
 8010488:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 801048c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8010490:	4614      	mov	r4, r2
 8010492:	e781      	b.n	8010398 <__ieee754_sqrt+0x34>
 8010494:	0ad9      	lsrs	r1, r3, #11
 8010496:	3815      	subs	r0, #21
 8010498:	055b      	lsls	r3, r3, #21
 801049a:	2900      	cmp	r1, #0
 801049c:	d0fa      	beq.n	8010494 <__ieee754_sqrt+0x130>
 801049e:	02cd      	lsls	r5, r1, #11
 80104a0:	d50a      	bpl.n	80104b8 <__ieee754_sqrt+0x154>
 80104a2:	f1c2 0420 	rsb	r4, r2, #32
 80104a6:	fa23 f404 	lsr.w	r4, r3, r4
 80104aa:	1e55      	subs	r5, r2, #1
 80104ac:	4093      	lsls	r3, r2
 80104ae:	4321      	orrs	r1, r4
 80104b0:	1b42      	subs	r2, r0, r5
 80104b2:	e78a      	b.n	80103ca <__ieee754_sqrt+0x66>
 80104b4:	4610      	mov	r0, r2
 80104b6:	e7f0      	b.n	801049a <__ieee754_sqrt+0x136>
 80104b8:	0049      	lsls	r1, r1, #1
 80104ba:	3201      	adds	r2, #1
 80104bc:	e7ef      	b.n	801049e <__ieee754_sqrt+0x13a>
 80104be:	4680      	mov	r8, r0
 80104c0:	e7bd      	b.n	801043e <__ieee754_sqrt+0xda>
 80104c2:	bf00      	nop
 80104c4:	7ff00000 	.word	0x7ff00000

080104c8 <with_errno>:
 80104c8:	b570      	push	{r4, r5, r6, lr}
 80104ca:	4604      	mov	r4, r0
 80104cc:	460d      	mov	r5, r1
 80104ce:	4616      	mov	r6, r2
 80104d0:	f7fc fa94 	bl	800c9fc <__errno>
 80104d4:	4629      	mov	r1, r5
 80104d6:	6006      	str	r6, [r0, #0]
 80104d8:	4620      	mov	r0, r4
 80104da:	bd70      	pop	{r4, r5, r6, pc}

080104dc <xflow>:
 80104dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80104de:	4614      	mov	r4, r2
 80104e0:	461d      	mov	r5, r3
 80104e2:	b108      	cbz	r0, 80104e8 <xflow+0xc>
 80104e4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80104e8:	e9cd 2300 	strd	r2, r3, [sp]
 80104ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 80104f0:	4620      	mov	r0, r4
 80104f2:	4629      	mov	r1, r5
 80104f4:	f7f0 f880 	bl	80005f8 <__aeabi_dmul>
 80104f8:	2222      	movs	r2, #34	; 0x22
 80104fa:	b003      	add	sp, #12
 80104fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010500:	f7ff bfe2 	b.w	80104c8 <with_errno>

08010504 <__math_uflow>:
 8010504:	b508      	push	{r3, lr}
 8010506:	2200      	movs	r2, #0
 8010508:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801050c:	f7ff ffe6 	bl	80104dc <xflow>
 8010510:	ec41 0b10 	vmov	d0, r0, r1
 8010514:	bd08      	pop	{r3, pc}

08010516 <__math_oflow>:
 8010516:	b508      	push	{r3, lr}
 8010518:	2200      	movs	r2, #0
 801051a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801051e:	f7ff ffdd 	bl	80104dc <xflow>
 8010522:	ec41 0b10 	vmov	d0, r0, r1
 8010526:	bd08      	pop	{r3, pc}

08010528 <fabs>:
 8010528:	ec51 0b10 	vmov	r0, r1, d0
 801052c:	ee10 2a10 	vmov	r2, s0
 8010530:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010534:	ec43 2b10 	vmov	d0, r2, r3
 8010538:	4770      	bx	lr

0801053a <finite>:
 801053a:	b082      	sub	sp, #8
 801053c:	ed8d 0b00 	vstr	d0, [sp]
 8010540:	9801      	ldr	r0, [sp, #4]
 8010542:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8010546:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801054a:	0fc0      	lsrs	r0, r0, #31
 801054c:	b002      	add	sp, #8
 801054e:	4770      	bx	lr

08010550 <scalbn>:
 8010550:	b570      	push	{r4, r5, r6, lr}
 8010552:	ec55 4b10 	vmov	r4, r5, d0
 8010556:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801055a:	4606      	mov	r6, r0
 801055c:	462b      	mov	r3, r5
 801055e:	b99a      	cbnz	r2, 8010588 <scalbn+0x38>
 8010560:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010564:	4323      	orrs	r3, r4
 8010566:	d036      	beq.n	80105d6 <scalbn+0x86>
 8010568:	4b39      	ldr	r3, [pc, #228]	; (8010650 <scalbn+0x100>)
 801056a:	4629      	mov	r1, r5
 801056c:	ee10 0a10 	vmov	r0, s0
 8010570:	2200      	movs	r2, #0
 8010572:	f7f0 f841 	bl	80005f8 <__aeabi_dmul>
 8010576:	4b37      	ldr	r3, [pc, #220]	; (8010654 <scalbn+0x104>)
 8010578:	429e      	cmp	r6, r3
 801057a:	4604      	mov	r4, r0
 801057c:	460d      	mov	r5, r1
 801057e:	da10      	bge.n	80105a2 <scalbn+0x52>
 8010580:	a32b      	add	r3, pc, #172	; (adr r3, 8010630 <scalbn+0xe0>)
 8010582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010586:	e03a      	b.n	80105fe <scalbn+0xae>
 8010588:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801058c:	428a      	cmp	r2, r1
 801058e:	d10c      	bne.n	80105aa <scalbn+0x5a>
 8010590:	ee10 2a10 	vmov	r2, s0
 8010594:	4620      	mov	r0, r4
 8010596:	4629      	mov	r1, r5
 8010598:	f7ef fe78 	bl	800028c <__adddf3>
 801059c:	4604      	mov	r4, r0
 801059e:	460d      	mov	r5, r1
 80105a0:	e019      	b.n	80105d6 <scalbn+0x86>
 80105a2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80105a6:	460b      	mov	r3, r1
 80105a8:	3a36      	subs	r2, #54	; 0x36
 80105aa:	4432      	add	r2, r6
 80105ac:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80105b0:	428a      	cmp	r2, r1
 80105b2:	dd08      	ble.n	80105c6 <scalbn+0x76>
 80105b4:	2d00      	cmp	r5, #0
 80105b6:	a120      	add	r1, pc, #128	; (adr r1, 8010638 <scalbn+0xe8>)
 80105b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80105bc:	da1c      	bge.n	80105f8 <scalbn+0xa8>
 80105be:	a120      	add	r1, pc, #128	; (adr r1, 8010640 <scalbn+0xf0>)
 80105c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80105c4:	e018      	b.n	80105f8 <scalbn+0xa8>
 80105c6:	2a00      	cmp	r2, #0
 80105c8:	dd08      	ble.n	80105dc <scalbn+0x8c>
 80105ca:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80105ce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80105d2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80105d6:	ec45 4b10 	vmov	d0, r4, r5
 80105da:	bd70      	pop	{r4, r5, r6, pc}
 80105dc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80105e0:	da19      	bge.n	8010616 <scalbn+0xc6>
 80105e2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80105e6:	429e      	cmp	r6, r3
 80105e8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80105ec:	dd0a      	ble.n	8010604 <scalbn+0xb4>
 80105ee:	a112      	add	r1, pc, #72	; (adr r1, 8010638 <scalbn+0xe8>)
 80105f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d1e2      	bne.n	80105be <scalbn+0x6e>
 80105f8:	a30f      	add	r3, pc, #60	; (adr r3, 8010638 <scalbn+0xe8>)
 80105fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105fe:	f7ef fffb 	bl	80005f8 <__aeabi_dmul>
 8010602:	e7cb      	b.n	801059c <scalbn+0x4c>
 8010604:	a10a      	add	r1, pc, #40	; (adr r1, 8010630 <scalbn+0xe0>)
 8010606:	e9d1 0100 	ldrd	r0, r1, [r1]
 801060a:	2b00      	cmp	r3, #0
 801060c:	d0b8      	beq.n	8010580 <scalbn+0x30>
 801060e:	a10e      	add	r1, pc, #56	; (adr r1, 8010648 <scalbn+0xf8>)
 8010610:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010614:	e7b4      	b.n	8010580 <scalbn+0x30>
 8010616:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801061a:	3236      	adds	r2, #54	; 0x36
 801061c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010620:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8010624:	4620      	mov	r0, r4
 8010626:	4b0c      	ldr	r3, [pc, #48]	; (8010658 <scalbn+0x108>)
 8010628:	2200      	movs	r2, #0
 801062a:	e7e8      	b.n	80105fe <scalbn+0xae>
 801062c:	f3af 8000 	nop.w
 8010630:	c2f8f359 	.word	0xc2f8f359
 8010634:	01a56e1f 	.word	0x01a56e1f
 8010638:	8800759c 	.word	0x8800759c
 801063c:	7e37e43c 	.word	0x7e37e43c
 8010640:	8800759c 	.word	0x8800759c
 8010644:	fe37e43c 	.word	0xfe37e43c
 8010648:	c2f8f359 	.word	0xc2f8f359
 801064c:	81a56e1f 	.word	0x81a56e1f
 8010650:	43500000 	.word	0x43500000
 8010654:	ffff3cb0 	.word	0xffff3cb0
 8010658:	3c900000 	.word	0x3c900000

0801065c <_init>:
 801065c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801065e:	bf00      	nop
 8010660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010662:	bc08      	pop	{r3}
 8010664:	469e      	mov	lr, r3
 8010666:	4770      	bx	lr

08010668 <_fini>:
 8010668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801066a:	bf00      	nop
 801066c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801066e:	bc08      	pop	{r3}
 8010670:	469e      	mov	lr, r3
 8010672:	4770      	bx	lr
