
UniController-OnBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001099c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008a8  08010b30  08010b30  00020b30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080113d8  080113d8  00030384  2**0
                  CONTENTS
  4 .ARM          00000008  080113d8  080113d8  000213d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080113e0  080113e0  00030384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080113e0  080113e0  000213e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080113e4  080113e4  000213e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000384  20000000  080113e8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030384  2**0
                  CONTENTS
 10 .bss          0000ae78  20000384  20000384  00030384  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000b1fc  2000b1fc  00030384  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030384  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d94d  00000000  00000000  000303b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004360  00000000  00000000  0004dd01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001868  00000000  00000000  00052068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000016f8  00000000  00000000  000538d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000237f0  00000000  00000000  00054fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001eef0  00000000  00000000  000787b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c93a4  00000000  00000000  000976a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00160a4c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007bf0  00000000  00000000  00160a9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000384 	.word	0x20000384
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010b14 	.word	0x08010b14

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000388 	.word	0x20000388
 80001cc:	08010b14 	.word	0x08010b14

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <HAL_TIM_PeriodElapsedCallback>:
#define STEP_FREQ 500

// (will take many hours to overflow)
uint32_t scheduler_ctr = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000f4c:	b5b0      	push	{r4, r5, r7, lr}
 8000f4e:	b098      	sub	sp, #96	; 0x60
 8000f50:	af06      	add	r7, sp, #24
 8000f52:	6078      	str	r0, [r7, #4]
	if (htim == &TIM_REALTIME) { // TIM_REALTIME ticks once every us, elapses once every ms
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	4a5d      	ldr	r2, [pc, #372]	; (80010cc <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d106      	bne.n	8000f6a <HAL_TIM_PeriodElapsedCallback+0x1e>
		ms_counter++;
 8000f5c:	4b5c      	ldr	r3, [pc, #368]	; (80010d0 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	3301      	adds	r3, #1
 8000f62:	4a5b      	ldr	r2, [pc, #364]	; (80010d0 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000f64:	6013      	str	r3, [r2, #0]
		dead_mans_switch_update_led();
 8000f66:	f000 f967 	bl	8001238 <dead_mans_switch_update_led>
	}
	if (htim == &TIM_SCHEDULER ) {
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a59      	ldr	r2, [pc, #356]	; (80010d4 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	f040 80a8 	bne.w	80010c4 <HAL_TIM_PeriodElapsedCallback+0x178>
		scheduler_ctr++;
 8000f74:	4b58      	ldr	r3, [pc, #352]	; (80010d8 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	4a57      	ldr	r2, [pc, #348]	; (80010d8 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000f7c:	6013      	str	r3, [r2, #0]

		if (scheduler_ctr % (SCHEDULER_FREQ / ACC_FREQ) == 0) {
 8000f7e:	4b56      	ldr	r3, [pc, #344]	; (80010d8 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	4b56      	ldr	r3, [pc, #344]	; (80010dc <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000f84:	fba3 1302 	umull	r1, r3, r3, r2
 8000f88:	095b      	lsrs	r3, r3, #5
 8000f8a:	2164      	movs	r1, #100	; 0x64
 8000f8c:	fb01 f303 	mul.w	r3, r1, r3
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d116      	bne.n	8000fc4 <HAL_TIM_PeriodElapsedCallback+0x78>
			queue_put(&MAIN_QUEUE, (Message) { .ty = MSG_REQ_ACC });
 8000f96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f9a:	2220      	movs	r2, #32
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f00b fd60 	bl	800ca64 <memset>
 8000fa4:	2305      	movs	r3, #5
 8000fa6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8000faa:	466d      	mov	r5, sp
 8000fac:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8000fb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fb4:	6823      	ldr	r3, [r4, #0]
 8000fb6:	602b      	str	r3, [r5, #0]
 8000fb8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fbc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fbe:	4848      	ldr	r0, [pc, #288]	; (80010e0 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000fc0:	f001 fab1 	bl	8002526 <queue_put>
		}
		if (scheduler_ctr % (SCHEDULER_FREQ / VESC_FREQ) == 0) {
 8000fc4:	4b44      	ldr	r3, [pc, #272]	; (80010d8 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	4b44      	ldr	r3, [pc, #272]	; (80010dc <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000fca:	fba3 1302 	umull	r1, r3, r3, r2
 8000fce:	099b      	lsrs	r3, r3, #6
 8000fd0:	21c8      	movs	r1, #200	; 0xc8
 8000fd2:	fb01 f303 	mul.w	r3, r1, r3
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d12c      	bne.n	8001036 <HAL_TIM_PeriodElapsedCallback+0xea>
			queue_put(&MAIN_QUEUE, (Message) { .ty = MSG_REQ_VESC });
 8000fdc:	f107 0308 	add.w	r3, r7, #8
 8000fe0:	2220      	movs	r2, #32
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f00b fd3d 	bl	800ca64 <memset>
 8000fea:	2303      	movs	r3, #3
 8000fec:	723b      	strb	r3, [r7, #8]
 8000fee:	466d      	mov	r5, sp
 8000ff0:	f107 0414 	add.w	r4, r7, #20
 8000ff4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ff6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ff8:	6823      	ldr	r3, [r4, #0]
 8000ffa:	602b      	str	r3, [r5, #0]
 8000ffc:	f107 0308 	add.w	r3, r7, #8
 8001000:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001002:	4837      	ldr	r0, [pc, #220]	; (80010e0 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001004:	f001 fa8f 	bl	8002526 <queue_put>
			queue_put(&MAIN_QUEUE, (Message) { .ty = MSG_FLUSH_VESC });
 8001008:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800100c:	2220      	movs	r2, #32
 800100e:	2100      	movs	r1, #0
 8001010:	4618      	mov	r0, r3
 8001012:	f00b fd27 	bl	800ca64 <memset>
 8001016:	2304      	movs	r3, #4
 8001018:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800101c:	466d      	mov	r5, sp
 800101e:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8001022:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001024:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001026:	6823      	ldr	r3, [r4, #0]
 8001028:	602b      	str	r3, [r5, #0]
 800102a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800102e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001030:	482b      	ldr	r0, [pc, #172]	; (80010e0 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001032:	f001 fa78 	bl	8002526 <queue_put>
		}
		if (scheduler_ctr % (SCHEDULER_FREQ / DUMP_FREQ) == 0) {
 8001036:	4b28      	ldr	r3, [pc, #160]	; (80010d8 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	4b28      	ldr	r3, [pc, #160]	; (80010dc <HAL_TIM_PeriodElapsedCallback+0x190>)
 800103c:	fba3 1302 	umull	r1, r3, r3, r2
 8001040:	099b      	lsrs	r3, r3, #6
 8001042:	21c8      	movs	r1, #200	; 0xc8
 8001044:	fb01 f303 	mul.w	r3, r1, r3
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	2b00      	cmp	r3, #0
 800104c:	d116      	bne.n	800107c <HAL_TIM_PeriodElapsedCallback+0x130>
			queue_put(&MAIN_QUEUE, (Message) { .ty = MSG_SEND_DEBUG });
 800104e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001052:	2220      	movs	r2, #32
 8001054:	2100      	movs	r1, #0
 8001056:	4618      	mov	r0, r3
 8001058:	f00b fd04 	bl	800ca64 <memset>
 800105c:	2301      	movs	r3, #1
 800105e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8001062:	466d      	mov	r5, sp
 8001064:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8001068:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800106a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800106c:	6823      	ldr	r3, [r4, #0]
 800106e:	602b      	str	r3, [r5, #0]
 8001070:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001074:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001076:	481a      	ldr	r0, [pc, #104]	; (80010e0 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001078:	f001 fa55 	bl	8002526 <queue_put>
		}
		if (scheduler_ctr % (SCHEDULER_FREQ / STEP_FREQ) == 0) {
 800107c:	4b16      	ldr	r3, [pc, #88]	; (80010d8 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800107e:	6819      	ldr	r1, [r3, #0]
 8001080:	4b18      	ldr	r3, [pc, #96]	; (80010e4 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001082:	fba3 2301 	umull	r2, r3, r3, r1
 8001086:	091a      	lsrs	r2, r3, #4
 8001088:	4613      	mov	r3, r2
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	4413      	add	r3, r2
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	1aca      	subs	r2, r1, r3
 8001092:	2a00      	cmp	r2, #0
 8001094:	d116      	bne.n	80010c4 <HAL_TIM_PeriodElapsedCallback+0x178>
			queue_put(&MAIN_QUEUE, (Message) { .ty = MSG_TIME_STEP });
 8001096:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800109a:	2220      	movs	r2, #32
 800109c:	2100      	movs	r1, #0
 800109e:	4618      	mov	r0, r3
 80010a0:	f00b fce0 	bl	800ca64 <memset>
 80010a4:	2302      	movs	r3, #2
 80010a6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 80010aa:	466d      	mov	r5, sp
 80010ac:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80010b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010b4:	6823      	ldr	r3, [r4, #0]
 80010b6:	602b      	str	r3, [r5, #0]
 80010b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010be:	4808      	ldr	r0, [pc, #32]	; (80010e0 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80010c0:	f001 fa31 	bl	8002526 <queue_put>
		}
	}
}
 80010c4:	bf00      	nop
 80010c6:	3748      	adds	r7, #72	; 0x48
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bdb0      	pop	{r4, r5, r7, pc}
 80010cc:	200003f4 	.word	0x200003f4
 80010d0:	20009628 	.word	0x20009628
 80010d4:	2000043c 	.word	0x2000043c
 80010d8:	2000962c 	.word	0x2000962c
 80010dc:	51eb851f 	.word	0x51eb851f
 80010e0:	2000050c 	.word	0x2000050c
 80010e4:	cccccccd 	.word	0xcccccccd

080010e8 <us_since_startup>:


// This will overflow after 2^32/10^6s ≈ 4300s ≈ 1h11m
// Overflow should be handled by the get_dt and reset_dt
uint32_t us_since_startup() {
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
	uint32_t us_counter = ms_counter * 1000;
 80010ee:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <us_since_startup+0x30>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010f6:	fb02 f303 	mul.w	r3, r2, r3
 80010fa:	607b      	str	r3, [r7, #4]
	uint32_t us_timer = TIM_REALTIME.Instance->CNT;
 80010fc:	4b07      	ldr	r3, [pc, #28]	; (800111c <us_since_startup+0x34>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001102:	603b      	str	r3, [r7, #0]
	return us_counter + us_timer;
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	4413      	add	r3, r2
}
 800110a:	4618      	mov	r0, r3
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	20009628 	.word	0x20009628
 800111c:	200003f4 	.word	0x200003f4

08001120 <get_and_reset_dt_us>:

uint32_t last_step = 0;
uint32_t get_and_reset_dt_us() {
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
	uint32_t now = us_since_startup();
 8001126:	f7ff ffdf 	bl	80010e8 <us_since_startup>
 800112a:	6078      	str	r0, [r7, #4]
	uint32_t dt = now - last_step; // If now < last_step, then we have overflowed. This should still get the right value
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <get_and_reset_dt_us+0x28>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	603b      	str	r3, [r7, #0]
	last_step = now;
 8001136:	4a04      	ldr	r2, [pc, #16]	; (8001148 <get_and_reset_dt_us+0x28>)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6013      	str	r3, [r2, #0]
	return dt;
 800113c:	683b      	ldr	r3, [r7, #0]
}
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20009630 	.word	0x20009630

0800114c <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
	if (huart == &UART_VESC_PITCH) {
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4a09      	ldr	r2, [pc, #36]	; (800117c <HAL_UART_TxCpltCallback+0x30>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d103      	bne.n	8001164 <HAL_UART_TxCpltCallback+0x18>
		vesc_uart_cb_txcplt(&vesc_pitch, huart);
 800115c:	6879      	ldr	r1, [r7, #4]
 800115e:	4808      	ldr	r0, [pc, #32]	; (8001180 <HAL_UART_TxCpltCallback+0x34>)
 8001160:	f001 fdc8 	bl	8002cf4 <vesc_uart_cb_txcplt>
	}
	if (huart == &UART_VESC_ROLL) {
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a07      	ldr	r2, [pc, #28]	; (8001184 <HAL_UART_TxCpltCallback+0x38>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d103      	bne.n	8001174 <HAL_UART_TxCpltCallback+0x28>
		vesc_uart_cb_txcplt(&vesc_roll, huart);
 800116c:	6879      	ldr	r1, [r7, #4]
 800116e:	4806      	ldr	r0, [pc, #24]	; (8001188 <HAL_UART_TxCpltCallback+0x3c>)
 8001170:	f001 fdc0 	bl	8002cf4 <vesc_uart_cb_txcplt>
	}
}
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20000484 	.word	0x20000484
 8001180:	20008518 	.word	0x20008518
 8001184:	200004c8 	.word	0x200004c8
 8001188:	20008da0 	.word	0x20008da0

0800118c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
	if (huart == &UART_VESC_PITCH) {
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4a09      	ldr	r2, [pc, #36]	; (80011bc <HAL_UART_RxCpltCallback+0x30>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d103      	bne.n	80011a4 <HAL_UART_RxCpltCallback+0x18>
		vesc_uart_cb_rxcplt(&vesc_pitch, huart);
 800119c:	6879      	ldr	r1, [r7, #4]
 800119e:	4808      	ldr	r0, [pc, #32]	; (80011c0 <HAL_UART_RxCpltCallback+0x34>)
 80011a0:	f001 fdc9 	bl	8002d36 <vesc_uart_cb_rxcplt>
	}
	if (huart == &UART_VESC_ROLL) {
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4a07      	ldr	r2, [pc, #28]	; (80011c4 <HAL_UART_RxCpltCallback+0x38>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d103      	bne.n	80011b4 <HAL_UART_RxCpltCallback+0x28>
		vesc_uart_cb_rxcplt(&vesc_roll, huart);
 80011ac:	6879      	ldr	r1, [r7, #4]
 80011ae:	4806      	ldr	r0, [pc, #24]	; (80011c8 <HAL_UART_RxCpltCallback+0x3c>)
 80011b0:	f001 fdc1 	bl	8002d36 <vesc_uart_cb_rxcplt>
	}
}
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000484 	.word	0x20000484
 80011c0:	20008518 	.word	0x20008518
 80011c4:	200004c8 	.word	0x200004c8
 80011c8:	20008da0 	.word	0x20008da0

080011cc <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
	if (huart == &UART_VESC_PITCH) {
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4a09      	ldr	r2, [pc, #36]	; (80011fc <HAL_UART_ErrorCallback+0x30>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d103      	bne.n	80011e4 <HAL_UART_ErrorCallback+0x18>
		vesc_uart_cb_rxcplt(&vesc_pitch, huart);
 80011dc:	6879      	ldr	r1, [r7, #4]
 80011de:	4808      	ldr	r0, [pc, #32]	; (8001200 <HAL_UART_ErrorCallback+0x34>)
 80011e0:	f001 fda9 	bl	8002d36 <vesc_uart_cb_rxcplt>
	}
	if (huart == &UART_VESC_ROLL) {
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4a07      	ldr	r2, [pc, #28]	; (8001204 <HAL_UART_ErrorCallback+0x38>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d103      	bne.n	80011f4 <HAL_UART_ErrorCallback+0x28>
		vesc_uart_cb_rxcplt(&vesc_roll, huart);
 80011ec:	6879      	ldr	r1, [r7, #4]
 80011ee:	4806      	ldr	r0, [pc, #24]	; (8001208 <HAL_UART_ErrorCallback+0x3c>)
 80011f0:	f001 fda1 	bl	8002d36 <vesc_uart_cb_rxcplt>
	}
}
 80011f4:	bf00      	nop
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000484 	.word	0x20000484
 8001200:	20008518 	.word	0x20008518
 8001204:	200004c8 	.word	0x200004c8
 8001208:	20008da0 	.word	0x20008da0

0800120c <dead_mans_switch_activated>:

bool dead_mans_switch_activated() {
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DEADMAN_GND_GPIO_Port, DEADMAN_GND_Pin, GPIO_PIN_RESET);
 8001210:	2200      	movs	r2, #0
 8001212:	2101      	movs	r1, #1
 8001214:	4807      	ldr	r0, [pc, #28]	; (8001234 <dead_mans_switch_activated+0x28>)
 8001216:	f003 fca5 	bl	8004b64 <HAL_GPIO_WritePin>
	return HAL_GPIO_ReadPin(DEADMAN_SW_GPIO_Port, DEADMAN_SW_Pin) == GPIO_PIN_RESET;
 800121a:	2102      	movs	r1, #2
 800121c:	4805      	ldr	r0, [pc, #20]	; (8001234 <dead_mans_switch_activated+0x28>)
 800121e:	f003 fc89 	bl	8004b34 <HAL_GPIO_ReadPin>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	bf0c      	ite	eq
 8001228:	2301      	moveq	r3, #1
 800122a:	2300      	movne	r3, #0
 800122c:	b2db      	uxtb	r3, r3
}
 800122e:	4618      	mov	r0, r3
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40020800 	.word	0x40020800

08001238 <dead_mans_switch_update_led>:
	1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0,
	1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0,
	0, 0, 0, 0, 0
};

void dead_mans_switch_update_led() {
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
	// bool blink_on = (ms_counter % 600 < 300) && ((ms_counter & 3) == 1);
	bool blink_on = morse_table[(ms_counter / 83) % sizeof(morse_table)];
 800123e:	4b1b      	ldr	r3, [pc, #108]	; (80012ac <dead_mans_switch_update_led+0x74>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a1b      	ldr	r2, [pc, #108]	; (80012b0 <dead_mans_switch_update_led+0x78>)
 8001244:	fba2 2303 	umull	r2, r3, r2, r3
 8001248:	091a      	lsrs	r2, r3, #4
 800124a:	4b1a      	ldr	r3, [pc, #104]	; (80012b4 <dead_mans_switch_update_led+0x7c>)
 800124c:	fba3 1302 	umull	r1, r3, r3, r2
 8001250:	095b      	lsrs	r3, r3, #5
 8001252:	212c      	movs	r1, #44	; 0x2c
 8001254:	fb01 f303 	mul.w	r3, r1, r3
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	4a17      	ldr	r2, [pc, #92]	; (80012b8 <dead_mans_switch_update_led+0x80>)
 800125c:	5cd3      	ldrb	r3, [r2, r3]
 800125e:	71fb      	strb	r3, [r7, #7]
	blink_on &= (ms_counter & 3) == 1;
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	4a12      	ldr	r2, [pc, #72]	; (80012ac <dead_mans_switch_update_led+0x74>)
 8001264:	6812      	ldr	r2, [r2, #0]
 8001266:	f002 0203 	and.w	r2, r2, #3
 800126a:	2a01      	cmp	r2, #1
 800126c:	bf0c      	ite	eq
 800126e:	2201      	moveq	r2, #1
 8001270:	2200      	movne	r2, #0
 8001272:	b2d2      	uxtb	r2, r2
 8001274:	4013      	ands	r3, r2
 8001276:	2b00      	cmp	r3, #0
 8001278:	bf14      	ite	ne
 800127a:	2301      	movne	r3, #1
 800127c:	2300      	moveq	r3, #0
 800127e:	71fb      	strb	r3, [r7, #7]
	blink_on |= dead_mans_switch_activated();
 8001280:	f7ff ffc4 	bl	800120c <dead_mans_switch_activated>
 8001284:	4603      	mov	r3, r0
 8001286:	461a      	mov	r2, r3
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	4313      	orrs	r3, r2
 800128c:	b2db      	uxtb	r3, r3
 800128e:	2b00      	cmp	r3, #0
 8001290:	bf14      	ite	ne
 8001292:	2301      	movne	r3, #1
 8001294:	2300      	moveq	r3, #0
 8001296:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(DEADMAN_LED_GPIO_Port, DEADMAN_LED_Pin, blink_on ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	461a      	mov	r2, r3
 800129c:	2104      	movs	r1, #4
 800129e:	4807      	ldr	r0, [pc, #28]	; (80012bc <dead_mans_switch_update_led+0x84>)
 80012a0:	f003 fc60 	bl	8004b64 <HAL_GPIO_WritePin>
}
 80012a4:	bf00      	nop
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	20009628 	.word	0x20009628
 80012b0:	3159721f 	.word	0x3159721f
 80012b4:	ba2e8ba3 	.word	0xba2e8ba3
 80012b8:	08010d18 	.word	0x08010d18
 80012bc:	40020800 	.word	0x40020800

080012c0 <setup_mpu>:

#define I2C_TIMEOUT 20

// Puts the MPU6050 into active mode, with the appropriate CFGs from main.h set
void setup_mpu(I2C_HandleTypeDef *i2c, uint16_t acc_addr) {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b08a      	sub	sp, #40	; 0x28
 80012c4:	af04      	add	r7, sp, #16
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	460b      	mov	r3, r1
 80012ca:	807b      	strh	r3, [r7, #2]
	uint8_t pwr_mgnt_data[1] = {0x00}; // sleep = 0, cycle = 0
 80012cc:	2300      	movs	r3, #0
 80012ce:	753b      	strb	r3, [r7, #20]
	HAL_I2C_Mem_Write(i2c, acc_addr << 1, 0x6b, 1, pwr_mgnt_data, 1, I2C_TIMEOUT); // Disable sleep
 80012d0:	887b      	ldrh	r3, [r7, #2]
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	b299      	uxth	r1, r3
 80012d6:	2314      	movs	r3, #20
 80012d8:	9302      	str	r3, [sp, #8]
 80012da:	2301      	movs	r3, #1
 80012dc:	9301      	str	r3, [sp, #4]
 80012de:	f107 0314 	add.w	r3, r7, #20
 80012e2:	9300      	str	r3, [sp, #0]
 80012e4:	2301      	movs	r3, #1
 80012e6:	226b      	movs	r2, #107	; 0x6b
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f003 fd99 	bl	8004e20 <HAL_I2C_Mem_Write>

	uint8_t config[1] = {(0x0 << 3) | DLPF_CFG}; // fsync = 0, dlpf = 6 (5Hz)
 80012ee:	2306      	movs	r3, #6
 80012f0:	743b      	strb	r3, [r7, #16]
	HAL_I2C_Mem_Write(i2c, acc_addr << 1, 0x1a, 1, config, 1, I2C_TIMEOUT);
 80012f2:	887b      	ldrh	r3, [r7, #2]
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	b299      	uxth	r1, r3
 80012f8:	2314      	movs	r3, #20
 80012fa:	9302      	str	r3, [sp, #8]
 80012fc:	2301      	movs	r3, #1
 80012fe:	9301      	str	r3, [sp, #4]
 8001300:	f107 0310 	add.w	r3, r7, #16
 8001304:	9300      	str	r3, [sp, #0]
 8001306:	2301      	movs	r3, #1
 8001308:	221a      	movs	r2, #26
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f003 fd88 	bl	8004e20 <HAL_I2C_Mem_Write>

	uint8_t gyro_config[1] = {(0x0 << 5) | (GYRO_FS_CFG << 3)}; // no self-test
 8001310:	2300      	movs	r3, #0
 8001312:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Mem_Write(i2c, acc_addr << 1, 0x1b, 1, gyro_config, 1, I2C_TIMEOUT);
 8001314:	887b      	ldrh	r3, [r7, #2]
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	b299      	uxth	r1, r3
 800131a:	2314      	movs	r3, #20
 800131c:	9302      	str	r3, [sp, #8]
 800131e:	2301      	movs	r3, #1
 8001320:	9301      	str	r3, [sp, #4]
 8001322:	f107 030c 	add.w	r3, r7, #12
 8001326:	9300      	str	r3, [sp, #0]
 8001328:	2301      	movs	r3, #1
 800132a:	221b      	movs	r2, #27
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f003 fd77 	bl	8004e20 <HAL_I2C_Mem_Write>

	uint8_t acc_config[1] = {(0x0 << 5) | (ACC_FS_CFG << 3)}; // no self-test
 8001332:	2300      	movs	r3, #0
 8001334:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Mem_Write(i2c, acc_addr << 1, 0x1c, 1, acc_config, 1, I2C_TIMEOUT);
 8001336:	887b      	ldrh	r3, [r7, #2]
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	b299      	uxth	r1, r3
 800133c:	2314      	movs	r3, #20
 800133e:	9302      	str	r3, [sp, #8]
 8001340:	2301      	movs	r3, #1
 8001342:	9301      	str	r3, [sp, #4]
 8001344:	f107 0308 	add.w	r3, r7, #8
 8001348:	9300      	str	r3, [sp, #0]
 800134a:	2301      	movs	r3, #1
 800134c:	221c      	movs	r2, #28
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f003 fd66 	bl	8004e20 <HAL_I2C_Mem_Write>
}
 8001354:	bf00      	nop
 8001356:	3718      	adds	r7, #24
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	0000      	movs	r0, r0
	...

08001360 <get_accelerometer_data>:

// TODO: Do this with interrupt
AccData get_accelerometer_data(I2C_HandleTypeDef *i2c, uint16_t acc_addr) {
 8001360:	b580      	push	{r7, lr}
 8001362:	b0b2      	sub	sp, #200	; 0xc8
 8001364:	af04      	add	r7, sp, #16
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	4613      	mov	r3, r2
 800136c:	80fb      	strh	r3, [r7, #6]
	// 0x43 = gyro_xout_h
	// 0x44 = gyro_xout_
	uint8_t gyro_data[6] = {0x69, 0x69, 0x69, 0x69, 0x69, 0x69};
 800136e:	4a52      	ldr	r2, [pc, #328]	; (80014b8 <get_accelerometer_data+0x158>)
 8001370:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001374:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001378:	6018      	str	r0, [r3, #0]
 800137a:	3304      	adds	r3, #4
 800137c:	8019      	strh	r1, [r3, #0]

	if (HAL_I2C_Mem_Read(&hi2c2, acc_addr << 1, 0x43, 1, gyro_data, 6, I2C_TIMEOUT) == HAL_ERROR) {
 800137e:	88fb      	ldrh	r3, [r7, #6]
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	b299      	uxth	r1, r3
 8001384:	2314      	movs	r3, #20
 8001386:	9302      	str	r3, [sp, #8]
 8001388:	2306      	movs	r3, #6
 800138a:	9301      	str	r3, [sp, #4]
 800138c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001390:	9300      	str	r3, [sp, #0]
 8001392:	2301      	movs	r3, #1
 8001394:	2243      	movs	r2, #67	; 0x43
 8001396:	4849      	ldr	r0, [pc, #292]	; (80014bc <get_accelerometer_data+0x15c>)
 8001398:	f003 fe3c 	bl	8005014 <HAL_I2C_Mem_Read>
 800139c:	4603      	mov	r3, r0
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d10a      	bne.n	80013b8 <get_accelerometer_data+0x58>
		return (AccData) { .success = false };
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	461a      	mov	r2, r3
 80013a6:	2300      	movs	r3, #0
 80013a8:	6013      	str	r3, [r2, #0]
 80013aa:	6053      	str	r3, [r2, #4]
 80013ac:	6093      	str	r3, [r2, #8]
 80013ae:	60d3      	str	r3, [r2, #12]
 80013b0:	6113      	str	r3, [r2, #16]
 80013b2:	6153      	str	r3, [r2, #20]
 80013b4:	6193      	str	r3, [r2, #24]
	return (AccData) {
		.success = true,
		.gx = gx, .gy = gy, .gz = gz,
		.ax = ax, .ay = ay, .az = az
	};
}
 80013b6:	e177      	b.n	80016a8 <get_accelerometer_data+0x348>
	int16_t gx_i = (int16_t) ((gyro_data[0] << 8) | gyro_data[1]);
 80013b8:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 80013bc:	021b      	lsls	r3, r3, #8
 80013be:	b21a      	sxth	r2, r3
 80013c0:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 80013c4:	b21b      	sxth	r3, r3
 80013c6:	4313      	orrs	r3, r2
 80013c8:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
	int16_t gy_i = (int16_t) ((gyro_data[2] << 8) | gyro_data[3]);
 80013cc:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 80013d0:	021b      	lsls	r3, r3, #8
 80013d2:	b21a      	sxth	r2, r3
 80013d4:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80013d8:	b21b      	sxth	r3, r3
 80013da:	4313      	orrs	r3, r2
 80013dc:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
	int16_t gz_i = (int16_t) ((gyro_data[4] << 8) | gyro_data[5]);
 80013e0:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 80013e4:	021b      	lsls	r3, r3, #8
 80013e6:	b21a      	sxth	r2, r3
 80013e8:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 80013ec:	b21b      	sxth	r3, r3
 80013ee:	4313      	orrs	r3, r2
 80013f0:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
	float gx = gx_i * (GYRO_FS / (1<<15));
 80013f4:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff f893 	bl	8000524 <__aeabi_i2d>
 80013fe:	a32c      	add	r3, pc, #176	; (adr r3, 80014b0 <get_accelerometer_data+0x150>)
 8001400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001404:	f7ff f8f8 	bl	80005f8 <__aeabi_dmul>
 8001408:	4602      	mov	r2, r0
 800140a:	460b      	mov	r3, r1
 800140c:	4610      	mov	r0, r2
 800140e:	4619      	mov	r1, r3
 8001410:	f7ff fbca 	bl	8000ba8 <__aeabi_d2f>
 8001414:	4603      	mov	r3, r0
 8001416:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	float gy = gy_i * (GYRO_FS / (1<<15));
 800141a:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	; 0xb4
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff f880 	bl	8000524 <__aeabi_i2d>
 8001424:	a322      	add	r3, pc, #136	; (adr r3, 80014b0 <get_accelerometer_data+0x150>)
 8001426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800142a:	f7ff f8e5 	bl	80005f8 <__aeabi_dmul>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	4610      	mov	r0, r2
 8001434:	4619      	mov	r1, r3
 8001436:	f7ff fbb7 	bl	8000ba8 <__aeabi_d2f>
 800143a:	4603      	mov	r3, r0
 800143c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	float gz = gz_i * (GYRO_FS / (1<<15));
 8001440:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff f86d 	bl	8000524 <__aeabi_i2d>
 800144a:	a319      	add	r3, pc, #100	; (adr r3, 80014b0 <get_accelerometer_data+0x150>)
 800144c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001450:	f7ff f8d2 	bl	80005f8 <__aeabi_dmul>
 8001454:	4602      	mov	r2, r0
 8001456:	460b      	mov	r3, r1
 8001458:	4610      	mov	r0, r2
 800145a:	4619      	mov	r1, r3
 800145c:	f7ff fba4 	bl	8000ba8 <__aeabi_d2f>
 8001460:	4603      	mov	r3, r0
 8001462:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	uint8_t acc_data[6] = {0x69, 0x69, 0x69, 0x69, 0x69, 0x69};
 8001466:	4a14      	ldr	r2, [pc, #80]	; (80014b8 <get_accelerometer_data+0x158>)
 8001468:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800146c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001470:	6018      	str	r0, [r3, #0]
 8001472:	3304      	adds	r3, #4
 8001474:	8019      	strh	r1, [r3, #0]
	if (HAL_I2C_Mem_Read(&hi2c2, acc_addr << 1, 0x3b, 1, acc_data, 6, I2C_TIMEOUT) == HAL_ERROR) {
 8001476:	88fb      	ldrh	r3, [r7, #6]
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	b299      	uxth	r1, r3
 800147c:	2314      	movs	r3, #20
 800147e:	9302      	str	r3, [sp, #8]
 8001480:	2306      	movs	r3, #6
 8001482:	9301      	str	r3, [sp, #4]
 8001484:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001488:	9300      	str	r3, [sp, #0]
 800148a:	2301      	movs	r3, #1
 800148c:	223b      	movs	r2, #59	; 0x3b
 800148e:	480b      	ldr	r0, [pc, #44]	; (80014bc <get_accelerometer_data+0x15c>)
 8001490:	f003 fdc0 	bl	8005014 <HAL_I2C_Mem_Read>
 8001494:	4603      	mov	r3, r0
 8001496:	2b01      	cmp	r3, #1
 8001498:	d112      	bne.n	80014c0 <get_accelerometer_data+0x160>
		return (AccData) { .success = false };
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	461a      	mov	r2, r3
 800149e:	2300      	movs	r3, #0
 80014a0:	6013      	str	r3, [r2, #0]
 80014a2:	6053      	str	r3, [r2, #4]
 80014a4:	6093      	str	r3, [r2, #8]
 80014a6:	60d3      	str	r3, [r2, #12]
 80014a8:	6113      	str	r3, [r2, #16]
 80014aa:	6153      	str	r3, [r2, #20]
 80014ac:	6193      	str	r3, [r2, #24]
}
 80014ae:	e0fb      	b.n	80016a8 <get_accelerometer_data+0x348>
 80014b0:	336872b0 	.word	0x336872b0
 80014b4:	3f2173e9 	.word	0x3f2173e9
 80014b8:	08010b30 	.word	0x08010b30
 80014bc:	200003a0 	.word	0x200003a0
	int16_t ax_i = (int16_t) ((acc_data[0] << 8) | acc_data[1]);
 80014c0:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80014c4:	021b      	lsls	r3, r3, #8
 80014c6:	b21a      	sxth	r2, r3
 80014c8:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 80014cc:	b21b      	sxth	r3, r3
 80014ce:	4313      	orrs	r3, r2
 80014d0:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
	int16_t ay_i = (int16_t) ((acc_data[2] << 8) | acc_data[3]);
 80014d4:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 80014d8:	021b      	lsls	r3, r3, #8
 80014da:	b21a      	sxth	r2, r3
 80014dc:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80014e0:	b21b      	sxth	r3, r3
 80014e2:	4313      	orrs	r3, r2
 80014e4:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
	int16_t az_i = (int16_t) ((acc_data[4] << 8) | acc_data[5]);
 80014e8:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80014ec:	021b      	lsls	r3, r3, #8
 80014ee:	b21a      	sxth	r2, r3
 80014f0:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80014f4:	b21b      	sxth	r3, r3
 80014f6:	4313      	orrs	r3, r2
 80014f8:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
	float ax = ax_i * (ACC_FS / (1<<15));
 80014fc:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	; 0xa2
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff f80f 	bl	8000524 <__aeabi_i2d>
 8001506:	a376      	add	r3, pc, #472	; (adr r3, 80016e0 <get_accelerometer_data+0x380>)
 8001508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150c:	f7ff f874 	bl	80005f8 <__aeabi_dmul>
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	4610      	mov	r0, r2
 8001516:	4619      	mov	r1, r3
 8001518:	f7ff fb46 	bl	8000ba8 <__aeabi_d2f>
 800151c:	4603      	mov	r3, r0
 800151e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	float ay = ay_i * (ACC_FS / (1<<15));
 8001522:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	; 0xa0
 8001526:	4618      	mov	r0, r3
 8001528:	f7fe fffc 	bl	8000524 <__aeabi_i2d>
 800152c:	a36c      	add	r3, pc, #432	; (adr r3, 80016e0 <get_accelerometer_data+0x380>)
 800152e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001532:	f7ff f861 	bl	80005f8 <__aeabi_dmul>
 8001536:	4602      	mov	r2, r0
 8001538:	460b      	mov	r3, r1
 800153a:	4610      	mov	r0, r2
 800153c:	4619      	mov	r1, r3
 800153e:	f7ff fb33 	bl	8000ba8 <__aeabi_d2f>
 8001542:	4603      	mov	r3, r0
 8001544:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	float az = az_i * (ACC_FS / (1<<15));
 8001548:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	; 0x9e
 800154c:	4618      	mov	r0, r3
 800154e:	f7fe ffe9 	bl	8000524 <__aeabi_i2d>
 8001552:	a363      	add	r3, pc, #396	; (adr r3, 80016e0 <get_accelerometer_data+0x380>)
 8001554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001558:	f7ff f84e 	bl	80005f8 <__aeabi_dmul>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	4610      	mov	r0, r2
 8001562:	4619      	mov	r1, r3
 8001564:	f7ff fb20 	bl	8000ba8 <__aeabi_d2f>
 8001568:	4603      	mov	r3, r0
 800156a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float az_mid = (13.45 + -6.7) / 2;
 800156e:	4b58      	ldr	r3, [pc, #352]	; (80016d0 <get_accelerometer_data+0x370>)
 8001570:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float az_range = (13.45 - -6.7) / 2;
 8001574:	4b57      	ldr	r3, [pc, #348]	; (80016d4 <get_accelerometer_data+0x374>)
 8001576:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float ay_mid = (9.6 + -10.1) / 2;
 800157a:	4b57      	ldr	r3, [pc, #348]	; (80016d8 <get_accelerometer_data+0x378>)
 800157c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    float ay_range = (9.6 - -10.1) / 2;
 8001580:	4b56      	ldr	r3, [pc, #344]	; (80016dc <get_accelerometer_data+0x37c>)
 8001582:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float az_adj = (az - az_mid) / az_range * 9.82;
 8001586:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800158a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800158e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001592:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001596:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800159a:	ee16 0a90 	vmov	r0, s13
 800159e:	f7fe ffd3 	bl	8000548 <__aeabi_f2d>
 80015a2:	a343      	add	r3, pc, #268	; (adr r3, 80016b0 <get_accelerometer_data+0x350>)
 80015a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a8:	f7ff f826 	bl	80005f8 <__aeabi_dmul>
 80015ac:	4602      	mov	r2, r0
 80015ae:	460b      	mov	r3, r1
 80015b0:	4610      	mov	r0, r2
 80015b2:	4619      	mov	r1, r3
 80015b4:	f7ff faf8 	bl	8000ba8 <__aeabi_d2f>
 80015b8:	4603      	mov	r3, r0
 80015ba:	67fb      	str	r3, [r7, #124]	; 0x7c
    float ay_adj = (ay - ay_mid) / ay_range * 9.82;
 80015bc:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80015c0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80015c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015c8:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80015cc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80015d0:	ee16 0a90 	vmov	r0, s13
 80015d4:	f7fe ffb8 	bl	8000548 <__aeabi_f2d>
 80015d8:	a335      	add	r3, pc, #212	; (adr r3, 80016b0 <get_accelerometer_data+0x350>)
 80015da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015de:	f7ff f80b 	bl	80005f8 <__aeabi_dmul>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	4610      	mov	r0, r2
 80015e8:	4619      	mov	r1, r3
 80015ea:	f7ff fadd 	bl	8000ba8 <__aeabi_d2f>
 80015ee:	4603      	mov	r3, r0
 80015f0:	67bb      	str	r3, [r7, #120]	; 0x78
    gx += 0.034;
 80015f2:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80015f6:	f7fe ffa7 	bl	8000548 <__aeabi_f2d>
 80015fa:	a32f      	add	r3, pc, #188	; (adr r3, 80016b8 <get_accelerometer_data+0x358>)
 80015fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001600:	f7fe fe44 	bl	800028c <__adddf3>
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	4610      	mov	r0, r2
 800160a:	4619      	mov	r1, r3
 800160c:	f7ff facc 	bl	8000ba8 <__aeabi_d2f>
 8001610:	4603      	mov	r3, r0
 8001612:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    gy -= 0.023;
 8001616:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800161a:	f7fe ff95 	bl	8000548 <__aeabi_f2d>
 800161e:	a328      	add	r3, pc, #160	; (adr r3, 80016c0 <get_accelerometer_data+0x360>)
 8001620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001624:	f7fe fe30 	bl	8000288 <__aeabi_dsub>
 8001628:	4602      	mov	r2, r0
 800162a:	460b      	mov	r3, r1
 800162c:	4610      	mov	r0, r2
 800162e:	4619      	mov	r1, r3
 8001630:	f7ff faba 	bl	8000ba8 <__aeabi_d2f>
 8001634:	4603      	mov	r3, r0
 8001636:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    gz -= 0.002;
 800163a:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800163e:	f7fe ff83 	bl	8000548 <__aeabi_f2d>
 8001642:	a321      	add	r3, pc, #132	; (adr r3, 80016c8 <get_accelerometer_data+0x368>)
 8001644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001648:	f7fe fe1e 	bl	8000288 <__aeabi_dsub>
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	4610      	mov	r0, r2
 8001652:	4619      	mov	r1, r3
 8001654:	f7ff faa8 	bl	8000ba8 <__aeabi_d2f>
 8001658:	4603      	mov	r3, r0
 800165a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	return (AccData) {
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	461a      	mov	r2, r3
 8001662:	2300      	movs	r3, #0
 8001664:	6013      	str	r3, [r2, #0]
 8001666:	6053      	str	r3, [r2, #4]
 8001668:	6093      	str	r3, [r2, #8]
 800166a:	60d3      	str	r3, [r2, #12]
 800166c:	6113      	str	r3, [r2, #16]
 800166e:	6153      	str	r3, [r2, #20]
 8001670:	6193      	str	r3, [r2, #24]
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	2201      	movs	r2, #1
 8001676:	701a      	strb	r2, [r3, #0]
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800167e:	605a      	str	r2, [r3, #4]
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800168e:	60da      	str	r2, [r3, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001696:	611a      	str	r2, [r3, #16]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800169e:	615a      	str	r2, [r3, #20]
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80016a6:	619a      	str	r2, [r3, #24]
}
 80016a8:	68f8      	ldr	r0, [r7, #12]
 80016aa:	37b8      	adds	r7, #184	; 0xb8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	0a3d70a4 	.word	0x0a3d70a4
 80016b4:	4023a3d7 	.word	0x4023a3d7
 80016b8:	b020c49c 	.word	0xb020c49c
 80016bc:	3fa16872 	.word	0x3fa16872
 80016c0:	df3b645a 	.word	0xdf3b645a
 80016c4:	3f978d4f 	.word	0x3f978d4f
 80016c8:	d2f1a9fc 	.word	0xd2f1a9fc
 80016cc:	3f60624d 	.word	0x3f60624d
 80016d0:	40580000 	.word	0x40580000
 80016d4:	41213333 	.word	0x41213333
 80016d8:	be800000 	.word	0xbe800000
 80016dc:	411d999a 	.word	0x411d999a
 80016e0:	0a3d70a4 	.word	0x0a3d70a4
 80016e4:	3f43a3d7 	.word	0x3f43a3d7

080016e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016ec:	f2ad 4d04 	subw	sp, sp, #1028	; 0x404
 80016f0:	af18      	add	r7, sp, #96	; 0x60
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016f2:	f002 fe17 	bl	8004324 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016f6:	f000 fcd5 	bl	80020a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016fa:	f000 fe5b 	bl	80023b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80016fe:	f000 fe05 	bl	800230c <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8001702:	f000 fd39 	bl	8002178 <MX_I2C2_Init>
  MX_USB_DEVICE_Init();
 8001706:	f00a fc4f 	bl	800bfa8 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 800170a:	f000 fd63 	bl	80021d4 <MX_TIM1_Init>
  MX_TIM2_Init();
 800170e:	f000 fdb1 	bl	8002274 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8001712:	f000 fe25 	bl	8002360 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, SET);
 8001716:	2201      	movs	r2, #1
 8001718:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800171c:	4882      	ldr	r0, [pc, #520]	; (8001928 <main+0x240>)
 800171e:	f003 fa21 	bl	8004b64 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001722:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001726:	f002 fe6f 	bl	8004408 <HAL_Delay>
    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, SET);
 800172a:	2201      	movs	r2, #1
 800172c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001730:	487d      	ldr	r0, [pc, #500]	; (8001928 <main+0x240>)
 8001732:	f003 fa17 	bl	8004b64 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001736:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800173a:	f002 fe65 	bl	8004408 <HAL_Delay>
    HAL_GPIO_WritePin(LDERROR_GPIO_Port, LDERROR_Pin, SET);
 800173e:	2201      	movs	r2, #1
 8001740:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001744:	4878      	ldr	r0, [pc, #480]	; (8001928 <main+0x240>)
 8001746:	f003 fa0d 	bl	8004b64 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800174a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800174e:	f002 fe5b 	bl	8004408 <HAL_Delay>
  	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, RESET);
 8001752:	2200      	movs	r2, #0
 8001754:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001758:	4873      	ldr	r0, [pc, #460]	; (8001928 <main+0x240>)
 800175a:	f003 fa03 	bl	8004b64 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800175e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001762:	f002 fe51 	bl	8004408 <HAL_Delay>
    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, RESET);
 8001766:	2200      	movs	r2, #0
 8001768:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800176c:	486e      	ldr	r0, [pc, #440]	; (8001928 <main+0x240>)
 800176e:	f003 f9f9 	bl	8004b64 <HAL_GPIO_WritePin>
  	HAL_Delay(500);
 8001772:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001776:	f002 fe47 	bl	8004408 <HAL_Delay>
    HAL_GPIO_WritePin(LDERROR_GPIO_Port, LDERROR_Pin, RESET);
 800177a:	2200      	movs	r2, #0
 800177c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001780:	4869      	ldr	r0, [pc, #420]	; (8001928 <main+0x240>)
 8001782:	f003 f9ef 	bl	8004b64 <HAL_GPIO_WritePin>

  	char *msg = "\r\nhiiii we are started :3\r\n\r\n";
 8001786:	4b69      	ldr	r3, [pc, #420]	; (800192c <main+0x244>)
 8001788:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
	CDC_Transmit_FS((uint8_t *) msg, strlen(msg));
 800178c:	f8d7 0398 	ldr.w	r0, [r7, #920]	; 0x398
 8001790:	f7fe fd1e 	bl	80001d0 <strlen>
 8001794:	4603      	mov	r3, r0
 8001796:	b29b      	uxth	r3, r3
 8001798:	4619      	mov	r1, r3
 800179a:	f8d7 0398 	ldr.w	r0, [r7, #920]	; 0x398
 800179e:	f00a fcc1 	bl	800c124 <CDC_Transmit_FS>

	queue_init(&MAIN_QUEUE);
 80017a2:	4863      	ldr	r0, [pc, #396]	; (8001930 <main+0x248>)
 80017a4:	f000 fe77 	bl	8002496 <queue_init>

	HAL_TIM_Base_Start_IT(&TIM_REALTIME);
 80017a8:	4862      	ldr	r0, [pc, #392]	; (8001934 <main+0x24c>)
 80017aa:	f006 f81d 	bl	80077e8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&TIM_SCHEDULER);
 80017ae:	4862      	ldr	r0, [pc, #392]	; (8001938 <main+0x250>)
 80017b0:	f006 f81a 	bl	80077e8 <HAL_TIM_Base_Start_IT>

	vesc_init(&vesc_pitch, VESC_PITCH_ID, &UART_VESC_PITCH, UART_IRQ_VESC_PITCH, &MAIN_QUEUE);
 80017b4:	4b5e      	ldr	r3, [pc, #376]	; (8001930 <main+0x248>)
 80017b6:	9300      	str	r3, [sp, #0]
 80017b8:	2326      	movs	r3, #38	; 0x26
 80017ba:	4a60      	ldr	r2, [pc, #384]	; (800193c <main+0x254>)
 80017bc:	2101      	movs	r1, #1
 80017be:	4860      	ldr	r0, [pc, #384]	; (8001940 <main+0x258>)
 80017c0:	f001 fa70 	bl	8002ca4 <vesc_init>
	vesc_init(&vesc_roll, VESC_ROLL_ID, &UART_VESC_ROLL, UART_IRQ_VESC_ROLL, &MAIN_QUEUE);
 80017c4:	4b5a      	ldr	r3, [pc, #360]	; (8001930 <main+0x248>)
 80017c6:	9300      	str	r3, [sp, #0]
 80017c8:	2327      	movs	r3, #39	; 0x27
 80017ca:	4a5e      	ldr	r2, [pc, #376]	; (8001944 <main+0x25c>)
 80017cc:	2102      	movs	r1, #2
 80017ce:	485e      	ldr	r0, [pc, #376]	; (8001948 <main+0x260>)
 80017d0:	f001 fa68 	bl	8002ca4 <vesc_init>

	setup_mpu(&I2C_MPU, MPU_ADDR);
 80017d4:	4b5d      	ldr	r3, [pc, #372]	; (800194c <main+0x264>)
 80017d6:	881b      	ldrh	r3, [r3, #0]
 80017d8:	4619      	mov	r1, r3
 80017da:	485d      	ldr	r0, [pc, #372]	; (8001950 <main+0x268>)
 80017dc:	f7ff fd70 	bl	80012c0 <setup_mpu>
		unsigned int msgs_since_last;

		int msg_idx, n_time_steps_since_last;
	} dbg_values;

	dbg_values.msgs_since_last = 0;
 80017e0:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 80017e4:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80017e8:	2200      	movs	r2, #0
 80017ea:	619a      	str	r2, [r3, #24]
	dbg_values.msg_idx = 0;
 80017ec:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 80017f0:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80017f4:	2200      	movs	r2, #0
 80017f6:	61da      	str	r2, [r3, #28]
	dbg_values.n_time_steps_since_last = 0;
 80017f8:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 80017fc:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8001800:	2200      	movs	r2, #0
 8001802:	621a      	str	r2, [r3, #32]


	// For Kalman + control system

	CTRL.covs = (Covariances) {.pitch.m11 = 10.0, .pitch.m12 = 0.0, .pitch.m21 = 10.0, .pitch.m22 = 0.0,
 8001804:	4b53      	ldr	r3, [pc, #332]	; (8001954 <main+0x26c>)
 8001806:	4a54      	ldr	r2, [pc, #336]	; (8001958 <main+0x270>)
 8001808:	f103 0474 	add.w	r4, r3, #116	; 0x74
 800180c:	4615      	mov	r5, r2
 800180e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001810:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001812:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001814:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001816:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800181a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	                      .roll.m11 = 10.0, .roll.m12 = 0.0, .roll.m21 = 10.0, .roll.m22 = 0.0,
	                      .wheel.m11 = 10.0, .wheel.m12 = 0.0, .wheel.m21 = 0.0, .wheel.m22 = 10.0};


	//Measurement error
	CTRL.r_vals = (R_error) {.pitch = 0.3, .roll = 0.3, .wheel = 20};
 800181e:	4b4d      	ldr	r3, [pc, #308]	; (8001954 <main+0x26c>)
 8001820:	4a4e      	ldr	r2, [pc, #312]	; (800195c <main+0x274>)
 8001822:	33a4      	adds	r3, #164	; 0xa4
 8001824:	ca07      	ldmia	r2, {r0, r1, r2}
 8001826:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	CTRL.st = (States) { .x1 = 0, .x2 = 0, .x3 = 0, .x4 = 0 };
 800182a:	4b4a      	ldr	r3, [pc, #296]	; (8001954 <main+0x26c>)
 800182c:	333c      	adds	r3, #60	; 0x3c
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	605a      	str	r2, [r3, #4]
 8001834:	609a      	str	r2, [r3, #8]
 8001836:	60da      	str	r2, [r3, #12]
 8001838:	611a      	str	r2, [r3, #16]
 800183a:	615a      	str	r2, [r3, #20]


	queue_put(&MAIN_QUEUE, (Message) { .ty = MSG_SEND_DEBUG });
 800183c:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8001840:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8001844:	4618      	mov	r0, r3
 8001846:	2320      	movs	r3, #32
 8001848:	461a      	mov	r2, r3
 800184a:	2100      	movs	r1, #0
 800184c:	f00b f90a 	bl	800ca64 <memset>
 8001850:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8001854:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8001858:	2201      	movs	r2, #1
 800185a:	701a      	strb	r2, [r3, #0]
 800185c:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8001860:	f5a3 7635 	sub.w	r6, r3, #724	; 0x2d4
 8001864:	466d      	mov	r5, sp
 8001866:	f106 040c 	add.w	r4, r6, #12
 800186a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800186c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800186e:	6823      	ldr	r3, [r4, #0]
 8001870:	602b      	str	r3, [r5, #0]
 8001872:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001876:	482e      	ldr	r0, [pc, #184]	; (8001930 <main+0x248>)
 8001878:	f000 fe55 	bl	8002526 <queue_put>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		if (!queue_has(&MAIN_QUEUE)) {
 800187c:	482c      	ldr	r0, [pc, #176]	; (8001930 <main+0x248>)
 800187e:	f000 fe9f 	bl	80025c0 <queue_has>
 8001882:	4603      	mov	r3, r0
 8001884:	f083 0301 	eor.w	r3, r3, #1
 8001888:	b2db      	uxtb	r3, r3
 800188a:	2b00      	cmp	r3, #0
 800188c:	f040 83f2 	bne.w	8002074 <main+0x98c>
			continue;
		}

		Message msg = queue_pop(&MAIN_QUEUE);
 8001890:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8001894:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 8001898:	4925      	ldr	r1, [pc, #148]	; (8001930 <main+0x248>)
 800189a:	4618      	mov	r0, r3
 800189c:	f000 fea1 	bl	80025e2 <queue_pop>
		dbg_values.msgs_since_last++;
 80018a0:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 80018a4:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80018a8:	699b      	ldr	r3, [r3, #24]
 80018aa:	1c5a      	adds	r2, r3, #1
 80018ac:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 80018b0:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80018b4:	619a      	str	r2, [r3, #24]

		switch (msg.ty) {
 80018b6:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 80018ba:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	2b08      	cmp	r3, #8
 80018c2:	d8db      	bhi.n	800187c <main+0x194>
 80018c4:	a201      	add	r2, pc, #4	; (adr r2, 80018cc <main+0x1e4>)
 80018c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ca:	bf00      	nop
 80018cc:	0800187d 	.word	0x0800187d
 80018d0:	080018f1 	.word	0x080018f1
 80018d4:	08001ad9 	.word	0x08001ad9
 80018d8:	08001fcb 	.word	0x08001fcb
 80018dc:	08001f15 	.word	0x08001f15
 80018e0:	08001f31 	.word	0x08001f31
 80018e4:	08001f23 	.word	0x08001f23
 80018e8:	08001fd9 	.word	0x08001fd9
 80018ec:	08002017 	.word	0x08002017
				write_hex(&ctrl_hex[2*i], ctrl_data[i]);
			}
			ctrl_hex[2 * sizeof(CTRL)] = 0;
			*/

			bool dead_mans = dead_mans_switch_activated();
 80018f0:	f7ff fc8c 	bl	800120c <dead_mans_switch_activated>
 80018f4:	4603      	mov	r3, r0
 80018f6:	f887 335f 	strb.w	r3, [r7, #863]	; 0x35f

			int dbglen = sprintf(
 80018fa:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 80018fe:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8001902:	69db      	ldr	r3, [r3, #28]
 8001904:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001906:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 800190a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800190e:	6a1b      	ldr	r3, [r3, #32]
 8001910:	63bb      	str	r3, [r7, #56]	; 0x38
 8001912:	4807      	ldr	r0, [pc, #28]	; (8001930 <main+0x248>)
 8001914:	f000 fddf 	bl	80024d6 <queue_nelem>
 8001918:	6378      	str	r0, [r7, #52]	; 0x34
 800191a:	f897 335f 	ldrb.w	r3, [r7, #863]	; 0x35f
 800191e:	2b00      	cmp	r3, #0
 8001920:	d020      	beq.n	8001964 <main+0x27c>
 8001922:	4e0f      	ldr	r6, [pc, #60]	; (8001960 <main+0x278>)
 8001924:	e01f      	b.n	8001966 <main+0x27e>
 8001926:	bf00      	nop
 8001928:	40020800 	.word	0x40020800
 800192c:	08010b38 	.word	0x08010b38
 8001930:	2000050c 	.word	0x2000050c
 8001934:	200003f4 	.word	0x200003f4
 8001938:	2000043c 	.word	0x2000043c
 800193c:	20000484 	.word	0x20000484
 8001940:	20008518 	.word	0x20008518
 8001944:	200004c8 	.word	0x200004c8
 8001948:	20008da0 	.word	0x20008da0
 800194c:	20000000 	.word	0x20000000
 8001950:	200003a0 	.word	0x200003a0
 8001954:	20009634 	.word	0x20009634
 8001958:	08010c80 	.word	0x08010c80
 800195c:	08010cb0 	.word	0x08010cb0
 8001960:	08010b58 	.word	0x08010b58
 8001964:	4e55      	ldr	r6, [pc, #340]	; (8001abc <main+0x3d4>)
				//"theta_pitch = %7.5fmrad, theta_d_pitch = %7.5fmrad/s, "
				// "theta_roll = %7.5fmrad, theta_d_roll = %7.5fmrad/s "
				"theta_roll(comp) = %7.4f mrad "
				//"I (filtered) = %6ld mA, I (out) = %6ld mA"
				"\r\n",
				dbg_values.msg_idx, dbg_values.n_time_steps_since_last, queue_nelem(&MAIN_QUEUE), dead_mans ? "on" : "off", (int32_t) (us_since_startup() / 1000),
 8001966:	f7ff fbbf 	bl	80010e8 <us_since_startup>
 800196a:	4603      	mov	r3, r0
 800196c:	4a54      	ldr	r2, [pc, #336]	; (8001ac0 <main+0x3d8>)
 800196e:	fba2 2303 	umull	r2, r3, r2, r3
 8001972:	099b      	lsrs	r3, r3, #6
			int dbglen = sprintf(
 8001974:	633b      	str	r3, [r7, #48]	; 0x30
				CTRL.last_acc.ax, CTRL.last_acc.ay, CTRL.last_acc.az,
 8001976:	4b53      	ldr	r3, [pc, #332]	; (8001ac4 <main+0x3dc>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			int dbglen = sprintf(
 800197a:	4618      	mov	r0, r3
 800197c:	f7fe fde4 	bl	8000548 <__aeabi_f2d>
 8001980:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
				CTRL.last_acc.ax, CTRL.last_acc.ay, CTRL.last_acc.az,
 8001984:	4b4f      	ldr	r3, [pc, #316]	; (8001ac4 <main+0x3dc>)
 8001986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
			int dbglen = sprintf(
 8001988:	4618      	mov	r0, r3
 800198a:	f7fe fddd 	bl	8000548 <__aeabi_f2d>
 800198e:	e9c7 0108 	strd	r0, r1, [r7, #32]
				CTRL.last_acc.ax, CTRL.last_acc.ay, CTRL.last_acc.az,
 8001992:	4b4c      	ldr	r3, [pc, #304]	; (8001ac4 <main+0x3dc>)
 8001994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
			int dbglen = sprintf(
 8001996:	4618      	mov	r0, r3
 8001998:	f7fe fdd6 	bl	8000548 <__aeabi_f2d>
 800199c:	e9c7 0106 	strd	r0, r1, [r7, #24]
				CTRL.last_acc.gx, CTRL.last_acc.gy, CTRL.last_acc.gz,
 80019a0:	4b48      	ldr	r3, [pc, #288]	; (8001ac4 <main+0x3dc>)
 80019a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
			int dbglen = sprintf(
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7fe fdcf 	bl	8000548 <__aeabi_f2d>
 80019aa:	e9c7 0104 	strd	r0, r1, [r7, #16]
				CTRL.last_acc.gx, CTRL.last_acc.gy, CTRL.last_acc.gz,
 80019ae:	4b45      	ldr	r3, [pc, #276]	; (8001ac4 <main+0x3dc>)
 80019b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
			int dbglen = sprintf(
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7fe fdc8 	bl	8000548 <__aeabi_f2d>
 80019b8:	e9c7 0102 	strd	r0, r1, [r7, #8]
				CTRL.last_acc.gx, CTRL.last_acc.gy, CTRL.last_acc.gz,
 80019bc:	4b41      	ldr	r3, [pc, #260]	; (8001ac4 <main+0x3dc>)
 80019be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
			int dbglen = sprintf(
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7fe fdc1 	bl	8000548 <__aeabi_f2d>
 80019c6:	4682      	mov	sl, r0
 80019c8:	468b      	mov	fp, r1
				(int) CTRL.last_esc_pitch.erpm, (int) CTRL.last_esc_roll.erpm,
 80019ca:	4b3e      	ldr	r3, [pc, #248]	; (8001ac4 <main+0x3dc>)
 80019cc:	edd3 7a02 	vldr	s15, [r3, #8]
			int dbglen = sprintf(
 80019d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019d4:	edc7 7a01 	vstr	s15, [r7, #4]
				(int) CTRL.last_esc_pitch.erpm, (int) CTRL.last_esc_roll.erpm,
 80019d8:	4b3a      	ldr	r3, [pc, #232]	; (8001ac4 <main+0x3dc>)
 80019da:	edd3 7a06 	vldr	s15, [r3, #24]
			int dbglen = sprintf(
 80019de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019e2:	edc7 7a00 	vstr	s15, [r7]
				dbg_values.current_wanted_pitch, dbg_values.current_wanted_roll,
 80019e6:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 80019ea:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80019ee:	685b      	ldr	r3, [r3, #4]
			int dbglen = sprintf(
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7fe fda9 	bl	8000548 <__aeabi_f2d>
 80019f6:	4680      	mov	r8, r0
 80019f8:	4689      	mov	r9, r1
				dbg_values.current_wanted_pitch, dbg_values.current_wanted_roll,
 80019fa:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 80019fe:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8001a02:	68db      	ldr	r3, [r3, #12]
			int dbglen = sprintf(
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7fe fd9f 	bl	8000548 <__aeabi_f2d>
 8001a0a:	4604      	mov	r4, r0
 8001a0c:	460d      	mov	r5, r1
				// 1000 * CTRL.st.x5, 1000 * CTRL.st.x6
				1000 * roll_angle
 8001a0e:	4b2e      	ldr	r3, [pc, #184]	; (8001ac8 <main+0x3e0>)
 8001a10:	edd3 7a00 	vldr	s15, [r3]
 8001a14:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001acc <main+0x3e4>
 8001a18:	ee67 7a87 	vmul.f32	s15, s15, s14
			int dbglen = sprintf(
 8001a1c:	ee17 0a90 	vmov	r0, s15
 8001a20:	f7fe fd92 	bl	8000548 <__aeabi_f2d>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	f507 70b2 	add.w	r0, r7, #356	; 0x164
 8001a2c:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8001a30:	e9cd 4514 	strd	r4, r5, [sp, #80]	; 0x50
 8001a34:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8001a38:	683a      	ldr	r2, [r7, #0]
 8001a3a:	9211      	str	r2, [sp, #68]	; 0x44
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	9210      	str	r2, [sp, #64]	; 0x40
 8001a40:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
 8001a44:	ed97 7b02 	vldr	d7, [r7, #8]
 8001a48:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8001a4c:	ed97 7b04 	vldr	d7, [r7, #16]
 8001a50:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8001a54:	ed97 7b06 	vldr	d7, [r7, #24]
 8001a58:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001a5c:	ed97 7b08 	vldr	d7, [r7, #32]
 8001a60:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001a64:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001a68:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a6e:	9302      	str	r3, [sp, #8]
 8001a70:	9601      	str	r6, [sp, #4]
 8001a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a74:	9300      	str	r3, [sp, #0]
 8001a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a7a:	4915      	ldr	r1, [pc, #84]	; (8001ad0 <main+0x3e8>)
 8001a7c:	f00b fc64 	bl	800d348 <siprintf>
 8001a80:	f8c7 0358 	str.w	r0, [r7, #856]	; 0x358
				//(int32_t) (1000 * vcr.input_filtered), (int32_t) (1000 * dbg_values.current_o)
			);
			dbg_values.msg_idx++;
 8001a84:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8001a88:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8001a8c:	69db      	ldr	r3, [r3, #28]
 8001a8e:	1c5a      	adds	r2, r3, #1
 8001a90:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8001a94:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8001a98:	61da      	str	r2, [r3, #28]
			dbg_values.n_time_steps_since_last = 0;
 8001a9a:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8001a9e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	621a      	str	r2, [r3, #32]


			CDC_Transmit_FS((uint8_t *) dbgbuf, dbglen);
 8001aa6:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8001ab0:	4611      	mov	r1, r2
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f00a fb36 	bl	800c124 <CDC_Transmit_FS>
			// Use below if you are debug printing other things
			// HAL_UART_Transmit(&huart3, (uint8_t *) dbgbuf, dbglen, 10000);

			break;
 8001ab8:	e2df      	b.n	800207a <main+0x992>
 8001aba:	bf00      	nop
 8001abc:	08010b5c 	.word	0x08010b5c
 8001ac0:	10624dd3 	.word	0x10624dd3
 8001ac4:	20009634 	.word	0x20009634
 8001ac8:	200096e4 	.word	0x200096e4
 8001acc:	447a0000 	.word	0x447a0000
 8001ad0:	08010b60 	.word	0x08010b60
 8001ad4:	49742400 	.word	0x49742400
		}

		case MSG_TIME_STEP: {
			uint32_t dt_us = get_and_reset_dt_us();
 8001ad8:	f7ff fb22 	bl	8001120 <get_and_reset_dt_us>
 8001adc:	f8c7 0390 	str.w	r0, [r7, #912]	; 0x390
			float dt = (float) dt_us / 1000000.0;
 8001ae0:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8001ae4:	ee07 3a90 	vmov	s15, r3
 8001ae8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001aec:	ed5f 6a07 	vldr	s13, [pc, #-28]	; 8001ad4 <main+0x3ec>
 8001af0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001af4:	edc7 7ae3 	vstr	s15, [r7, #908]	; 0x38c
			);

			CDC_Transmit_FS((uint8_t *) dbgbuf, dbglen);
#endif

			dbg_values.dt = dt;
 8001af8:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8001afc:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8001b00:	f8d7 238c 	ldr.w	r2, [r7, #908]	; 0x38c
 8001b04:	601a      	str	r2, [r3, #0]

#if MOTOR_DIRECTION == MOTOR_CW
			float wheel_rpm_pitch = CTRL.last_esc_pitch.erpm / 22.9;
#elif MOTOR_DIRECTION == MOTOR_CCW
			float wheel_rpm_pitch = CTRL.last_esc_pitch.erpm / -22.9;
 8001b06:	4bdc      	ldr	r3, [pc, #880]	; (8001e78 <main+0x790>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7fe fd1c 	bl	8000548 <__aeabi_f2d>
 8001b10:	a3d3      	add	r3, pc, #844	; (adr r3, 8001e60 <main+0x778>)
 8001b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b16:	f7fe fe99 	bl	800084c <__aeabi_ddiv>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	4610      	mov	r0, r2
 8001b20:	4619      	mov	r1, r3
 8001b22:	f7ff f841 	bl	8000ba8 <__aeabi_d2f>
 8001b26:	4603      	mov	r3, r0
 8001b28:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
#else
#error "Invalid motor direction"
#endif

			float wheel_rpm_roll = CTRL.last_esc_pitch.erpm / 29.92;
 8001b2c:	4bd2      	ldr	r3, [pc, #840]	; (8001e78 <main+0x790>)
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7fe fd09 	bl	8000548 <__aeabi_f2d>
 8001b36:	a3cc      	add	r3, pc, #816	; (adr r3, 8001e68 <main+0x780>)
 8001b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3c:	f7fe fe86 	bl	800084c <__aeabi_ddiv>
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	4610      	mov	r0, r2
 8001b46:	4619      	mov	r1, r3
 8001b48:	f7ff f82e 	bl	8000ba8 <__aeabi_d2f>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384

			CTRL.q_t.m11 = Q_T * dt*dt*dt*dt / 4;
 8001b52:	ed9f 7aca 	vldr	s14, [pc, #808]	; 8001e7c <main+0x794>
 8001b56:	edd7 7ae3 	vldr	s15, [r7, #908]	; 0x38c
 8001b5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b5e:	edd7 7ae3 	vldr	s15, [r7, #908]	; 0x38c
 8001b62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b66:	edd7 7ae3 	vldr	s15, [r7, #908]	; 0x38c
 8001b6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b6e:	edd7 7ae3 	vldr	s15, [r7, #908]	; 0x38c
 8001b72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b76:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001b7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b7e:	4bbe      	ldr	r3, [pc, #760]	; (8001e78 <main+0x790>)
 8001b80:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
			CTRL.q_t.m12 = Q_T * dt*dt*dt / 2;
 8001b84:	ed9f 7abd 	vldr	s14, [pc, #756]	; 8001e7c <main+0x794>
 8001b88:	edd7 7ae3 	vldr	s15, [r7, #908]	; 0x38c
 8001b8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b90:	edd7 7ae3 	vldr	s15, [r7, #908]	; 0x38c
 8001b94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b98:	edd7 7ae3 	vldr	s15, [r7, #908]	; 0x38c
 8001b9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ba0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001ba4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ba8:	4bb3      	ldr	r3, [pc, #716]	; (8001e78 <main+0x790>)
 8001baa:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
			CTRL.q_t.m21 = Q_T * dt*dt*dt / 2;
 8001bae:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 8001e7c <main+0x794>
 8001bb2:	edd7 7ae3 	vldr	s15, [r7, #908]	; 0x38c
 8001bb6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bba:	edd7 7ae3 	vldr	s15, [r7, #908]	; 0x38c
 8001bbe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bc2:	edd7 7ae3 	vldr	s15, [r7, #908]	; 0x38c
 8001bc6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bca:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001bce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bd2:	4ba9      	ldr	r3, [pc, #676]	; (8001e78 <main+0x790>)
 8001bd4:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
			CTRL.q_t.m22 = Q_T * dt*dt / 2;
 8001bd8:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 8001e7c <main+0x794>
 8001bdc:	edd7 7ae3 	vldr	s15, [r7, #908]	; 0x38c
 8001be0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001be4:	edd7 7ae3 	vldr	s15, [r7, #908]	; 0x38c
 8001be8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bec:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001bf0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bf4:	4ba0      	ldr	r3, [pc, #640]	; (8001e78 <main+0x790>)
 8001bf6:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70

			CTRL.q_w.m11 = Q_W * dt*dt*dt*dt / 4;
 8001bfa:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 8001e80 <main+0x798>
 8001bfe:	edd7 7ae3 	vldr	s15, [r7, #908]	; 0x38c
 8001c02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c06:	edd7 7ae3 	vldr	s15, [r7, #908]	; 0x38c
 8001c0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c0e:	edd7 7ae3 	vldr	s15, [r7, #908]	; 0x38c
 8001c12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c16:	edd7 7ae3 	vldr	s15, [r7, #908]	; 0x38c
 8001c1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c1e:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001c22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c26:	4b94      	ldr	r3, [pc, #592]	; (8001e78 <main+0x790>)
 8001c28:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
			CTRL.q_w.m12 = Q_W * dt*dt*dt / 2;
 8001c2c:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8001e80 <main+0x798>
 8001c30:	edd7 7ae3 	vldr	s15, [r7, #908]	; 0x38c
 8001c34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c38:	edd7 7ae3 	vldr	s15, [r7, #908]	; 0x38c
 8001c3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c40:	edd7 7ae3 	vldr	s15, [r7, #908]	; 0x38c
 8001c44:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c48:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001c4c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c50:	4b89      	ldr	r3, [pc, #548]	; (8001e78 <main+0x790>)
 8001c52:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			CTRL.q_w.m21 = Q_W * dt*dt*dt / 2;
 8001c56:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8001e80 <main+0x798>
 8001c5a:	edd7 7ae3 	vldr	s15, [r7, #908]	; 0x38c
 8001c5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c62:	edd7 7ae3 	vldr	s15, [r7, #908]	; 0x38c
 8001c66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c6a:	edd7 7ae3 	vldr	s15, [r7, #908]	; 0x38c
 8001c6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c72:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001c76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c7a:	4b7f      	ldr	r3, [pc, #508]	; (8001e78 <main+0x790>)
 8001c7c:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			CTRL.q_w.m22 = Q_W * dt*dt / 2;
 8001c80:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8001e80 <main+0x798>
 8001c84:	edd7 7ae3 	vldr	s15, [r7, #908]	; 0x38c
 8001c88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c8c:	edd7 7ae3 	vldr	s15, [r7, #908]	; 0x38c
 8001c90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c94:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001c98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c9c:	4b76      	ldr	r3, [pc, #472]	; (8001e78 <main+0x790>)
 8001c9e:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60

			float sensor_gyro_pitch = CTRL.last_acc.gy;
 8001ca2:	4b75      	ldr	r3, [pc, #468]	; (8001e78 <main+0x790>)
 8001ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca6:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
			float sensor_gyro_roll = CTRL.last_acc.gx;
 8001caa:	4b73      	ldr	r3, [pc, #460]	; (8001e78 <main+0x790>)
 8001cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cae:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c

			float acc_predicted_angle = atan2(CTRL.last_acc.ay, CTRL.last_acc.az);
 8001cb2:	4b71      	ldr	r3, [pc, #452]	; (8001e78 <main+0x790>)
 8001cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7fe fc46 	bl	8000548 <__aeabi_f2d>
 8001cbc:	4604      	mov	r4, r0
 8001cbe:	460d      	mov	r5, r1
 8001cc0:	4b6d      	ldr	r3, [pc, #436]	; (8001e78 <main+0x790>)
 8001cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7fe fc3f 	bl	8000548 <__aeabi_f2d>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	460b      	mov	r3, r1
 8001cce:	ec43 2b11 	vmov	d1, r2, r3
 8001cd2:	ec45 4b10 	vmov	d0, r4, r5
 8001cd6:	f00d fd95 	bl	800f804 <atan2>
 8001cda:	ec53 2b10 	vmov	r2, r3, d0
 8001cde:	4610      	mov	r0, r2
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	f7fe ff61 	bl	8000ba8 <__aeabi_d2f>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378

			float gain = 1 * dt;
 8001cec:	f8d7 338c 	ldr.w	r3, [r7, #908]	; 0x38c
 8001cf0:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
			roll_angle = (1 - gain) * roll_angle + dt * sensor_gyro_roll + gain * acc_predicted_angle;
 8001cf4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001cf8:	edd7 7add 	vldr	s15, [r7, #884]	; 0x374
 8001cfc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d00:	4b60      	ldr	r3, [pc, #384]	; (8001e84 <main+0x79c>)
 8001d02:	edd3 7a00 	vldr	s15, [r3]
 8001d06:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d0a:	edd7 6ae3 	vldr	s13, [r7, #908]	; 0x38c
 8001d0e:	edd7 7adf 	vldr	s15, [r7, #892]	; 0x37c
 8001d12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d1a:	edd7 6add 	vldr	s13, [r7, #884]	; 0x374
 8001d1e:	edd7 7ade 	vldr	s15, [r7, #888]	; 0x378
 8001d22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d2a:	4b56      	ldr	r3, [pc, #344]	; (8001e84 <main+0x79c>)
 8001d2c:	edc3 7a00 	vstr	s15, [r3]

			kalman_filter_predict(0, dt, &CTRL.st, &CTRL.q_t, &CTRL.q_w, &CTRL.covs);
 8001d30:	4b55      	ldr	r3, [pc, #340]	; (8001e88 <main+0x7a0>)
 8001d32:	4a56      	ldr	r2, [pc, #344]	; (8001e8c <main+0x7a4>)
 8001d34:	4956      	ldr	r1, [pc, #344]	; (8001e90 <main+0x7a8>)
 8001d36:	4857      	ldr	r0, [pc, #348]	; (8001e94 <main+0x7ac>)
 8001d38:	edd7 0ae3 	vldr	s1, [r7, #908]	; 0x38c
 8001d3c:	ed9f 0a56 	vldr	s0, [pc, #344]	; 8001e98 <main+0x7b0>
 8001d40:	f001 fac6 	bl	80032d0 <kalman_filter_predict>
			roll_kalman_filter_predict(0, dt, &CTRL.st, &CTRL.q_t, &CTRL.q_w, &CTRL.covs);
 8001d44:	4b50      	ldr	r3, [pc, #320]	; (8001e88 <main+0x7a0>)
 8001d46:	4a51      	ldr	r2, [pc, #324]	; (8001e8c <main+0x7a4>)
 8001d48:	4951      	ldr	r1, [pc, #324]	; (8001e90 <main+0x7a8>)
 8001d4a:	4852      	ldr	r0, [pc, #328]	; (8001e94 <main+0x7ac>)
 8001d4c:	edd7 0ae3 	vldr	s1, [r7, #908]	; 0x38c
 8001d50:	ed9f 0a51 	vldr	s0, [pc, #324]	; 8001e98 <main+0x7b0>
 8001d54:	f002 f841 	bl	8003dda <roll_kalman_filter_predict>

			float tau_pitch = LookaheadSpeedRegulator(0, CTRL.st.x1, CTRL.st.x2, CTRL.st.x4, dt);
 8001d58:	4b47      	ldr	r3, [pc, #284]	; (8001e78 <main+0x790>)
 8001d5a:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001d5e:	4b46      	ldr	r3, [pc, #280]	; (8001e78 <main+0x790>)
 8001d60:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8001d64:	4b44      	ldr	r3, [pc, #272]	; (8001e78 <main+0x790>)
 8001d66:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 8001d6a:	ed97 2ae3 	vldr	s4, [r7, #908]	; 0x38c
 8001d6e:	eef0 1a66 	vmov.f32	s3, s13
 8001d72:	eeb0 1a47 	vmov.f32	s2, s14
 8001d76:	eef0 0a67 	vmov.f32	s1, s15
 8001d7a:	ed9f 0a47 	vldr	s0, [pc, #284]	; 8001e98 <main+0x7b0>
 8001d7e:	f002 f8f7 	bl	8003f70 <LookaheadSpeedRegulator>
 8001d82:	ed87 0adc 	vstr	s0, [r7, #880]	; 0x370
			float tau_roll = roll_reg_step(&roll_reg, dt, roll_angle, sensor_gyro_roll, wheel_rpm_roll);
 8001d86:	4b3f      	ldr	r3, [pc, #252]	; (8001e84 <main+0x79c>)
 8001d88:	edd3 7a00 	vldr	s15, [r3]
 8001d8c:	edd7 1ae1 	vldr	s3, [r7, #900]	; 0x384
 8001d90:	ed97 1adf 	vldr	s2, [r7, #892]	; 0x37c
 8001d94:	eef0 0a67 	vmov.f32	s1, s15
 8001d98:	ed97 0ae3 	vldr	s0, [r7, #908]	; 0x38c
 8001d9c:	483f      	ldr	r0, [pc, #252]	; (8001e9c <main+0x7b4>)
 8001d9e:	f002 fa37 	bl	8004210 <roll_reg_step>
 8001da2:	ed87 0adb 	vstr	s0, [r7, #876]	; 0x36c

#if MOTOR_DIRECTION == MOTOR_CW
			float current_wanted_pitch = tau_pitch / 0.59; // see notes
			float current_wanted_roll = tau_roll / 0.5; // TODO: guh
#elif MOTOR_DIRECTION == MOTOR_CCW
			float current_wanted_pitch = tau_pitch / -0.59; // see notes
 8001da6:	f8d7 0370 	ldr.w	r0, [r7, #880]	; 0x370
 8001daa:	f7fe fbcd 	bl	8000548 <__aeabi_f2d>
 8001dae:	a330      	add	r3, pc, #192	; (adr r3, 8001e70 <main+0x788>)
 8001db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db4:	f7fe fd4a 	bl	800084c <__aeabi_ddiv>
 8001db8:	4602      	mov	r2, r0
 8001dba:	460b      	mov	r3, r1
 8001dbc:	4610      	mov	r0, r2
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	f7fe fef2 	bl	8000ba8 <__aeabi_d2f>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	f8c7 3368 	str.w	r3, [r7, #872]	; 0x368
			float current_wanted_roll = tau_roll / -0.5; // TODO: guh
 8001dca:	ed97 7adb 	vldr	s14, [r7, #876]	; 0x36c
 8001dce:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 8001dd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dd6:	edc7 7ad9 	vstr	s15, [r7, #868]	; 0x364
#else
#error "Invalid motor direction"
#endif


			dbg_values.current_wanted_pitch = current_wanted_pitch;
 8001dda:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8001dde:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8001de2:	f8d7 2368 	ldr.w	r2, [r7, #872]	; 0x368
 8001de6:	605a      	str	r2, [r3, #4]
			dbg_values.current_wanted_roll = current_wanted_roll;
 8001de8:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8001dec:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8001df0:	f8d7 2364 	ldr.w	r2, [r7, #868]	; 0x364
 8001df4:	60da      	str	r2, [r3, #12]

			kalman_filter_update(sensor_gyro_pitch, wheel_rpm_pitch, dt, &CTRL.st, &CTRL.q_t, &CTRL.q_w, &CTRL.covs, &CTRL.r_vals);
 8001df6:	4b2a      	ldr	r3, [pc, #168]	; (8001ea0 <main+0x7b8>)
 8001df8:	9300      	str	r3, [sp, #0]
 8001dfa:	4b23      	ldr	r3, [pc, #140]	; (8001e88 <main+0x7a0>)
 8001dfc:	4a23      	ldr	r2, [pc, #140]	; (8001e8c <main+0x7a4>)
 8001dfe:	4924      	ldr	r1, [pc, #144]	; (8001e90 <main+0x7a8>)
 8001e00:	4824      	ldr	r0, [pc, #144]	; (8001e94 <main+0x7ac>)
 8001e02:	ed97 1ae3 	vldr	s2, [r7, #908]	; 0x38c
 8001e06:	edd7 0ae2 	vldr	s1, [r7, #904]	; 0x388
 8001e0a:	ed97 0ae0 	vldr	s0, [r7, #896]	; 0x380
 8001e0e:	f001 fb5b 	bl	80034c8 <kalman_filter_update>
			roll_kalman_filter_update(sensor_gyro_roll, dt, &CTRL.st, &CTRL.q_t, &CTRL.q_w, &CTRL.covs, &CTRL.r_vals);
 8001e12:	4b23      	ldr	r3, [pc, #140]	; (8001ea0 <main+0x7b8>)
 8001e14:	9300      	str	r3, [sp, #0]
 8001e16:	4b1c      	ldr	r3, [pc, #112]	; (8001e88 <main+0x7a0>)
 8001e18:	4a1c      	ldr	r2, [pc, #112]	; (8001e8c <main+0x7a4>)
 8001e1a:	491d      	ldr	r1, [pc, #116]	; (8001e90 <main+0x7a8>)
 8001e1c:	481d      	ldr	r0, [pc, #116]	; (8001e94 <main+0x7ac>)
 8001e1e:	edd7 0ae3 	vldr	s1, [r7, #908]	; 0x38c
 8001e22:	ed97 0adf 	vldr	s0, [r7, #892]	; 0x37c
 8001e26:	f001 ff0f 	bl	8003c48 <roll_kalman_filter_update>

			float current_out_pitch, current_out_roll;
			if (dead_mans_switch_activated()) {
 8001e2a:	f7ff f9ef 	bl	800120c <dead_mans_switch_activated>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d04a      	beq.n	8001eca <main+0x7e2>
				vcr_pitch.setpoint = current_wanted_pitch;
 8001e34:	4a1b      	ldr	r2, [pc, #108]	; (8001ea4 <main+0x7bc>)
 8001e36:	f8d7 3368 	ldr.w	r3, [r7, #872]	; 0x368
 8001e3a:	6053      	str	r3, [r2, #4]
				vcr_roll.setpoint = current_wanted_roll;
 8001e3c:	4a1a      	ldr	r2, [pc, #104]	; (8001ea8 <main+0x7c0>)
 8001e3e:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 8001e42:	6053      	str	r3, [r2, #4]

				current_out_pitch = vcr_step(&vcr_pitch, dt, CTRL.last_esc_pitch.current_motor);
 8001e44:	4b0c      	ldr	r3, [pc, #48]	; (8001e78 <main+0x790>)
 8001e46:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e4a:	eef0 0a67 	vmov.f32	s1, s15
 8001e4e:	ed97 0ae3 	vldr	s0, [r7, #908]	; 0x38c
 8001e52:	4814      	ldr	r0, [pc, #80]	; (8001ea4 <main+0x7bc>)
 8001e54:	f001 f9f4 	bl	8003240 <vcr_step>
 8001e58:	e028      	b.n	8001eac <main+0x7c4>
 8001e5a:	bf00      	nop
 8001e5c:	f3af 8000 	nop.w
 8001e60:	66666666 	.word	0x66666666
 8001e64:	c036e666 	.word	0xc036e666
 8001e68:	1eb851ec 	.word	0x1eb851ec
 8001e6c:	403deb85 	.word	0x403deb85
 8001e70:	ae147ae1 	.word	0xae147ae1
 8001e74:	bfe2e147 	.word	0xbfe2e147
 8001e78:	20009634 	.word	0x20009634
 8001e7c:	42a00000 	.word	0x42a00000
 8001e80:	42c80000 	.word	0x42c80000
 8001e84:	200096e4 	.word	0x200096e4
 8001e88:	200096a8 	.word	0x200096a8
 8001e8c:	20009688 	.word	0x20009688
 8001e90:	20009698 	.word	0x20009698
 8001e94:	20009670 	.word	0x20009670
 8001e98:	00000000 	.word	0x00000000
 8001e9c:	20000024 	.word	0x20000024
 8001ea0:	200096d8 	.word	0x200096d8
 8001ea4:	20000004 	.word	0x20000004
 8001ea8:	20000014 	.word	0x20000014
 8001eac:	ed87 0ad8 	vstr	s0, [r7, #864]	; 0x360
				current_out_roll = vcr_step(&vcr_roll, dt, CTRL.last_esc_roll.current_motor);
 8001eb0:	4b73      	ldr	r3, [pc, #460]	; (8002080 <main+0x998>)
 8001eb2:	edd3 7a07 	vldr	s15, [r3, #28]
 8001eb6:	eef0 0a67 	vmov.f32	s1, s15
 8001eba:	ed97 0ae3 	vldr	s0, [r7, #908]	; 0x38c
 8001ebe:	4871      	ldr	r0, [pc, #452]	; (8002084 <main+0x99c>)
 8001ec0:	f001 f9be 	bl	8003240 <vcr_step>
 8001ec4:	ed87 0ae7 	vstr	s0, [r7, #924]	; 0x39c
 8001ec8:	e013      	b.n	8001ef2 <main+0x80a>
			} else {
				vcr_pitch.input_filtered = 0;
 8001eca:	4b6f      	ldr	r3, [pc, #444]	; (8002088 <main+0x9a0>)
 8001ecc:	f04f 0200 	mov.w	r2, #0
 8001ed0:	609a      	str	r2, [r3, #8]
				vcr_pitch.setpoint = 0;
 8001ed2:	4b6d      	ldr	r3, [pc, #436]	; (8002088 <main+0x9a0>)
 8001ed4:	f04f 0200 	mov.w	r2, #0
 8001ed8:	605a      	str	r2, [r3, #4]
				vcr_roll.input_filtered = 0;
 8001eda:	4b6a      	ldr	r3, [pc, #424]	; (8002084 <main+0x99c>)
 8001edc:	f04f 0200 	mov.w	r2, #0
 8001ee0:	609a      	str	r2, [r3, #8]
				vcr_roll.setpoint = 0;
 8001ee2:	4b68      	ldr	r3, [pc, #416]	; (8002084 <main+0x99c>)
 8001ee4:	f04f 0200 	mov.w	r2, #0
 8001ee8:	605a      	str	r2, [r3, #4]

				current_out_pitch = 0;
 8001eea:	f04f 0300 	mov.w	r3, #0
 8001eee:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
			}


			//vesc_set_current(&vesc_pitch, current_out_pitch);
			vesc_set_current(&vesc_roll, current_out_roll);
 8001ef2:	ed97 0ae7 	vldr	s0, [r7, #924]	; 0x39c
 8001ef6:	4865      	ldr	r0, [pc, #404]	; (800208c <main+0x9a4>)
 8001ef8:	f001 f950 	bl	800319c <vesc_set_current>

			dbg_values.n_time_steps_since_last++;
 8001efc:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8001f00:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8001f04:	6a1b      	ldr	r3, [r3, #32]
 8001f06:	1c5a      	adds	r2, r3, #1
 8001f08:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8001f0c:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8001f10:	621a      	str	r2, [r3, #32]

			break;
 8001f12:	e0b2      	b.n	800207a <main+0x992>
			);

			CDC_Transmit_FS((uint8_t *) dbgbuf, dbglen);
#endif

			vesc_transmit_and_recv(&vesc_pitch);
 8001f14:	485e      	ldr	r0, [pc, #376]	; (8002090 <main+0x9a8>)
 8001f16:	f001 f8f3 	bl	8003100 <vesc_transmit_and_recv>
			vesc_transmit_and_recv(&vesc_roll);
 8001f1a:	485c      	ldr	r0, [pc, #368]	; (800208c <main+0x9a4>)
 8001f1c:	f001 f8f0 	bl	8003100 <vesc_transmit_and_recv>
			break;
 8001f20:	e0ab      	b.n	800207a <main+0x992>
			);

			CDC_Transmit_FS((uint8_t *) dbgbuf, dbglen);
#endif

			vesc_got_data(&vesc_pitch);
 8001f22:	485b      	ldr	r0, [pc, #364]	; (8002090 <main+0x9a8>)
 8001f24:	f000 ff61 	bl	8002dea <vesc_got_data>
			vesc_got_data(&vesc_roll);
 8001f28:	4858      	ldr	r0, [pc, #352]	; (800208c <main+0x9a4>)
 8001f2a:	f000 ff5e 	bl	8002dea <vesc_got_data>
			break;
 8001f2e:	e0a4      	b.n	800207a <main+0x992>
				"{Q: REQ_ACC}\r\n"
			);

			CDC_Transmit_FS((uint8_t *) dbgbuf, dbglen);
#endif
			AccData acc_data = get_accelerometer_data(&hi2c2, MPU_ADDR);
 8001f30:	4b58      	ldr	r3, [pc, #352]	; (8002094 <main+0x9ac>)
 8001f32:	881a      	ldrh	r2, [r3, #0]
 8001f34:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8001f38:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8001f3c:	4956      	ldr	r1, [pc, #344]	; (8002098 <main+0x9b0>)
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7ff fa0e 	bl	8001360 <get_accelerometer_data>
			if (acc_data.success == false) {
 8001f44:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8001f48:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	f083 0301 	eor.w	r3, r3, #1
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d011      	beq.n	8001f7c <main+0x894>
				int dbglen = sprintf(
 8001f58:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8001f5c:	494f      	ldr	r1, [pc, #316]	; (800209c <main+0x9b4>)
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f00b f9f2 	bl	800d348 <siprintf>
 8001f64:	f8c7 0394 	str.w	r0, [r7, #916]	; 0x394
					dbgbuf,
					"[ACC I2C FAIL]\r\n"
				);

				CDC_Transmit_FS((uint8_t *) dbgbuf, dbglen);
 8001f68:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 8001f6c:	b29a      	uxth	r2, r3
 8001f6e:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8001f72:	4611      	mov	r1, r2
 8001f74:	4618      	mov	r0, r3
 8001f76:	f00a f8d5 	bl	800c124 <CDC_Transmit_FS>
			} else {
				queue_put(&MAIN_QUEUE, (Message) { .ty = MSG_GOT_ACC_DATA, .acc_data = acc_data });
			}

			break;
 8001f7a:	e07e      	b.n	800207a <main+0x992>
				queue_put(&MAIN_QUEUE, (Message) { .ty = MSG_GOT_ACC_DATA, .acc_data = acc_data });
 8001f7c:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8001f80:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 8001f84:	2207      	movs	r2, #7
 8001f86:	701a      	strb	r2, [r3, #0]
 8001f88:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8001f8c:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 8001f90:	f507 7268 	add.w	r2, r7, #928	; 0x3a0
 8001f94:	f5a2 723c 	sub.w	r2, r2, #752	; 0x2f0
 8001f98:	1d1c      	adds	r4, r3, #4
 8001f9a:	4615      	mov	r5, r2
 8001f9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fa0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001fa4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001fa8:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8001fac:	f5a3 764f 	sub.w	r6, r3, #828	; 0x33c
 8001fb0:	466d      	mov	r5, sp
 8001fb2:	f106 040c 	add.w	r4, r6, #12
 8001fb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fba:	6823      	ldr	r3, [r4, #0]
 8001fbc:	602b      	str	r3, [r5, #0]
 8001fbe:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001fc2:	4837      	ldr	r0, [pc, #220]	; (80020a0 <main+0x9b8>)
 8001fc4:	f000 faaf 	bl	8002526 <queue_put>
			break;
 8001fc8:	e057      	b.n	800207a <main+0x992>
			);

			CDC_Transmit_FS((uint8_t *) dbgbuf, dbglen);
#endif

			vesc_request_data(&vesc_pitch);
 8001fca:	4831      	ldr	r0, [pc, #196]	; (8002090 <main+0x9a8>)
 8001fcc:	f001 f926 	bl	800321c <vesc_request_data>
			vesc_request_data(&vesc_roll);
 8001fd0:	482e      	ldr	r0, [pc, #184]	; (800208c <main+0x9a4>)
 8001fd2:	f001 f923 	bl	800321c <vesc_request_data>

			break;
 8001fd6:	e050      	b.n	800207a <main+0x992>
			);

			CDC_Transmit_FS((uint8_t *) dbgbuf, dbglen);
#endif

			AccData acc_data = msg.acc_data;
 8001fd8:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8001fdc:	f5a3 7243 	sub.w	r2, r3, #780	; 0x30c
 8001fe0:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8001fe4:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 8001fe8:	4615      	mov	r5, r2
 8001fea:	1d1c      	adds	r4, r3, #4
 8001fec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ff0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001ff4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
			CTRL.last_acc = acc_data;
 8001ff8:	4a21      	ldr	r2, [pc, #132]	; (8002080 <main+0x998>)
 8001ffa:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8001ffe:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8002002:	f102 0420 	add.w	r4, r2, #32
 8002006:	461d      	mov	r5, r3
 8002008:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800200a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800200c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002010:	e884 0007 	stmia.w	r4, {r0, r1, r2}

			break;
 8002014:	e031      	b.n	800207a <main+0x992>
			);

			CDC_Transmit_FS((uint8_t *) dbgbuf, dbglen);
#endif

			EscData esc_data = msg.esc_data;
 8002016:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 800201a:	f5a3 7247 	sub.w	r2, r3, #796	; 0x31c
 800201e:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8002022:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 8002026:	4614      	mov	r4, r2
 8002028:	3304      	adds	r3, #4
 800202a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800202c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			if (esc_data.vesc_id == VESC_PITCH_ID) {
 8002030:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8002034:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d108      	bne.n	8002050 <main+0x968>
				CTRL.last_esc_pitch = esc_data;
 800203e:	4a10      	ldr	r2, [pc, #64]	; (8002080 <main+0x998>)
 8002040:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8002044:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8002048:	4614      	mov	r4, r2
 800204a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800204c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			}
			if (esc_data.vesc_id == VESC_ROLL_ID) {
 8002050:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8002054:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	2b02      	cmp	r3, #2
 800205c:	d10c      	bne.n	8002078 <main+0x990>
				CTRL.last_esc_roll = esc_data;
 800205e:	4a08      	ldr	r2, [pc, #32]	; (8002080 <main+0x998>)
 8002060:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8002064:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8002068:	f102 0410 	add.w	r4, r2, #16
 800206c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800206e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			}

			break;
 8002072:	e001      	b.n	8002078 <main+0x990>
			continue;
 8002074:	bf00      	nop
 8002076:	e401      	b.n	800187c <main+0x194>
			break;
 8002078:	bf00      	nop
  {
 800207a:	f7ff bbff 	b.w	800187c <main+0x194>
 800207e:	bf00      	nop
 8002080:	20009634 	.word	0x20009634
 8002084:	20000014 	.word	0x20000014
 8002088:	20000004 	.word	0x20000004
 800208c:	20008da0 	.word	0x20008da0
 8002090:	20008518 	.word	0x20008518
 8002094:	20000000 	.word	0x20000000
 8002098:	200003a0 	.word	0x200003a0
 800209c:	08010c6c 	.word	0x08010c6c
 80020a0:	2000050c 	.word	0x2000050c

080020a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b094      	sub	sp, #80	; 0x50
 80020a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020aa:	f107 0320 	add.w	r3, r7, #32
 80020ae:	2230      	movs	r2, #48	; 0x30
 80020b0:	2100      	movs	r1, #0
 80020b2:	4618      	mov	r0, r3
 80020b4:	f00a fcd6 	bl	800ca64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020b8:	f107 030c 	add.w	r3, r7, #12
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	605a      	str	r2, [r3, #4]
 80020c2:	609a      	str	r2, [r3, #8]
 80020c4:	60da      	str	r2, [r3, #12]
 80020c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020c8:	2300      	movs	r3, #0
 80020ca:	60bb      	str	r3, [r7, #8]
 80020cc:	4b28      	ldr	r3, [pc, #160]	; (8002170 <SystemClock_Config+0xcc>)
 80020ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d0:	4a27      	ldr	r2, [pc, #156]	; (8002170 <SystemClock_Config+0xcc>)
 80020d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020d6:	6413      	str	r3, [r2, #64]	; 0x40
 80020d8:	4b25      	ldr	r3, [pc, #148]	; (8002170 <SystemClock_Config+0xcc>)
 80020da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e0:	60bb      	str	r3, [r7, #8]
 80020e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80020e4:	2300      	movs	r3, #0
 80020e6:	607b      	str	r3, [r7, #4]
 80020e8:	4b22      	ldr	r3, [pc, #136]	; (8002174 <SystemClock_Config+0xd0>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a21      	ldr	r2, [pc, #132]	; (8002174 <SystemClock_Config+0xd0>)
 80020ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020f2:	6013      	str	r3, [r2, #0]
 80020f4:	4b1f      	ldr	r3, [pc, #124]	; (8002174 <SystemClock_Config+0xd0>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020fc:	607b      	str	r3, [r7, #4]
 80020fe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002100:	2301      	movs	r3, #1
 8002102:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002104:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002108:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800210a:	2302      	movs	r3, #2
 800210c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800210e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002112:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002114:	2308      	movs	r3, #8
 8002116:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002118:	23c0      	movs	r3, #192	; 0xc0
 800211a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800211c:	2304      	movs	r3, #4
 800211e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8002120:	2308      	movs	r3, #8
 8002122:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002124:	f107 0320 	add.w	r3, r7, #32
 8002128:	4618      	mov	r0, r3
 800212a:	f004 fe77 	bl	8006e1c <HAL_RCC_OscConfig>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002134:	f000 f9aa 	bl	800248c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002138:	230f      	movs	r3, #15
 800213a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800213c:	2302      	movs	r3, #2
 800213e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002140:	2300      	movs	r3, #0
 8002142:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002144:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002148:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800214a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800214e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002150:	f107 030c 	add.w	r3, r7, #12
 8002154:	2103      	movs	r1, #3
 8002156:	4618      	mov	r0, r3
 8002158:	f005 f8d8 	bl	800730c <HAL_RCC_ClockConfig>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002162:	f000 f993 	bl	800248c <Error_Handler>
  }
}
 8002166:	bf00      	nop
 8002168:	3750      	adds	r7, #80	; 0x50
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	40023800 	.word	0x40023800
 8002174:	40007000 	.word	0x40007000

08002178 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800217c:	4b12      	ldr	r3, [pc, #72]	; (80021c8 <MX_I2C2_Init+0x50>)
 800217e:	4a13      	ldr	r2, [pc, #76]	; (80021cc <MX_I2C2_Init+0x54>)
 8002180:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002182:	4b11      	ldr	r3, [pc, #68]	; (80021c8 <MX_I2C2_Init+0x50>)
 8002184:	4a12      	ldr	r2, [pc, #72]	; (80021d0 <MX_I2C2_Init+0x58>)
 8002186:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002188:	4b0f      	ldr	r3, [pc, #60]	; (80021c8 <MX_I2C2_Init+0x50>)
 800218a:	2200      	movs	r2, #0
 800218c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800218e:	4b0e      	ldr	r3, [pc, #56]	; (80021c8 <MX_I2C2_Init+0x50>)
 8002190:	2200      	movs	r2, #0
 8002192:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002194:	4b0c      	ldr	r3, [pc, #48]	; (80021c8 <MX_I2C2_Init+0x50>)
 8002196:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800219a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800219c:	4b0a      	ldr	r3, [pc, #40]	; (80021c8 <MX_I2C2_Init+0x50>)
 800219e:	2200      	movs	r2, #0
 80021a0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80021a2:	4b09      	ldr	r3, [pc, #36]	; (80021c8 <MX_I2C2_Init+0x50>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021a8:	4b07      	ldr	r3, [pc, #28]	; (80021c8 <MX_I2C2_Init+0x50>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021ae:	4b06      	ldr	r3, [pc, #24]	; (80021c8 <MX_I2C2_Init+0x50>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80021b4:	4804      	ldr	r0, [pc, #16]	; (80021c8 <MX_I2C2_Init+0x50>)
 80021b6:	f002 fcef 	bl	8004b98 <HAL_I2C_Init>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80021c0:	f000 f964 	bl	800248c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80021c4:	bf00      	nop
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	200003a0 	.word	0x200003a0
 80021cc:	40005800 	.word	0x40005800
 80021d0:	000186a0 	.word	0x000186a0

080021d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021da:	f107 0308 	add.w	r3, r7, #8
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	605a      	str	r2, [r3, #4]
 80021e4:	609a      	str	r2, [r3, #8]
 80021e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021e8:	463b      	mov	r3, r7
 80021ea:	2200      	movs	r2, #0
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80021f0:	4b1e      	ldr	r3, [pc, #120]	; (800226c <MX_TIM1_Init+0x98>)
 80021f2:	4a1f      	ldr	r2, [pc, #124]	; (8002270 <MX_TIM1_Init+0x9c>)
 80021f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48;
 80021f6:	4b1d      	ldr	r3, [pc, #116]	; (800226c <MX_TIM1_Init+0x98>)
 80021f8:	2230      	movs	r2, #48	; 0x30
 80021fa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021fc:	4b1b      	ldr	r3, [pc, #108]	; (800226c <MX_TIM1_Init+0x98>)
 80021fe:	2200      	movs	r2, #0
 8002200:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8002202:	4b1a      	ldr	r3, [pc, #104]	; (800226c <MX_TIM1_Init+0x98>)
 8002204:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002208:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800220a:	4b18      	ldr	r3, [pc, #96]	; (800226c <MX_TIM1_Init+0x98>)
 800220c:	2200      	movs	r2, #0
 800220e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002210:	4b16      	ldr	r3, [pc, #88]	; (800226c <MX_TIM1_Init+0x98>)
 8002212:	2200      	movs	r2, #0
 8002214:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002216:	4b15      	ldr	r3, [pc, #84]	; (800226c <MX_TIM1_Init+0x98>)
 8002218:	2280      	movs	r2, #128	; 0x80
 800221a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800221c:	4813      	ldr	r0, [pc, #76]	; (800226c <MX_TIM1_Init+0x98>)
 800221e:	f005 fa93 	bl	8007748 <HAL_TIM_Base_Init>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002228:	f000 f930 	bl	800248c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800222c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002230:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002232:	f107 0308 	add.w	r3, r7, #8
 8002236:	4619      	mov	r1, r3
 8002238:	480c      	ldr	r0, [pc, #48]	; (800226c <MX_TIM1_Init+0x98>)
 800223a:	f005 fc4d 	bl	8007ad8 <HAL_TIM_ConfigClockSource>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002244:	f000 f922 	bl	800248c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002248:	2300      	movs	r3, #0
 800224a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800224c:	2300      	movs	r3, #0
 800224e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002250:	463b      	mov	r3, r7
 8002252:	4619      	mov	r1, r3
 8002254:	4805      	ldr	r0, [pc, #20]	; (800226c <MX_TIM1_Init+0x98>)
 8002256:	f005 fe69 	bl	8007f2c <HAL_TIMEx_MasterConfigSynchronization>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002260:	f000 f914 	bl	800248c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002264:	bf00      	nop
 8002266:	3718      	adds	r7, #24
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	200003f4 	.word	0x200003f4
 8002270:	40010000 	.word	0x40010000

08002274 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b086      	sub	sp, #24
 8002278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800227a:	f107 0308 	add.w	r3, r7, #8
 800227e:	2200      	movs	r2, #0
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	605a      	str	r2, [r3, #4]
 8002284:	609a      	str	r2, [r3, #8]
 8002286:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002288:	463b      	mov	r3, r7
 800228a:	2200      	movs	r2, #0
 800228c:	601a      	str	r2, [r3, #0]
 800228e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002290:	4b1d      	ldr	r3, [pc, #116]	; (8002308 <MX_TIM2_Init+0x94>)
 8002292:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002296:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48;
 8002298:	4b1b      	ldr	r3, [pc, #108]	; (8002308 <MX_TIM2_Init+0x94>)
 800229a:	2230      	movs	r2, #48	; 0x30
 800229c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800229e:	4b1a      	ldr	r3, [pc, #104]	; (8002308 <MX_TIM2_Init+0x94>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80022a4:	4b18      	ldr	r3, [pc, #96]	; (8002308 <MX_TIM2_Init+0x94>)
 80022a6:	2263      	movs	r2, #99	; 0x63
 80022a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022aa:	4b17      	ldr	r3, [pc, #92]	; (8002308 <MX_TIM2_Init+0x94>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80022b0:	4b15      	ldr	r3, [pc, #84]	; (8002308 <MX_TIM2_Init+0x94>)
 80022b2:	2280      	movs	r2, #128	; 0x80
 80022b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80022b6:	4814      	ldr	r0, [pc, #80]	; (8002308 <MX_TIM2_Init+0x94>)
 80022b8:	f005 fa46 	bl	8007748 <HAL_TIM_Base_Init>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80022c2:	f000 f8e3 	bl	800248c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80022cc:	f107 0308 	add.w	r3, r7, #8
 80022d0:	4619      	mov	r1, r3
 80022d2:	480d      	ldr	r0, [pc, #52]	; (8002308 <MX_TIM2_Init+0x94>)
 80022d4:	f005 fc00 	bl	8007ad8 <HAL_TIM_ConfigClockSource>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80022de:	f000 f8d5 	bl	800248c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022e2:	2300      	movs	r3, #0
 80022e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022e6:	2300      	movs	r3, #0
 80022e8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80022ea:	463b      	mov	r3, r7
 80022ec:	4619      	mov	r1, r3
 80022ee:	4806      	ldr	r0, [pc, #24]	; (8002308 <MX_TIM2_Init+0x94>)
 80022f0:	f005 fe1c 	bl	8007f2c <HAL_TIMEx_MasterConfigSynchronization>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80022fa:	f000 f8c7 	bl	800248c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80022fe:	bf00      	nop
 8002300:	3718      	adds	r7, #24
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	2000043c 	.word	0x2000043c

0800230c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002310:	4b11      	ldr	r3, [pc, #68]	; (8002358 <MX_USART2_UART_Init+0x4c>)
 8002312:	4a12      	ldr	r2, [pc, #72]	; (800235c <MX_USART2_UART_Init+0x50>)
 8002314:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002316:	4b10      	ldr	r3, [pc, #64]	; (8002358 <MX_USART2_UART_Init+0x4c>)
 8002318:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800231c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800231e:	4b0e      	ldr	r3, [pc, #56]	; (8002358 <MX_USART2_UART_Init+0x4c>)
 8002320:	2200      	movs	r2, #0
 8002322:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002324:	4b0c      	ldr	r3, [pc, #48]	; (8002358 <MX_USART2_UART_Init+0x4c>)
 8002326:	2200      	movs	r2, #0
 8002328:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800232a:	4b0b      	ldr	r3, [pc, #44]	; (8002358 <MX_USART2_UART_Init+0x4c>)
 800232c:	2200      	movs	r2, #0
 800232e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002330:	4b09      	ldr	r3, [pc, #36]	; (8002358 <MX_USART2_UART_Init+0x4c>)
 8002332:	220c      	movs	r2, #12
 8002334:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002336:	4b08      	ldr	r3, [pc, #32]	; (8002358 <MX_USART2_UART_Init+0x4c>)
 8002338:	2200      	movs	r2, #0
 800233a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800233c:	4b06      	ldr	r3, [pc, #24]	; (8002358 <MX_USART2_UART_Init+0x4c>)
 800233e:	2200      	movs	r2, #0
 8002340:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002342:	4805      	ldr	r0, [pc, #20]	; (8002358 <MX_USART2_UART_Init+0x4c>)
 8002344:	f005 fe82 	bl	800804c <HAL_UART_Init>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800234e:	f000 f89d 	bl	800248c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002352:	bf00      	nop
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	20000484 	.word	0x20000484
 800235c:	40004400 	.word	0x40004400

08002360 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002364:	4b11      	ldr	r3, [pc, #68]	; (80023ac <MX_USART3_UART_Init+0x4c>)
 8002366:	4a12      	ldr	r2, [pc, #72]	; (80023b0 <MX_USART3_UART_Init+0x50>)
 8002368:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800236a:	4b10      	ldr	r3, [pc, #64]	; (80023ac <MX_USART3_UART_Init+0x4c>)
 800236c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002370:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002372:	4b0e      	ldr	r3, [pc, #56]	; (80023ac <MX_USART3_UART_Init+0x4c>)
 8002374:	2200      	movs	r2, #0
 8002376:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002378:	4b0c      	ldr	r3, [pc, #48]	; (80023ac <MX_USART3_UART_Init+0x4c>)
 800237a:	2200      	movs	r2, #0
 800237c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800237e:	4b0b      	ldr	r3, [pc, #44]	; (80023ac <MX_USART3_UART_Init+0x4c>)
 8002380:	2200      	movs	r2, #0
 8002382:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002384:	4b09      	ldr	r3, [pc, #36]	; (80023ac <MX_USART3_UART_Init+0x4c>)
 8002386:	220c      	movs	r2, #12
 8002388:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800238a:	4b08      	ldr	r3, [pc, #32]	; (80023ac <MX_USART3_UART_Init+0x4c>)
 800238c:	2200      	movs	r2, #0
 800238e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002390:	4b06      	ldr	r3, [pc, #24]	; (80023ac <MX_USART3_UART_Init+0x4c>)
 8002392:	2200      	movs	r2, #0
 8002394:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002396:	4805      	ldr	r0, [pc, #20]	; (80023ac <MX_USART3_UART_Init+0x4c>)
 8002398:	f005 fe58 	bl	800804c <HAL_UART_Init>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80023a2:	f000 f873 	bl	800248c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80023a6:	bf00      	nop
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	200004c8 	.word	0x200004c8
 80023b0:	40004800 	.word	0x40004800

080023b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b08a      	sub	sp, #40	; 0x28
 80023b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ba:	f107 0314 	add.w	r3, r7, #20
 80023be:	2200      	movs	r2, #0
 80023c0:	601a      	str	r2, [r3, #0]
 80023c2:	605a      	str	r2, [r3, #4]
 80023c4:	609a      	str	r2, [r3, #8]
 80023c6:	60da      	str	r2, [r3, #12]
 80023c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023ca:	2300      	movs	r3, #0
 80023cc:	613b      	str	r3, [r7, #16]
 80023ce:	4b2d      	ldr	r3, [pc, #180]	; (8002484 <MX_GPIO_Init+0xd0>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	4a2c      	ldr	r2, [pc, #176]	; (8002484 <MX_GPIO_Init+0xd0>)
 80023d4:	f043 0304 	orr.w	r3, r3, #4
 80023d8:	6313      	str	r3, [r2, #48]	; 0x30
 80023da:	4b2a      	ldr	r3, [pc, #168]	; (8002484 <MX_GPIO_Init+0xd0>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	f003 0304 	and.w	r3, r3, #4
 80023e2:	613b      	str	r3, [r7, #16]
 80023e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023e6:	2300      	movs	r3, #0
 80023e8:	60fb      	str	r3, [r7, #12]
 80023ea:	4b26      	ldr	r3, [pc, #152]	; (8002484 <MX_GPIO_Init+0xd0>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	4a25      	ldr	r2, [pc, #148]	; (8002484 <MX_GPIO_Init+0xd0>)
 80023f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023f4:	6313      	str	r3, [r2, #48]	; 0x30
 80023f6:	4b23      	ldr	r3, [pc, #140]	; (8002484 <MX_GPIO_Init+0xd0>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002402:	2300      	movs	r3, #0
 8002404:	60bb      	str	r3, [r7, #8]
 8002406:	4b1f      	ldr	r3, [pc, #124]	; (8002484 <MX_GPIO_Init+0xd0>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240a:	4a1e      	ldr	r2, [pc, #120]	; (8002484 <MX_GPIO_Init+0xd0>)
 800240c:	f043 0301 	orr.w	r3, r3, #1
 8002410:	6313      	str	r3, [r2, #48]	; 0x30
 8002412:	4b1c      	ldr	r3, [pc, #112]	; (8002484 <MX_GPIO_Init+0xd0>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	60bb      	str	r3, [r7, #8]
 800241c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800241e:	2300      	movs	r3, #0
 8002420:	607b      	str	r3, [r7, #4]
 8002422:	4b18      	ldr	r3, [pc, #96]	; (8002484 <MX_GPIO_Init+0xd0>)
 8002424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002426:	4a17      	ldr	r2, [pc, #92]	; (8002484 <MX_GPIO_Init+0xd0>)
 8002428:	f043 0302 	orr.w	r3, r3, #2
 800242c:	6313      	str	r3, [r2, #48]	; 0x30
 800242e:	4b15      	ldr	r3, [pc, #84]	; (8002484 <MX_GPIO_Init+0xd0>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	607b      	str	r3, [r7, #4]
 8002438:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED2_Pin|LED3_Pin|LDERROR_Pin|DEADMAN_GND_Pin
 800243a:	2200      	movs	r2, #0
 800243c:	f24f 0105 	movw	r1, #61445	; 0xf005
 8002440:	4811      	ldr	r0, [pc, #68]	; (8002488 <MX_GPIO_Init+0xd4>)
 8002442:	f002 fb8f 	bl	8004b64 <HAL_GPIO_WritePin>
                          |DEADMAN_LED_Pin|LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED2_Pin LED3_Pin LDERROR_Pin DEADMAN_GND_Pin
                           DEADMAN_LED_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED3_Pin|LDERROR_Pin|DEADMAN_GND_Pin
 8002446:	f24f 0305 	movw	r3, #61445	; 0xf005
 800244a:	617b      	str	r3, [r7, #20]
                          |DEADMAN_LED_Pin|LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800244c:	2301      	movs	r3, #1
 800244e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002450:	2300      	movs	r3, #0
 8002452:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002454:	2300      	movs	r3, #0
 8002456:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002458:	f107 0314 	add.w	r3, r7, #20
 800245c:	4619      	mov	r1, r3
 800245e:	480a      	ldr	r0, [pc, #40]	; (8002488 <MX_GPIO_Init+0xd4>)
 8002460:	f002 f9cc 	bl	80047fc <HAL_GPIO_Init>

  /*Configure GPIO pin : DEADMAN_SW_Pin */
  GPIO_InitStruct.Pin = DEADMAN_SW_Pin;
 8002464:	2302      	movs	r3, #2
 8002466:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002468:	2300      	movs	r3, #0
 800246a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800246c:	2301      	movs	r3, #1
 800246e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DEADMAN_SW_GPIO_Port, &GPIO_InitStruct);
 8002470:	f107 0314 	add.w	r3, r7, #20
 8002474:	4619      	mov	r1, r3
 8002476:	4804      	ldr	r0, [pc, #16]	; (8002488 <MX_GPIO_Init+0xd4>)
 8002478:	f002 f9c0 	bl	80047fc <HAL_GPIO_Init>

}
 800247c:	bf00      	nop
 800247e:	3728      	adds	r7, #40	; 0x28
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	40023800 	.word	0x40023800
 8002488:	40020800 	.word	0x40020800

0800248c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002490:	b672      	cpsid	i
}
 8002492:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002494:	e7fe      	b.n	8002494 <Error_Handler+0x8>

08002496 <queue_init>:


#include "queue.h"
#include "cmsis_gcc.h"

void queue_init(Queue *q) {
 8002496:	b480      	push	{r7}
 8002498:	b083      	sub	sp, #12
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
	q->read_idx = 0;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80024a4:	461a      	mov	r2, r3
 80024a6:	2300      	movs	r3, #0
 80024a8:	6013      	str	r3, [r2, #0]
	q->write_idx = 0;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80024b0:	461a      	mov	r2, r3
 80024b2:	2300      	movs	r3, #0
 80024b4:	6053      	str	r3, [r2, #4]
	q->is_reading = false;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80024bc:	2200      	movs	r2, #0
 80024be:	725a      	strb	r2, [r3, #9]
	q->is_writing = false;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80024c6:	2200      	movs	r2, #0
 80024c8:	721a      	strb	r2, [r3, #8]
}
 80024ca:	bf00      	nop
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr

080024d6 <queue_nelem>:

size_t queue_nelem(Queue *q) {
 80024d6:	b480      	push	{r7}
 80024d8:	b083      	sub	sp, #12
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
	return (q->write_idx - q->read_idx) % CHANNEL_SIZE;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80024e4:	685a      	ldr	r2, [r3, #4]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <queue_can_put>:

bool queue_can_put(Queue *q) {
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
	return queue_nelem(q) < CHANNEL_SIZE - 1;
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f7ff ffe4 	bl	80024d6 <queue_nelem>
 800250e:	4603      	mov	r3, r0
 8002510:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8002514:	4293      	cmp	r3, r2
 8002516:	bf94      	ite	ls
 8002518:	2301      	movls	r3, #1
 800251a:	2300      	movhi	r3, #0
 800251c:	b2db      	uxtb	r3, r3
}
 800251e:	4618      	mov	r0, r3
 8002520:	3708      	adds	r7, #8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <queue_put>:

// Returns false if value cannot be put (queue is full)
bool queue_put(Queue *q, Message msg) {
 8002526:	b084      	sub	sp, #16
 8002528:	b5b0      	push	{r4, r5, r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	f107 001c 	add.w	r0, r7, #28
 8002534:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (!queue_can_put(q)) {
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f7ff ffe1 	bl	8002500 <queue_can_put>
 800253e:	4603      	mov	r3, r0
 8002540:	f083 0301 	eor.w	r3, r3, #1
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <queue_put+0x28>
		return false;
 800254a:	2300      	movs	r3, #0
 800254c:	e031      	b.n	80025b2 <queue_put+0x8c>
	}

	while (q->is_writing) { }
 800254e:	bf00      	nop
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002556:	7a1b      	ldrb	r3, [r3, #8]
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1f8      	bne.n	8002550 <queue_put+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 800255e:	b672      	cpsid	i
}
 8002560:	bf00      	nop
	__disable_irq();

	q->is_writing = true;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002568:	2201      	movs	r2, #1
 800256a:	721a      	strb	r2, [r3, #8]

	q->messages[q->write_idx] = msg;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	015b      	lsls	r3, r3, #5
 8002578:	4413      	add	r3, r2
 800257a:	461d      	mov	r5, r3
 800257c:	f107 041c 	add.w	r4, r7, #28
 8002580:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002582:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002584:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002588:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	q->write_idx = (q->write_idx + 1) % CHANNEL_SIZE;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	3301      	adds	r3, #1
 8002596:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80025a0:	6053      	str	r3, [r2, #4]

	q->is_writing = false;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80025a8:	2200      	movs	r2, #0
 80025aa:	721a      	strb	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 80025ac:	b662      	cpsie	i
}
 80025ae:	bf00      	nop
	__enable_irq();

	return true;
 80025b0:	2301      	movs	r3, #1
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80025bc:	b004      	add	sp, #16
 80025be:	4770      	bx	lr

080025c0 <queue_has>:

bool queue_has(Queue *q) {
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
	return queue_nelem(q) != 0;
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f7ff ff84 	bl	80024d6 <queue_nelem>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	bf14      	ite	ne
 80025d4:	2301      	movne	r3, #1
 80025d6:	2300      	moveq	r3, #0
 80025d8:	b2db      	uxtb	r3, r3
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <queue_pop>:

// Returns a MSG_NONE if the queue is empty
Message queue_pop(Queue *q) {
 80025e2:	b5b0      	push	{r4, r5, r7, lr}
 80025e4:	b092      	sub	sp, #72	; 0x48
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
 80025ea:	6039      	str	r1, [r7, #0]
	if (!queue_has(q)) {
 80025ec:	6838      	ldr	r0, [r7, #0]
 80025ee:	f7ff ffe7 	bl	80025c0 <queue_has>
 80025f2:	4603      	mov	r3, r0
 80025f4:	f083 0301 	eor.w	r3, r3, #1
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d007      	beq.n	800260e <queue_pop+0x2c>
		return (Message) { .ty = MSG_NONE };
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4618      	mov	r0, r3
 8002602:	2320      	movs	r3, #32
 8002604:	461a      	mov	r2, r3
 8002606:	2100      	movs	r1, #0
 8002608:	f00a fa2c 	bl	800ca64 <memset>

	q->is_reading = false;
	__enable_irq();

	return msg;
}
 800260c:	e03a      	b.n	8002684 <queue_pop+0xa2>
	while (q->is_reading) { }
 800260e:	bf00      	nop
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002616:	7a5b      	ldrb	r3, [r3, #9]
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1f8      	bne.n	8002610 <queue_pop+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 800261e:	b672      	cpsid	i
}
 8002620:	bf00      	nop
	q->is_reading = true;
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002628:	2201      	movs	r2, #1
 800262a:	725a      	strb	r2, [r3, #9]
	Message msg = q->messages[q->read_idx];
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	015b      	lsls	r3, r3, #5
 8002638:	4413      	add	r3, r2
 800263a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800263e:	461d      	mov	r5, r3
 8002640:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002642:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002644:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002648:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	q->read_idx = (q->read_idx + 1) % CHANNEL_SIZE;
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	3301      	adds	r3, #1
 8002656:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800265a:	683a      	ldr	r2, [r7, #0]
 800265c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8002660:	6013      	str	r3, [r2, #0]
	q->is_reading = false;
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002668:	2200      	movs	r2, #0
 800266a:	725a      	strb	r2, [r3, #9]
  __ASM volatile ("cpsie i" : : : "memory");
 800266c:	b662      	cpsie	i
}
 800266e:	bf00      	nop
	return msg;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	461d      	mov	r5, r3
 8002674:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002678:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800267a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800267c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002680:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	3748      	adds	r7, #72	; 0x48
 8002688:	46bd      	mov	sp, r7
 800268a:	bdb0      	pop	{r4, r5, r7, pc}

0800268c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002692:	2300      	movs	r3, #0
 8002694:	607b      	str	r3, [r7, #4]
 8002696:	4b10      	ldr	r3, [pc, #64]	; (80026d8 <HAL_MspInit+0x4c>)
 8002698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269a:	4a0f      	ldr	r2, [pc, #60]	; (80026d8 <HAL_MspInit+0x4c>)
 800269c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026a0:	6453      	str	r3, [r2, #68]	; 0x44
 80026a2:	4b0d      	ldr	r3, [pc, #52]	; (80026d8 <HAL_MspInit+0x4c>)
 80026a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026aa:	607b      	str	r3, [r7, #4]
 80026ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026ae:	2300      	movs	r3, #0
 80026b0:	603b      	str	r3, [r7, #0]
 80026b2:	4b09      	ldr	r3, [pc, #36]	; (80026d8 <HAL_MspInit+0x4c>)
 80026b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b6:	4a08      	ldr	r2, [pc, #32]	; (80026d8 <HAL_MspInit+0x4c>)
 80026b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026bc:	6413      	str	r3, [r2, #64]	; 0x40
 80026be:	4b06      	ldr	r3, [pc, #24]	; (80026d8 <HAL_MspInit+0x4c>)
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c6:	603b      	str	r3, [r7, #0]
 80026c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026ca:	bf00      	nop
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	40023800 	.word	0x40023800

080026dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b08a      	sub	sp, #40	; 0x28
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e4:	f107 0314 	add.w	r3, r7, #20
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	605a      	str	r2, [r3, #4]
 80026ee:	609a      	str	r2, [r3, #8]
 80026f0:	60da      	str	r2, [r3, #12]
 80026f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a19      	ldr	r2, [pc, #100]	; (8002760 <HAL_I2C_MspInit+0x84>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d12c      	bne.n	8002758 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026fe:	2300      	movs	r3, #0
 8002700:	613b      	str	r3, [r7, #16]
 8002702:	4b18      	ldr	r3, [pc, #96]	; (8002764 <HAL_I2C_MspInit+0x88>)
 8002704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002706:	4a17      	ldr	r2, [pc, #92]	; (8002764 <HAL_I2C_MspInit+0x88>)
 8002708:	f043 0302 	orr.w	r3, r3, #2
 800270c:	6313      	str	r3, [r2, #48]	; 0x30
 800270e:	4b15      	ldr	r3, [pc, #84]	; (8002764 <HAL_I2C_MspInit+0x88>)
 8002710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	613b      	str	r3, [r7, #16]
 8002718:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800271a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800271e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002720:	2312      	movs	r3, #18
 8002722:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002724:	2300      	movs	r3, #0
 8002726:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002728:	2303      	movs	r3, #3
 800272a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800272c:	2304      	movs	r3, #4
 800272e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002730:	f107 0314 	add.w	r3, r7, #20
 8002734:	4619      	mov	r1, r3
 8002736:	480c      	ldr	r0, [pc, #48]	; (8002768 <HAL_I2C_MspInit+0x8c>)
 8002738:	f002 f860 	bl	80047fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800273c:	2300      	movs	r3, #0
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	4b08      	ldr	r3, [pc, #32]	; (8002764 <HAL_I2C_MspInit+0x88>)
 8002742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002744:	4a07      	ldr	r2, [pc, #28]	; (8002764 <HAL_I2C_MspInit+0x88>)
 8002746:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800274a:	6413      	str	r3, [r2, #64]	; 0x40
 800274c:	4b05      	ldr	r3, [pc, #20]	; (8002764 <HAL_I2C_MspInit+0x88>)
 800274e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002750:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002754:	60fb      	str	r3, [r7, #12]
 8002756:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002758:	bf00      	nop
 800275a:	3728      	adds	r7, #40	; 0x28
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	40005800 	.word	0x40005800
 8002764:	40023800 	.word	0x40023800
 8002768:	40020400 	.word	0x40020400

0800276c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a1c      	ldr	r2, [pc, #112]	; (80027ec <HAL_TIM_Base_MspInit+0x80>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d116      	bne.n	80027ac <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800277e:	2300      	movs	r3, #0
 8002780:	60fb      	str	r3, [r7, #12]
 8002782:	4b1b      	ldr	r3, [pc, #108]	; (80027f0 <HAL_TIM_Base_MspInit+0x84>)
 8002784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002786:	4a1a      	ldr	r2, [pc, #104]	; (80027f0 <HAL_TIM_Base_MspInit+0x84>)
 8002788:	f043 0301 	orr.w	r3, r3, #1
 800278c:	6453      	str	r3, [r2, #68]	; 0x44
 800278e:	4b18      	ldr	r3, [pc, #96]	; (80027f0 <HAL_TIM_Base_MspInit+0x84>)
 8002790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800279a:	2200      	movs	r2, #0
 800279c:	2100      	movs	r1, #0
 800279e:	2019      	movs	r0, #25
 80027a0:	f001 ff55 	bl	800464e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80027a4:	2019      	movs	r0, #25
 80027a6:	f001 ff6e 	bl	8004686 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80027aa:	e01a      	b.n	80027e2 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM2)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027b4:	d115      	bne.n	80027e2 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027b6:	2300      	movs	r3, #0
 80027b8:	60bb      	str	r3, [r7, #8]
 80027ba:	4b0d      	ldr	r3, [pc, #52]	; (80027f0 <HAL_TIM_Base_MspInit+0x84>)
 80027bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027be:	4a0c      	ldr	r2, [pc, #48]	; (80027f0 <HAL_TIM_Base_MspInit+0x84>)
 80027c0:	f043 0301 	orr.w	r3, r3, #1
 80027c4:	6413      	str	r3, [r2, #64]	; 0x40
 80027c6:	4b0a      	ldr	r3, [pc, #40]	; (80027f0 <HAL_TIM_Base_MspInit+0x84>)
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	60bb      	str	r3, [r7, #8]
 80027d0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80027d2:	2200      	movs	r2, #0
 80027d4:	2100      	movs	r1, #0
 80027d6:	201c      	movs	r0, #28
 80027d8:	f001 ff39 	bl	800464e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80027dc:	201c      	movs	r0, #28
 80027de:	f001 ff52 	bl	8004686 <HAL_NVIC_EnableIRQ>
}
 80027e2:	bf00      	nop
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40010000 	.word	0x40010000
 80027f0:	40023800 	.word	0x40023800

080027f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b08c      	sub	sp, #48	; 0x30
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027fc:	f107 031c 	add.w	r3, r7, #28
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	605a      	str	r2, [r3, #4]
 8002806:	609a      	str	r2, [r3, #8]
 8002808:	60da      	str	r2, [r3, #12]
 800280a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a3a      	ldr	r2, [pc, #232]	; (80028fc <HAL_UART_MspInit+0x108>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d134      	bne.n	8002880 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002816:	2300      	movs	r3, #0
 8002818:	61bb      	str	r3, [r7, #24]
 800281a:	4b39      	ldr	r3, [pc, #228]	; (8002900 <HAL_UART_MspInit+0x10c>)
 800281c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281e:	4a38      	ldr	r2, [pc, #224]	; (8002900 <HAL_UART_MspInit+0x10c>)
 8002820:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002824:	6413      	str	r3, [r2, #64]	; 0x40
 8002826:	4b36      	ldr	r3, [pc, #216]	; (8002900 <HAL_UART_MspInit+0x10c>)
 8002828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800282e:	61bb      	str	r3, [r7, #24]
 8002830:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002832:	2300      	movs	r3, #0
 8002834:	617b      	str	r3, [r7, #20]
 8002836:	4b32      	ldr	r3, [pc, #200]	; (8002900 <HAL_UART_MspInit+0x10c>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283a:	4a31      	ldr	r2, [pc, #196]	; (8002900 <HAL_UART_MspInit+0x10c>)
 800283c:	f043 0301 	orr.w	r3, r3, #1
 8002840:	6313      	str	r3, [r2, #48]	; 0x30
 8002842:	4b2f      	ldr	r3, [pc, #188]	; (8002900 <HAL_UART_MspInit+0x10c>)
 8002844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	617b      	str	r3, [r7, #20]
 800284c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800284e:	230c      	movs	r3, #12
 8002850:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002852:	2302      	movs	r3, #2
 8002854:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002856:	2300      	movs	r3, #0
 8002858:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800285a:	2303      	movs	r3, #3
 800285c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800285e:	2307      	movs	r3, #7
 8002860:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002862:	f107 031c 	add.w	r3, r7, #28
 8002866:	4619      	mov	r1, r3
 8002868:	4826      	ldr	r0, [pc, #152]	; (8002904 <HAL_UART_MspInit+0x110>)
 800286a:	f001 ffc7 	bl	80047fc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800286e:	2200      	movs	r2, #0
 8002870:	2100      	movs	r1, #0
 8002872:	2026      	movs	r0, #38	; 0x26
 8002874:	f001 feeb 	bl	800464e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002878:	2026      	movs	r0, #38	; 0x26
 800287a:	f001 ff04 	bl	8004686 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800287e:	e039      	b.n	80028f4 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART3)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a20      	ldr	r2, [pc, #128]	; (8002908 <HAL_UART_MspInit+0x114>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d134      	bne.n	80028f4 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART3_CLK_ENABLE();
 800288a:	2300      	movs	r3, #0
 800288c:	613b      	str	r3, [r7, #16]
 800288e:	4b1c      	ldr	r3, [pc, #112]	; (8002900 <HAL_UART_MspInit+0x10c>)
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	4a1b      	ldr	r2, [pc, #108]	; (8002900 <HAL_UART_MspInit+0x10c>)
 8002894:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002898:	6413      	str	r3, [r2, #64]	; 0x40
 800289a:	4b19      	ldr	r3, [pc, #100]	; (8002900 <HAL_UART_MspInit+0x10c>)
 800289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028a2:	613b      	str	r3, [r7, #16]
 80028a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028a6:	2300      	movs	r3, #0
 80028a8:	60fb      	str	r3, [r7, #12]
 80028aa:	4b15      	ldr	r3, [pc, #84]	; (8002900 <HAL_UART_MspInit+0x10c>)
 80028ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ae:	4a14      	ldr	r2, [pc, #80]	; (8002900 <HAL_UART_MspInit+0x10c>)
 80028b0:	f043 0304 	orr.w	r3, r3, #4
 80028b4:	6313      	str	r3, [r2, #48]	; 0x30
 80028b6:	4b12      	ldr	r3, [pc, #72]	; (8002900 <HAL_UART_MspInit+0x10c>)
 80028b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ba:	f003 0304 	and.w	r3, r3, #4
 80028be:	60fb      	str	r3, [r7, #12]
 80028c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80028c2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80028c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c8:	2302      	movs	r3, #2
 80028ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028cc:	2300      	movs	r3, #0
 80028ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028d0:	2303      	movs	r3, #3
 80028d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80028d4:	2307      	movs	r3, #7
 80028d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028d8:	f107 031c 	add.w	r3, r7, #28
 80028dc:	4619      	mov	r1, r3
 80028de:	480b      	ldr	r0, [pc, #44]	; (800290c <HAL_UART_MspInit+0x118>)
 80028e0:	f001 ff8c 	bl	80047fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80028e4:	2200      	movs	r2, #0
 80028e6:	2100      	movs	r1, #0
 80028e8:	2027      	movs	r0, #39	; 0x27
 80028ea:	f001 feb0 	bl	800464e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80028ee:	2027      	movs	r0, #39	; 0x27
 80028f0:	f001 fec9 	bl	8004686 <HAL_NVIC_EnableIRQ>
}
 80028f4:	bf00      	nop
 80028f6:	3730      	adds	r7, #48	; 0x30
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	40004400 	.word	0x40004400
 8002900:	40023800 	.word	0x40023800
 8002904:	40020000 	.word	0x40020000
 8002908:	40004800 	.word	0x40004800
 800290c:	40020800 	.word	0x40020800

08002910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002914:	e7fe      	b.n	8002914 <NMI_Handler+0x4>

08002916 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002916:	b480      	push	{r7}
 8002918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800291a:	e7fe      	b.n	800291a <HardFault_Handler+0x4>

0800291c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002920:	e7fe      	b.n	8002920 <MemManage_Handler+0x4>

08002922 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002922:	b480      	push	{r7}
 8002924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002926:	e7fe      	b.n	8002926 <BusFault_Handler+0x4>

08002928 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800292c:	e7fe      	b.n	800292c <UsageFault_Handler+0x4>

0800292e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800292e:	b480      	push	{r7}
 8002930:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002932:	bf00      	nop
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002940:	bf00      	nop
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr

0800294a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800294a:	b480      	push	{r7}
 800294c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800294e:	bf00      	nop
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800295c:	f001 fd34 	bl	80043c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002960:	bf00      	nop
 8002962:	bd80      	pop	{r7, pc}

08002964 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002968:	4802      	ldr	r0, [pc, #8]	; (8002974 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800296a:	f004 ffad 	bl	80078c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800296e:	bf00      	nop
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	200003f4 	.word	0x200003f4

08002978 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800297c:	4802      	ldr	r0, [pc, #8]	; (8002988 <TIM2_IRQHandler+0x10>)
 800297e:	f004 ffa3 	bl	80078c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002982:	bf00      	nop
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	2000043c 	.word	0x2000043c

0800298c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002990:	4802      	ldr	r0, [pc, #8]	; (800299c <USART2_IRQHandler+0x10>)
 8002992:	f005 fc1d 	bl	80081d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002996:	bf00      	nop
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	20000484 	.word	0x20000484

080029a0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80029a4:	4802      	ldr	r0, [pc, #8]	; (80029b0 <USART3_IRQHandler+0x10>)
 80029a6:	f005 fc13 	bl	80081d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80029aa:	bf00      	nop
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	200004c8 	.word	0x200004c8

080029b4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80029b8:	4802      	ldr	r0, [pc, #8]	; (80029c4 <OTG_FS_IRQHandler+0x10>)
 80029ba:	f003 f9fc 	bl	8005db6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80029be:	bf00      	nop
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	2000abc4 	.word	0x2000abc4

080029c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
	return 1;
 80029cc:	2301      	movs	r3, #1
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <_kill>:

int _kill(int pid, int sig)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80029e2:	f009 fffb 	bl	800c9dc <__errno>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2216      	movs	r2, #22
 80029ea:	601a      	str	r2, [r3, #0]
	return -1;
 80029ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3708      	adds	r7, #8
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <_exit>:

void _exit (int status)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002a00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f7ff ffe7 	bl	80029d8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002a0a:	e7fe      	b.n	8002a0a <_exit+0x12>

08002a0c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b086      	sub	sp, #24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a18:	2300      	movs	r3, #0
 8002a1a:	617b      	str	r3, [r7, #20]
 8002a1c:	e00a      	b.n	8002a34 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002a1e:	f3af 8000 	nop.w
 8002a22:	4601      	mov	r1, r0
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	1c5a      	adds	r2, r3, #1
 8002a28:	60ba      	str	r2, [r7, #8]
 8002a2a:	b2ca      	uxtb	r2, r1
 8002a2c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	3301      	adds	r3, #1
 8002a32:	617b      	str	r3, [r7, #20]
 8002a34:	697a      	ldr	r2, [r7, #20]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	dbf0      	blt.n	8002a1e <_read+0x12>
	}

return len;
 8002a3c:	687b      	ldr	r3, [r7, #4]
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3718      	adds	r7, #24
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b086      	sub	sp, #24
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	60f8      	str	r0, [r7, #12]
 8002a4e:	60b9      	str	r1, [r7, #8]
 8002a50:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a52:	2300      	movs	r3, #0
 8002a54:	617b      	str	r3, [r7, #20]
 8002a56:	e009      	b.n	8002a6c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	1c5a      	adds	r2, r3, #1
 8002a5c:	60ba      	str	r2, [r7, #8]
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	3301      	adds	r3, #1
 8002a6a:	617b      	str	r3, [r7, #20]
 8002a6c:	697a      	ldr	r2, [r7, #20]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	dbf1      	blt.n	8002a58 <_write+0x12>
	}
	return len;
 8002a74:	687b      	ldr	r3, [r7, #4]
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3718      	adds	r7, #24
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <_close>:

int _close(int file)
{
 8002a7e:	b480      	push	{r7}
 8002a80:	b083      	sub	sp, #12
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
	return -1;
 8002a86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	370c      	adds	r7, #12
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr

08002a96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a96:	b480      	push	{r7}
 8002a98:	b083      	sub	sp, #12
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
 8002a9e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002aa6:	605a      	str	r2, [r3, #4]
	return 0;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr

08002ab6 <_isatty>:

int _isatty(int file)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	b083      	sub	sp, #12
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
	return 1;
 8002abe:	2301      	movs	r3, #1
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
	return 0;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3714      	adds	r7, #20
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
	...

08002ae8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002af0:	4a14      	ldr	r2, [pc, #80]	; (8002b44 <_sbrk+0x5c>)
 8002af2:	4b15      	ldr	r3, [pc, #84]	; (8002b48 <_sbrk+0x60>)
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002afc:	4b13      	ldr	r3, [pc, #76]	; (8002b4c <_sbrk+0x64>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d102      	bne.n	8002b0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b04:	4b11      	ldr	r3, [pc, #68]	; (8002b4c <_sbrk+0x64>)
 8002b06:	4a12      	ldr	r2, [pc, #72]	; (8002b50 <_sbrk+0x68>)
 8002b08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b0a:	4b10      	ldr	r3, [pc, #64]	; (8002b4c <_sbrk+0x64>)
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4413      	add	r3, r2
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d207      	bcs.n	8002b28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b18:	f009 ff60 	bl	800c9dc <__errno>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	220c      	movs	r2, #12
 8002b20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b26:	e009      	b.n	8002b3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b28:	4b08      	ldr	r3, [pc, #32]	; (8002b4c <_sbrk+0x64>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b2e:	4b07      	ldr	r3, [pc, #28]	; (8002b4c <_sbrk+0x64>)
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4413      	add	r3, r2
 8002b36:	4a05      	ldr	r2, [pc, #20]	; (8002b4c <_sbrk+0x64>)
 8002b38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3718      	adds	r7, #24
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	20020000 	.word	0x20020000
 8002b48:	00000400 	.word	0x00000400
 8002b4c:	200096e8 	.word	0x200096e8
 8002b50:	2000b200 	.word	0x2000b200

08002b54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b58:	4b06      	ldr	r3, [pc, #24]	; (8002b74 <SystemInit+0x20>)
 8002b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b5e:	4a05      	ldr	r2, [pc, #20]	; (8002b74 <SystemInit+0x20>)
 8002b60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b68:	bf00      	nop
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	e000ed00 	.word	0xe000ed00

08002b78 <read_u8>:

//#define DEBUG_COMM 1
//#define DEBUG_VERBOSE 1


static inline uint8_t read_u8(uint8_t **data) {
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
	uint8_t val = **data;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	73fb      	strb	r3, [r7, #15]
	(*data)++;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	1c5a      	adds	r2, r3, #1
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	601a      	str	r2, [r3, #0]
	return val;
 8002b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3714      	adds	r7, #20
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <read_u16>:

static inline uint16_t read_u16(uint8_t **data) {
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
	uint8_t hi = read_u8(data);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f7ff ffe5 	bl	8002b78 <read_u8>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	73fb      	strb	r3, [r7, #15]
	uint8_t lo = read_u8(data);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f7ff ffe0 	bl	8002b78 <read_u8>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	73bb      	strb	r3, [r7, #14]
	return (uint16_t) lo | ((uint16_t) hi << 8);
 8002bbc:	7bbb      	ldrb	r3, [r7, #14]
 8002bbe:	b21a      	sxth	r2, r3
 8002bc0:	7bfb      	ldrb	r3, [r7, #15]
 8002bc2:	021b      	lsls	r3, r3, #8
 8002bc4:	b21b      	sxth	r3, r3
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	b21b      	sxth	r3, r3
 8002bca:	b29b      	uxth	r3, r3
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3710      	adds	r7, #16
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <read_u32>:

static inline uint32_t read_u32(uint8_t **data) {
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
	uint16_t hi = read_u16(data);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f7ff ffdf 	bl	8002ba0 <read_u16>
 8002be2:	4603      	mov	r3, r0
 8002be4:	81fb      	strh	r3, [r7, #14]
	uint16_t lo = read_u16(data);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f7ff ffda 	bl	8002ba0 <read_u16>
 8002bec:	4603      	mov	r3, r0
 8002bee:	81bb      	strh	r3, [r7, #12]
	return (uint32_t) lo | ((uint32_t) hi << 16);
 8002bf0:	89ba      	ldrh	r2, [r7, #12]
 8002bf2:	89fb      	ldrh	r3, [r7, #14]
 8002bf4:	041b      	lsls	r3, r3, #16
 8002bf6:	4313      	orrs	r3, r2
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3710      	adds	r7, #16
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <read_f16>:

static inline float read_f16(uint8_t **data, uint16_t scale) {
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	460b      	mov	r3, r1
 8002c0a:	807b      	strh	r3, [r7, #2]
	uint16_t uval = read_u16(data);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f7ff ffc7 	bl	8002ba0 <read_u16>
 8002c12:	4603      	mov	r3, r0
 8002c14:	81fb      	strh	r3, [r7, #14]
	int16_t val = uval < INT16_MAX ? uval : (int16_t) (uval - INT16_MAX) - INT16_MAX;
 8002c16:	89fb      	ldrh	r3, [r7, #14]
 8002c18:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d904      	bls.n	8002c2a <read_f16+0x2a>
 8002c20:	89fb      	ldrh	r3, [r7, #14]
 8002c22:	3302      	adds	r3, #2
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	b21b      	sxth	r3, r3
 8002c28:	e001      	b.n	8002c2e <read_f16+0x2e>
 8002c2a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c2e:	81bb      	strh	r3, [r7, #12]

	return (float) val / (float) scale;
 8002c30:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002c34:	ee07 3a90 	vmov	s15, r3
 8002c38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c3c:	887b      	ldrh	r3, [r7, #2]
 8002c3e:	ee07 3a90 	vmov	s15, r3
 8002c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c46:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002c4a:	eef0 7a66 	vmov.f32	s15, s13
}
 8002c4e:	eeb0 0a67 	vmov.f32	s0, s15
 8002c52:	3710      	adds	r7, #16
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <read_f32>:

static inline float read_f32(uint8_t **data, uint32_t scale) {
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
	uint32_t uval = read_u32(data);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f7ff ffb6 	bl	8002bd4 <read_u32>
 8002c68:	60f8      	str	r0, [r7, #12]
	int32_t val = uval < INT32_MAX ? uval : (int32_t) (uval - INT32_MAX) - INT32_MAX;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d302      	bcc.n	8002c7a <read_f32+0x22>
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	3302      	adds	r3, #2
 8002c78:	e000      	b.n	8002c7c <read_f32+0x24>
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	60bb      	str	r3, [r7, #8]

	return (float) val / (float) scale;
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	ee07 3a90 	vmov	s15, r3
 8002c84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	ee07 3a90 	vmov	s15, r3
 8002c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c92:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002c96:	eef0 7a66 	vmov.f32	s15, s13
}
 8002c9a:	eeb0 0a67 	vmov.f32	s0, s15
 8002c9e:	3710      	adds	r7, #16
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <vesc_init>:


void vesc_init(VESC *vesc, uint8_t vesc_id, UART_HandleTypeDef *vesc_uart, IRQn_Type uart_irq, Queue *q) {
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	607a      	str	r2, [r7, #4]
 8002cae:	461a      	mov	r2, r3
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	72fb      	strb	r3, [r7, #11]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	72bb      	strb	r3, [r7, #10]
	vesc->vesc_id = vesc_id;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	7afa      	ldrb	r2, [r7, #11]
 8002cbc:	701a      	strb	r2, [r3, #0]
	vesc->vesc_uart = vesc_uart;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	f8c3 248c 	str.w	r2, [r3, #1164]	; 0x48c
	vesc->uart_irq = uart_irq;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	7aba      	ldrb	r2, [r7, #10]
 8002cca:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490

	vesc->tx_waiting = 0;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
	vesc->rx_queued = false;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 2884 	strb.w	r2, [r3, #2180]	; 0x884

	vesc->q = q;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494

	vesc_start_recv(vesc);
 8002ce6:	68f8      	ldr	r0, [r7, #12]
 8002ce8:	f000 f813 	bl	8002d12 <vesc_start_recv>
}
 8002cec:	bf00      	nop
 8002cee:	3710      	adds	r7, #16
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <vesc_uart_cb_txcplt>:

void vesc_uart_cb_txcplt(VESC *vesc, UART_HandleTypeDef *huart) {
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
#ifdef DEBUG_VERBOSE
	char *msg = "[TX DONE]\r\n";
	CDC_Transmit_FS((uint8_t *) msg, strlen(msg));
#endif

	vesc->tx_waiting = false;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
}
 8002d06:	bf00      	nop
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr

08002d12 <vesc_start_recv>:

void vesc_start_recv(VESC *vesc) {
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b082      	sub	sp, #8
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(vesc->vesc_uart, vesc->rx_buf, UART_RXSZ);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f8d3 048c 	ldr.w	r0, [r3, #1164]	; 0x48c
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f203 4309 	addw	r3, r3, #1033	; 0x409
 8002d26:	2280      	movs	r2, #128	; 0x80
 8002d28:	4619      	mov	r1, r3
 8002d2a:	f005 fa21 	bl	8008170 <HAL_UART_Receive_IT>
}
 8002d2e:	bf00      	nop
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <vesc_uart_cb_rxcplt>:

void vesc_uart_cb_rxcplt(VESC *vesc, UART_HandleTypeDef *_huart) {
 8002d36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d38:	b093      	sub	sp, #76	; 0x4c
 8002d3a:	af06      	add	r7, sp, #24
 8002d3c:	6078      	str	r0, [r7, #4]
 8002d3e:	6039      	str	r1, [r7, #0]
	if (vesc->rx_offset + UART_RXSZ < RX_DATA_LEN) {
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
 8002d46:	3380      	adds	r3, #128	; 0x80
 8002d48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d4c:	d220      	bcs.n	8002d90 <vesc_uart_cb_rxcplt+0x5a>
		// TODO: handle if we are out of bounds?
		// memcpy(VESC.rx_data + VESC.rx_offset, VESC.rx_buf, UART_RXSZ);
		for (int i = 0; i < UART_RXSZ; i++) {
 8002d4e:	2300      	movs	r3, #0
 8002d50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d52:	e012      	b.n	8002d7a <vesc_uart_cb_rxcplt+0x44>
			vesc->rx_data[vesc->rx_offset + i] = vesc->rx_buf[i];
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f8d3 2880 	ldr.w	r2, [r3, #2176]	; 0x880
 8002d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d5c:	4413      	add	r3, r2
 8002d5e:	6879      	ldr	r1, [r7, #4]
 8002d60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d62:	440a      	add	r2, r1
 8002d64:	f202 4209 	addw	r2, r2, #1033	; 0x409
 8002d68:	7811      	ldrb	r1, [r2, #0]
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	460a      	mov	r2, r1
 8002d70:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498
		for (int i = 0; i < UART_RXSZ; i++) {
 8002d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d76:	3301      	adds	r3, #1
 8002d78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d7c:	2b7f      	cmp	r3, #127	; 0x7f
 8002d7e:	dde9      	ble.n	8002d54 <vesc_uart_cb_rxcplt+0x1e>
		}
		vesc->rx_offset += UART_RXSZ;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
 8002d86:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f8c3 2880 	str.w	r2, [r3, #2176]	; 0x880
	}

	if (!vesc->rx_queued) {
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f893 3884 	ldrb.w	r3, [r3, #2180]	; 0x884
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	f083 0301 	eor.w	r3, r3, #1
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d01c      	beq.n	8002ddc <vesc_uart_cb_rxcplt+0xa6>
		queue_put(vesc->q, (Message) { .ty = MSG_VESC_UART_GOT_DATA });
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f8d3 6494 	ldr.w	r6, [r3, #1172]	; 0x494
 8002da8:	f107 030c 	add.w	r3, r7, #12
 8002dac:	2220      	movs	r2, #32
 8002dae:	2100      	movs	r1, #0
 8002db0:	4618      	mov	r0, r3
 8002db2:	f009 fe57 	bl	800ca64 <memset>
 8002db6:	2306      	movs	r3, #6
 8002db8:	733b      	strb	r3, [r7, #12]
 8002dba:	466d      	mov	r5, sp
 8002dbc:	f107 0418 	add.w	r4, r7, #24
 8002dc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dc4:	6823      	ldr	r3, [r4, #0]
 8002dc6:	602b      	str	r3, [r5, #0]
 8002dc8:	f107 030c 	add.w	r3, r7, #12
 8002dcc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002dce:	4630      	mov	r0, r6
 8002dd0:	f7ff fba9 	bl	8002526 <queue_put>
		vesc->rx_queued = true;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 2884 	strb.w	r2, [r3, #2180]	; 0x884
	}

	vesc_start_recv(vesc);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f7ff ff98 	bl	8002d12 <vesc_start_recv>
}
 8002de2:	bf00      	nop
 8002de4:	3734      	adds	r7, #52	; 0x34
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002dea <vesc_got_data>:

void vesc_got_data(VESC *vesc) {
 8002dea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dec:	b099      	sub	sp, #100	; 0x64
 8002dee:	af06      	add	r7, sp, #24
 8002df0:	6078      	str	r0, [r7, #4]
	vesc->rx_queued = false;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 2884 	strb.w	r2, [r3, #2180]	; 0x884

	if (vesc->rx_offset == 0) {
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f000 80f6 	beq.w	8002ff2 <vesc_got_data+0x208>

	CDC_Transmit_FS((uint8_t *) dbgbuf, dbglen);
#endif

	// parse message
	size_t offset = 0;
 8002e06:	2300      	movs	r3, #0
 8002e08:	647b      	str	r3, [r7, #68]	; 0x44
	while (offset < vesc->rx_offset) {
 8002e0a:	e0c4      	b.n	8002f96 <vesc_got_data+0x1ac>
		if (vesc->rx_data[offset] != 2) {
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e10:	4413      	add	r3, r2
 8002e12:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d003      	beq.n	8002e26 <vesc_got_data+0x3c>
				offset, vesc->rx_offset
			);

			CDC_Transmit_FS((uint8_t *) dbgbuf, dbglen);
#endif
			offset++;
 8002e1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e20:	3301      	adds	r3, #1
 8002e22:	647b      	str	r3, [r7, #68]	; 0x44
			continue;
 8002e24:	e0b7      	b.n	8002f96 <vesc_got_data+0x1ac>
		}

		uint8_t msg_size = vesc->rx_data[offset + 1];
 8002e26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e28:	3301      	adds	r3, #1
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	4413      	add	r3, r2
 8002e2e:	f893 3498 	ldrb.w	r3, [r3, #1176]	; 0x498
 8002e32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		if (offset + msg_size + 5 > vesc->rx_offset) {
 8002e36:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8002e3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e3c:	4413      	add	r3, r2
 8002e3e:	1d5a      	adds	r2, r3, #5
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
 8002e46:	429a      	cmp	r2, r3
 8002e48:	f200 80ad 	bhi.w	8002fa6 <vesc_got_data+0x1bc>
#endif

			break;
		}

		if (vesc->rx_data[offset + msg_size + 4] != 0x3) {
 8002e4c:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8002e50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e52:	4413      	add	r3, r2
 8002e54:	3304      	adds	r3, #4
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	4413      	add	r3, r2
 8002e5a:	f893 3498 	ldrb.w	r3, [r3, #1176]	; 0x498
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	2b03      	cmp	r3, #3
 8002e62:	d003      	beq.n	8002e6c <vesc_got_data+0x82>

			CDC_Transmit_FS((uint8_t *) dbgbuf, dbglen);
#endif


			offset++;
 8002e64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e66:	3301      	adds	r3, #1
 8002e68:	647b      	str	r3, [r7, #68]	; 0x44
			continue;
 8002e6a:	e094      	b.n	8002f96 <vesc_got_data+0x1ac>
		);

		CDC_Transmit_FS((uint8_t *) dbgbuf, dbglen);
#endif

		uint8_t *packet = &vesc->rx_data[offset + 2];
 8002e6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e6e:	3302      	adds	r3, #2
 8002e70:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	4413      	add	r3, r2
 8002e78:	63fb      	str	r3, [r7, #60]	; 0x3c

		uint8_t msg_type = packet[0];
 8002e7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		switch (msg_type) {
 8002e82:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002e86:	2b04      	cmp	r3, #4
 8002e88:	d17e      	bne.n	8002f88 <vesc_got_data+0x19e>
		case COMM_GET_VALUES: {
			uint8_t *pkt_ptr = &packet[1];
 8002e8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	62bb      	str	r3, [r7, #40]	; 0x28

			float temp_mos = read_f16(&pkt_ptr, 1e1);
 8002e90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e94:	210a      	movs	r1, #10
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7ff feb2 	bl	8002c00 <read_f16>
 8002e9c:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
			/*float temp_motor = */read_f16(&pkt_ptr, 1e1);
 8002ea0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ea4:	210a      	movs	r1, #10
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7ff feaa 	bl	8002c00 <read_f16>
			float current_motor = read_f32(&pkt_ptr, 1e2);
 8002eac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002eb0:	2164      	movs	r1, #100	; 0x64
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7ff fed0 	bl	8002c58 <read_f32>
 8002eb8:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
			/*float current_in = */read_f32(&pkt_ptr, 1e2);
 8002ebc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ec0:	2164      	movs	r1, #100	; 0x64
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7ff fec8 	bl	8002c58 <read_f32>
			/*float id = */read_f32(&pkt_ptr, 1e2);
 8002ec8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ecc:	2164      	movs	r1, #100	; 0x64
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7ff fec2 	bl	8002c58 <read_f32>
			/*float iq = */read_f32(&pkt_ptr, 1e2);
 8002ed4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ed8:	2164      	movs	r1, #100	; 0x64
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7ff febc 	bl	8002c58 <read_f32>
			/*float duty_now = */read_f16(&pkt_ptr, 1e3);
 8002ee0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ee4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7ff fe89 	bl	8002c00 <read_f16>
			float rpm = read_f32(&pkt_ptr, 1e0);
 8002eee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ef2:	2101      	movs	r1, #1
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff feaf 	bl	8002c58 <read_f32>
 8002efa:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
			/*float v_in = */read_f16(&pkt_ptr, 1e1);
 8002efe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f02:	210a      	movs	r1, #10
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7ff fe7b 	bl	8002c00 <read_f16>
			/*float amp_hours = */read_f32(&pkt_ptr, 1e4);
 8002f0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f0e:	f242 7110 	movw	r1, #10000	; 0x2710
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7ff fea0 	bl	8002c58 <read_f32>
			/*float amp_hours_charged = */read_f32(&pkt_ptr, 1e4);
 8002f18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f1c:	f242 7110 	movw	r1, #10000	; 0x2710
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7ff fe99 	bl	8002c58 <read_f32>
			/*float watt_hours = */read_f32(&pkt_ptr, 1e4);
 8002f26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f2a:	f242 7110 	movw	r1, #10000	; 0x2710
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7ff fe92 	bl	8002c58 <read_f32>
			/*float watt_hours_charged = */read_f32(&pkt_ptr, 1e4);
 8002f34:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f38:	f242 7110 	movw	r1, #10000	; 0x2710
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7ff fe8b 	bl	8002c58 <read_f32>

			Message msg = (Message) {
 8002f42:	f107 0308 	add.w	r3, r7, #8
 8002f46:	2220      	movs	r2, #32
 8002f48:	2100      	movs	r1, #0
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f009 fd8a 	bl	800ca64 <memset>
 8002f50:	2308      	movs	r3, #8
 8002f52:	723b      	strb	r3, [r7, #8]
				.ty = MSG_GOT_ESC_DATA,
				.esc_data = {
					.vesc_id = vesc->vesc_id,
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	781b      	ldrb	r3, [r3, #0]
			Message msg = (Message) {
 8002f58:	733b      	strb	r3, [r7, #12]
 8002f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f5c:	613b      	str	r3, [r7, #16]
 8002f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f60:	617b      	str	r3, [r7, #20]
 8002f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f64:	61bb      	str	r3, [r7, #24]
					.erpm = rpm,
					.current_motor = current_motor
				}
			};

			queue_put(vesc->q, msg);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f8d3 6494 	ldr.w	r6, [r3, #1172]	; 0x494
 8002f6c:	466d      	mov	r5, sp
 8002f6e:	f107 0414 	add.w	r4, r7, #20
 8002f72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f76:	6823      	ldr	r3, [r4, #0]
 8002f78:	602b      	str	r3, [r5, #0]
 8002f7a:	f107 0308 	add.w	r3, r7, #8
 8002f7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f80:	4630      	mov	r0, r6
 8002f82:	f7ff fad0 	bl	8002526 <queue_put>
			);

			CDC_Transmit_FS((uint8_t *) dbgbuf, dbglen);
#endif

			break;
 8002f86:	e000      	b.n	8002f8a <vesc_got_data+0x1a0>
		}
		default: {
			break;
 8002f88:	bf00      	nop
#endif
			break;
		}
		}

		offset += 5 + msg_size;
 8002f8a:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8002f8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f90:	4413      	add	r3, r2
 8002f92:	3305      	adds	r3, #5
 8002f94:	647b      	str	r3, [r7, #68]	; 0x44
	while (offset < vesc->rx_offset) {
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
 8002f9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	f4ff af34 	bcc.w	8002e0c <vesc_got_data+0x22>
 8002fa4:	e000      	b.n	8002fa8 <vesc_got_data+0x1be>
			break;
 8002fa6:	bf00      	nop
	}

	HAL_NVIC_DisableIRQ(vesc->uart_irq);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f993 3490 	ldrsb.w	r3, [r3, #1168]	; 0x490
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f001 fb77 	bl	80046a2 <HAL_NVIC_DisableIRQ>

	// Go back
	memmove((void*) vesc->rx_data, (void*) &vesc->rx_data[offset], vesc->rx_offset - offset);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f503 6093 	add.w	r0, r3, #1176	; 0x498
 8002fba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fbc:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	18d1      	adds	r1, r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f8d3 2880 	ldr.w	r2, [r3, #2176]	; 0x880
 8002fca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	461a      	mov	r2, r3
 8002fd0:	f009 fd2e 	bl	800ca30 <memmove>
	vesc->rx_offset = vesc->rx_offset - offset;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f8d3 2880 	ldr.w	r2, [r3, #2176]	; 0x880
 8002fda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fdc:	1ad2      	subs	r2, r2, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f8c3 2880 	str.w	r2, [r3, #2176]	; 0x880

	HAL_NVIC_EnableIRQ(vesc->uart_irq);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f993 3490 	ldrsb.w	r3, [r3, #1168]	; 0x490
 8002fea:	4618      	mov	r0, r3
 8002fec:	f001 fb4b 	bl	8004686 <HAL_NVIC_EnableIRQ>
 8002ff0:	e000      	b.n	8002ff4 <vesc_got_data+0x20a>
		return;
 8002ff2:	bf00      	nop
		"<RX DONE>\r\n"
	);

	CDC_Transmit_FS((uint8_t *) dbgbuf, dbglen);
#endif
}
 8002ff4:	374c      	adds	r7, #76	; 0x4c
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002ffc <vesc_queue_packet>:

// If response_size == 0, then we don't expected a response.
void vesc_queue_packet(VESC *vesc, uint8_t *content, size_t len, size_t response_size) {
 8002ffc:	b480      	push	{r7}
 8002ffe:	b087      	sub	sp, #28
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	607a      	str	r2, [r7, #4]
 8003008:	603b      	str	r3, [r7, #0]
	if (len > 256) {
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003010:	d86e      	bhi.n	80030f0 <vesc_queue_packet+0xf4>
		// TODO: Not yet implemented
		return;
	}

	vesc->tx_data[vesc->current_offset++] = 0x2; // short (<256 bytes) packet
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003018:	1c59      	adds	r1, r3, #1
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	4413      	add	r3, r2
 8003024:	2202      	movs	r2, #2
 8003026:	705a      	strb	r2, [r3, #1]
	vesc->tx_data[vesc->current_offset++] = (uint8_t) (len & 0xff);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800302e:	1c59      	adds	r1, r3, #1
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	b2d1      	uxtb	r1, r2
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	4413      	add	r3, r2
 800303e:	460a      	mov	r2, r1
 8003040:	705a      	strb	r2, [r3, #1]

	uint16_t crc16 = 0;
 8003042:	2300      	movs	r3, #0
 8003044:	82fb      	strh	r3, [r7, #22]
	for (size_t i = 0; i < len; i++) {
 8003046:	2300      	movs	r3, #0
 8003048:	613b      	str	r3, [r7, #16]
 800304a:	e025      	b.n	8003098 <vesc_queue_packet+0x9c>
		vesc->tx_data[vesc->current_offset++] = content[i];
 800304c:	68ba      	ldr	r2, [r7, #8]
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	441a      	add	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003058:	1c58      	adds	r0, r3, #1
 800305a:	68f9      	ldr	r1, [r7, #12]
 800305c:	f8c1 0404 	str.w	r0, [r1, #1028]	; 0x404
 8003060:	7811      	ldrb	r1, [r2, #0]
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	4413      	add	r3, r2
 8003066:	460a      	mov	r2, r1
 8003068:	705a      	strb	r2, [r3, #1]
		crc16 = (crc16 << 8) ^ crc16_tab[0xff & ((crc16 >> 8) ^ content[i])];
 800306a:	8afb      	ldrh	r3, [r7, #22]
 800306c:	021b      	lsls	r3, r3, #8
 800306e:	b21a      	sxth	r2, r3
 8003070:	8afb      	ldrh	r3, [r7, #22]
 8003072:	0a1b      	lsrs	r3, r3, #8
 8003074:	b29b      	uxth	r3, r3
 8003076:	4618      	mov	r0, r3
 8003078:	68b9      	ldr	r1, [r7, #8]
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	440b      	add	r3, r1
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	4043      	eors	r3, r0
 8003082:	b2db      	uxtb	r3, r3
 8003084:	491d      	ldr	r1, [pc, #116]	; (80030fc <vesc_queue_packet+0x100>)
 8003086:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800308a:	b21b      	sxth	r3, r3
 800308c:	4053      	eors	r3, r2
 800308e:	b21b      	sxth	r3, r3
 8003090:	82fb      	strh	r3, [r7, #22]
	for (size_t i = 0; i < len; i++) {
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	3301      	adds	r3, #1
 8003096:	613b      	str	r3, [r7, #16]
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	429a      	cmp	r2, r3
 800309e:	d3d5      	bcc.n	800304c <vesc_queue_packet+0x50>
	}
	vesc->tx_data[vesc->current_offset++] = (uint8_t) ((crc16 >> 8) & 0xff);
 80030a0:	8afb      	ldrh	r3, [r7, #22]
 80030a2:	0a1b      	lsrs	r3, r3, #8
 80030a4:	b298      	uxth	r0, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80030ac:	1c59      	adds	r1, r3, #1
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
 80030b4:	b2c1      	uxtb	r1, r0
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	4413      	add	r3, r2
 80030ba:	460a      	mov	r2, r1
 80030bc:	705a      	strb	r2, [r3, #1]
	vesc->tx_data[vesc->current_offset++] = (uint8_t) (crc16 & 0xff);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80030c4:	1c59      	adds	r1, r3, #1
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
 80030cc:	8afa      	ldrh	r2, [r7, #22]
 80030ce:	b2d1      	uxtb	r1, r2
 80030d0:	68fa      	ldr	r2, [r7, #12]
 80030d2:	4413      	add	r3, r2
 80030d4:	460a      	mov	r2, r1
 80030d6:	705a      	strb	r2, [r3, #1]
	vesc->tx_data[vesc->current_offset++] = 0x3;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80030de:	1c59      	adds	r1, r3, #1
 80030e0:	68fa      	ldr	r2, [r7, #12]
 80030e2:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	4413      	add	r3, r2
 80030ea:	2203      	movs	r2, #3
 80030ec:	705a      	strb	r2, [r3, #1]
 80030ee:	e000      	b.n	80030f2 <vesc_queue_packet+0xf6>
		return;
 80030f0:	bf00      	nop

}
 80030f2:	371c      	adds	r7, #28
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr
 80030fc:	08010d5c 	.word	0x08010d5c

08003100 <vesc_transmit_and_recv>:

void vesc_transmit_and_recv(VESC *vesc) {
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
	if (vesc->current_offset == 0) {
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800310e:	2b00      	cmp	r3, #0
 8003110:	d03c      	beq.n	800318c <vesc_transmit_and_recv+0x8c>
		return;
	}
	if (vesc->tx_waiting) {
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	d01e      	beq.n	800315c <vesc_transmit_and_recv+0x5c>

		char *msg = "BLOCK_TX_WAITING\r\n";
 800311e:	4b1d      	ldr	r3, [pc, #116]	; (8003194 <vesc_transmit_and_recv+0x94>)
 8003120:	60fb      	str	r3, [r7, #12]
		CDC_Transmit_FS((uint8_t*) msg, strlen(msg));
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	f7fd f854 	bl	80001d0 <strlen>
 8003128:	4603      	mov	r3, r0
 800312a:	b29b      	uxth	r3, r3
 800312c:	4619      	mov	r1, r3
 800312e:	68f8      	ldr	r0, [r7, #12]
 8003130:	f008 fff8 	bl	800c124 <CDC_Transmit_FS>

		HAL_GPIO_WritePin(LDERROR_GPIO_Port, LDERROR_Pin, GPIO_PIN_SET);
 8003134:	2201      	movs	r2, #1
 8003136:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800313a:	4817      	ldr	r0, [pc, #92]	; (8003198 <vesc_transmit_and_recv+0x98>)
 800313c:	f001 fd12 	bl	8004b64 <HAL_GPIO_WritePin>

		while (vesc->tx_waiting) {
 8003140:	e000      	b.n	8003144 <vesc_transmit_and_recv+0x44>
			__asm("nop");
 8003142:	bf00      	nop
		while (vesc->tx_waiting) {
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 800314a:	b2db      	uxtb	r3, r3
 800314c:	2b00      	cmp	r3, #0
 800314e:	d1f8      	bne.n	8003142 <vesc_transmit_and_recv+0x42>
		}
		HAL_GPIO_WritePin(LDERROR_GPIO_Port, LDERROR_Pin, GPIO_PIN_RESET);
 8003150:	2200      	movs	r2, #0
 8003152:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003156:	4810      	ldr	r0, [pc, #64]	; (8003198 <vesc_transmit_and_recv+0x98>)
 8003158:	f001 fd04 	bl	8004b64 <HAL_GPIO_WritePin>
		vesc->current_offset
	);
	CDC_Transmit_FS((uint8_t *) dbgbuf, dbglen);
#endif

	vesc->tx_waiting = true;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
	HAL_UART_Transmit_IT(vesc->vesc_uart, vesc->tx_data, vesc->current_offset);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f8d3 048c 	ldr.w	r0, [r3, #1164]	; 0x48c
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	1c59      	adds	r1, r3, #1
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003174:	b29b      	uxth	r3, r3
 8003176:	461a      	mov	r2, r3
 8003178:	f004 ffb5 	bl	80080e6 <HAL_UART_Transmit_IT>
	vesc->current_offset = 0;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

	vesc_start_recv(vesc);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f7ff fdc4 	bl	8002d12 <vesc_start_recv>
 800318a:	e000      	b.n	800318e <vesc_transmit_and_recv+0x8e>
		return;
 800318c:	bf00      	nop
}
 800318e:	3710      	adds	r7, #16
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}
 8003194:	08010cbc 	.word	0x08010cbc
 8003198:	40020800 	.word	0x40020800

0800319c <vesc_set_current>:

void vesc_set_current(VESC *vesc, float current) {
 800319c:	b580      	push	{r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	ed87 0a00 	vstr	s0, [r7]
	if (!dead_mans_switch_activated()) {
 80031a8:	f7fe f830 	bl	800120c <dead_mans_switch_activated>
 80031ac:	4603      	mov	r3, r0
 80031ae:	f083 0301 	eor.w	r3, r3, #1
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d002      	beq.n	80031be <vesc_set_current+0x22>
		current = 0.0;
 80031b8:	f04f 0300 	mov.w	r3, #0
 80031bc:	603b      	str	r3, [r7, #0]
	}

	uint8_t buf[5];
	buf[0] = COMM_SET_CURRENT;
 80031be:	2306      	movs	r3, #6
 80031c0:	733b      	strb	r3, [r7, #12]
	int32_t current_i = (int32_t) (current * 1000.0);
 80031c2:	6838      	ldr	r0, [r7, #0]
 80031c4:	f7fd f9c0 	bl	8000548 <__aeabi_f2d>
 80031c8:	f04f 0200 	mov.w	r2, #0
 80031cc:	4b12      	ldr	r3, [pc, #72]	; (8003218 <vesc_set_current+0x7c>)
 80031ce:	f7fd fa13 	bl	80005f8 <__aeabi_dmul>
 80031d2:	4602      	mov	r2, r0
 80031d4:	460b      	mov	r3, r1
 80031d6:	4610      	mov	r0, r2
 80031d8:	4619      	mov	r1, r3
 80031da:	f7fd fcbd 	bl	8000b58 <__aeabi_d2iz>
 80031de:	4603      	mov	r3, r0
 80031e0:	617b      	str	r3, [r7, #20]
	// copy to big endian
	buf[1] = (current_i >> 24) & 0xff;
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	0e1b      	lsrs	r3, r3, #24
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	737b      	strb	r3, [r7, #13]
	buf[2] = (current_i >> 16) & 0xff;
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	141b      	asrs	r3, r3, #16
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	73bb      	strb	r3, [r7, #14]
	buf[3] = (current_i >> 8) & 0xff;
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	121b      	asrs	r3, r3, #8
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	73fb      	strb	r3, [r7, #15]
	buf[4] = (current_i >> 0) & 0xff;
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	743b      	strb	r3, [r7, #16]
#ifdef DEBUG_COMM
	char *msg = "[QUEUE setting current]\r\n";
	CDC_Transmit_FS((uint8_t*) msg, strlen(msg));
#endif

	vesc_queue_packet(vesc, buf, 5, 0);
 8003200:	f107 010c 	add.w	r1, r7, #12
 8003204:	2300      	movs	r3, #0
 8003206:	2205      	movs	r2, #5
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f7ff fef7 	bl	8002ffc <vesc_queue_packet>
}
 800320e:	bf00      	nop
 8003210:	3718      	adds	r7, #24
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	408f4000 	.word	0x408f4000

0800321c <vesc_request_data>:

void vesc_request_data(VESC *vesc) {
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
	uint8_t buf[1];
	buf[0] = COMM_GET_VALUES;
 8003224:	2304      	movs	r3, #4
 8003226:	733b      	strb	r3, [r7, #12]
#ifdef DEBUG_COMM
	char *msg = "[QUEUE requesting data]\r\n";
	CDC_Transmit_FS((uint8_t*) msg, strlen(msg));
#endif

	vesc_queue_packet(vesc, buf, 1, 0x29);
 8003228:	f107 010c 	add.w	r1, r7, #12
 800322c:	2329      	movs	r3, #41	; 0x29
 800322e:	2201      	movs	r2, #1
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f7ff fee3 	bl	8002ffc <vesc_queue_packet>
}
 8003236:	bf00      	nop
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
	...

08003240 <vcr_step>:
 */


#include "vesc_current_reg.h"

float vcr_step(VESC_Current_Reg *vcr, float dt, float current_input) {
 8003240:	b480      	push	{r7}
 8003242:	b089      	sub	sp, #36	; 0x24
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	ed87 0a02 	vstr	s0, [r7, #8]
 800324c:	edc7 0a01 	vstr	s1, [r7, #4]
	float tau = 1 / (FILTER_FREQ * 6.28);
 8003250:	4b1e      	ldr	r3, [pc, #120]	; (80032cc <vcr_step+0x8c>)
 8003252:	61fb      	str	r3, [r7, #28]
	float alpha = dt / tau;
 8003254:	edd7 6a02 	vldr	s13, [r7, #8]
 8003258:	ed97 7a07 	vldr	s14, [r7, #28]
 800325c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003260:	edc7 7a06 	vstr	s15, [r7, #24]

	vcr->input_filtered = vcr->input_filtered * (1 - alpha) + alpha * current_input;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	ed93 7a02 	vldr	s14, [r3, #8]
 800326a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800326e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003272:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003276:	ee27 7a27 	vmul.f32	s14, s14, s15
 800327a:	edd7 6a06 	vldr	s13, [r7, #24]
 800327e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003282:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003286:	ee77 7a27 	vadd.f32	s15, s14, s15
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	edc3 7a02 	vstr	s15, [r3, #8]

	float error = vcr->setpoint - vcr->input_filtered;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	ed93 7a01 	vldr	s14, [r3, #4]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	edd3 7a02 	vldr	s15, [r3, #8]
 800329c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032a0:	edc7 7a05 	vstr	s15, [r7, #20]

	return vcr->setpoint + vcr->k_p * error;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	ed93 7a01 	vldr	s14, [r3, #4]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	edd3 6a00 	vldr	s13, [r3]
 80032b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80032b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032b8:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80032bc:	eeb0 0a67 	vmov.f32	s0, s15
 80032c0:	3724      	adds	r7, #36	; 0x24
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	3ea30ead 	.word	0x3ea30ead

080032d0 <kalman_filter_predict>:
#include <math.h>
#include "ctrl/common.h"


void kalman_filter_predict(float input, float dt, States *s, Matrix *q_t, Matrix *q_w, Covariances *covs)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b099      	sub	sp, #100	; 0x64
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	ed87 0a05 	vstr	s0, [r7, #20]
 80032da:	edc7 0a04 	vstr	s1, [r7, #16]
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
 80032e4:	603b      	str	r3, [r7, #0]
    float X11 = s->x1 + dt * s->x2;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	ed93 7a00 	vldr	s14, [r3]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	edd3 6a01 	vldr	s13, [r3, #4]
 80032f2:	edd7 7a04 	vldr	s15, [r7, #16]
 80032f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032fe:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    //float X21 = s->x2;
    float X31 = s->x3 + dt * s->x4;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	ed93 7a02 	vldr	s14, [r3, #8]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	edd3 6a03 	vldr	s13, [r3, #12]
 800330e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003312:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003316:	ee77 7a27 	vadd.f32	s15, s14, s15
 800331a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    //float X41 = s->x4; 

    //printf("Us: %0.10f %0.10f\n", U1, U2);
    s->x1 = X11;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003322:	601a      	str	r2, [r3, #0]
    //s->x2 = X21;
    s->x3 = X31;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003328:	609a      	str	r2, [r3, #8]
    //s->X4 = X41; 

    /* Dot product covariance and state transistion model*/
    //printf("Covs: %0.15f %0.15f %0.15f %0.15f\n", covs->pitch.m11, covs->pitch.m12, covs->pitch.m21, covs->pitch.m22);
    float c11 = covs->pitch.m11 + (dt * covs->pitch.m21);
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	ed93 7a00 	vldr	s14, [r3]
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	edd3 6a02 	vldr	s13, [r3, #8]
 8003336:	edd7 7a04 	vldr	s15, [r7, #16]
 800333a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800333e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003342:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    float c12 = covs->pitch.m12 + (dt * covs->pitch.m22);
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	ed93 7a01 	vldr	s14, [r3, #4]
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	edd3 6a03 	vldr	s13, [r3, #12]
 8003352:	edd7 7a04 	vldr	s15, [r7, #16]
 8003356:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800335a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800335e:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    float c21 = covs->pitch.m21;
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	64fb      	str	r3, [r7, #76]	; 0x4c
    float c22 = covs->pitch.m22;
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	64bb      	str	r3, [r7, #72]	; 0x48

    float c33 = covs->wheel.m11 + (dt * covs->wheel.m21);
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	ed93 7a08 	vldr	s14, [r3, #32]
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 800337a:	edd7 7a04 	vldr	s15, [r7, #16]
 800337e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003382:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003386:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    float c34 = covs->wheel.m12 + (dt * covs->wheel.m22);
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8003396:	edd7 7a04 	vldr	s15, [r7, #16]
 800339a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800339e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033a2:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    float c43 = covs->wheel.m21;
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    float c44 = covs->wheel.m22;
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b0:	63bb      	str	r3, [r7, #56]	; 0x38
    //printf("Cs: %0.15f %0.15f %0.15f %0.15f\n", c11, c12, c21, c22);
    /* c matrix transposed with state transistion model
    Fm11 Fm12    Fm11 Fm21
    Fm21 Fm22 => Fm12 Fm22
    */
    float p11 = c11 + c12 * dt;
 80033b2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80033b6:	edd7 7a04 	vldr	s15, [r7, #16]
 80033ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033be:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80033c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033c6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    float p12 = c12;
 80033ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033cc:	633b      	str	r3, [r7, #48]	; 0x30
    float p21 = c21 + c22;
 80033ce:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80033d2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80033d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033da:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    float p22 = c22;
 80033de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033e0:	62bb      	str	r3, [r7, #40]	; 0x28

    float p33 = c33 + c34 * dt;
 80033e2:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80033e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80033ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033ee:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80033f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033f6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float p34 = c34;
 80033fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033fc:	623b      	str	r3, [r7, #32]
    float p43 = c43 + c44 * dt;
 80033fe:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003402:	edd7 7a04 	vldr	s15, [r7, #16]
 8003406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800340a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800340e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003412:	edc7 7a07 	vstr	s15, [r7, #28]
    float p44 = c44;
 8003416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003418:	61bb      	str	r3, [r7, #24]

    //printf("Ps: %0.15f %0.15f %0.15f %0.15f \n", p11, p12, p21, p22);
 
    covs->pitch.m11 = p11 + q_t->m11;  
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	ed93 7a00 	vldr	s14, [r3]
 8003420:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003424:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	edc3 7a00 	vstr	s15, [r3]
    covs->pitch.m12 = p12 + q_t->m12;
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	ed93 7a01 	vldr	s14, [r3, #4]
 8003434:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003438:	ee77 7a27 	vadd.f32	s15, s14, s15
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	edc3 7a01 	vstr	s15, [r3, #4]
    covs->pitch.m21 = p21 + q_t->m21;
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	ed93 7a02 	vldr	s14, [r3, #8]
 8003448:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800344c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	edc3 7a02 	vstr	s15, [r3, #8]
    covs->pitch.m22 = p22 + q_t->m22;
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	ed93 7a03 	vldr	s14, [r3, #12]
 800345c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003460:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	edc3 7a03 	vstr	s15, [r3, #12]

    covs->wheel.m11 = p33 + q_w->m11;  
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	ed93 7a00 	vldr	s14, [r3]
 8003470:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003474:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	edc3 7a08 	vstr	s15, [r3, #32]
    covs->wheel.m12 = p34 + q_w->m12;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	ed93 7a01 	vldr	s14, [r3, #4]
 8003484:	edd7 7a08 	vldr	s15, [r7, #32]
 8003488:	ee77 7a27 	vadd.f32	s15, s14, s15
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    covs->wheel.m21 = p43 + q_w->m21;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	ed93 7a02 	vldr	s14, [r3, #8]
 8003498:	edd7 7a07 	vldr	s15, [r7, #28]
 800349c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    covs->wheel.m22 = p44 + q_w->m22;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	ed93 7a03 	vldr	s14, [r3, #12]
 80034ac:	edd7 7a06 	vldr	s15, [r7, #24]
 80034b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    //printf("Covs: %0.15f %0.15f %0.15f %0.15f\n", covs->pitch.m11, covs->pitch.m12, covs->pitch.m21, covs->pitch.m22);
}
 80034ba:	bf00      	nop
 80034bc:	3764      	adds	r7, #100	; 0x64
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
	...

080034c8 <kalman_filter_update>:



void kalman_filter_update(float sensor_t, float sensor_w, float dt, States *s, Matrix *q_t, Matrix *q_w, Covariances *covs, R_error *r_vals)
{   
 80034c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80034cc:	b098      	sub	sp, #96	; 0x60
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	ed87 0a07 	vstr	s0, [r7, #28]
 80034d4:	edc7 0a06 	vstr	s1, [r7, #24]
 80034d8:	ed87 1a05 	vstr	s2, [r7, #20]
 80034dc:	6138      	str	r0, [r7, #16]
 80034de:	60f9      	str	r1, [r7, #12]
 80034e0:	60ba      	str	r2, [r7, #8]
 80034e2:	607b      	str	r3, [r7, #4]
    //Sensor_t is top angluar velocity, senors_w is wheel velocity
    /* sensor is angular velocity */
    float diff_t = sensor_t - s->x2;
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	edd3 7a01 	vldr	s15, [r3, #4]
 80034ea:	ed97 7a07 	vldr	s14, [r7, #28]
 80034ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034f2:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    float diff_w = sensor_w - ((1/WHEEL_RAD)*RPM_TO_RADS*s->x4);
 80034f6:	69b8      	ldr	r0, [r7, #24]
 80034f8:	f7fd f826 	bl	8000548 <__aeabi_f2d>
 80034fc:	4604      	mov	r4, r0
 80034fe:	460d      	mov	r5, r1
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	4618      	mov	r0, r3
 8003506:	f7fd f81f 	bl	8000548 <__aeabi_f2d>
 800350a:	a3f6      	add	r3, pc, #984	; (adr r3, 80038e4 <kalman_filter_update+0x41c>)
 800350c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003510:	f7fd f872 	bl	80005f8 <__aeabi_dmul>
 8003514:	4602      	mov	r2, r0
 8003516:	460b      	mov	r3, r1
 8003518:	4620      	mov	r0, r4
 800351a:	4629      	mov	r1, r5
 800351c:	f7fc feb4 	bl	8000288 <__aeabi_dsub>
 8003520:	4602      	mov	r2, r0
 8003522:	460b      	mov	r3, r1
 8003524:	4610      	mov	r0, r2
 8003526:	4619      	mov	r1, r3
 8003528:	f7fd fb3e 	bl	8000ba8 <__aeabi_d2f>
 800352c:	4603      	mov	r3, r0
 800352e:	65bb      	str	r3, [r7, #88]	; 0x58

    //printf("Diff: %f\n", diff);

    /* Gain calculation */
    float gain1_t = covs->pitch.m12 * (1 / (covs->pitch.m22 + r_vals->pitch));
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	ed93 7a01 	vldr	s14, [r3, #4]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	edd3 6a03 	vldr	s13, [r3, #12]
 800353c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800353e:	edd3 7a00 	vldr	s15, [r3]
 8003542:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003546:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800354a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800354e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003552:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    float gain2_t = covs->pitch.m22 * (1 / (covs->pitch.m22 + r_vals->pitch));
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	ed93 7a03 	vldr	s14, [r3, #12]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	edd3 6a03 	vldr	s13, [r3, #12]
 8003562:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003564:	edd3 7a00 	vldr	s15, [r3]
 8003568:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800356c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8003570:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003574:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003578:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    float k = WHEEL_RAD * RPM_TO_RADS;
 800357c:	4bd8      	ldr	r3, [pc, #864]	; (80038e0 <kalman_filter_update+0x418>)
 800357e:	64fb      	str	r3, [r7, #76]	; 0x4c
    float gain1_w = (covs->wheel.m12 * k) / (covs->wheel.m22 * pow(k,2) + r_vals->wheel);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8003586:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800358a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800358e:	ee17 0a90 	vmov	r0, s15
 8003592:	f7fc ffd9 	bl	8000548 <__aeabi_f2d>
 8003596:	4604      	mov	r4, r0
 8003598:	460d      	mov	r5, r1
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359e:	4618      	mov	r0, r3
 80035a0:	f7fc ffd2 	bl	8000548 <__aeabi_f2d>
 80035a4:	4680      	mov	r8, r0
 80035a6:	4689      	mov	r9, r1
 80035a8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80035aa:	f7fc ffcd 	bl	8000548 <__aeabi_f2d>
 80035ae:	4602      	mov	r2, r0
 80035b0:	460b      	mov	r3, r1
 80035b2:	ed9f 1bc9 	vldr	d1, [pc, #804]	; 80038d8 <kalman_filter_update+0x410>
 80035b6:	ec43 2b10 	vmov	d0, r2, r3
 80035ba:	f00c f925 	bl	800f808 <pow>
 80035be:	ec53 2b10 	vmov	r2, r3, d0
 80035c2:	4640      	mov	r0, r8
 80035c4:	4649      	mov	r1, r9
 80035c6:	f7fd f817 	bl	80005f8 <__aeabi_dmul>
 80035ca:	4602      	mov	r2, r0
 80035cc:	460b      	mov	r3, r1
 80035ce:	4690      	mov	r8, r2
 80035d0:	4699      	mov	r9, r3
 80035d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7fc ffb6 	bl	8000548 <__aeabi_f2d>
 80035dc:	4602      	mov	r2, r0
 80035de:	460b      	mov	r3, r1
 80035e0:	4640      	mov	r0, r8
 80035e2:	4649      	mov	r1, r9
 80035e4:	f7fc fe52 	bl	800028c <__adddf3>
 80035e8:	4602      	mov	r2, r0
 80035ea:	460b      	mov	r3, r1
 80035ec:	4620      	mov	r0, r4
 80035ee:	4629      	mov	r1, r5
 80035f0:	f7fd f92c 	bl	800084c <__aeabi_ddiv>
 80035f4:	4602      	mov	r2, r0
 80035f6:	460b      	mov	r3, r1
 80035f8:	4610      	mov	r0, r2
 80035fa:	4619      	mov	r1, r3
 80035fc:	f7fd fad4 	bl	8000ba8 <__aeabi_d2f>
 8003600:	4603      	mov	r3, r0
 8003602:	64bb      	str	r3, [r7, #72]	; 0x48
    float gain2_w = (covs->wheel.m22 * k) / (covs->wheel.m22 * pow(k,2) + r_vals->wheel);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800360a:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800360e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003612:	ee17 0a90 	vmov	r0, s15
 8003616:	f7fc ff97 	bl	8000548 <__aeabi_f2d>
 800361a:	4604      	mov	r4, r0
 800361c:	460d      	mov	r5, r1
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003622:	4618      	mov	r0, r3
 8003624:	f7fc ff90 	bl	8000548 <__aeabi_f2d>
 8003628:	4680      	mov	r8, r0
 800362a:	4689      	mov	r9, r1
 800362c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800362e:	f7fc ff8b 	bl	8000548 <__aeabi_f2d>
 8003632:	4602      	mov	r2, r0
 8003634:	460b      	mov	r3, r1
 8003636:	ed9f 1ba8 	vldr	d1, [pc, #672]	; 80038d8 <kalman_filter_update+0x410>
 800363a:	ec43 2b10 	vmov	d0, r2, r3
 800363e:	f00c f8e3 	bl	800f808 <pow>
 8003642:	ec53 2b10 	vmov	r2, r3, d0
 8003646:	4640      	mov	r0, r8
 8003648:	4649      	mov	r1, r9
 800364a:	f7fc ffd5 	bl	80005f8 <__aeabi_dmul>
 800364e:	4602      	mov	r2, r0
 8003650:	460b      	mov	r3, r1
 8003652:	4690      	mov	r8, r2
 8003654:	4699      	mov	r9, r3
 8003656:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	4618      	mov	r0, r3
 800365c:	f7fc ff74 	bl	8000548 <__aeabi_f2d>
 8003660:	4602      	mov	r2, r0
 8003662:	460b      	mov	r3, r1
 8003664:	4640      	mov	r0, r8
 8003666:	4649      	mov	r1, r9
 8003668:	f7fc fe10 	bl	800028c <__adddf3>
 800366c:	4602      	mov	r2, r0
 800366e:	460b      	mov	r3, r1
 8003670:	4620      	mov	r0, r4
 8003672:	4629      	mov	r1, r5
 8003674:	f7fd f8ea 	bl	800084c <__aeabi_ddiv>
 8003678:	4602      	mov	r2, r0
 800367a:	460b      	mov	r3, r1
 800367c:	4610      	mov	r0, r2
 800367e:	4619      	mov	r1, r3
 8003680:	f7fd fa92 	bl	8000ba8 <__aeabi_d2f>
 8003684:	4603      	mov	r3, r0
 8003686:	647b      	str	r3, [r7, #68]	; 0x44


    //printf("Gain1: %f Gain2: %f\n", gain1, gain2);
    /* Update states */
    s->x1 = s->x1 + gain1_t * diff_t;
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	ed93 7a00 	vldr	s14, [r3]
 800368e:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8003692:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8003696:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800369a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	edc3 7a00 	vstr	s15, [r3]
    s->x2 = s->x2 + gain2_t * diff_t;
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	ed93 7a01 	vldr	s14, [r3, #4]
 80036aa:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80036ae:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80036b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	edc3 7a01 	vstr	s15, [r3, #4]
    s->x3 = s->x3 + gain1_w * diff_w;
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	ed93 7a02 	vldr	s14, [r3, #8]
 80036c6:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 80036ca:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80036ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	edc3 7a02 	vstr	s15, [r3, #8]
    s->x4 = s->x4 + gain2_w * diff_w;
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	ed93 7a03 	vldr	s14, [r3, #12]
 80036e2:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 80036e6:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80036ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	edc3 7a03 	vstr	s15, [r3, #12]

    //printf("New states: x1 = %f x2 = %f\n", s->x1, s->x2);

    /* Covariance update */
    //printf("Update covs: %0.15f %0.15f %0.15f %0.15f\n", covs->pitch.m11, covs->pitch.m12, covs->pitch.m21, covs->pitch.m22);
    float c11 = (-covs->pitch.m12*covs->pitch.m21 + covs->pitch.m11*(covs->pitch.m22+r_vals->pitch))/(covs->pitch.m22 + r_vals->pitch);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	edd3 7a01 	vldr	s15, [r3, #4]
 80036fe:	eeb1 7a67 	vneg.f32	s14, s15
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	edd3 7a02 	vldr	s15, [r3, #8]
 8003708:	ee27 7a27 	vmul.f32	s14, s14, s15
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	edd3 6a00 	vldr	s13, [r3]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	ed93 6a03 	vldr	s12, [r3, #12]
 8003718:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800371a:	edd3 7a00 	vldr	s15, [r3]
 800371e:	ee76 7a27 	vadd.f32	s15, s12, s15
 8003722:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003726:	ee77 6a27 	vadd.f32	s13, s14, s15
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	ed93 7a03 	vldr	s14, [r3, #12]
 8003730:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003732:	edd3 7a00 	vldr	s15, [r3]
 8003736:	ee37 7a27 	vadd.f32	s14, s14, s15
 800373a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800373e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    float c12 = (covs->pitch.m12*r_vals->pitch)/(covs->pitch.m22 + r_vals->pitch);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	ed93 7a01 	vldr	s14, [r3, #4]
 8003748:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800374a:	edd3 7a00 	vldr	s15, [r3]
 800374e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	ed93 7a03 	vldr	s14, [r3, #12]
 8003758:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800375a:	edd3 7a00 	vldr	s15, [r3]
 800375e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003762:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003766:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    float c21 = (covs->pitch.m21*r_vals->pitch)/(covs->pitch.m22 + r_vals->pitch);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	ed93 7a02 	vldr	s14, [r3, #8]
 8003770:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003772:	edd3 7a00 	vldr	s15, [r3]
 8003776:	ee67 6a27 	vmul.f32	s13, s14, s15
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	ed93 7a03 	vldr	s14, [r3, #12]
 8003780:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003782:	edd3 7a00 	vldr	s15, [r3]
 8003786:	ee37 7a27 	vadd.f32	s14, s14, s15
 800378a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800378e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    float c22 = (covs->pitch.m22*r_vals->pitch)/(covs->pitch.m22 + r_vals->pitch);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	ed93 7a03 	vldr	s14, [r3, #12]
 8003798:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800379a:	edd3 7a00 	vldr	s15, [r3]
 800379e:	ee67 6a27 	vmul.f32	s13, s14, s15
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	ed93 7a03 	vldr	s14, [r3, #12]
 80037a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037aa:	edd3 7a00 	vldr	s15, [r3]
 80037ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037b6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    covs->pitch.m11 = c11;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80037be:	601a      	str	r2, [r3, #0]
    covs->pitch.m12 = c12;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80037c4:	605a      	str	r2, [r3, #4]
    covs->pitch.m21 = c21;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037ca:	609a      	str	r2, [r3, #8]
    covs->pitch.m22 = c22;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037d0:	60da      	str	r2, [r3, #12]

    float c33 = covs->wheel.m11 + covs->wheel.m22 * pow(gain1_w,2) * pow(k,2) - covs->wheel.m12*gain1_w*k - covs->wheel.m21*gain1_w*k + pow(gain1_w,2)*r_vals->wheel;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a1b      	ldr	r3, [r3, #32]
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7fc feb6 	bl	8000548 <__aeabi_f2d>
 80037dc:	4604      	mov	r4, r0
 80037de:	460d      	mov	r5, r1
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7fc feaf 	bl	8000548 <__aeabi_f2d>
 80037ea:	4680      	mov	r8, r0
 80037ec:	4689      	mov	r9, r1
 80037ee:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80037f0:	f7fc feaa 	bl	8000548 <__aeabi_f2d>
 80037f4:	4602      	mov	r2, r0
 80037f6:	460b      	mov	r3, r1
 80037f8:	ed9f 1b37 	vldr	d1, [pc, #220]	; 80038d8 <kalman_filter_update+0x410>
 80037fc:	ec43 2b10 	vmov	d0, r2, r3
 8003800:	f00c f802 	bl	800f808 <pow>
 8003804:	ec53 2b10 	vmov	r2, r3, d0
 8003808:	4640      	mov	r0, r8
 800380a:	4649      	mov	r1, r9
 800380c:	f7fc fef4 	bl	80005f8 <__aeabi_dmul>
 8003810:	4602      	mov	r2, r0
 8003812:	460b      	mov	r3, r1
 8003814:	4690      	mov	r8, r2
 8003816:	4699      	mov	r9, r3
 8003818:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800381a:	f7fc fe95 	bl	8000548 <__aeabi_f2d>
 800381e:	4602      	mov	r2, r0
 8003820:	460b      	mov	r3, r1
 8003822:	ed9f 1b2d 	vldr	d1, [pc, #180]	; 80038d8 <kalman_filter_update+0x410>
 8003826:	ec43 2b10 	vmov	d0, r2, r3
 800382a:	f00b ffed 	bl	800f808 <pow>
 800382e:	ec53 2b10 	vmov	r2, r3, d0
 8003832:	4640      	mov	r0, r8
 8003834:	4649      	mov	r1, r9
 8003836:	f7fc fedf 	bl	80005f8 <__aeabi_dmul>
 800383a:	4602      	mov	r2, r0
 800383c:	460b      	mov	r3, r1
 800383e:	4620      	mov	r0, r4
 8003840:	4629      	mov	r1, r5
 8003842:	f7fc fd23 	bl	800028c <__adddf3>
 8003846:	4602      	mov	r2, r0
 8003848:	460b      	mov	r3, r1
 800384a:	4614      	mov	r4, r2
 800384c:	461d      	mov	r5, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8003854:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003858:	ee27 7a27 	vmul.f32	s14, s14, s15
 800385c:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003860:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003864:	ee17 0a90 	vmov	r0, s15
 8003868:	f7fc fe6e 	bl	8000548 <__aeabi_f2d>
 800386c:	4602      	mov	r2, r0
 800386e:	460b      	mov	r3, r1
 8003870:	4620      	mov	r0, r4
 8003872:	4629      	mov	r1, r5
 8003874:	f7fc fd08 	bl	8000288 <__aeabi_dsub>
 8003878:	4602      	mov	r2, r0
 800387a:	460b      	mov	r3, r1
 800387c:	4614      	mov	r4, r2
 800387e:	461d      	mov	r5, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8003886:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800388a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800388e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003896:	ee17 0a90 	vmov	r0, s15
 800389a:	f7fc fe55 	bl	8000548 <__aeabi_f2d>
 800389e:	4602      	mov	r2, r0
 80038a0:	460b      	mov	r3, r1
 80038a2:	4620      	mov	r0, r4
 80038a4:	4629      	mov	r1, r5
 80038a6:	f7fc fcef 	bl	8000288 <__aeabi_dsub>
 80038aa:	4602      	mov	r2, r0
 80038ac:	460b      	mov	r3, r1
 80038ae:	4614      	mov	r4, r2
 80038b0:	461d      	mov	r5, r3
 80038b2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80038b4:	f7fc fe48 	bl	8000548 <__aeabi_f2d>
 80038b8:	4602      	mov	r2, r0
 80038ba:	460b      	mov	r3, r1
 80038bc:	ed9f 1b06 	vldr	d1, [pc, #24]	; 80038d8 <kalman_filter_update+0x410>
 80038c0:	ec43 2b10 	vmov	d0, r2, r3
 80038c4:	f00b ffa0 	bl	800f808 <pow>
 80038c8:	ec59 8b10 	vmov	r8, r9, d0
 80038cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	4618      	mov	r0, r3
 80038d2:	e00f      	b.n	80038f4 <kalman_filter_update+0x42c>
 80038d4:	f3af 8000 	nop.w
 80038d8:	00000000 	.word	0x00000000
 80038dc:	40000000 	.word	0x40000000
 80038e0:	402b1f97 	.word	0x402b1f97
 80038e4:	899ce744 	.word	0x899ce744
 80038e8:	40410d64 	.word	0x40410d64
 80038ec:	00000000 	.word	0x00000000
 80038f0:	40000000 	.word	0x40000000
 80038f4:	f7fc fe28 	bl	8000548 <__aeabi_f2d>
 80038f8:	4602      	mov	r2, r0
 80038fa:	460b      	mov	r3, r1
 80038fc:	4640      	mov	r0, r8
 80038fe:	4649      	mov	r1, r9
 8003900:	f7fc fe7a 	bl	80005f8 <__aeabi_dmul>
 8003904:	4602      	mov	r2, r0
 8003906:	460b      	mov	r3, r1
 8003908:	4620      	mov	r0, r4
 800390a:	4629      	mov	r1, r5
 800390c:	f7fc fcbe 	bl	800028c <__adddf3>
 8003910:	4602      	mov	r2, r0
 8003912:	460b      	mov	r3, r1
 8003914:	4610      	mov	r0, r2
 8003916:	4619      	mov	r1, r3
 8003918:	f7fd f946 	bl	8000ba8 <__aeabi_d2f>
 800391c:	4603      	mov	r3, r0
 800391e:	633b      	str	r3, [r7, #48]	; 0x30
    float c34 = covs->wheel.m12 + covs->wheel.m22 *gain1_w*gain2_w * pow(k,2) - covs->wheel.m22*gain1_w*k - covs->wheel.m12*gain2_w*k + gain1_w*gain2_w*r_vals->wheel;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003924:	4618      	mov	r0, r3
 8003926:	f7fc fe0f 	bl	8000548 <__aeabi_f2d>
 800392a:	4604      	mov	r4, r0
 800392c:	460d      	mov	r5, r1
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8003934:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003938:	ee27 7a27 	vmul.f32	s14, s14, s15
 800393c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003940:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003944:	ee17 0a90 	vmov	r0, s15
 8003948:	f7fc fdfe 	bl	8000548 <__aeabi_f2d>
 800394c:	4680      	mov	r8, r0
 800394e:	4689      	mov	r9, r1
 8003950:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003952:	f7fc fdf9 	bl	8000548 <__aeabi_f2d>
 8003956:	4602      	mov	r2, r0
 8003958:	460b      	mov	r3, r1
 800395a:	ed1f 1b1c 	vldr	d1, [pc, #-112]	; 80038ec <kalman_filter_update+0x424>
 800395e:	ec43 2b10 	vmov	d0, r2, r3
 8003962:	f00b ff51 	bl	800f808 <pow>
 8003966:	ec53 2b10 	vmov	r2, r3, d0
 800396a:	4640      	mov	r0, r8
 800396c:	4649      	mov	r1, r9
 800396e:	f7fc fe43 	bl	80005f8 <__aeabi_dmul>
 8003972:	4602      	mov	r2, r0
 8003974:	460b      	mov	r3, r1
 8003976:	4620      	mov	r0, r4
 8003978:	4629      	mov	r1, r5
 800397a:	f7fc fc87 	bl	800028c <__adddf3>
 800397e:	4602      	mov	r2, r0
 8003980:	460b      	mov	r3, r1
 8003982:	4614      	mov	r4, r2
 8003984:	461d      	mov	r5, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800398c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003990:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003994:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003998:	ee67 7a27 	vmul.f32	s15, s14, s15
 800399c:	ee17 0a90 	vmov	r0, s15
 80039a0:	f7fc fdd2 	bl	8000548 <__aeabi_f2d>
 80039a4:	4602      	mov	r2, r0
 80039a6:	460b      	mov	r3, r1
 80039a8:	4620      	mov	r0, r4
 80039aa:	4629      	mov	r1, r5
 80039ac:	f7fc fc6c 	bl	8000288 <__aeabi_dsub>
 80039b0:	4602      	mov	r2, r0
 80039b2:	460b      	mov	r3, r1
 80039b4:	4614      	mov	r4, r2
 80039b6:	461d      	mov	r5, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80039be:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80039c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80039c6:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80039ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039ce:	ee17 0a90 	vmov	r0, s15
 80039d2:	f7fc fdb9 	bl	8000548 <__aeabi_f2d>
 80039d6:	4602      	mov	r2, r0
 80039d8:	460b      	mov	r3, r1
 80039da:	4620      	mov	r0, r4
 80039dc:	4629      	mov	r1, r5
 80039de:	f7fc fc53 	bl	8000288 <__aeabi_dsub>
 80039e2:	4602      	mov	r2, r0
 80039e4:	460b      	mov	r3, r1
 80039e6:	4614      	mov	r4, r2
 80039e8:	461d      	mov	r5, r3
 80039ea:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80039ee:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80039f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80039f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039f8:	edd3 7a02 	vldr	s15, [r3, #8]
 80039fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a00:	ee17 0a90 	vmov	r0, s15
 8003a04:	f7fc fda0 	bl	8000548 <__aeabi_f2d>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	4620      	mov	r0, r4
 8003a0e:	4629      	mov	r1, r5
 8003a10:	f7fc fc3c 	bl	800028c <__adddf3>
 8003a14:	4602      	mov	r2, r0
 8003a16:	460b      	mov	r3, r1
 8003a18:	4610      	mov	r0, r2
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	f7fd f8c4 	bl	8000ba8 <__aeabi_d2f>
 8003a20:	4603      	mov	r3, r0
 8003a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    float c43 = covs->wheel.m21 + covs->wheel.m22 * gain1_w*gain2_w * pow(k,2) - covs->wheel.m22*gain1_w*k - covs->wheel.m21*gain2_w*k + gain1_w*gain2_w*r_vals->wheel;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7fc fd8d 	bl	8000548 <__aeabi_f2d>
 8003a2e:	4604      	mov	r4, r0
 8003a30:	460d      	mov	r5, r1
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8003a38:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003a3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a40:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003a44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a48:	ee17 0a90 	vmov	r0, s15
 8003a4c:	f7fc fd7c 	bl	8000548 <__aeabi_f2d>
 8003a50:	4680      	mov	r8, r0
 8003a52:	4689      	mov	r9, r1
 8003a54:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003a56:	f7fc fd77 	bl	8000548 <__aeabi_f2d>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	ed1f 1b5d 	vldr	d1, [pc, #-372]	; 80038ec <kalman_filter_update+0x424>
 8003a62:	ec43 2b10 	vmov	d0, r2, r3
 8003a66:	f00b fecf 	bl	800f808 <pow>
 8003a6a:	ec53 2b10 	vmov	r2, r3, d0
 8003a6e:	4640      	mov	r0, r8
 8003a70:	4649      	mov	r1, r9
 8003a72:	f7fc fdc1 	bl	80005f8 <__aeabi_dmul>
 8003a76:	4602      	mov	r2, r0
 8003a78:	460b      	mov	r3, r1
 8003a7a:	4620      	mov	r0, r4
 8003a7c:	4629      	mov	r1, r5
 8003a7e:	f7fc fc05 	bl	800028c <__adddf3>
 8003a82:	4602      	mov	r2, r0
 8003a84:	460b      	mov	r3, r1
 8003a86:	4614      	mov	r4, r2
 8003a88:	461d      	mov	r5, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8003a90:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003a94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a98:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003a9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aa0:	ee17 0a90 	vmov	r0, s15
 8003aa4:	f7fc fd50 	bl	8000548 <__aeabi_f2d>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	460b      	mov	r3, r1
 8003aac:	4620      	mov	r0, r4
 8003aae:	4629      	mov	r1, r5
 8003ab0:	f7fc fbea 	bl	8000288 <__aeabi_dsub>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	4614      	mov	r4, r2
 8003aba:	461d      	mov	r5, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8003ac2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003ac6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003aca:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ad2:	ee17 0a90 	vmov	r0, s15
 8003ad6:	f7fc fd37 	bl	8000548 <__aeabi_f2d>
 8003ada:	4602      	mov	r2, r0
 8003adc:	460b      	mov	r3, r1
 8003ade:	4620      	mov	r0, r4
 8003ae0:	4629      	mov	r1, r5
 8003ae2:	f7fc fbd1 	bl	8000288 <__aeabi_dsub>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	460b      	mov	r3, r1
 8003aea:	4614      	mov	r4, r2
 8003aec:	461d      	mov	r5, r3
 8003aee:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8003af2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003af6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003afa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003afc:	edd3 7a02 	vldr	s15, [r3, #8]
 8003b00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b04:	ee17 0a90 	vmov	r0, s15
 8003b08:	f7fc fd1e 	bl	8000548 <__aeabi_f2d>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	460b      	mov	r3, r1
 8003b10:	4620      	mov	r0, r4
 8003b12:	4629      	mov	r1, r5
 8003b14:	f7fc fbba 	bl	800028c <__adddf3>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	4610      	mov	r0, r2
 8003b1e:	4619      	mov	r1, r3
 8003b20:	f7fd f842 	bl	8000ba8 <__aeabi_d2f>
 8003b24:	4603      	mov	r3, r0
 8003b26:	62bb      	str	r3, [r7, #40]	; 0x28
    float c44 = covs->wheel.m22 + covs->wheel.m22*pow(gain2_w,2) * pow(k,2) - 2*covs->wheel.m22*gain2_w*k + pow(gain2_w,2)*r_vals->wheel;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f7fc fd0b 	bl	8000548 <__aeabi_f2d>
 8003b32:	4604      	mov	r4, r0
 8003b34:	460d      	mov	r5, r1
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7fc fd04 	bl	8000548 <__aeabi_f2d>
 8003b40:	4680      	mov	r8, r0
 8003b42:	4689      	mov	r9, r1
 8003b44:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003b46:	f7fc fcff 	bl	8000548 <__aeabi_f2d>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	ed1f 1b99 	vldr	d1, [pc, #-612]	; 80038ec <kalman_filter_update+0x424>
 8003b52:	ec43 2b10 	vmov	d0, r2, r3
 8003b56:	f00b fe57 	bl	800f808 <pow>
 8003b5a:	ec53 2b10 	vmov	r2, r3, d0
 8003b5e:	4640      	mov	r0, r8
 8003b60:	4649      	mov	r1, r9
 8003b62:	f7fc fd49 	bl	80005f8 <__aeabi_dmul>
 8003b66:	4602      	mov	r2, r0
 8003b68:	460b      	mov	r3, r1
 8003b6a:	4690      	mov	r8, r2
 8003b6c:	4699      	mov	r9, r3
 8003b6e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003b70:	f7fc fcea 	bl	8000548 <__aeabi_f2d>
 8003b74:	4602      	mov	r2, r0
 8003b76:	460b      	mov	r3, r1
 8003b78:	ed1f 1ba4 	vldr	d1, [pc, #-656]	; 80038ec <kalman_filter_update+0x424>
 8003b7c:	ec43 2b10 	vmov	d0, r2, r3
 8003b80:	f00b fe42 	bl	800f808 <pow>
 8003b84:	ec53 2b10 	vmov	r2, r3, d0
 8003b88:	4640      	mov	r0, r8
 8003b8a:	4649      	mov	r1, r9
 8003b8c:	f7fc fd34 	bl	80005f8 <__aeabi_dmul>
 8003b90:	4602      	mov	r2, r0
 8003b92:	460b      	mov	r3, r1
 8003b94:	4620      	mov	r0, r4
 8003b96:	4629      	mov	r1, r5
 8003b98:	f7fc fb78 	bl	800028c <__adddf3>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	4614      	mov	r4, r2
 8003ba2:	461d      	mov	r5, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003baa:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003bae:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003bb2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003bb6:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bbe:	ee17 0a90 	vmov	r0, s15
 8003bc2:	f7fc fcc1 	bl	8000548 <__aeabi_f2d>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	460b      	mov	r3, r1
 8003bca:	4620      	mov	r0, r4
 8003bcc:	4629      	mov	r1, r5
 8003bce:	f7fc fb5b 	bl	8000288 <__aeabi_dsub>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	4614      	mov	r4, r2
 8003bd8:	461d      	mov	r5, r3
 8003bda:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003bdc:	f7fc fcb4 	bl	8000548 <__aeabi_f2d>
 8003be0:	4602      	mov	r2, r0
 8003be2:	460b      	mov	r3, r1
 8003be4:	ed1f 1bbf 	vldr	d1, [pc, #-764]	; 80038ec <kalman_filter_update+0x424>
 8003be8:	ec43 2b10 	vmov	d0, r2, r3
 8003bec:	f00b fe0c 	bl	800f808 <pow>
 8003bf0:	ec59 8b10 	vmov	r8, r9, d0
 8003bf4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7fc fca5 	bl	8000548 <__aeabi_f2d>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	460b      	mov	r3, r1
 8003c02:	4640      	mov	r0, r8
 8003c04:	4649      	mov	r1, r9
 8003c06:	f7fc fcf7 	bl	80005f8 <__aeabi_dmul>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	4620      	mov	r0, r4
 8003c10:	4629      	mov	r1, r5
 8003c12:	f7fc fb3b 	bl	800028c <__adddf3>
 8003c16:	4602      	mov	r2, r0
 8003c18:	460b      	mov	r3, r1
 8003c1a:	4610      	mov	r0, r2
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	f7fc ffc3 	bl	8000ba8 <__aeabi_d2f>
 8003c22:	4603      	mov	r3, r0
 8003c24:	627b      	str	r3, [r7, #36]	; 0x24

    covs->wheel.m11 = c33;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c2a:	621a      	str	r2, [r3, #32]
    covs->wheel.m12 = c34;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c30:	625a      	str	r2, [r3, #36]	; 0x24
    covs->wheel.m21 = c43;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c36:	629a      	str	r2, [r3, #40]	; 0x28
    covs->wheel.m22 = c44;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c3c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    //printf("Update after covs: %0.15f %0.15f %0.15f %0.15f\n", covs->pitch.m11, covs->pitch.m12, covs->pitch.m21, covs->pitch.m22);

}
 8003c3e:	bf00      	nop
 8003c40:	3760      	adds	r7, #96	; 0x60
 8003c42:	46bd      	mov	sp, r7
 8003c44:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08003c48 <roll_kalman_filter_update>:


//Kalman filter for roll, essentially the same as for pitch

void roll_kalman_filter_update(float sensor, float dt, States *s, Matrix *q_t, Matrix *q_w, Covariances *covs, R_error *r_vals)
{   
 8003c48:	b480      	push	{r7}
 8003c4a:	b08f      	sub	sp, #60	; 0x3c
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	ed87 0a05 	vstr	s0, [r7, #20]
 8003c52:	edc7 0a04 	vstr	s1, [r7, #16]
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	607a      	str	r2, [r7, #4]
 8003c5c:	603b      	str	r3, [r7, #0]
    /* sensor is angular velocity */
    float diff = sensor - s->x6;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	edd3 7a05 	vldr	s15, [r3, #20]
 8003c64:	ed97 7a05 	vldr	s14, [r7, #20]
 8003c68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c6c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    /* Gain calculation */
    float gain1 = covs->roll.m12 * (1 / (covs->roll.m22 + r_vals->roll));
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	ed93 7a05 	vldr	s14, [r3, #20]
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	edd3 6a07 	vldr	s13, [r3, #28]
 8003c7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c7e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003c82:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003c86:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8003c8a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003c8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c92:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    float gain2 = covs->roll.m22 * (1 / (covs->roll.m22 + r_vals->roll));
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	ed93 7a07 	vldr	s14, [r3, #28]
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	edd3 6a07 	vldr	s13, [r3, #28]
 8003ca2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ca4:	edd3 7a01 	vldr	s15, [r3, #4]
 8003ca8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003cac:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8003cb0:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003cb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cb8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

    /* Update states */
    s->x5 = s->x5 + gain1 * diff;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	ed93 7a04 	vldr	s14, [r3, #16]
 8003cc2:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8003cc6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003cca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003cce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	edc3 7a04 	vstr	s15, [r3, #16]
    s->x6 = s->x6 + gain2 * diff;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	ed93 7a05 	vldr	s14, [r3, #20]
 8003cde:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8003ce2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003ce6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003cea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	edc3 7a05 	vstr	s15, [r3, #20]

    /* Covariance update */
    float c11 = (-covs->roll.m12*covs->roll.m21 + covs->roll.m11*(covs->roll.m22+r_vals->roll))/(covs->roll.m22 + r_vals->roll);
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	edd3 7a05 	vldr	s15, [r3, #20]
 8003cfa:	eeb1 7a67 	vneg.f32	s14, s15
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	edd3 7a06 	vldr	s15, [r3, #24]
 8003d04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	edd3 6a04 	vldr	s13, [r3, #16]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	ed93 6a07 	vldr	s12, [r3, #28]
 8003d14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d16:	edd3 7a01 	vldr	s15, [r3, #4]
 8003d1a:	ee76 7a27 	vadd.f32	s15, s12, s15
 8003d1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d22:	ee77 6a27 	vadd.f32	s13, s14, s15
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	ed93 7a07 	vldr	s14, [r3, #28]
 8003d2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d2e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003d32:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d3a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    float c12 = (covs->roll.m12*r_vals->roll)/(covs->roll.m22 + r_vals->roll);
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	ed93 7a05 	vldr	s14, [r3, #20]
 8003d44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d46:	edd3 7a01 	vldr	s15, [r3, #4]
 8003d4a:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	ed93 7a07 	vldr	s14, [r3, #28]
 8003d54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d56:	edd3 7a01 	vldr	s15, [r3, #4]
 8003d5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d62:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float c21 = (covs->roll.m21*r_vals->roll)/(covs->roll.m22 + r_vals->roll);
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	ed93 7a06 	vldr	s14, [r3, #24]
 8003d6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d6e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003d72:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	ed93 7a07 	vldr	s14, [r3, #28]
 8003d7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d7e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003d82:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d8a:	edc7 7a08 	vstr	s15, [r7, #32]
    float c22 = (covs->roll.m22*r_vals->roll)/(covs->roll.m22 + r_vals->roll);
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	ed93 7a07 	vldr	s14, [r3, #28]
 8003d94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d96:	edd3 7a01 	vldr	s15, [r3, #4]
 8003d9a:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	ed93 7a07 	vldr	s14, [r3, #28]
 8003da4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003da6:	edd3 7a01 	vldr	s15, [r3, #4]
 8003daa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003dae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003db2:	edc7 7a07 	vstr	s15, [r7, #28]

    covs->roll.m11 = c11;
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003dba:	611a      	str	r2, [r3, #16]
    covs->roll.m12 = c12;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dc0:	615a      	str	r2, [r3, #20]
    covs->roll.m21 = c21;
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	6a3a      	ldr	r2, [r7, #32]
 8003dc6:	619a      	str	r2, [r3, #24]
    covs->roll.m22 = c22;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	69fa      	ldr	r2, [r7, #28]
 8003dcc:	61da      	str	r2, [r3, #28]

}
 8003dce:	bf00      	nop
 8003dd0:	373c      	adds	r7, #60	; 0x3c
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr

08003dda <roll_kalman_filter_predict>:

void roll_kalman_filter_predict(float input, float dt, States *s, Matrix *q_t, Matrix *q_w, Covariances *covs)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b091      	sub	sp, #68	; 0x44
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	ed87 0a05 	vstr	s0, [r7, #20]
 8003de4:	edc7 0a04 	vstr	s1, [r7, #16]
 8003de8:	60f8      	str	r0, [r7, #12]
 8003dea:	60b9      	str	r1, [r7, #8]
 8003dec:	607a      	str	r2, [r7, #4]
 8003dee:	603b      	str	r3, [r7, #0]
    float X11 = s->x5 + dt * s->x6;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	ed93 7a04 	vldr	s14, [r3, #16]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	edd3 6a05 	vldr	s13, [r3, #20]
 8003dfc:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e08:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    s->x5 = X11;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e10:	611a      	str	r2, [r3, #16]

    /* Dot product covariance and state transistion model*/
    float c11 = covs->roll.m11 + (dt * covs->roll.m21);
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	ed93 7a04 	vldr	s14, [r3, #16]
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	edd3 6a06 	vldr	s13, [r3, #24]
 8003e1e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e2a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    float c12 = covs->roll.m12 + (dt * covs->roll.m22);
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	ed93 7a05 	vldr	s14, [r3, #20]
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	edd3 6a07 	vldr	s13, [r3, #28]
 8003e3a:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e46:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    float c21 = covs->roll.m21;
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	633b      	str	r3, [r7, #48]	; 0x30
    float c22 = covs->roll.m22;
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	69db      	ldr	r3, [r3, #28]
 8003e54:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* c matrix transposed with state transistion model
    Fm11 Fm12    Fm11 Fm21
    Fm21 Fm22 => Fm12 Fm22
    */
    float p11 = c11 + c12 * dt;
 8003e56:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003e5a:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e62:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003e66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e6a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    float p12 = c12;
 8003e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e70:	627b      	str	r3, [r7, #36]	; 0x24
    float p21 = c21 + c22;
 8003e72:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8003e76:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003e7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e7e:	edc7 7a08 	vstr	s15, [r7, #32]
    float p22 = c22;
 8003e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e84:	61fb      	str	r3, [r7, #28]

    covs->roll.m11 = p11 + q_t->m11;  
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	ed93 7a00 	vldr	s14, [r3]
 8003e8c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003e90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	edc3 7a04 	vstr	s15, [r3, #16]
    covs->roll.m12 = p12 + q_t->m12;
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	ed93 7a01 	vldr	s14, [r3, #4]
 8003ea0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003ea4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	edc3 7a05 	vstr	s15, [r3, #20]
    covs->roll.m21 = p21 + q_t->m21;
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	ed93 7a02 	vldr	s14, [r3, #8]
 8003eb4:	edd7 7a08 	vldr	s15, [r7, #32]
 8003eb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	edc3 7a06 	vstr	s15, [r3, #24]
    covs->roll.m22 = p22 + q_t->m22;
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	ed93 7a03 	vldr	s14, [r3, #12]
 8003ec8:	edd7 7a07 	vldr	s15, [r7, #28]
 8003ecc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8003ed6:	bf00      	nop
 8003ed8:	3744      	adds	r7, #68	; 0x44
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
	...

08003ee4 <stop_time_x_d>:
#include <stdbool.h>
#include <stdlib.h>
//#include <stdio.h>

float stop_time_x_d(float setpoint_x_d, float theta, float theta_d, float x_d)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b086      	sub	sp, #24
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	ed87 0a03 	vstr	s0, [r7, #12]
 8003eee:	edc7 0a02 	vstr	s1, [r7, #8]
 8003ef2:	ed87 1a01 	vstr	s2, [r7, #4]
 8003ef6:	edc7 1a00 	vstr	s3, [r7]
    float x_d_diff = abs(x_d - setpoint_x_d);
 8003efa:	ed97 7a00 	vldr	s14, [r7]
 8003efe:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f0a:	ee17 3a90 	vmov	r3, s15
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	bfb8      	it	lt
 8003f12:	425b      	neglt	r3, r3
 8003f14:	ee07 3a90 	vmov	s15, r3
 8003f18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f1c:	edc7 7a05 	vstr	s15, [r7, #20]
    float out = x_d_diff * 0.5 + 1.2;
 8003f20:	6978      	ldr	r0, [r7, #20]
 8003f22:	f7fc fb11 	bl	8000548 <__aeabi_f2d>
 8003f26:	f04f 0200 	mov.w	r2, #0
 8003f2a:	4b0e      	ldr	r3, [pc, #56]	; (8003f64 <stop_time_x_d+0x80>)
 8003f2c:	f7fc fb64 	bl	80005f8 <__aeabi_dmul>
 8003f30:	4602      	mov	r2, r0
 8003f32:	460b      	mov	r3, r1
 8003f34:	4610      	mov	r0, r2
 8003f36:	4619      	mov	r1, r3
 8003f38:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8003f3c:	4b0a      	ldr	r3, [pc, #40]	; (8003f68 <stop_time_x_d+0x84>)
 8003f3e:	f7fc f9a5 	bl	800028c <__adddf3>
 8003f42:	4602      	mov	r2, r0
 8003f44:	460b      	mov	r3, r1
 8003f46:	4610      	mov	r0, r2
 8003f48:	4619      	mov	r1, r3
 8003f4a:	f7fc fe2d 	bl	8000ba8 <__aeabi_d2f>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	613b      	str	r3, [r7, #16]
    //printf("Stop time x_d: %f\n", out);
    return out;
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	ee07 3a90 	vmov	s15, r3
}
 8003f58:	eeb0 0a67 	vmov.f32	s0, s15
 8003f5c:	3718      	adds	r7, #24
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	3fe00000 	.word	0x3fe00000
 8003f68:	3ff33333 	.word	0x3ff33333
 8003f6c:	00000000 	.word	0x00000000

08003f70 <LookaheadSpeedRegulator>:

float LookaheadSpeedRegulator(float setpoint_x_d, float theta, float theta_d, float x_d, float dt)
{
 8003f70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f74:	b08e      	sub	sp, #56	; 0x38
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	ed87 0a05 	vstr	s0, [r7, #20]
 8003f7c:	edc7 0a04 	vstr	s1, [r7, #16]
 8003f80:	ed87 1a03 	vstr	s2, [r7, #12]
 8003f84:	edc7 1a02 	vstr	s3, [r7, #8]
 8003f88:	ed87 2a01 	vstr	s4, [r7, #4]
    //printf("Setpoint: %f\n Top angle: %f\n Top angle_d %f\n Velocity %f\n Delta time %f\n", setpoint_x_d, theta, theta_d, x_d, dt);
    float t_theta = 2.0;
 8003f8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003f90:	637b      	str	r3, [r7, #52]	; 0x34
    float t_x_d = stop_time_x_d(setpoint_x_d, theta, theta_d, x_d);
 8003f92:	edd7 1a02 	vldr	s3, [r7, #8]
 8003f96:	ed97 1a03 	vldr	s2, [r7, #12]
 8003f9a:	edd7 0a04 	vldr	s1, [r7, #16]
 8003f9e:	ed97 0a05 	vldr	s0, [r7, #20]
 8003fa2:	f7ff ff9f 	bl	8003ee4 <stop_time_x_d>
 8003fa6:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30

    float delta_tau_theta = 1 / (pow(t_theta,2) / 2 * param_D) * (0 - theta - theta_d * t_theta);
 8003faa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003fac:	f7fc facc 	bl	8000548 <__aeabi_f2d>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	460b      	mov	r3, r1
 8003fb4:	ed9f 1b86 	vldr	d1, [pc, #536]	; 80041d0 <LookaheadSpeedRegulator+0x260>
 8003fb8:	ec43 2b10 	vmov	d0, r2, r3
 8003fbc:	f00b fc24 	bl	800f808 <pow>
 8003fc0:	ec51 0b10 	vmov	r0, r1, d0
 8003fc4:	f04f 0200 	mov.w	r2, #0
 8003fc8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003fcc:	f7fc fc3e 	bl	800084c <__aeabi_ddiv>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	4610      	mov	r0, r2
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	a383      	add	r3, pc, #524	; (adr r3, 80041e8 <LookaheadSpeedRegulator+0x278>)
 8003fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fde:	f7fc fb0b 	bl	80005f8 <__aeabi_dmul>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	f04f 0000 	mov.w	r0, #0
 8003fea:	4981      	ldr	r1, [pc, #516]	; (80041f0 <LookaheadSpeedRegulator+0x280>)
 8003fec:	f7fc fc2e 	bl	800084c <__aeabi_ddiv>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	4614      	mov	r4, r2
 8003ff6:	461d      	mov	r5, r3
 8003ff8:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 80041f4 <LookaheadSpeedRegulator+0x284>
 8003ffc:	edd7 7a04 	vldr	s15, [r7, #16]
 8004000:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004004:	edd7 6a03 	vldr	s13, [r7, #12]
 8004008:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800400c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004010:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004014:	ee17 0a90 	vmov	r0, s15
 8004018:	f7fc fa96 	bl	8000548 <__aeabi_f2d>
 800401c:	4602      	mov	r2, r0
 800401e:	460b      	mov	r3, r1
 8004020:	4620      	mov	r0, r4
 8004022:	4629      	mov	r1, r5
 8004024:	f7fc fae8 	bl	80005f8 <__aeabi_dmul>
 8004028:	4602      	mov	r2, r0
 800402a:	460b      	mov	r3, r1
 800402c:	4610      	mov	r0, r2
 800402e:	4619      	mov	r1, r3
 8004030:	f7fc fdba 	bl	8000ba8 <__aeabi_d2f>
 8004034:	4603      	mov	r3, r0
 8004036:	62fb      	str	r3, [r7, #44]	; 0x2c
    //printf("delta_tau_theta: %f\n", delta_tau_theta);
    float delta_tau_theta_d = 1 / (t_theta * param_D) * -theta_d;
 8004038:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800403c:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 80041f8 <LookaheadSpeedRegulator+0x288>
 8004040:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004044:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004048:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800404c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004050:	eef1 7a67 	vneg.f32	s15, s15
 8004054:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004058:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    //printf("delta_tau_theta_d: %f\n", delta_tau_theta_d);
    float delta_tau_x_d = 1 / (t_x_d * param_B + pow(t_x_d, 3) / 6 * param_E * param_D) * (setpoint_x_d - x_d - t_x_d * param_E * theta - pow(t_x_d, 2) / 2 * param_E * theta_d);  
 800405c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8004060:	ed9f 7a66 	vldr	s14, [pc, #408]	; 80041fc <LookaheadSpeedRegulator+0x28c>
 8004064:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004068:	ee17 0a90 	vmov	r0, s15
 800406c:	f7fc fa6c 	bl	8000548 <__aeabi_f2d>
 8004070:	4604      	mov	r4, r0
 8004072:	460d      	mov	r5, r1
 8004074:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004076:	f7fc fa67 	bl	8000548 <__aeabi_f2d>
 800407a:	4602      	mov	r2, r0
 800407c:	460b      	mov	r3, r1
 800407e:	ed9f 1b56 	vldr	d1, [pc, #344]	; 80041d8 <LookaheadSpeedRegulator+0x268>
 8004082:	ec43 2b10 	vmov	d0, r2, r3
 8004086:	f00b fbbf 	bl	800f808 <pow>
 800408a:	ec51 0b10 	vmov	r0, r1, d0
 800408e:	f04f 0200 	mov.w	r2, #0
 8004092:	4b5b      	ldr	r3, [pc, #364]	; (8004200 <LookaheadSpeedRegulator+0x290>)
 8004094:	f7fc fbda 	bl	800084c <__aeabi_ddiv>
 8004098:	4602      	mov	r2, r0
 800409a:	460b      	mov	r3, r1
 800409c:	4610      	mov	r0, r2
 800409e:	4619      	mov	r1, r3
 80040a0:	a34f      	add	r3, pc, #316	; (adr r3, 80041e0 <LookaheadSpeedRegulator+0x270>)
 80040a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a6:	f7fc faa7 	bl	80005f8 <__aeabi_dmul>
 80040aa:	4602      	mov	r2, r0
 80040ac:	460b      	mov	r3, r1
 80040ae:	4610      	mov	r0, r2
 80040b0:	4619      	mov	r1, r3
 80040b2:	a34d      	add	r3, pc, #308	; (adr r3, 80041e8 <LookaheadSpeedRegulator+0x278>)
 80040b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b8:	f7fc fa9e 	bl	80005f8 <__aeabi_dmul>
 80040bc:	4602      	mov	r2, r0
 80040be:	460b      	mov	r3, r1
 80040c0:	4620      	mov	r0, r4
 80040c2:	4629      	mov	r1, r5
 80040c4:	f7fc f8e2 	bl	800028c <__adddf3>
 80040c8:	4602      	mov	r2, r0
 80040ca:	460b      	mov	r3, r1
 80040cc:	f04f 0000 	mov.w	r0, #0
 80040d0:	4947      	ldr	r1, [pc, #284]	; (80041f0 <LookaheadSpeedRegulator+0x280>)
 80040d2:	f7fc fbbb 	bl	800084c <__aeabi_ddiv>
 80040d6:	4602      	mov	r2, r0
 80040d8:	460b      	mov	r3, r1
 80040da:	4690      	mov	r8, r2
 80040dc:	4699      	mov	r9, r3
 80040de:	ed97 7a05 	vldr	s14, [r7, #20]
 80040e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80040e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80040ea:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80040ee:	eddf 6a45 	vldr	s13, [pc, #276]	; 8004204 <LookaheadSpeedRegulator+0x294>
 80040f2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80040f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80040fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004102:	ee17 0a90 	vmov	r0, s15
 8004106:	f7fc fa1f 	bl	8000548 <__aeabi_f2d>
 800410a:	4604      	mov	r4, r0
 800410c:	460d      	mov	r5, r1
 800410e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004110:	f7fc fa1a 	bl	8000548 <__aeabi_f2d>
 8004114:	4602      	mov	r2, r0
 8004116:	460b      	mov	r3, r1
 8004118:	ed9f 1b2d 	vldr	d1, [pc, #180]	; 80041d0 <LookaheadSpeedRegulator+0x260>
 800411c:	ec43 2b10 	vmov	d0, r2, r3
 8004120:	f00b fb72 	bl	800f808 <pow>
 8004124:	ec51 0b10 	vmov	r0, r1, d0
 8004128:	f04f 0200 	mov.w	r2, #0
 800412c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004130:	f7fc fb8c 	bl	800084c <__aeabi_ddiv>
 8004134:	4602      	mov	r2, r0
 8004136:	460b      	mov	r3, r1
 8004138:	4610      	mov	r0, r2
 800413a:	4619      	mov	r1, r3
 800413c:	a328      	add	r3, pc, #160	; (adr r3, 80041e0 <LookaheadSpeedRegulator+0x270>)
 800413e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004142:	f7fc fa59 	bl	80005f8 <__aeabi_dmul>
 8004146:	4602      	mov	r2, r0
 8004148:	460b      	mov	r3, r1
 800414a:	4692      	mov	sl, r2
 800414c:	469b      	mov	fp, r3
 800414e:	68f8      	ldr	r0, [r7, #12]
 8004150:	f7fc f9fa 	bl	8000548 <__aeabi_f2d>
 8004154:	4602      	mov	r2, r0
 8004156:	460b      	mov	r3, r1
 8004158:	4650      	mov	r0, sl
 800415a:	4659      	mov	r1, fp
 800415c:	f7fc fa4c 	bl	80005f8 <__aeabi_dmul>
 8004160:	4602      	mov	r2, r0
 8004162:	460b      	mov	r3, r1
 8004164:	4620      	mov	r0, r4
 8004166:	4629      	mov	r1, r5
 8004168:	f7fc f88e 	bl	8000288 <__aeabi_dsub>
 800416c:	4602      	mov	r2, r0
 800416e:	460b      	mov	r3, r1
 8004170:	4640      	mov	r0, r8
 8004172:	4649      	mov	r1, r9
 8004174:	f7fc fa40 	bl	80005f8 <__aeabi_dmul>
 8004178:	4602      	mov	r2, r0
 800417a:	460b      	mov	r3, r1
 800417c:	4610      	mov	r0, r2
 800417e:	4619      	mov	r1, r3
 8004180:	f7fc fd12 	bl	8000ba8 <__aeabi_d2f>
 8004184:	4603      	mov	r3, r0
 8004186:	627b      	str	r3, [r7, #36]	; 0x24
    //printf("delta_tau_x_d: %f\n", delta_tau_x_d);
    float last_delta_tau = delta_tau_theta + delta_tau_theta_d + delta_tau_x_d;
 8004188:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800418c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004190:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004194:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8004198:	ee77 7a27 	vadd.f32	s15, s14, s15
 800419c:	edc7 7a08 	vstr	s15, [r7, #32]
    //printf("last_delta_tau: %f\n", last_delta_tau);
    float tau = - param_C / param_D * theta + last_delta_tau;
 80041a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80041a4:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004208 <LookaheadSpeedRegulator+0x298>
 80041a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041ac:	ed97 7a08 	vldr	s14, [r7, #32]
 80041b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041b4:	edc7 7a07 	vstr	s15, [r7, #28]
    //printf("tau: %f\n",tau);
    return tau;
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	ee07 3a90 	vmov	s15, r3
}
 80041be:	eeb0 0a67 	vmov.f32	s0, s15
 80041c2:	3738      	adds	r7, #56	; 0x38
 80041c4:	46bd      	mov	sp, r7
 80041c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041ca:	bf00      	nop
 80041cc:	f3af 8000 	nop.w
 80041d0:	00000000 	.word	0x00000000
 80041d4:	40000000 	.word	0x40000000
 80041d8:	00000000 	.word	0x00000000
 80041dc:	40080000 	.word	0x40080000
 80041e0:	60000000 	.word	0x60000000
 80041e4:	400d1079 	.word	0x400d1079
 80041e8:	60000000 	.word	0x60000000
 80041ec:	3fe865ee 	.word	0x3fe865ee
 80041f0:	3ff00000 	.word	0x3ff00000
 80041f4:	00000000 	.word	0x00000000
 80041f8:	3f432f73 	.word	0x3f432f73
 80041fc:	bea466ca 	.word	0xbea466ca
 8004200:	40180000 	.word	0x40180000
 8004204:	406883cb 	.word	0x406883cb
 8004208:	c1947ca9 	.word	0xc1947ca9
 800420c:	00000000 	.word	0x00000000

08004210 <roll_reg_step>:


float roll_reg_step(RollRegulator *roll_reg, float dt, float theta, float theta_d, float wheel_rpm) {
 8004210:	b580      	push	{r7, lr}
 8004212:	b08a      	sub	sp, #40	; 0x28
 8004214:	af00      	add	r7, sp, #0
 8004216:	6178      	str	r0, [r7, #20]
 8004218:	ed87 0a04 	vstr	s0, [r7, #16]
 800421c:	edc7 0a03 	vstr	s1, [r7, #12]
 8004220:	ed87 1a02 	vstr	s2, [r7, #8]
 8004224:	edc7 1a01 	vstr	s3, [r7, #4]
	float phi_d = wheel_rpm / 60 * 6.28;
 8004228:	edd7 7a01 	vldr	s15, [r7, #4]
 800422c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80042c8 <roll_reg_step+0xb8>
 8004230:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004234:	ee16 0a90 	vmov	r0, s13
 8004238:	f7fc f986 	bl	8000548 <__aeabi_f2d>
 800423c:	a320      	add	r3, pc, #128	; (adr r3, 80042c0 <roll_reg_step+0xb0>)
 800423e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004242:	f7fc f9d9 	bl	80005f8 <__aeabi_dmul>
 8004246:	4602      	mov	r2, r0
 8004248:	460b      	mov	r3, r1
 800424a:	4610      	mov	r0, r2
 800424c:	4619      	mov	r1, r3
 800424e:	f7fc fcab 	bl	8000ba8 <__aeabi_d2f>
 8004252:	4603      	mov	r3, r0
 8004254:	627b      	str	r3, [r7, #36]	; 0x24
	float setpoint_theta = roll_reg->setpoint_theta_0 + roll_reg->kp2 * (0 - phi_d);
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	ed93 7a00 	vldr	s14, [r3]
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	edd3 6a03 	vldr	s13, [r3, #12]
 8004262:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 80042cc <roll_reg_step+0xbc>
 8004266:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800426a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800426e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004272:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004276:	edc7 7a08 	vstr	s15, [r7, #32]

	float error = setpoint_theta - theta;
 800427a:	ed97 7a08 	vldr	s14, [r7, #32]
 800427e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004282:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004286:	edc7 7a07 	vstr	s15, [r7, #28]

	return error * roll_reg->kp1 + (0 - theta_d) * roll_reg->kd1;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	ed93 7a01 	vldr	s14, [r3, #4]
 8004290:	edd7 7a07 	vldr	s15, [r7, #28]
 8004294:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004298:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80042cc <roll_reg_step+0xbc>
 800429c:	edd7 7a02 	vldr	s15, [r7, #8]
 80042a0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	edd3 7a02 	vldr	s15, [r3, #8]
 80042aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042ae:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80042b2:	eeb0 0a67 	vmov.f32	s0, s15
 80042b6:	3728      	adds	r7, #40	; 0x28
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	f3af 8000 	nop.w
 80042c0:	51eb851f 	.word	0x51eb851f
 80042c4:	40191eb8 	.word	0x40191eb8
 80042c8:	42700000 	.word	0x42700000
 80042cc:	00000000 	.word	0x00000000

080042d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80042d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004308 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80042d4:	480d      	ldr	r0, [pc, #52]	; (800430c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80042d6:	490e      	ldr	r1, [pc, #56]	; (8004310 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80042d8:	4a0e      	ldr	r2, [pc, #56]	; (8004314 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80042da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80042dc:	e002      	b.n	80042e4 <LoopCopyDataInit>

080042de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80042de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80042e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80042e2:	3304      	adds	r3, #4

080042e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042e8:	d3f9      	bcc.n	80042de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042ea:	4a0b      	ldr	r2, [pc, #44]	; (8004318 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80042ec:	4c0b      	ldr	r4, [pc, #44]	; (800431c <LoopFillZerobss+0x26>)
  movs r3, #0
 80042ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80042f0:	e001      	b.n	80042f6 <LoopFillZerobss>

080042f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80042f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042f4:	3204      	adds	r2, #4

080042f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80042f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80042f8:	d3fb      	bcc.n	80042f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80042fa:	f7fe fc2b 	bl	8002b54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80042fe:	f008 fb73 	bl	800c9e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004302:	f7fd f9f1 	bl	80016e8 <main>
  bx  lr    
 8004306:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004308:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800430c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004310:	20000384 	.word	0x20000384
  ldr r2, =_sidata
 8004314:	080113e8 	.word	0x080113e8
  ldr r2, =_sbss
 8004318:	20000384 	.word	0x20000384
  ldr r4, =_ebss
 800431c:	2000b1fc 	.word	0x2000b1fc

08004320 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004320:	e7fe      	b.n	8004320 <ADC_IRQHandler>
	...

08004324 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004328:	4b0e      	ldr	r3, [pc, #56]	; (8004364 <HAL_Init+0x40>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a0d      	ldr	r2, [pc, #52]	; (8004364 <HAL_Init+0x40>)
 800432e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004332:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004334:	4b0b      	ldr	r3, [pc, #44]	; (8004364 <HAL_Init+0x40>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a0a      	ldr	r2, [pc, #40]	; (8004364 <HAL_Init+0x40>)
 800433a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800433e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004340:	4b08      	ldr	r3, [pc, #32]	; (8004364 <HAL_Init+0x40>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a07      	ldr	r2, [pc, #28]	; (8004364 <HAL_Init+0x40>)
 8004346:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800434a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800434c:	2003      	movs	r0, #3
 800434e:	f000 f973 	bl	8004638 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004352:	200f      	movs	r0, #15
 8004354:	f000 f808 	bl	8004368 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004358:	f7fe f998 	bl	800268c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	40023c00 	.word	0x40023c00

08004368 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004370:	4b12      	ldr	r3, [pc, #72]	; (80043bc <HAL_InitTick+0x54>)
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	4b12      	ldr	r3, [pc, #72]	; (80043c0 <HAL_InitTick+0x58>)
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	4619      	mov	r1, r3
 800437a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800437e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004382:	fbb2 f3f3 	udiv	r3, r2, r3
 8004386:	4618      	mov	r0, r3
 8004388:	f000 f999 	bl	80046be <HAL_SYSTICK_Config>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d001      	beq.n	8004396 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e00e      	b.n	80043b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2b0f      	cmp	r3, #15
 800439a:	d80a      	bhi.n	80043b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800439c:	2200      	movs	r2, #0
 800439e:	6879      	ldr	r1, [r7, #4]
 80043a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80043a4:	f000 f953 	bl	800464e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80043a8:	4a06      	ldr	r2, [pc, #24]	; (80043c4 <HAL_InitTick+0x5c>)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80043ae:	2300      	movs	r3, #0
 80043b0:	e000      	b.n	80043b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3708      	adds	r7, #8
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	20000034 	.word	0x20000034
 80043c0:	2000003c 	.word	0x2000003c
 80043c4:	20000038 	.word	0x20000038

080043c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043c8:	b480      	push	{r7}
 80043ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80043cc:	4b06      	ldr	r3, [pc, #24]	; (80043e8 <HAL_IncTick+0x20>)
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	461a      	mov	r2, r3
 80043d2:	4b06      	ldr	r3, [pc, #24]	; (80043ec <HAL_IncTick+0x24>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4413      	add	r3, r2
 80043d8:	4a04      	ldr	r2, [pc, #16]	; (80043ec <HAL_IncTick+0x24>)
 80043da:	6013      	str	r3, [r2, #0]
}
 80043dc:	bf00      	nop
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	2000003c 	.word	0x2000003c
 80043ec:	200096ec 	.word	0x200096ec

080043f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043f0:	b480      	push	{r7}
 80043f2:	af00      	add	r7, sp, #0
  return uwTick;
 80043f4:	4b03      	ldr	r3, [pc, #12]	; (8004404 <HAL_GetTick+0x14>)
 80043f6:	681b      	ldr	r3, [r3, #0]
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	200096ec 	.word	0x200096ec

08004408 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004410:	f7ff ffee 	bl	80043f0 <HAL_GetTick>
 8004414:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004420:	d005      	beq.n	800442e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004422:	4b0a      	ldr	r3, [pc, #40]	; (800444c <HAL_Delay+0x44>)
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	461a      	mov	r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	4413      	add	r3, r2
 800442c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800442e:	bf00      	nop
 8004430:	f7ff ffde 	bl	80043f0 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	429a      	cmp	r2, r3
 800443e:	d8f7      	bhi.n	8004430 <HAL_Delay+0x28>
  {
  }
}
 8004440:	bf00      	nop
 8004442:	bf00      	nop
 8004444:	3710      	adds	r7, #16
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	2000003c 	.word	0x2000003c

08004450 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004450:	b480      	push	{r7}
 8004452:	b085      	sub	sp, #20
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f003 0307 	and.w	r3, r3, #7
 800445e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004460:	4b0c      	ldr	r3, [pc, #48]	; (8004494 <__NVIC_SetPriorityGrouping+0x44>)
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004466:	68ba      	ldr	r2, [r7, #8]
 8004468:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800446c:	4013      	ands	r3, r2
 800446e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004478:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800447c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004480:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004482:	4a04      	ldr	r2, [pc, #16]	; (8004494 <__NVIC_SetPriorityGrouping+0x44>)
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	60d3      	str	r3, [r2, #12]
}
 8004488:	bf00      	nop
 800448a:	3714      	adds	r7, #20
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr
 8004494:	e000ed00 	.word	0xe000ed00

08004498 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004498:	b480      	push	{r7}
 800449a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800449c:	4b04      	ldr	r3, [pc, #16]	; (80044b0 <__NVIC_GetPriorityGrouping+0x18>)
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	0a1b      	lsrs	r3, r3, #8
 80044a2:	f003 0307 	and.w	r3, r3, #7
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr
 80044b0:	e000ed00 	.word	0xe000ed00

080044b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	4603      	mov	r3, r0
 80044bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	db0b      	blt.n	80044de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044c6:	79fb      	ldrb	r3, [r7, #7]
 80044c8:	f003 021f 	and.w	r2, r3, #31
 80044cc:	4907      	ldr	r1, [pc, #28]	; (80044ec <__NVIC_EnableIRQ+0x38>)
 80044ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044d2:	095b      	lsrs	r3, r3, #5
 80044d4:	2001      	movs	r0, #1
 80044d6:	fa00 f202 	lsl.w	r2, r0, r2
 80044da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80044de:	bf00      	nop
 80044e0:	370c      	adds	r7, #12
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	e000e100 	.word	0xe000e100

080044f0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	4603      	mov	r3, r0
 80044f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	db12      	blt.n	8004528 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004502:	79fb      	ldrb	r3, [r7, #7]
 8004504:	f003 021f 	and.w	r2, r3, #31
 8004508:	490a      	ldr	r1, [pc, #40]	; (8004534 <__NVIC_DisableIRQ+0x44>)
 800450a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800450e:	095b      	lsrs	r3, r3, #5
 8004510:	2001      	movs	r0, #1
 8004512:	fa00 f202 	lsl.w	r2, r0, r2
 8004516:	3320      	adds	r3, #32
 8004518:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800451c:	f3bf 8f4f 	dsb	sy
}
 8004520:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004522:	f3bf 8f6f 	isb	sy
}
 8004526:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004528:	bf00      	nop
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr
 8004534:	e000e100 	.word	0xe000e100

08004538 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	4603      	mov	r3, r0
 8004540:	6039      	str	r1, [r7, #0]
 8004542:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004548:	2b00      	cmp	r3, #0
 800454a:	db0a      	blt.n	8004562 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	b2da      	uxtb	r2, r3
 8004550:	490c      	ldr	r1, [pc, #48]	; (8004584 <__NVIC_SetPriority+0x4c>)
 8004552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004556:	0112      	lsls	r2, r2, #4
 8004558:	b2d2      	uxtb	r2, r2
 800455a:	440b      	add	r3, r1
 800455c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004560:	e00a      	b.n	8004578 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	b2da      	uxtb	r2, r3
 8004566:	4908      	ldr	r1, [pc, #32]	; (8004588 <__NVIC_SetPriority+0x50>)
 8004568:	79fb      	ldrb	r3, [r7, #7]
 800456a:	f003 030f 	and.w	r3, r3, #15
 800456e:	3b04      	subs	r3, #4
 8004570:	0112      	lsls	r2, r2, #4
 8004572:	b2d2      	uxtb	r2, r2
 8004574:	440b      	add	r3, r1
 8004576:	761a      	strb	r2, [r3, #24]
}
 8004578:	bf00      	nop
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr
 8004584:	e000e100 	.word	0xe000e100
 8004588:	e000ed00 	.word	0xe000ed00

0800458c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800458c:	b480      	push	{r7}
 800458e:	b089      	sub	sp, #36	; 0x24
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f003 0307 	and.w	r3, r3, #7
 800459e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	f1c3 0307 	rsb	r3, r3, #7
 80045a6:	2b04      	cmp	r3, #4
 80045a8:	bf28      	it	cs
 80045aa:	2304      	movcs	r3, #4
 80045ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	3304      	adds	r3, #4
 80045b2:	2b06      	cmp	r3, #6
 80045b4:	d902      	bls.n	80045bc <NVIC_EncodePriority+0x30>
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	3b03      	subs	r3, #3
 80045ba:	e000      	b.n	80045be <NVIC_EncodePriority+0x32>
 80045bc:	2300      	movs	r3, #0
 80045be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ca:	43da      	mvns	r2, r3
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	401a      	ands	r2, r3
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	fa01 f303 	lsl.w	r3, r1, r3
 80045de:	43d9      	mvns	r1, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045e4:	4313      	orrs	r3, r2
         );
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3724      	adds	r7, #36	; 0x24
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
	...

080045f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	3b01      	subs	r3, #1
 8004600:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004604:	d301      	bcc.n	800460a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004606:	2301      	movs	r3, #1
 8004608:	e00f      	b.n	800462a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800460a:	4a0a      	ldr	r2, [pc, #40]	; (8004634 <SysTick_Config+0x40>)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	3b01      	subs	r3, #1
 8004610:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004612:	210f      	movs	r1, #15
 8004614:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004618:	f7ff ff8e 	bl	8004538 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800461c:	4b05      	ldr	r3, [pc, #20]	; (8004634 <SysTick_Config+0x40>)
 800461e:	2200      	movs	r2, #0
 8004620:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004622:	4b04      	ldr	r3, [pc, #16]	; (8004634 <SysTick_Config+0x40>)
 8004624:	2207      	movs	r2, #7
 8004626:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004628:	2300      	movs	r3, #0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3708      	adds	r7, #8
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	e000e010 	.word	0xe000e010

08004638 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f7ff ff05 	bl	8004450 <__NVIC_SetPriorityGrouping>
}
 8004646:	bf00      	nop
 8004648:	3708      	adds	r7, #8
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}

0800464e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800464e:	b580      	push	{r7, lr}
 8004650:	b086      	sub	sp, #24
 8004652:	af00      	add	r7, sp, #0
 8004654:	4603      	mov	r3, r0
 8004656:	60b9      	str	r1, [r7, #8]
 8004658:	607a      	str	r2, [r7, #4]
 800465a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800465c:	2300      	movs	r3, #0
 800465e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004660:	f7ff ff1a 	bl	8004498 <__NVIC_GetPriorityGrouping>
 8004664:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	68b9      	ldr	r1, [r7, #8]
 800466a:	6978      	ldr	r0, [r7, #20]
 800466c:	f7ff ff8e 	bl	800458c <NVIC_EncodePriority>
 8004670:	4602      	mov	r2, r0
 8004672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004676:	4611      	mov	r1, r2
 8004678:	4618      	mov	r0, r3
 800467a:	f7ff ff5d 	bl	8004538 <__NVIC_SetPriority>
}
 800467e:	bf00      	nop
 8004680:	3718      	adds	r7, #24
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004686:	b580      	push	{r7, lr}
 8004688:	b082      	sub	sp, #8
 800468a:	af00      	add	r7, sp, #0
 800468c:	4603      	mov	r3, r0
 800468e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004694:	4618      	mov	r0, r3
 8004696:	f7ff ff0d 	bl	80044b4 <__NVIC_EnableIRQ>
}
 800469a:	bf00      	nop
 800469c:	3708      	adds	r7, #8
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}

080046a2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80046a2:	b580      	push	{r7, lr}
 80046a4:	b082      	sub	sp, #8
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	4603      	mov	r3, r0
 80046aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80046ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046b0:	4618      	mov	r0, r3
 80046b2:	f7ff ff1d 	bl	80044f0 <__NVIC_DisableIRQ>
}
 80046b6:	bf00      	nop
 80046b8:	3708      	adds	r7, #8
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}

080046be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046be:	b580      	push	{r7, lr}
 80046c0:	b082      	sub	sp, #8
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f7ff ff94 	bl	80045f4 <SysTick_Config>
 80046cc:	4603      	mov	r3, r0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3708      	adds	r7, #8
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}

080046d6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80046d6:	b580      	push	{r7, lr}
 80046d8:	b084      	sub	sp, #16
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046e2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80046e4:	f7ff fe84 	bl	80043f0 <HAL_GetTick>
 80046e8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d008      	beq.n	8004708 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2280      	movs	r2, #128	; 0x80
 80046fa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e052      	b.n	80047ae <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f022 0216 	bic.w	r2, r2, #22
 8004716:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	695a      	ldr	r2, [r3, #20]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004726:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472c:	2b00      	cmp	r3, #0
 800472e:	d103      	bne.n	8004738 <HAL_DMA_Abort+0x62>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004734:	2b00      	cmp	r3, #0
 8004736:	d007      	beq.n	8004748 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f022 0208 	bic.w	r2, r2, #8
 8004746:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f022 0201 	bic.w	r2, r2, #1
 8004756:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004758:	e013      	b.n	8004782 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800475a:	f7ff fe49 	bl	80043f0 <HAL_GetTick>
 800475e:	4602      	mov	r2, r0
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	2b05      	cmp	r3, #5
 8004766:	d90c      	bls.n	8004782 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2220      	movs	r2, #32
 800476c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2203      	movs	r2, #3
 8004772:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e015      	b.n	80047ae <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0301 	and.w	r3, r3, #1
 800478c:	2b00      	cmp	r3, #0
 800478e:	d1e4      	bne.n	800475a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004794:	223f      	movs	r2, #63	; 0x3f
 8004796:	409a      	lsls	r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3710      	adds	r7, #16
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}

080047b6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80047b6:	b480      	push	{r7}
 80047b8:	b083      	sub	sp, #12
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d004      	beq.n	80047d4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2280      	movs	r2, #128	; 0x80
 80047ce:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e00c      	b.n	80047ee <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2205      	movs	r2, #5
 80047d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f022 0201 	bic.w	r2, r2, #1
 80047ea:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	370c      	adds	r7, #12
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
	...

080047fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b089      	sub	sp, #36	; 0x24
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004806:	2300      	movs	r3, #0
 8004808:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800480a:	2300      	movs	r3, #0
 800480c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800480e:	2300      	movs	r3, #0
 8004810:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004812:	2300      	movs	r3, #0
 8004814:	61fb      	str	r3, [r7, #28]
 8004816:	e16b      	b.n	8004af0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004818:	2201      	movs	r2, #1
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	fa02 f303 	lsl.w	r3, r2, r3
 8004820:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	697a      	ldr	r2, [r7, #20]
 8004828:	4013      	ands	r3, r2
 800482a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800482c:	693a      	ldr	r2, [r7, #16]
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	429a      	cmp	r2, r3
 8004832:	f040 815a 	bne.w	8004aea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f003 0303 	and.w	r3, r3, #3
 800483e:	2b01      	cmp	r3, #1
 8004840:	d005      	beq.n	800484e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800484a:	2b02      	cmp	r3, #2
 800484c:	d130      	bne.n	80048b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	005b      	lsls	r3, r3, #1
 8004858:	2203      	movs	r2, #3
 800485a:	fa02 f303 	lsl.w	r3, r2, r3
 800485e:	43db      	mvns	r3, r3
 8004860:	69ba      	ldr	r2, [r7, #24]
 8004862:	4013      	ands	r3, r2
 8004864:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	68da      	ldr	r2, [r3, #12]
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	005b      	lsls	r3, r3, #1
 800486e:	fa02 f303 	lsl.w	r3, r2, r3
 8004872:	69ba      	ldr	r2, [r7, #24]
 8004874:	4313      	orrs	r3, r2
 8004876:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	69ba      	ldr	r2, [r7, #24]
 800487c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004884:	2201      	movs	r2, #1
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	fa02 f303 	lsl.w	r3, r2, r3
 800488c:	43db      	mvns	r3, r3
 800488e:	69ba      	ldr	r2, [r7, #24]
 8004890:	4013      	ands	r3, r2
 8004892:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	091b      	lsrs	r3, r3, #4
 800489a:	f003 0201 	and.w	r2, r3, #1
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	fa02 f303 	lsl.w	r3, r2, r3
 80048a4:	69ba      	ldr	r2, [r7, #24]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	69ba      	ldr	r2, [r7, #24]
 80048ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f003 0303 	and.w	r3, r3, #3
 80048b8:	2b03      	cmp	r3, #3
 80048ba:	d017      	beq.n	80048ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	005b      	lsls	r3, r3, #1
 80048c6:	2203      	movs	r2, #3
 80048c8:	fa02 f303 	lsl.w	r3, r2, r3
 80048cc:	43db      	mvns	r3, r3
 80048ce:	69ba      	ldr	r2, [r7, #24]
 80048d0:	4013      	ands	r3, r2
 80048d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	689a      	ldr	r2, [r3, #8]
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	005b      	lsls	r3, r3, #1
 80048dc:	fa02 f303 	lsl.w	r3, r2, r3
 80048e0:	69ba      	ldr	r2, [r7, #24]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	69ba      	ldr	r2, [r7, #24]
 80048ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f003 0303 	and.w	r3, r3, #3
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d123      	bne.n	8004940 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	08da      	lsrs	r2, r3, #3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	3208      	adds	r2, #8
 8004900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004904:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	f003 0307 	and.w	r3, r3, #7
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	220f      	movs	r2, #15
 8004910:	fa02 f303 	lsl.w	r3, r2, r3
 8004914:	43db      	mvns	r3, r3
 8004916:	69ba      	ldr	r2, [r7, #24]
 8004918:	4013      	ands	r3, r2
 800491a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	691a      	ldr	r2, [r3, #16]
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	f003 0307 	and.w	r3, r3, #7
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	fa02 f303 	lsl.w	r3, r2, r3
 800492c:	69ba      	ldr	r2, [r7, #24]
 800492e:	4313      	orrs	r3, r2
 8004930:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	08da      	lsrs	r2, r3, #3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	3208      	adds	r2, #8
 800493a:	69b9      	ldr	r1, [r7, #24]
 800493c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	005b      	lsls	r3, r3, #1
 800494a:	2203      	movs	r2, #3
 800494c:	fa02 f303 	lsl.w	r3, r2, r3
 8004950:	43db      	mvns	r3, r3
 8004952:	69ba      	ldr	r2, [r7, #24]
 8004954:	4013      	ands	r3, r2
 8004956:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f003 0203 	and.w	r2, r3, #3
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	005b      	lsls	r3, r3, #1
 8004964:	fa02 f303 	lsl.w	r3, r2, r3
 8004968:	69ba      	ldr	r2, [r7, #24]
 800496a:	4313      	orrs	r3, r2
 800496c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	69ba      	ldr	r2, [r7, #24]
 8004972:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800497c:	2b00      	cmp	r3, #0
 800497e:	f000 80b4 	beq.w	8004aea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004982:	2300      	movs	r3, #0
 8004984:	60fb      	str	r3, [r7, #12]
 8004986:	4b60      	ldr	r3, [pc, #384]	; (8004b08 <HAL_GPIO_Init+0x30c>)
 8004988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800498a:	4a5f      	ldr	r2, [pc, #380]	; (8004b08 <HAL_GPIO_Init+0x30c>)
 800498c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004990:	6453      	str	r3, [r2, #68]	; 0x44
 8004992:	4b5d      	ldr	r3, [pc, #372]	; (8004b08 <HAL_GPIO_Init+0x30c>)
 8004994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004996:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800499a:	60fb      	str	r3, [r7, #12]
 800499c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800499e:	4a5b      	ldr	r2, [pc, #364]	; (8004b0c <HAL_GPIO_Init+0x310>)
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	089b      	lsrs	r3, r3, #2
 80049a4:	3302      	adds	r3, #2
 80049a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	f003 0303 	and.w	r3, r3, #3
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	220f      	movs	r2, #15
 80049b6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ba:	43db      	mvns	r3, r3
 80049bc:	69ba      	ldr	r2, [r7, #24]
 80049be:	4013      	ands	r3, r2
 80049c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a52      	ldr	r2, [pc, #328]	; (8004b10 <HAL_GPIO_Init+0x314>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d02b      	beq.n	8004a22 <HAL_GPIO_Init+0x226>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a51      	ldr	r2, [pc, #324]	; (8004b14 <HAL_GPIO_Init+0x318>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d025      	beq.n	8004a1e <HAL_GPIO_Init+0x222>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a50      	ldr	r2, [pc, #320]	; (8004b18 <HAL_GPIO_Init+0x31c>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d01f      	beq.n	8004a1a <HAL_GPIO_Init+0x21e>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a4f      	ldr	r2, [pc, #316]	; (8004b1c <HAL_GPIO_Init+0x320>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d019      	beq.n	8004a16 <HAL_GPIO_Init+0x21a>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a4e      	ldr	r2, [pc, #312]	; (8004b20 <HAL_GPIO_Init+0x324>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d013      	beq.n	8004a12 <HAL_GPIO_Init+0x216>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a4d      	ldr	r2, [pc, #308]	; (8004b24 <HAL_GPIO_Init+0x328>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d00d      	beq.n	8004a0e <HAL_GPIO_Init+0x212>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a4c      	ldr	r2, [pc, #304]	; (8004b28 <HAL_GPIO_Init+0x32c>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d007      	beq.n	8004a0a <HAL_GPIO_Init+0x20e>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a4b      	ldr	r2, [pc, #300]	; (8004b2c <HAL_GPIO_Init+0x330>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d101      	bne.n	8004a06 <HAL_GPIO_Init+0x20a>
 8004a02:	2307      	movs	r3, #7
 8004a04:	e00e      	b.n	8004a24 <HAL_GPIO_Init+0x228>
 8004a06:	2308      	movs	r3, #8
 8004a08:	e00c      	b.n	8004a24 <HAL_GPIO_Init+0x228>
 8004a0a:	2306      	movs	r3, #6
 8004a0c:	e00a      	b.n	8004a24 <HAL_GPIO_Init+0x228>
 8004a0e:	2305      	movs	r3, #5
 8004a10:	e008      	b.n	8004a24 <HAL_GPIO_Init+0x228>
 8004a12:	2304      	movs	r3, #4
 8004a14:	e006      	b.n	8004a24 <HAL_GPIO_Init+0x228>
 8004a16:	2303      	movs	r3, #3
 8004a18:	e004      	b.n	8004a24 <HAL_GPIO_Init+0x228>
 8004a1a:	2302      	movs	r3, #2
 8004a1c:	e002      	b.n	8004a24 <HAL_GPIO_Init+0x228>
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e000      	b.n	8004a24 <HAL_GPIO_Init+0x228>
 8004a22:	2300      	movs	r3, #0
 8004a24:	69fa      	ldr	r2, [r7, #28]
 8004a26:	f002 0203 	and.w	r2, r2, #3
 8004a2a:	0092      	lsls	r2, r2, #2
 8004a2c:	4093      	lsls	r3, r2
 8004a2e:	69ba      	ldr	r2, [r7, #24]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a34:	4935      	ldr	r1, [pc, #212]	; (8004b0c <HAL_GPIO_Init+0x310>)
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	089b      	lsrs	r3, r3, #2
 8004a3a:	3302      	adds	r3, #2
 8004a3c:	69ba      	ldr	r2, [r7, #24]
 8004a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a42:	4b3b      	ldr	r3, [pc, #236]	; (8004b30 <HAL_GPIO_Init+0x334>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	43db      	mvns	r3, r3
 8004a4c:	69ba      	ldr	r2, [r7, #24]
 8004a4e:	4013      	ands	r3, r2
 8004a50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d003      	beq.n	8004a66 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004a5e:	69ba      	ldr	r2, [r7, #24]
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a66:	4a32      	ldr	r2, [pc, #200]	; (8004b30 <HAL_GPIO_Init+0x334>)
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004a6c:	4b30      	ldr	r3, [pc, #192]	; (8004b30 <HAL_GPIO_Init+0x334>)
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	43db      	mvns	r3, r3
 8004a76:	69ba      	ldr	r2, [r7, #24]
 8004a78:	4013      	ands	r3, r2
 8004a7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d003      	beq.n	8004a90 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004a88:	69ba      	ldr	r2, [r7, #24]
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a90:	4a27      	ldr	r2, [pc, #156]	; (8004b30 <HAL_GPIO_Init+0x334>)
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a96:	4b26      	ldr	r3, [pc, #152]	; (8004b30 <HAL_GPIO_Init+0x334>)
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	43db      	mvns	r3, r3
 8004aa0:	69ba      	ldr	r2, [r7, #24]
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d003      	beq.n	8004aba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004ab2:	69ba      	ldr	r2, [r7, #24]
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004aba:	4a1d      	ldr	r2, [pc, #116]	; (8004b30 <HAL_GPIO_Init+0x334>)
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004ac0:	4b1b      	ldr	r3, [pc, #108]	; (8004b30 <HAL_GPIO_Init+0x334>)
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	43db      	mvns	r3, r3
 8004aca:	69ba      	ldr	r2, [r7, #24]
 8004acc:	4013      	ands	r3, r2
 8004ace:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d003      	beq.n	8004ae4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004adc:	69ba      	ldr	r2, [r7, #24]
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ae4:	4a12      	ldr	r2, [pc, #72]	; (8004b30 <HAL_GPIO_Init+0x334>)
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	3301      	adds	r3, #1
 8004aee:	61fb      	str	r3, [r7, #28]
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	2b0f      	cmp	r3, #15
 8004af4:	f67f ae90 	bls.w	8004818 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004af8:	bf00      	nop
 8004afa:	bf00      	nop
 8004afc:	3724      	adds	r7, #36	; 0x24
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	40023800 	.word	0x40023800
 8004b0c:	40013800 	.word	0x40013800
 8004b10:	40020000 	.word	0x40020000
 8004b14:	40020400 	.word	0x40020400
 8004b18:	40020800 	.word	0x40020800
 8004b1c:	40020c00 	.word	0x40020c00
 8004b20:	40021000 	.word	0x40021000
 8004b24:	40021400 	.word	0x40021400
 8004b28:	40021800 	.word	0x40021800
 8004b2c:	40021c00 	.word	0x40021c00
 8004b30:	40013c00 	.word	0x40013c00

08004b34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b085      	sub	sp, #20
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	691a      	ldr	r2, [r3, #16]
 8004b44:	887b      	ldrh	r3, [r7, #2]
 8004b46:	4013      	ands	r3, r2
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d002      	beq.n	8004b52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	73fb      	strb	r3, [r7, #15]
 8004b50:	e001      	b.n	8004b56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004b52:	2300      	movs	r3, #0
 8004b54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3714      	adds	r7, #20
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	807b      	strh	r3, [r7, #2]
 8004b70:	4613      	mov	r3, r2
 8004b72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b74:	787b      	ldrb	r3, [r7, #1]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d003      	beq.n	8004b82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b7a:	887a      	ldrh	r2, [r7, #2]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004b80:	e003      	b.n	8004b8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004b82:	887b      	ldrh	r3, [r7, #2]
 8004b84:	041a      	lsls	r2, r3, #16
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	619a      	str	r2, [r3, #24]
}
 8004b8a:	bf00      	nop
 8004b8c:	370c      	adds	r7, #12
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
	...

08004b98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d101      	bne.n	8004baa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e12b      	b.n	8004e02 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d106      	bne.n	8004bc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f7fd fd8c 	bl	80026dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2224      	movs	r2, #36	; 0x24
 8004bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f022 0201 	bic.w	r2, r2, #1
 8004bda:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004bfa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004bfc:	f002 fd7c 	bl	80076f8 <HAL_RCC_GetPCLK1Freq>
 8004c00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	4a81      	ldr	r2, [pc, #516]	; (8004e0c <HAL_I2C_Init+0x274>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d807      	bhi.n	8004c1c <HAL_I2C_Init+0x84>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	4a80      	ldr	r2, [pc, #512]	; (8004e10 <HAL_I2C_Init+0x278>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	bf94      	ite	ls
 8004c14:	2301      	movls	r3, #1
 8004c16:	2300      	movhi	r3, #0
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	e006      	b.n	8004c2a <HAL_I2C_Init+0x92>
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	4a7d      	ldr	r2, [pc, #500]	; (8004e14 <HAL_I2C_Init+0x27c>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	bf94      	ite	ls
 8004c24:	2301      	movls	r3, #1
 8004c26:	2300      	movhi	r3, #0
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d001      	beq.n	8004c32 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e0e7      	b.n	8004e02 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	4a78      	ldr	r2, [pc, #480]	; (8004e18 <HAL_I2C_Init+0x280>)
 8004c36:	fba2 2303 	umull	r2, r3, r2, r3
 8004c3a:	0c9b      	lsrs	r3, r3, #18
 8004c3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	68ba      	ldr	r2, [r7, #8]
 8004c4e:	430a      	orrs	r2, r1
 8004c50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	6a1b      	ldr	r3, [r3, #32]
 8004c58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	4a6a      	ldr	r2, [pc, #424]	; (8004e0c <HAL_I2C_Init+0x274>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d802      	bhi.n	8004c6c <HAL_I2C_Init+0xd4>
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	3301      	adds	r3, #1
 8004c6a:	e009      	b.n	8004c80 <HAL_I2C_Init+0xe8>
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004c72:	fb02 f303 	mul.w	r3, r2, r3
 8004c76:	4a69      	ldr	r2, [pc, #420]	; (8004e1c <HAL_I2C_Init+0x284>)
 8004c78:	fba2 2303 	umull	r2, r3, r2, r3
 8004c7c:	099b      	lsrs	r3, r3, #6
 8004c7e:	3301      	adds	r3, #1
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	6812      	ldr	r2, [r2, #0]
 8004c84:	430b      	orrs	r3, r1
 8004c86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	69db      	ldr	r3, [r3, #28]
 8004c8e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004c92:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	495c      	ldr	r1, [pc, #368]	; (8004e0c <HAL_I2C_Init+0x274>)
 8004c9c:	428b      	cmp	r3, r1
 8004c9e:	d819      	bhi.n	8004cd4 <HAL_I2C_Init+0x13c>
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	1e59      	subs	r1, r3, #1
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	005b      	lsls	r3, r3, #1
 8004caa:	fbb1 f3f3 	udiv	r3, r1, r3
 8004cae:	1c59      	adds	r1, r3, #1
 8004cb0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004cb4:	400b      	ands	r3, r1
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00a      	beq.n	8004cd0 <HAL_I2C_Init+0x138>
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	1e59      	subs	r1, r3, #1
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	005b      	lsls	r3, r3, #1
 8004cc4:	fbb1 f3f3 	udiv	r3, r1, r3
 8004cc8:	3301      	adds	r3, #1
 8004cca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cce:	e051      	b.n	8004d74 <HAL_I2C_Init+0x1dc>
 8004cd0:	2304      	movs	r3, #4
 8004cd2:	e04f      	b.n	8004d74 <HAL_I2C_Init+0x1dc>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d111      	bne.n	8004d00 <HAL_I2C_Init+0x168>
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	1e58      	subs	r0, r3, #1
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6859      	ldr	r1, [r3, #4]
 8004ce4:	460b      	mov	r3, r1
 8004ce6:	005b      	lsls	r3, r3, #1
 8004ce8:	440b      	add	r3, r1
 8004cea:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cee:	3301      	adds	r3, #1
 8004cf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	bf0c      	ite	eq
 8004cf8:	2301      	moveq	r3, #1
 8004cfa:	2300      	movne	r3, #0
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	e012      	b.n	8004d26 <HAL_I2C_Init+0x18e>
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	1e58      	subs	r0, r3, #1
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6859      	ldr	r1, [r3, #4]
 8004d08:	460b      	mov	r3, r1
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	440b      	add	r3, r1
 8004d0e:	0099      	lsls	r1, r3, #2
 8004d10:	440b      	add	r3, r1
 8004d12:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d16:	3301      	adds	r3, #1
 8004d18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	bf0c      	ite	eq
 8004d20:	2301      	moveq	r3, #1
 8004d22:	2300      	movne	r3, #0
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d001      	beq.n	8004d2e <HAL_I2C_Init+0x196>
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e022      	b.n	8004d74 <HAL_I2C_Init+0x1dc>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d10e      	bne.n	8004d54 <HAL_I2C_Init+0x1bc>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	1e58      	subs	r0, r3, #1
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6859      	ldr	r1, [r3, #4]
 8004d3e:	460b      	mov	r3, r1
 8004d40:	005b      	lsls	r3, r3, #1
 8004d42:	440b      	add	r3, r1
 8004d44:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d48:	3301      	adds	r3, #1
 8004d4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d52:	e00f      	b.n	8004d74 <HAL_I2C_Init+0x1dc>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	1e58      	subs	r0, r3, #1
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6859      	ldr	r1, [r3, #4]
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	440b      	add	r3, r1
 8004d62:	0099      	lsls	r1, r3, #2
 8004d64:	440b      	add	r3, r1
 8004d66:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d74:	6879      	ldr	r1, [r7, #4]
 8004d76:	6809      	ldr	r1, [r1, #0]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	69da      	ldr	r2, [r3, #28]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a1b      	ldr	r3, [r3, #32]
 8004d8e:	431a      	orrs	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	430a      	orrs	r2, r1
 8004d96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004da2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	6911      	ldr	r1, [r2, #16]
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	68d2      	ldr	r2, [r2, #12]
 8004dae:	4311      	orrs	r1, r2
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	6812      	ldr	r2, [r2, #0]
 8004db4:	430b      	orrs	r3, r1
 8004db6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	695a      	ldr	r2, [r3, #20]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	431a      	orrs	r2, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	430a      	orrs	r2, r1
 8004dd2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f042 0201 	orr.w	r2, r2, #1
 8004de2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2220      	movs	r2, #32
 8004dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3710      	adds	r7, #16
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	000186a0 	.word	0x000186a0
 8004e10:	001e847f 	.word	0x001e847f
 8004e14:	003d08ff 	.word	0x003d08ff
 8004e18:	431bde83 	.word	0x431bde83
 8004e1c:	10624dd3 	.word	0x10624dd3

08004e20 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b088      	sub	sp, #32
 8004e24:	af02      	add	r7, sp, #8
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	4608      	mov	r0, r1
 8004e2a:	4611      	mov	r1, r2
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	4603      	mov	r3, r0
 8004e30:	817b      	strh	r3, [r7, #10]
 8004e32:	460b      	mov	r3, r1
 8004e34:	813b      	strh	r3, [r7, #8]
 8004e36:	4613      	mov	r3, r2
 8004e38:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e3a:	f7ff fad9 	bl	80043f0 <HAL_GetTick>
 8004e3e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	2b20      	cmp	r3, #32
 8004e4a:	f040 80d9 	bne.w	8005000 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	9300      	str	r3, [sp, #0]
 8004e52:	2319      	movs	r3, #25
 8004e54:	2201      	movs	r2, #1
 8004e56:	496d      	ldr	r1, [pc, #436]	; (800500c <HAL_I2C_Mem_Write+0x1ec>)
 8004e58:	68f8      	ldr	r0, [r7, #12]
 8004e5a:	f000 fc7f 	bl	800575c <I2C_WaitOnFlagUntilTimeout>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d001      	beq.n	8004e68 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004e64:	2302      	movs	r3, #2
 8004e66:	e0cc      	b.n	8005002 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d101      	bne.n	8004e76 <HAL_I2C_Mem_Write+0x56>
 8004e72:	2302      	movs	r3, #2
 8004e74:	e0c5      	b.n	8005002 <HAL_I2C_Mem_Write+0x1e2>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 0301 	and.w	r3, r3, #1
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d007      	beq.n	8004e9c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f042 0201 	orr.w	r2, r2, #1
 8004e9a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004eaa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2221      	movs	r2, #33	; 0x21
 8004eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2240      	movs	r2, #64	; 0x40
 8004eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6a3a      	ldr	r2, [r7, #32]
 8004ec6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004ecc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	4a4d      	ldr	r2, [pc, #308]	; (8005010 <HAL_I2C_Mem_Write+0x1f0>)
 8004edc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004ede:	88f8      	ldrh	r0, [r7, #6]
 8004ee0:	893a      	ldrh	r2, [r7, #8]
 8004ee2:	8979      	ldrh	r1, [r7, #10]
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	9301      	str	r3, [sp, #4]
 8004ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eea:	9300      	str	r3, [sp, #0]
 8004eec:	4603      	mov	r3, r0
 8004eee:	68f8      	ldr	r0, [r7, #12]
 8004ef0:	f000 fab6 	bl	8005460 <I2C_RequestMemoryWrite>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d052      	beq.n	8004fa0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e081      	b.n	8005002 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004efe:	697a      	ldr	r2, [r7, #20]
 8004f00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f02:	68f8      	ldr	r0, [r7, #12]
 8004f04:	f000 fd00 	bl	8005908 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00d      	beq.n	8004f2a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f12:	2b04      	cmp	r3, #4
 8004f14:	d107      	bne.n	8004f26 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f24:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e06b      	b.n	8005002 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2e:	781a      	ldrb	r2, [r3, #0]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3a:	1c5a      	adds	r2, r3, #1
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f44:	3b01      	subs	r3, #1
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	3b01      	subs	r3, #1
 8004f54:	b29a      	uxth	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	695b      	ldr	r3, [r3, #20]
 8004f60:	f003 0304 	and.w	r3, r3, #4
 8004f64:	2b04      	cmp	r3, #4
 8004f66:	d11b      	bne.n	8004fa0 <HAL_I2C_Mem_Write+0x180>
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d017      	beq.n	8004fa0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f74:	781a      	ldrb	r2, [r3, #0]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f80:	1c5a      	adds	r2, r3, #1
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f8a:	3b01      	subs	r3, #1
 8004f8c:	b29a      	uxth	r2, r3
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	3b01      	subs	r3, #1
 8004f9a:	b29a      	uxth	r2, r3
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d1aa      	bne.n	8004efe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fa8:	697a      	ldr	r2, [r7, #20]
 8004faa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fac:	68f8      	ldr	r0, [r7, #12]
 8004fae:	f000 fcec 	bl	800598a <I2C_WaitOnBTFFlagUntilTimeout>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d00d      	beq.n	8004fd4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fbc:	2b04      	cmp	r3, #4
 8004fbe:	d107      	bne.n	8004fd0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e016      	b.n	8005002 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fe2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2220      	movs	r2, #32
 8004fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	e000      	b.n	8005002 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005000:	2302      	movs	r3, #2
  }
}
 8005002:	4618      	mov	r0, r3
 8005004:	3718      	adds	r7, #24
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	00100002 	.word	0x00100002
 8005010:	ffff0000 	.word	0xffff0000

08005014 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b08c      	sub	sp, #48	; 0x30
 8005018:	af02      	add	r7, sp, #8
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	4608      	mov	r0, r1
 800501e:	4611      	mov	r1, r2
 8005020:	461a      	mov	r2, r3
 8005022:	4603      	mov	r3, r0
 8005024:	817b      	strh	r3, [r7, #10]
 8005026:	460b      	mov	r3, r1
 8005028:	813b      	strh	r3, [r7, #8]
 800502a:	4613      	mov	r3, r2
 800502c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800502e:	f7ff f9df 	bl	80043f0 <HAL_GetTick>
 8005032:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800503a:	b2db      	uxtb	r3, r3
 800503c:	2b20      	cmp	r3, #32
 800503e:	f040 8208 	bne.w	8005452 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005044:	9300      	str	r3, [sp, #0]
 8005046:	2319      	movs	r3, #25
 8005048:	2201      	movs	r2, #1
 800504a:	497b      	ldr	r1, [pc, #492]	; (8005238 <HAL_I2C_Mem_Read+0x224>)
 800504c:	68f8      	ldr	r0, [r7, #12]
 800504e:	f000 fb85 	bl	800575c <I2C_WaitOnFlagUntilTimeout>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d001      	beq.n	800505c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005058:	2302      	movs	r3, #2
 800505a:	e1fb      	b.n	8005454 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005062:	2b01      	cmp	r3, #1
 8005064:	d101      	bne.n	800506a <HAL_I2C_Mem_Read+0x56>
 8005066:	2302      	movs	r3, #2
 8005068:	e1f4      	b.n	8005454 <HAL_I2C_Mem_Read+0x440>
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 0301 	and.w	r3, r3, #1
 800507c:	2b01      	cmp	r3, #1
 800507e:	d007      	beq.n	8005090 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f042 0201 	orr.w	r2, r2, #1
 800508e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800509e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2222      	movs	r2, #34	; 0x22
 80050a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2240      	movs	r2, #64	; 0x40
 80050ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80050c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050c6:	b29a      	uxth	r2, r3
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	4a5b      	ldr	r2, [pc, #364]	; (800523c <HAL_I2C_Mem_Read+0x228>)
 80050d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80050d2:	88f8      	ldrh	r0, [r7, #6]
 80050d4:	893a      	ldrh	r2, [r7, #8]
 80050d6:	8979      	ldrh	r1, [r7, #10]
 80050d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050da:	9301      	str	r3, [sp, #4]
 80050dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050de:	9300      	str	r3, [sp, #0]
 80050e0:	4603      	mov	r3, r0
 80050e2:	68f8      	ldr	r0, [r7, #12]
 80050e4:	f000 fa52 	bl	800558c <I2C_RequestMemoryRead>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d001      	beq.n	80050f2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e1b0      	b.n	8005454 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d113      	bne.n	8005122 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050fa:	2300      	movs	r3, #0
 80050fc:	623b      	str	r3, [r7, #32]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	695b      	ldr	r3, [r3, #20]
 8005104:	623b      	str	r3, [r7, #32]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	699b      	ldr	r3, [r3, #24]
 800510c:	623b      	str	r3, [r7, #32]
 800510e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800511e:	601a      	str	r2, [r3, #0]
 8005120:	e184      	b.n	800542c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005126:	2b01      	cmp	r3, #1
 8005128:	d11b      	bne.n	8005162 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005138:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800513a:	2300      	movs	r3, #0
 800513c:	61fb      	str	r3, [r7, #28]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	695b      	ldr	r3, [r3, #20]
 8005144:	61fb      	str	r3, [r7, #28]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	699b      	ldr	r3, [r3, #24]
 800514c:	61fb      	str	r3, [r7, #28]
 800514e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800515e:	601a      	str	r2, [r3, #0]
 8005160:	e164      	b.n	800542c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005166:	2b02      	cmp	r3, #2
 8005168:	d11b      	bne.n	80051a2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005178:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005188:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800518a:	2300      	movs	r3, #0
 800518c:	61bb      	str	r3, [r7, #24]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	695b      	ldr	r3, [r3, #20]
 8005194:	61bb      	str	r3, [r7, #24]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	699b      	ldr	r3, [r3, #24]
 800519c:	61bb      	str	r3, [r7, #24]
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	e144      	b.n	800542c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051a2:	2300      	movs	r3, #0
 80051a4:	617b      	str	r3, [r7, #20]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	695b      	ldr	r3, [r3, #20]
 80051ac:	617b      	str	r3, [r7, #20]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	699b      	ldr	r3, [r3, #24]
 80051b4:	617b      	str	r3, [r7, #20]
 80051b6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80051b8:	e138      	b.n	800542c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051be:	2b03      	cmp	r3, #3
 80051c0:	f200 80f1 	bhi.w	80053a6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d123      	bne.n	8005214 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80051d0:	68f8      	ldr	r0, [r7, #12]
 80051d2:	f000 fc1b 	bl	8005a0c <I2C_WaitOnRXNEFlagUntilTimeout>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d001      	beq.n	80051e0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e139      	b.n	8005454 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	691a      	ldr	r2, [r3, #16]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ea:	b2d2      	uxtb	r2, r2
 80051ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f2:	1c5a      	adds	r2, r3, #1
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051fc:	3b01      	subs	r3, #1
 80051fe:	b29a      	uxth	r2, r3
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005208:	b29b      	uxth	r3, r3
 800520a:	3b01      	subs	r3, #1
 800520c:	b29a      	uxth	r2, r3
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005212:	e10b      	b.n	800542c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005218:	2b02      	cmp	r3, #2
 800521a:	d14e      	bne.n	80052ba <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800521c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521e:	9300      	str	r3, [sp, #0]
 8005220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005222:	2200      	movs	r2, #0
 8005224:	4906      	ldr	r1, [pc, #24]	; (8005240 <HAL_I2C_Mem_Read+0x22c>)
 8005226:	68f8      	ldr	r0, [r7, #12]
 8005228:	f000 fa98 	bl	800575c <I2C_WaitOnFlagUntilTimeout>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d008      	beq.n	8005244 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e10e      	b.n	8005454 <HAL_I2C_Mem_Read+0x440>
 8005236:	bf00      	nop
 8005238:	00100002 	.word	0x00100002
 800523c:	ffff0000 	.word	0xffff0000
 8005240:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005252:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	691a      	ldr	r2, [r3, #16]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525e:	b2d2      	uxtb	r2, r2
 8005260:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005266:	1c5a      	adds	r2, r3, #1
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005270:	3b01      	subs	r3, #1
 8005272:	b29a      	uxth	r2, r3
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800527c:	b29b      	uxth	r3, r3
 800527e:	3b01      	subs	r3, #1
 8005280:	b29a      	uxth	r2, r3
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	691a      	ldr	r2, [r3, #16]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005290:	b2d2      	uxtb	r2, r2
 8005292:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005298:	1c5a      	adds	r2, r3, #1
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052a2:	3b01      	subs	r3, #1
 80052a4:	b29a      	uxth	r2, r3
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	3b01      	subs	r3, #1
 80052b2:	b29a      	uxth	r2, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80052b8:	e0b8      	b.n	800542c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80052ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052bc:	9300      	str	r3, [sp, #0]
 80052be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c0:	2200      	movs	r2, #0
 80052c2:	4966      	ldr	r1, [pc, #408]	; (800545c <HAL_I2C_Mem_Read+0x448>)
 80052c4:	68f8      	ldr	r0, [r7, #12]
 80052c6:	f000 fa49 	bl	800575c <I2C_WaitOnFlagUntilTimeout>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d001      	beq.n	80052d4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	e0bf      	b.n	8005454 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	691a      	ldr	r2, [r3, #16]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ee:	b2d2      	uxtb	r2, r2
 80052f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f6:	1c5a      	adds	r2, r3, #1
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005300:	3b01      	subs	r3, #1
 8005302:	b29a      	uxth	r2, r3
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800530c:	b29b      	uxth	r3, r3
 800530e:	3b01      	subs	r3, #1
 8005310:	b29a      	uxth	r2, r3
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005318:	9300      	str	r3, [sp, #0]
 800531a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800531c:	2200      	movs	r2, #0
 800531e:	494f      	ldr	r1, [pc, #316]	; (800545c <HAL_I2C_Mem_Read+0x448>)
 8005320:	68f8      	ldr	r0, [r7, #12]
 8005322:	f000 fa1b 	bl	800575c <I2C_WaitOnFlagUntilTimeout>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d001      	beq.n	8005330 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	e091      	b.n	8005454 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800533e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	691a      	ldr	r2, [r3, #16]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534a:	b2d2      	uxtb	r2, r2
 800534c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005352:	1c5a      	adds	r2, r3, #1
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800535c:	3b01      	subs	r3, #1
 800535e:	b29a      	uxth	r2, r3
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005368:	b29b      	uxth	r3, r3
 800536a:	3b01      	subs	r3, #1
 800536c:	b29a      	uxth	r2, r3
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	691a      	ldr	r2, [r3, #16]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537c:	b2d2      	uxtb	r2, r2
 800537e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005384:	1c5a      	adds	r2, r3, #1
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800538e:	3b01      	subs	r3, #1
 8005390:	b29a      	uxth	r2, r3
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800539a:	b29b      	uxth	r3, r3
 800539c:	3b01      	subs	r3, #1
 800539e:	b29a      	uxth	r2, r3
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80053a4:	e042      	b.n	800542c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053a8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80053aa:	68f8      	ldr	r0, [r7, #12]
 80053ac:	f000 fb2e 	bl	8005a0c <I2C_WaitOnRXNEFlagUntilTimeout>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d001      	beq.n	80053ba <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e04c      	b.n	8005454 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	691a      	ldr	r2, [r3, #16]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c4:	b2d2      	uxtb	r2, r2
 80053c6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053cc:	1c5a      	adds	r2, r3, #1
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053d6:	3b01      	subs	r3, #1
 80053d8:	b29a      	uxth	r2, r3
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	3b01      	subs	r3, #1
 80053e6:	b29a      	uxth	r2, r3
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	695b      	ldr	r3, [r3, #20]
 80053f2:	f003 0304 	and.w	r3, r3, #4
 80053f6:	2b04      	cmp	r3, #4
 80053f8:	d118      	bne.n	800542c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	691a      	ldr	r2, [r3, #16]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005404:	b2d2      	uxtb	r2, r2
 8005406:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540c:	1c5a      	adds	r2, r3, #1
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005416:	3b01      	subs	r3, #1
 8005418:	b29a      	uxth	r2, r3
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005422:	b29b      	uxth	r3, r3
 8005424:	3b01      	subs	r3, #1
 8005426:	b29a      	uxth	r2, r3
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005430:	2b00      	cmp	r3, #0
 8005432:	f47f aec2 	bne.w	80051ba <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2220      	movs	r2, #32
 800543a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2200      	movs	r2, #0
 8005442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2200      	movs	r2, #0
 800544a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800544e:	2300      	movs	r3, #0
 8005450:	e000      	b.n	8005454 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005452:	2302      	movs	r3, #2
  }
}
 8005454:	4618      	mov	r0, r3
 8005456:	3728      	adds	r7, #40	; 0x28
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}
 800545c:	00010004 	.word	0x00010004

08005460 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b088      	sub	sp, #32
 8005464:	af02      	add	r7, sp, #8
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	4608      	mov	r0, r1
 800546a:	4611      	mov	r1, r2
 800546c:	461a      	mov	r2, r3
 800546e:	4603      	mov	r3, r0
 8005470:	817b      	strh	r3, [r7, #10]
 8005472:	460b      	mov	r3, r1
 8005474:	813b      	strh	r3, [r7, #8]
 8005476:	4613      	mov	r3, r2
 8005478:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005488:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800548a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548c:	9300      	str	r3, [sp, #0]
 800548e:	6a3b      	ldr	r3, [r7, #32]
 8005490:	2200      	movs	r2, #0
 8005492:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005496:	68f8      	ldr	r0, [r7, #12]
 8005498:	f000 f960 	bl	800575c <I2C_WaitOnFlagUntilTimeout>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d00d      	beq.n	80054be <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054b0:	d103      	bne.n	80054ba <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054b8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80054ba:	2303      	movs	r3, #3
 80054bc:	e05f      	b.n	800557e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80054be:	897b      	ldrh	r3, [r7, #10]
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	461a      	mov	r2, r3
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80054cc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d0:	6a3a      	ldr	r2, [r7, #32]
 80054d2:	492d      	ldr	r1, [pc, #180]	; (8005588 <I2C_RequestMemoryWrite+0x128>)
 80054d4:	68f8      	ldr	r0, [r7, #12]
 80054d6:	f000 f998 	bl	800580a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d001      	beq.n	80054e4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e04c      	b.n	800557e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054e4:	2300      	movs	r3, #0
 80054e6:	617b      	str	r3, [r7, #20]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	695b      	ldr	r3, [r3, #20]
 80054ee:	617b      	str	r3, [r7, #20]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	699b      	ldr	r3, [r3, #24]
 80054f6:	617b      	str	r3, [r7, #20]
 80054f8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054fc:	6a39      	ldr	r1, [r7, #32]
 80054fe:	68f8      	ldr	r0, [r7, #12]
 8005500:	f000 fa02 	bl	8005908 <I2C_WaitOnTXEFlagUntilTimeout>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00d      	beq.n	8005526 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550e:	2b04      	cmp	r3, #4
 8005510:	d107      	bne.n	8005522 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005520:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e02b      	b.n	800557e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005526:	88fb      	ldrh	r3, [r7, #6]
 8005528:	2b01      	cmp	r3, #1
 800552a:	d105      	bne.n	8005538 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800552c:	893b      	ldrh	r3, [r7, #8]
 800552e:	b2da      	uxtb	r2, r3
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	611a      	str	r2, [r3, #16]
 8005536:	e021      	b.n	800557c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005538:	893b      	ldrh	r3, [r7, #8]
 800553a:	0a1b      	lsrs	r3, r3, #8
 800553c:	b29b      	uxth	r3, r3
 800553e:	b2da      	uxtb	r2, r3
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005548:	6a39      	ldr	r1, [r7, #32]
 800554a:	68f8      	ldr	r0, [r7, #12]
 800554c:	f000 f9dc 	bl	8005908 <I2C_WaitOnTXEFlagUntilTimeout>
 8005550:	4603      	mov	r3, r0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00d      	beq.n	8005572 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555a:	2b04      	cmp	r3, #4
 800555c:	d107      	bne.n	800556e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800556c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e005      	b.n	800557e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005572:	893b      	ldrh	r3, [r7, #8]
 8005574:	b2da      	uxtb	r2, r3
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	3718      	adds	r7, #24
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	00010002 	.word	0x00010002

0800558c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b088      	sub	sp, #32
 8005590:	af02      	add	r7, sp, #8
 8005592:	60f8      	str	r0, [r7, #12]
 8005594:	4608      	mov	r0, r1
 8005596:	4611      	mov	r1, r2
 8005598:	461a      	mov	r2, r3
 800559a:	4603      	mov	r3, r0
 800559c:	817b      	strh	r3, [r7, #10]
 800559e:	460b      	mov	r3, r1
 80055a0:	813b      	strh	r3, [r7, #8]
 80055a2:	4613      	mov	r3, r2
 80055a4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80055b4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80055c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c8:	9300      	str	r3, [sp, #0]
 80055ca:	6a3b      	ldr	r3, [r7, #32]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80055d2:	68f8      	ldr	r0, [r7, #12]
 80055d4:	f000 f8c2 	bl	800575c <I2C_WaitOnFlagUntilTimeout>
 80055d8:	4603      	mov	r3, r0
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d00d      	beq.n	80055fa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055ec:	d103      	bne.n	80055f6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80055f6:	2303      	movs	r3, #3
 80055f8:	e0aa      	b.n	8005750 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80055fa:	897b      	ldrh	r3, [r7, #10]
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	461a      	mov	r2, r3
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005608:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800560a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560c:	6a3a      	ldr	r2, [r7, #32]
 800560e:	4952      	ldr	r1, [pc, #328]	; (8005758 <I2C_RequestMemoryRead+0x1cc>)
 8005610:	68f8      	ldr	r0, [r7, #12]
 8005612:	f000 f8fa 	bl	800580a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d001      	beq.n	8005620 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	e097      	b.n	8005750 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005620:	2300      	movs	r3, #0
 8005622:	617b      	str	r3, [r7, #20]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	695b      	ldr	r3, [r3, #20]
 800562a:	617b      	str	r3, [r7, #20]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	699b      	ldr	r3, [r3, #24]
 8005632:	617b      	str	r3, [r7, #20]
 8005634:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005638:	6a39      	ldr	r1, [r7, #32]
 800563a:	68f8      	ldr	r0, [r7, #12]
 800563c:	f000 f964 	bl	8005908 <I2C_WaitOnTXEFlagUntilTimeout>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d00d      	beq.n	8005662 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564a:	2b04      	cmp	r3, #4
 800564c:	d107      	bne.n	800565e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800565c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e076      	b.n	8005750 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005662:	88fb      	ldrh	r3, [r7, #6]
 8005664:	2b01      	cmp	r3, #1
 8005666:	d105      	bne.n	8005674 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005668:	893b      	ldrh	r3, [r7, #8]
 800566a:	b2da      	uxtb	r2, r3
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	611a      	str	r2, [r3, #16]
 8005672:	e021      	b.n	80056b8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005674:	893b      	ldrh	r3, [r7, #8]
 8005676:	0a1b      	lsrs	r3, r3, #8
 8005678:	b29b      	uxth	r3, r3
 800567a:	b2da      	uxtb	r2, r3
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005684:	6a39      	ldr	r1, [r7, #32]
 8005686:	68f8      	ldr	r0, [r7, #12]
 8005688:	f000 f93e 	bl	8005908 <I2C_WaitOnTXEFlagUntilTimeout>
 800568c:	4603      	mov	r3, r0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00d      	beq.n	80056ae <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005696:	2b04      	cmp	r3, #4
 8005698:	d107      	bne.n	80056aa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e050      	b.n	8005750 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80056ae:	893b      	ldrh	r3, [r7, #8]
 80056b0:	b2da      	uxtb	r2, r3
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056ba:	6a39      	ldr	r1, [r7, #32]
 80056bc:	68f8      	ldr	r0, [r7, #12]
 80056be:	f000 f923 	bl	8005908 <I2C_WaitOnTXEFlagUntilTimeout>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d00d      	beq.n	80056e4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056cc:	2b04      	cmp	r3, #4
 80056ce:	d107      	bne.n	80056e0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056de:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	e035      	b.n	8005750 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056f2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f6:	9300      	str	r3, [sp, #0]
 80056f8:	6a3b      	ldr	r3, [r7, #32]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005700:	68f8      	ldr	r0, [r7, #12]
 8005702:	f000 f82b 	bl	800575c <I2C_WaitOnFlagUntilTimeout>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00d      	beq.n	8005728 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005716:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800571a:	d103      	bne.n	8005724 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005722:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005724:	2303      	movs	r3, #3
 8005726:	e013      	b.n	8005750 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005728:	897b      	ldrh	r3, [r7, #10]
 800572a:	b2db      	uxtb	r3, r3
 800572c:	f043 0301 	orr.w	r3, r3, #1
 8005730:	b2da      	uxtb	r2, r3
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573a:	6a3a      	ldr	r2, [r7, #32]
 800573c:	4906      	ldr	r1, [pc, #24]	; (8005758 <I2C_RequestMemoryRead+0x1cc>)
 800573e:	68f8      	ldr	r0, [r7, #12]
 8005740:	f000 f863 	bl	800580a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d001      	beq.n	800574e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e000      	b.n	8005750 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800574e:	2300      	movs	r3, #0
}
 8005750:	4618      	mov	r0, r3
 8005752:	3718      	adds	r7, #24
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}
 8005758:	00010002 	.word	0x00010002

0800575c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	603b      	str	r3, [r7, #0]
 8005768:	4613      	mov	r3, r2
 800576a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800576c:	e025      	b.n	80057ba <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005774:	d021      	beq.n	80057ba <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005776:	f7fe fe3b 	bl	80043f0 <HAL_GetTick>
 800577a:	4602      	mov	r2, r0
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	1ad3      	subs	r3, r2, r3
 8005780:	683a      	ldr	r2, [r7, #0]
 8005782:	429a      	cmp	r2, r3
 8005784:	d302      	bcc.n	800578c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d116      	bne.n	80057ba <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2200      	movs	r2, #0
 8005790:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2220      	movs	r2, #32
 8005796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2200      	movs	r2, #0
 800579e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a6:	f043 0220 	orr.w	r2, r3, #32
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e023      	b.n	8005802 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	0c1b      	lsrs	r3, r3, #16
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d10d      	bne.n	80057e0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	695b      	ldr	r3, [r3, #20]
 80057ca:	43da      	mvns	r2, r3
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	4013      	ands	r3, r2
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	bf0c      	ite	eq
 80057d6:	2301      	moveq	r3, #1
 80057d8:	2300      	movne	r3, #0
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	461a      	mov	r2, r3
 80057de:	e00c      	b.n	80057fa <I2C_WaitOnFlagUntilTimeout+0x9e>
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	43da      	mvns	r2, r3
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	4013      	ands	r3, r2
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	bf0c      	ite	eq
 80057f2:	2301      	moveq	r3, #1
 80057f4:	2300      	movne	r3, #0
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	461a      	mov	r2, r3
 80057fa:	79fb      	ldrb	r3, [r7, #7]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d0b6      	beq.n	800576e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	3710      	adds	r7, #16
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}

0800580a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800580a:	b580      	push	{r7, lr}
 800580c:	b084      	sub	sp, #16
 800580e:	af00      	add	r7, sp, #0
 8005810:	60f8      	str	r0, [r7, #12]
 8005812:	60b9      	str	r1, [r7, #8]
 8005814:	607a      	str	r2, [r7, #4]
 8005816:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005818:	e051      	b.n	80058be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	695b      	ldr	r3, [r3, #20]
 8005820:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005824:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005828:	d123      	bne.n	8005872 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005838:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005842:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2200      	movs	r2, #0
 8005848:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2220      	movs	r2, #32
 800584e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585e:	f043 0204 	orr.w	r2, r3, #4
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2200      	movs	r2, #0
 800586a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e046      	b.n	8005900 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005878:	d021      	beq.n	80058be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800587a:	f7fe fdb9 	bl	80043f0 <HAL_GetTick>
 800587e:	4602      	mov	r2, r0
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	1ad3      	subs	r3, r2, r3
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	429a      	cmp	r2, r3
 8005888:	d302      	bcc.n	8005890 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d116      	bne.n	80058be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2220      	movs	r2, #32
 800589a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058aa:	f043 0220 	orr.w	r2, r3, #32
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e020      	b.n	8005900 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	0c1b      	lsrs	r3, r3, #16
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d10c      	bne.n	80058e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	695b      	ldr	r3, [r3, #20]
 80058ce:	43da      	mvns	r2, r3
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	4013      	ands	r3, r2
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	bf14      	ite	ne
 80058da:	2301      	movne	r3, #1
 80058dc:	2300      	moveq	r3, #0
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	e00b      	b.n	80058fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	699b      	ldr	r3, [r3, #24]
 80058e8:	43da      	mvns	r2, r3
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	4013      	ands	r3, r2
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	bf14      	ite	ne
 80058f4:	2301      	movne	r3, #1
 80058f6:	2300      	moveq	r3, #0
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d18d      	bne.n	800581a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80058fe:	2300      	movs	r3, #0
}
 8005900:	4618      	mov	r0, r3
 8005902:	3710      	adds	r7, #16
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005914:	e02d      	b.n	8005972 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005916:	68f8      	ldr	r0, [r7, #12]
 8005918:	f000 f8ce 	bl	8005ab8 <I2C_IsAcknowledgeFailed>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d001      	beq.n	8005926 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e02d      	b.n	8005982 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800592c:	d021      	beq.n	8005972 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800592e:	f7fe fd5f 	bl	80043f0 <HAL_GetTick>
 8005932:	4602      	mov	r2, r0
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	1ad3      	subs	r3, r2, r3
 8005938:	68ba      	ldr	r2, [r7, #8]
 800593a:	429a      	cmp	r2, r3
 800593c:	d302      	bcc.n	8005944 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d116      	bne.n	8005972 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2200      	movs	r2, #0
 8005948:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2220      	movs	r2, #32
 800594e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595e:	f043 0220 	orr.w	r2, r3, #32
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2200      	movs	r2, #0
 800596a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e007      	b.n	8005982 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	695b      	ldr	r3, [r3, #20]
 8005978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800597c:	2b80      	cmp	r3, #128	; 0x80
 800597e:	d1ca      	bne.n	8005916 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005980:	2300      	movs	r3, #0
}
 8005982:	4618      	mov	r0, r3
 8005984:	3710      	adds	r7, #16
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}

0800598a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800598a:	b580      	push	{r7, lr}
 800598c:	b084      	sub	sp, #16
 800598e:	af00      	add	r7, sp, #0
 8005990:	60f8      	str	r0, [r7, #12]
 8005992:	60b9      	str	r1, [r7, #8]
 8005994:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005996:	e02d      	b.n	80059f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005998:	68f8      	ldr	r0, [r7, #12]
 800599a:	f000 f88d 	bl	8005ab8 <I2C_IsAcknowledgeFailed>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d001      	beq.n	80059a8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e02d      	b.n	8005a04 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059ae:	d021      	beq.n	80059f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059b0:	f7fe fd1e 	bl	80043f0 <HAL_GetTick>
 80059b4:	4602      	mov	r2, r0
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	1ad3      	subs	r3, r2, r3
 80059ba:	68ba      	ldr	r2, [r7, #8]
 80059bc:	429a      	cmp	r2, r3
 80059be:	d302      	bcc.n	80059c6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d116      	bne.n	80059f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2200      	movs	r2, #0
 80059ca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2220      	movs	r2, #32
 80059d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e0:	f043 0220 	orr.w	r2, r3, #32
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2200      	movs	r2, #0
 80059ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	e007      	b.n	8005a04 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	695b      	ldr	r3, [r3, #20]
 80059fa:	f003 0304 	and.w	r3, r3, #4
 80059fe:	2b04      	cmp	r3, #4
 8005a00:	d1ca      	bne.n	8005998 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a02:	2300      	movs	r3, #0
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3710      	adds	r7, #16
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a18:	e042      	b.n	8005aa0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	695b      	ldr	r3, [r3, #20]
 8005a20:	f003 0310 	and.w	r3, r3, #16
 8005a24:	2b10      	cmp	r3, #16
 8005a26:	d119      	bne.n	8005a5c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f06f 0210 	mvn.w	r2, #16
 8005a30:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2220      	movs	r2, #32
 8005a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e029      	b.n	8005ab0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a5c:	f7fe fcc8 	bl	80043f0 <HAL_GetTick>
 8005a60:	4602      	mov	r2, r0
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	68ba      	ldr	r2, [r7, #8]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d302      	bcc.n	8005a72 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d116      	bne.n	8005aa0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2200      	movs	r2, #0
 8005a76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2220      	movs	r2, #32
 8005a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8c:	f043 0220 	orr.w	r2, r3, #32
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2200      	movs	r2, #0
 8005a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e007      	b.n	8005ab0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	695b      	ldr	r3, [r3, #20]
 8005aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aaa:	2b40      	cmp	r3, #64	; 0x40
 8005aac:	d1b5      	bne.n	8005a1a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3710      	adds	r7, #16
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	695b      	ldr	r3, [r3, #20]
 8005ac6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ace:	d11b      	bne.n	8005b08 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ad8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2220      	movs	r2, #32
 8005ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af4:	f043 0204 	orr.w	r2, r3, #4
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	e000      	b.n	8005b0a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	370c      	adds	r7, #12
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr

08005b16 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005b16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b18:	b08f      	sub	sp, #60	; 0x3c
 8005b1a:	af0a      	add	r7, sp, #40	; 0x28
 8005b1c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d101      	bne.n	8005b28 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	e10f      	b.n	8005d48 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d106      	bne.n	8005b48 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f006 fc36 	bl	800c3b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2203      	movs	r2, #3
 8005b4c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d102      	bne.n	8005b62 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4618      	mov	r0, r3
 8005b68:	f003 fb29 	bl	80091be <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	603b      	str	r3, [r7, #0]
 8005b72:	687e      	ldr	r6, [r7, #4]
 8005b74:	466d      	mov	r5, sp
 8005b76:	f106 0410 	add.w	r4, r6, #16
 8005b7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b82:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005b86:	e885 0003 	stmia.w	r5, {r0, r1}
 8005b8a:	1d33      	adds	r3, r6, #4
 8005b8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b8e:	6838      	ldr	r0, [r7, #0]
 8005b90:	f003 fa00 	bl	8008f94 <USB_CoreInit>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d005      	beq.n	8005ba6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2202      	movs	r2, #2
 8005b9e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e0d0      	b.n	8005d48 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2100      	movs	r1, #0
 8005bac:	4618      	mov	r0, r3
 8005bae:	f003 fb17 	bl	80091e0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	73fb      	strb	r3, [r7, #15]
 8005bb6:	e04a      	b.n	8005c4e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005bb8:	7bfa      	ldrb	r2, [r7, #15]
 8005bba:	6879      	ldr	r1, [r7, #4]
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	00db      	lsls	r3, r3, #3
 8005bc0:	1a9b      	subs	r3, r3, r2
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	440b      	add	r3, r1
 8005bc6:	333d      	adds	r3, #61	; 0x3d
 8005bc8:	2201      	movs	r2, #1
 8005bca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005bcc:	7bfa      	ldrb	r2, [r7, #15]
 8005bce:	6879      	ldr	r1, [r7, #4]
 8005bd0:	4613      	mov	r3, r2
 8005bd2:	00db      	lsls	r3, r3, #3
 8005bd4:	1a9b      	subs	r3, r3, r2
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	440b      	add	r3, r1
 8005bda:	333c      	adds	r3, #60	; 0x3c
 8005bdc:	7bfa      	ldrb	r2, [r7, #15]
 8005bde:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005be0:	7bfa      	ldrb	r2, [r7, #15]
 8005be2:	7bfb      	ldrb	r3, [r7, #15]
 8005be4:	b298      	uxth	r0, r3
 8005be6:	6879      	ldr	r1, [r7, #4]
 8005be8:	4613      	mov	r3, r2
 8005bea:	00db      	lsls	r3, r3, #3
 8005bec:	1a9b      	subs	r3, r3, r2
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	440b      	add	r3, r1
 8005bf2:	3342      	adds	r3, #66	; 0x42
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005bf8:	7bfa      	ldrb	r2, [r7, #15]
 8005bfa:	6879      	ldr	r1, [r7, #4]
 8005bfc:	4613      	mov	r3, r2
 8005bfe:	00db      	lsls	r3, r3, #3
 8005c00:	1a9b      	subs	r3, r3, r2
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	440b      	add	r3, r1
 8005c06:	333f      	adds	r3, #63	; 0x3f
 8005c08:	2200      	movs	r2, #0
 8005c0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005c0c:	7bfa      	ldrb	r2, [r7, #15]
 8005c0e:	6879      	ldr	r1, [r7, #4]
 8005c10:	4613      	mov	r3, r2
 8005c12:	00db      	lsls	r3, r3, #3
 8005c14:	1a9b      	subs	r3, r3, r2
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	440b      	add	r3, r1
 8005c1a:	3344      	adds	r3, #68	; 0x44
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005c20:	7bfa      	ldrb	r2, [r7, #15]
 8005c22:	6879      	ldr	r1, [r7, #4]
 8005c24:	4613      	mov	r3, r2
 8005c26:	00db      	lsls	r3, r3, #3
 8005c28:	1a9b      	subs	r3, r3, r2
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	440b      	add	r3, r1
 8005c2e:	3348      	adds	r3, #72	; 0x48
 8005c30:	2200      	movs	r2, #0
 8005c32:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005c34:	7bfa      	ldrb	r2, [r7, #15]
 8005c36:	6879      	ldr	r1, [r7, #4]
 8005c38:	4613      	mov	r3, r2
 8005c3a:	00db      	lsls	r3, r3, #3
 8005c3c:	1a9b      	subs	r3, r3, r2
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	440b      	add	r3, r1
 8005c42:	3350      	adds	r3, #80	; 0x50
 8005c44:	2200      	movs	r2, #0
 8005c46:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c48:	7bfb      	ldrb	r3, [r7, #15]
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	73fb      	strb	r3, [r7, #15]
 8005c4e:	7bfa      	ldrb	r2, [r7, #15]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d3af      	bcc.n	8005bb8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c58:	2300      	movs	r3, #0
 8005c5a:	73fb      	strb	r3, [r7, #15]
 8005c5c:	e044      	b.n	8005ce8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005c5e:	7bfa      	ldrb	r2, [r7, #15]
 8005c60:	6879      	ldr	r1, [r7, #4]
 8005c62:	4613      	mov	r3, r2
 8005c64:	00db      	lsls	r3, r3, #3
 8005c66:	1a9b      	subs	r3, r3, r2
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	440b      	add	r3, r1
 8005c6c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005c70:	2200      	movs	r2, #0
 8005c72:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005c74:	7bfa      	ldrb	r2, [r7, #15]
 8005c76:	6879      	ldr	r1, [r7, #4]
 8005c78:	4613      	mov	r3, r2
 8005c7a:	00db      	lsls	r3, r3, #3
 8005c7c:	1a9b      	subs	r3, r3, r2
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	440b      	add	r3, r1
 8005c82:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005c86:	7bfa      	ldrb	r2, [r7, #15]
 8005c88:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005c8a:	7bfa      	ldrb	r2, [r7, #15]
 8005c8c:	6879      	ldr	r1, [r7, #4]
 8005c8e:	4613      	mov	r3, r2
 8005c90:	00db      	lsls	r3, r3, #3
 8005c92:	1a9b      	subs	r3, r3, r2
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	440b      	add	r3, r1
 8005c98:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005ca0:	7bfa      	ldrb	r2, [r7, #15]
 8005ca2:	6879      	ldr	r1, [r7, #4]
 8005ca4:	4613      	mov	r3, r2
 8005ca6:	00db      	lsls	r3, r3, #3
 8005ca8:	1a9b      	subs	r3, r3, r2
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	440b      	add	r3, r1
 8005cae:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005cb6:	7bfa      	ldrb	r2, [r7, #15]
 8005cb8:	6879      	ldr	r1, [r7, #4]
 8005cba:	4613      	mov	r3, r2
 8005cbc:	00db      	lsls	r3, r3, #3
 8005cbe:	1a9b      	subs	r3, r3, r2
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	440b      	add	r3, r1
 8005cc4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005cc8:	2200      	movs	r2, #0
 8005cca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005ccc:	7bfa      	ldrb	r2, [r7, #15]
 8005cce:	6879      	ldr	r1, [r7, #4]
 8005cd0:	4613      	mov	r3, r2
 8005cd2:	00db      	lsls	r3, r3, #3
 8005cd4:	1a9b      	subs	r3, r3, r2
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	440b      	add	r3, r1
 8005cda:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005cde:	2200      	movs	r2, #0
 8005ce0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ce2:	7bfb      	ldrb	r3, [r7, #15]
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	73fb      	strb	r3, [r7, #15]
 8005ce8:	7bfa      	ldrb	r2, [r7, #15]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d3b5      	bcc.n	8005c5e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	603b      	str	r3, [r7, #0]
 8005cf8:	687e      	ldr	r6, [r7, #4]
 8005cfa:	466d      	mov	r5, sp
 8005cfc:	f106 0410 	add.w	r4, r6, #16
 8005d00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005d04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005d08:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005d0c:	e885 0003 	stmia.w	r5, {r0, r1}
 8005d10:	1d33      	adds	r3, r6, #4
 8005d12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005d14:	6838      	ldr	r0, [r7, #0]
 8005d16:	f003 faaf 	bl	8009278 <USB_DevInit>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d005      	beq.n	8005d2c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2202      	movs	r2, #2
 8005d24:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e00d      	b.n	8005d48 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4618      	mov	r0, r3
 8005d42:	f004 fb2b 	bl	800a39c <USB_DevDisconnect>

  return HAL_OK;
 8005d46:	2300      	movs	r3, #0
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3714      	adds	r7, #20
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005d50 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d101      	bne.n	8005d6c <HAL_PCD_Start+0x1c>
 8005d68:	2302      	movs	r3, #2
 8005d6a:	e020      	b.n	8005dae <HAL_PCD_Start+0x5e>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d109      	bne.n	8005d90 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d005      	beq.n	8005d90 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d88:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4618      	mov	r0, r3
 8005d96:	f003 fa01 	bl	800919c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f004 fadb 	bl	800a35a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3710      	adds	r7, #16
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}

08005db6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005db6:	b590      	push	{r4, r7, lr}
 8005db8:	b08d      	sub	sp, #52	; 0x34
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dc4:	6a3b      	ldr	r3, [r7, #32]
 8005dc6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f004 fb99 	bl	800a504 <USB_GetMode>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	f040 839d 	bne.w	8006514 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4618      	mov	r0, r3
 8005de0:	f004 fafd 	bl	800a3de <USB_ReadInterrupts>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	f000 8393 	beq.w	8006512 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4618      	mov	r0, r3
 8005df2:	f004 faf4 	bl	800a3de <USB_ReadInterrupts>
 8005df6:	4603      	mov	r3, r0
 8005df8:	f003 0302 	and.w	r3, r3, #2
 8005dfc:	2b02      	cmp	r3, #2
 8005dfe:	d107      	bne.n	8005e10 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	695a      	ldr	r2, [r3, #20]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f002 0202 	and.w	r2, r2, #2
 8005e0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4618      	mov	r0, r3
 8005e16:	f004 fae2 	bl	800a3de <USB_ReadInterrupts>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	f003 0310 	and.w	r3, r3, #16
 8005e20:	2b10      	cmp	r3, #16
 8005e22:	d161      	bne.n	8005ee8 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	699a      	ldr	r2, [r3, #24]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f022 0210 	bic.w	r2, r2, #16
 8005e32:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8005e34:	6a3b      	ldr	r3, [r7, #32]
 8005e36:	6a1b      	ldr	r3, [r3, #32]
 8005e38:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	f003 020f 	and.w	r2, r3, #15
 8005e40:	4613      	mov	r3, r2
 8005e42:	00db      	lsls	r3, r3, #3
 8005e44:	1a9b      	subs	r3, r3, r2
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	4413      	add	r3, r2
 8005e50:	3304      	adds	r3, #4
 8005e52:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005e54:	69bb      	ldr	r3, [r7, #24]
 8005e56:	0c5b      	lsrs	r3, r3, #17
 8005e58:	f003 030f 	and.w	r3, r3, #15
 8005e5c:	2b02      	cmp	r3, #2
 8005e5e:	d124      	bne.n	8005eaa <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005e60:	69ba      	ldr	r2, [r7, #24]
 8005e62:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005e66:	4013      	ands	r3, r2
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d035      	beq.n	8005ed8 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005e70:	69bb      	ldr	r3, [r7, #24]
 8005e72:	091b      	lsrs	r3, r3, #4
 8005e74:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005e76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	6a38      	ldr	r0, [r7, #32]
 8005e80:	f004 f919 	bl	800a0b6 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	68da      	ldr	r2, [r3, #12]
 8005e88:	69bb      	ldr	r3, [r7, #24]
 8005e8a:	091b      	lsrs	r3, r3, #4
 8005e8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e90:	441a      	add	r2, r3
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	699a      	ldr	r2, [r3, #24]
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	091b      	lsrs	r3, r3, #4
 8005e9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ea2:	441a      	add	r2, r3
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	619a      	str	r2, [r3, #24]
 8005ea8:	e016      	b.n	8005ed8 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	0c5b      	lsrs	r3, r3, #17
 8005eae:	f003 030f 	and.w	r3, r3, #15
 8005eb2:	2b06      	cmp	r3, #6
 8005eb4:	d110      	bne.n	8005ed8 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005ebc:	2208      	movs	r2, #8
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	6a38      	ldr	r0, [r7, #32]
 8005ec2:	f004 f8f8 	bl	800a0b6 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	699a      	ldr	r2, [r3, #24]
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	091b      	lsrs	r3, r3, #4
 8005ece:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ed2:	441a      	add	r2, r3
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	699a      	ldr	r2, [r3, #24]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f042 0210 	orr.w	r2, r2, #16
 8005ee6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4618      	mov	r0, r3
 8005eee:	f004 fa76 	bl	800a3de <USB_ReadInterrupts>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ef8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005efc:	d16e      	bne.n	8005fdc <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8005efe:	2300      	movs	r3, #0
 8005f00:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4618      	mov	r0, r3
 8005f08:	f004 fa7c 	bl	800a404 <USB_ReadDevAllOutEpInterrupt>
 8005f0c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005f0e:	e062      	b.n	8005fd6 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f12:	f003 0301 	and.w	r3, r3, #1
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d057      	beq.n	8005fca <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f20:	b2d2      	uxtb	r2, r2
 8005f22:	4611      	mov	r1, r2
 8005f24:	4618      	mov	r0, r3
 8005f26:	f004 faa1 	bl	800a46c <USB_ReadDevOutEPInterrupt>
 8005f2a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	f003 0301 	and.w	r3, r3, #1
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d00c      	beq.n	8005f50 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f38:	015a      	lsls	r2, r3, #5
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f42:	461a      	mov	r2, r3
 8005f44:	2301      	movs	r3, #1
 8005f46:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005f48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 fdb0 	bl	8006ab0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	f003 0308 	and.w	r3, r3, #8
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d00c      	beq.n	8005f74 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5c:	015a      	lsls	r2, r3, #5
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	4413      	add	r3, r2
 8005f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f66:	461a      	mov	r2, r3
 8005f68:	2308      	movs	r3, #8
 8005f6a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005f6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 feaa 	bl	8006cc8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	f003 0310 	and.w	r3, r3, #16
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d008      	beq.n	8005f90 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f80:	015a      	lsls	r2, r3, #5
 8005f82:	69fb      	ldr	r3, [r7, #28]
 8005f84:	4413      	add	r3, r2
 8005f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	2310      	movs	r3, #16
 8005f8e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	f003 0320 	and.w	r3, r3, #32
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d008      	beq.n	8005fac <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9c:	015a      	lsls	r2, r3, #5
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	4413      	add	r3, r2
 8005fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	2320      	movs	r3, #32
 8005faa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d009      	beq.n	8005fca <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb8:	015a      	lsls	r2, r3, #5
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	4413      	add	r3, r2
 8005fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005fc8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fcc:	3301      	adds	r3, #1
 8005fce:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd2:	085b      	lsrs	r3, r3, #1
 8005fd4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d199      	bne.n	8005f10 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f004 f9fc 	bl	800a3de <USB_ReadInterrupts>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005fec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005ff0:	f040 80c0 	bne.w	8006174 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f004 fa1d 	bl	800a438 <USB_ReadDevAllInEpInterrupt>
 8005ffe:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8006000:	2300      	movs	r3, #0
 8006002:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8006004:	e0b2      	b.n	800616c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006008:	f003 0301 	and.w	r3, r3, #1
 800600c:	2b00      	cmp	r3, #0
 800600e:	f000 80a7 	beq.w	8006160 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006018:	b2d2      	uxtb	r2, r2
 800601a:	4611      	mov	r1, r2
 800601c:	4618      	mov	r0, r3
 800601e:	f004 fa43 	bl	800a4a8 <USB_ReadDevInEPInterrupt>
 8006022:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	f003 0301 	and.w	r3, r3, #1
 800602a:	2b00      	cmp	r3, #0
 800602c:	d057      	beq.n	80060de <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800602e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006030:	f003 030f 	and.w	r3, r3, #15
 8006034:	2201      	movs	r2, #1
 8006036:	fa02 f303 	lsl.w	r3, r2, r3
 800603a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800603c:	69fb      	ldr	r3, [r7, #28]
 800603e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006042:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	43db      	mvns	r3, r3
 8006048:	69f9      	ldr	r1, [r7, #28]
 800604a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800604e:	4013      	ands	r3, r2
 8006050:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006054:	015a      	lsls	r2, r3, #5
 8006056:	69fb      	ldr	r3, [r7, #28]
 8006058:	4413      	add	r3, r2
 800605a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800605e:	461a      	mov	r2, r3
 8006060:	2301      	movs	r3, #1
 8006062:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	691b      	ldr	r3, [r3, #16]
 8006068:	2b01      	cmp	r3, #1
 800606a:	d132      	bne.n	80060d2 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800606c:	6879      	ldr	r1, [r7, #4]
 800606e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006070:	4613      	mov	r3, r2
 8006072:	00db      	lsls	r3, r3, #3
 8006074:	1a9b      	subs	r3, r3, r2
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	440b      	add	r3, r1
 800607a:	3348      	adds	r3, #72	; 0x48
 800607c:	6819      	ldr	r1, [r3, #0]
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006082:	4613      	mov	r3, r2
 8006084:	00db      	lsls	r3, r3, #3
 8006086:	1a9b      	subs	r3, r3, r2
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	4403      	add	r3, r0
 800608c:	3344      	adds	r3, #68	; 0x44
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4419      	add	r1, r3
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006096:	4613      	mov	r3, r2
 8006098:	00db      	lsls	r3, r3, #3
 800609a:	1a9b      	subs	r3, r3, r2
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	4403      	add	r3, r0
 80060a0:	3348      	adds	r3, #72	; 0x48
 80060a2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80060a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d113      	bne.n	80060d2 <HAL_PCD_IRQHandler+0x31c>
 80060aa:	6879      	ldr	r1, [r7, #4]
 80060ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060ae:	4613      	mov	r3, r2
 80060b0:	00db      	lsls	r3, r3, #3
 80060b2:	1a9b      	subs	r3, r3, r2
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	440b      	add	r3, r1
 80060b8:	3350      	adds	r3, #80	; 0x50
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d108      	bne.n	80060d2 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6818      	ldr	r0, [r3, #0]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80060ca:	461a      	mov	r2, r3
 80060cc:	2101      	movs	r1, #1
 80060ce:	f004 fa4b 	bl	800a568 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80060d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	4619      	mov	r1, r3
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f006 f9ec 	bl	800c4b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	f003 0308 	and.w	r3, r3, #8
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d008      	beq.n	80060fa <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80060e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ea:	015a      	lsls	r2, r3, #5
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	4413      	add	r3, r2
 80060f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060f4:	461a      	mov	r2, r3
 80060f6:	2308      	movs	r3, #8
 80060f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	f003 0310 	and.w	r3, r3, #16
 8006100:	2b00      	cmp	r3, #0
 8006102:	d008      	beq.n	8006116 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006106:	015a      	lsls	r2, r3, #5
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	4413      	add	r3, r2
 800610c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006110:	461a      	mov	r2, r3
 8006112:	2310      	movs	r3, #16
 8006114:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800611c:	2b00      	cmp	r3, #0
 800611e:	d008      	beq.n	8006132 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006122:	015a      	lsls	r2, r3, #5
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	4413      	add	r3, r2
 8006128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800612c:	461a      	mov	r2, r3
 800612e:	2340      	movs	r3, #64	; 0x40
 8006130:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	f003 0302 	and.w	r3, r3, #2
 8006138:	2b00      	cmp	r3, #0
 800613a:	d008      	beq.n	800614e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800613c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613e:	015a      	lsls	r2, r3, #5
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	4413      	add	r3, r2
 8006144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006148:	461a      	mov	r2, r3
 800614a:	2302      	movs	r3, #2
 800614c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006154:	2b00      	cmp	r3, #0
 8006156:	d003      	beq.n	8006160 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006158:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f000 fc1b 	bl	8006996 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006162:	3301      	adds	r3, #1
 8006164:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006168:	085b      	lsrs	r3, r3, #1
 800616a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800616c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800616e:	2b00      	cmp	r3, #0
 8006170:	f47f af49 	bne.w	8006006 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4618      	mov	r0, r3
 800617a:	f004 f930 	bl	800a3de <USB_ReadInterrupts>
 800617e:	4603      	mov	r3, r0
 8006180:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006184:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006188:	d122      	bne.n	80061d0 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800618a:	69fb      	ldr	r3, [r7, #28]
 800618c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	69fa      	ldr	r2, [r7, #28]
 8006194:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006198:	f023 0301 	bic.w	r3, r3, #1
 800619c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d108      	bne.n	80061ba <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80061b0:	2100      	movs	r1, #0
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 fe26 	bl	8006e04 <HAL_PCDEx_LPM_Callback>
 80061b8:	e002      	b.n	80061c0 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f006 f9f2 	bl	800c5a4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	695a      	ldr	r2, [r3, #20]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80061ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4618      	mov	r0, r3
 80061d6:	f004 f902 	bl	800a3de <USB_ReadInterrupts>
 80061da:	4603      	mov	r3, r0
 80061dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061e4:	d112      	bne.n	800620c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80061e6:	69fb      	ldr	r3, [r7, #28]
 80061e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	f003 0301 	and.w	r3, r3, #1
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d102      	bne.n	80061fc <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f006 f9ae 	bl	800c558 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	695a      	ldr	r2, [r3, #20]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800620a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4618      	mov	r0, r3
 8006212:	f004 f8e4 	bl	800a3de <USB_ReadInterrupts>
 8006216:	4603      	mov	r3, r0
 8006218:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800621c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006220:	f040 80c7 	bne.w	80063b2 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	69fa      	ldr	r2, [r7, #28]
 800622e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006232:	f023 0301 	bic.w	r3, r3, #1
 8006236:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	2110      	movs	r1, #16
 800623e:	4618      	mov	r0, r3
 8006240:	f003 f97e 	bl	8009540 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006244:	2300      	movs	r3, #0
 8006246:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006248:	e056      	b.n	80062f8 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800624a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800624c:	015a      	lsls	r2, r3, #5
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	4413      	add	r3, r2
 8006252:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006256:	461a      	mov	r2, r3
 8006258:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800625c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800625e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006260:	015a      	lsls	r2, r3, #5
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	4413      	add	r3, r2
 8006266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800626e:	0151      	lsls	r1, r2, #5
 8006270:	69fa      	ldr	r2, [r7, #28]
 8006272:	440a      	add	r2, r1
 8006274:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006278:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800627c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800627e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006280:	015a      	lsls	r2, r3, #5
 8006282:	69fb      	ldr	r3, [r7, #28]
 8006284:	4413      	add	r3, r2
 8006286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800628e:	0151      	lsls	r1, r2, #5
 8006290:	69fa      	ldr	r2, [r7, #28]
 8006292:	440a      	add	r2, r1
 8006294:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006298:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800629c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800629e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a0:	015a      	lsls	r2, r3, #5
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	4413      	add	r3, r2
 80062a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062aa:	461a      	mov	r2, r3
 80062ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80062b0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80062b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b4:	015a      	lsls	r2, r3, #5
 80062b6:	69fb      	ldr	r3, [r7, #28]
 80062b8:	4413      	add	r3, r2
 80062ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062c2:	0151      	lsls	r1, r2, #5
 80062c4:	69fa      	ldr	r2, [r7, #28]
 80062c6:	440a      	add	r2, r1
 80062c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062cc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80062d0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80062d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d4:	015a      	lsls	r2, r3, #5
 80062d6:	69fb      	ldr	r3, [r7, #28]
 80062d8:	4413      	add	r3, r2
 80062da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062e2:	0151      	lsls	r1, r2, #5
 80062e4:	69fa      	ldr	r2, [r7, #28]
 80062e6:	440a      	add	r2, r1
 80062e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80062f0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80062f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062f4:	3301      	adds	r3, #1
 80062f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062fe:	429a      	cmp	r2, r3
 8006300:	d3a3      	bcc.n	800624a <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006308:	69db      	ldr	r3, [r3, #28]
 800630a:	69fa      	ldr	r2, [r7, #28]
 800630c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006310:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006314:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800631a:	2b00      	cmp	r3, #0
 800631c:	d016      	beq.n	800634c <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006324:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006328:	69fa      	ldr	r2, [r7, #28]
 800632a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800632e:	f043 030b 	orr.w	r3, r3, #11
 8006332:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800633c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800633e:	69fa      	ldr	r2, [r7, #28]
 8006340:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006344:	f043 030b 	orr.w	r3, r3, #11
 8006348:	6453      	str	r3, [r2, #68]	; 0x44
 800634a:	e015      	b.n	8006378 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800634c:	69fb      	ldr	r3, [r7, #28]
 800634e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006352:	695b      	ldr	r3, [r3, #20]
 8006354:	69fa      	ldr	r2, [r7, #28]
 8006356:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800635a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800635e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8006362:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006364:	69fb      	ldr	r3, [r7, #28]
 8006366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	69fa      	ldr	r2, [r7, #28]
 800636e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006372:	f043 030b 	orr.w	r3, r3, #11
 8006376:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006378:	69fb      	ldr	r3, [r7, #28]
 800637a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	69fa      	ldr	r2, [r7, #28]
 8006382:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006386:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800638a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6818      	ldr	r0, [r3, #0]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	691b      	ldr	r3, [r3, #16]
 8006394:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800639c:	461a      	mov	r2, r3
 800639e:	f004 f8e3 	bl	800a568 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	695a      	ldr	r2, [r3, #20]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80063b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4618      	mov	r0, r3
 80063b8:	f004 f811 	bl	800a3de <USB_ReadInterrupts>
 80063bc:	4603      	mov	r3, r0
 80063be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063c6:	d124      	bne.n	8006412 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4618      	mov	r0, r3
 80063ce:	f004 f8a7 	bl	800a520 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4618      	mov	r0, r3
 80063d8:	f003 f90f 	bl	80095fa <USB_GetDevSpeed>
 80063dc:	4603      	mov	r3, r0
 80063de:	461a      	mov	r2, r3
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681c      	ldr	r4, [r3, #0]
 80063e8:	f001 f97a 	bl	80076e0 <HAL_RCC_GetHCLKFreq>
 80063ec:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	461a      	mov	r2, r3
 80063f6:	4620      	mov	r0, r4
 80063f8:	f002 fe2e 	bl	8009058 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f006 f882 	bl	800c506 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	695a      	ldr	r2, [r3, #20]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006410:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4618      	mov	r0, r3
 8006418:	f003 ffe1 	bl	800a3de <USB_ReadInterrupts>
 800641c:	4603      	mov	r3, r0
 800641e:	f003 0308 	and.w	r3, r3, #8
 8006422:	2b08      	cmp	r3, #8
 8006424:	d10a      	bne.n	800643c <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f006 f85f 	bl	800c4ea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	695a      	ldr	r2, [r3, #20]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f002 0208 	and.w	r2, r2, #8
 800643a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4618      	mov	r0, r3
 8006442:	f003 ffcc 	bl	800a3de <USB_ReadInterrupts>
 8006446:	4603      	mov	r3, r0
 8006448:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800644c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006450:	d10f      	bne.n	8006472 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006452:	2300      	movs	r3, #0
 8006454:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006458:	b2db      	uxtb	r3, r3
 800645a:	4619      	mov	r1, r3
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f006 f8c1 	bl	800c5e4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	695a      	ldr	r2, [r3, #20]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006470:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4618      	mov	r0, r3
 8006478:	f003 ffb1 	bl	800a3de <USB_ReadInterrupts>
 800647c:	4603      	mov	r3, r0
 800647e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006482:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006486:	d10f      	bne.n	80064a8 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006488:	2300      	movs	r3, #0
 800648a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800648c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648e:	b2db      	uxtb	r3, r3
 8006490:	4619      	mov	r1, r3
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f006 f894 	bl	800c5c0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	695a      	ldr	r2, [r3, #20]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80064a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4618      	mov	r0, r3
 80064ae:	f003 ff96 	bl	800a3de <USB_ReadInterrupts>
 80064b2:	4603      	mov	r3, r0
 80064b4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80064b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064bc:	d10a      	bne.n	80064d4 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f006 f8a2 	bl	800c608 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	695a      	ldr	r2, [r3, #20]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80064d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4618      	mov	r0, r3
 80064da:	f003 ff80 	bl	800a3de <USB_ReadInterrupts>
 80064de:	4603      	mov	r3, r0
 80064e0:	f003 0304 	and.w	r3, r3, #4
 80064e4:	2b04      	cmp	r3, #4
 80064e6:	d115      	bne.n	8006514 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80064f0:	69bb      	ldr	r3, [r7, #24]
 80064f2:	f003 0304 	and.w	r3, r3, #4
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d002      	beq.n	8006500 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f006 f892 	bl	800c624 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	6859      	ldr	r1, [r3, #4]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	69ba      	ldr	r2, [r7, #24]
 800650c:	430a      	orrs	r2, r1
 800650e:	605a      	str	r2, [r3, #4]
 8006510:	e000      	b.n	8006514 <HAL_PCD_IRQHandler+0x75e>
      return;
 8006512:	bf00      	nop
    }
  }
}
 8006514:	3734      	adds	r7, #52	; 0x34
 8006516:	46bd      	mov	sp, r7
 8006518:	bd90      	pop	{r4, r7, pc}

0800651a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800651a:	b580      	push	{r7, lr}
 800651c:	b082      	sub	sp, #8
 800651e:	af00      	add	r7, sp, #0
 8006520:	6078      	str	r0, [r7, #4]
 8006522:	460b      	mov	r3, r1
 8006524:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800652c:	2b01      	cmp	r3, #1
 800652e:	d101      	bne.n	8006534 <HAL_PCD_SetAddress+0x1a>
 8006530:	2302      	movs	r3, #2
 8006532:	e013      	b.n	800655c <HAL_PCD_SetAddress+0x42>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	78fa      	ldrb	r2, [r7, #3]
 8006540:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	78fa      	ldrb	r2, [r7, #3]
 800654a:	4611      	mov	r1, r2
 800654c:	4618      	mov	r0, r3
 800654e:	f003 fede 	bl	800a30e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2200      	movs	r2, #0
 8006556:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800655a:	2300      	movs	r3, #0
}
 800655c:	4618      	mov	r0, r3
 800655e:	3708      	adds	r7, #8
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b084      	sub	sp, #16
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	4608      	mov	r0, r1
 800656e:	4611      	mov	r1, r2
 8006570:	461a      	mov	r2, r3
 8006572:	4603      	mov	r3, r0
 8006574:	70fb      	strb	r3, [r7, #3]
 8006576:	460b      	mov	r3, r1
 8006578:	803b      	strh	r3, [r7, #0]
 800657a:	4613      	mov	r3, r2
 800657c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800657e:	2300      	movs	r3, #0
 8006580:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006582:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006586:	2b00      	cmp	r3, #0
 8006588:	da0f      	bge.n	80065aa <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800658a:	78fb      	ldrb	r3, [r7, #3]
 800658c:	f003 020f 	and.w	r2, r3, #15
 8006590:	4613      	mov	r3, r2
 8006592:	00db      	lsls	r3, r3, #3
 8006594:	1a9b      	subs	r3, r3, r2
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	3338      	adds	r3, #56	; 0x38
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	4413      	add	r3, r2
 800659e:	3304      	adds	r3, #4
 80065a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2201      	movs	r2, #1
 80065a6:	705a      	strb	r2, [r3, #1]
 80065a8:	e00f      	b.n	80065ca <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80065aa:	78fb      	ldrb	r3, [r7, #3]
 80065ac:	f003 020f 	and.w	r2, r3, #15
 80065b0:	4613      	mov	r3, r2
 80065b2:	00db      	lsls	r3, r3, #3
 80065b4:	1a9b      	subs	r3, r3, r2
 80065b6:	009b      	lsls	r3, r3, #2
 80065b8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	4413      	add	r3, r2
 80065c0:	3304      	adds	r3, #4
 80065c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2200      	movs	r2, #0
 80065c8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80065ca:	78fb      	ldrb	r3, [r7, #3]
 80065cc:	f003 030f 	and.w	r3, r3, #15
 80065d0:	b2da      	uxtb	r2, r3
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80065d6:	883a      	ldrh	r2, [r7, #0]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	78ba      	ldrb	r2, [r7, #2]
 80065e0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	785b      	ldrb	r3, [r3, #1]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d004      	beq.n	80065f4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	b29a      	uxth	r2, r3
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80065f4:	78bb      	ldrb	r3, [r7, #2]
 80065f6:	2b02      	cmp	r3, #2
 80065f8:	d102      	bne.n	8006600 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2200      	movs	r2, #0
 80065fe:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006606:	2b01      	cmp	r3, #1
 8006608:	d101      	bne.n	800660e <HAL_PCD_EP_Open+0xaa>
 800660a:	2302      	movs	r3, #2
 800660c:	e00e      	b.n	800662c <HAL_PCD_EP_Open+0xc8>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2201      	movs	r2, #1
 8006612:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68f9      	ldr	r1, [r7, #12]
 800661c:	4618      	mov	r0, r3
 800661e:	f003 f811 	bl	8009644 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2200      	movs	r2, #0
 8006626:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800662a:	7afb      	ldrb	r3, [r7, #11]
}
 800662c:	4618      	mov	r0, r3
 800662e:	3710      	adds	r7, #16
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	460b      	mov	r3, r1
 800663e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006640:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006644:	2b00      	cmp	r3, #0
 8006646:	da0f      	bge.n	8006668 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006648:	78fb      	ldrb	r3, [r7, #3]
 800664a:	f003 020f 	and.w	r2, r3, #15
 800664e:	4613      	mov	r3, r2
 8006650:	00db      	lsls	r3, r3, #3
 8006652:	1a9b      	subs	r3, r3, r2
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	3338      	adds	r3, #56	; 0x38
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	4413      	add	r3, r2
 800665c:	3304      	adds	r3, #4
 800665e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2201      	movs	r2, #1
 8006664:	705a      	strb	r2, [r3, #1]
 8006666:	e00f      	b.n	8006688 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006668:	78fb      	ldrb	r3, [r7, #3]
 800666a:	f003 020f 	and.w	r2, r3, #15
 800666e:	4613      	mov	r3, r2
 8006670:	00db      	lsls	r3, r3, #3
 8006672:	1a9b      	subs	r3, r3, r2
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	4413      	add	r3, r2
 800667e:	3304      	adds	r3, #4
 8006680:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2200      	movs	r2, #0
 8006686:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006688:	78fb      	ldrb	r3, [r7, #3]
 800668a:	f003 030f 	and.w	r3, r3, #15
 800668e:	b2da      	uxtb	r2, r3
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800669a:	2b01      	cmp	r3, #1
 800669c:	d101      	bne.n	80066a2 <HAL_PCD_EP_Close+0x6e>
 800669e:	2302      	movs	r3, #2
 80066a0:	e00e      	b.n	80066c0 <HAL_PCD_EP_Close+0x8c>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2201      	movs	r2, #1
 80066a6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	68f9      	ldr	r1, [r7, #12]
 80066b0:	4618      	mov	r0, r3
 80066b2:	f003 f84f 	bl	8009754 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2200      	movs	r2, #0
 80066ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80066be:	2300      	movs	r3, #0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3710      	adds	r7, #16
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b086      	sub	sp, #24
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	60f8      	str	r0, [r7, #12]
 80066d0:	607a      	str	r2, [r7, #4]
 80066d2:	603b      	str	r3, [r7, #0]
 80066d4:	460b      	mov	r3, r1
 80066d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80066d8:	7afb      	ldrb	r3, [r7, #11]
 80066da:	f003 020f 	and.w	r2, r3, #15
 80066de:	4613      	mov	r3, r2
 80066e0:	00db      	lsls	r3, r3, #3
 80066e2:	1a9b      	subs	r3, r3, r2
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80066ea:	68fa      	ldr	r2, [r7, #12]
 80066ec:	4413      	add	r3, r2
 80066ee:	3304      	adds	r3, #4
 80066f0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	683a      	ldr	r2, [r7, #0]
 80066fc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	2200      	movs	r2, #0
 8006702:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	2200      	movs	r2, #0
 8006708:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800670a:	7afb      	ldrb	r3, [r7, #11]
 800670c:	f003 030f 	and.w	r3, r3, #15
 8006710:	b2da      	uxtb	r2, r3
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	691b      	ldr	r3, [r3, #16]
 800671a:	2b01      	cmp	r3, #1
 800671c:	d102      	bne.n	8006724 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006724:	7afb      	ldrb	r3, [r7, #11]
 8006726:	f003 030f 	and.w	r3, r3, #15
 800672a:	2b00      	cmp	r3, #0
 800672c:	d109      	bne.n	8006742 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	6818      	ldr	r0, [r3, #0]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	691b      	ldr	r3, [r3, #16]
 8006736:	b2db      	uxtb	r3, r3
 8006738:	461a      	mov	r2, r3
 800673a:	6979      	ldr	r1, [r7, #20]
 800673c:	f003 fb2a 	bl	8009d94 <USB_EP0StartXfer>
 8006740:	e008      	b.n	8006754 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	6818      	ldr	r0, [r3, #0]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	b2db      	uxtb	r3, r3
 800674c:	461a      	mov	r2, r3
 800674e:	6979      	ldr	r1, [r7, #20]
 8006750:	f003 f8dc 	bl	800990c <USB_EPStartXfer>
  }

  return HAL_OK;
 8006754:	2300      	movs	r3, #0
}
 8006756:	4618      	mov	r0, r3
 8006758:	3718      	adds	r7, #24
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}

0800675e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800675e:	b480      	push	{r7}
 8006760:	b083      	sub	sp, #12
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
 8006766:	460b      	mov	r3, r1
 8006768:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800676a:	78fb      	ldrb	r3, [r7, #3]
 800676c:	f003 020f 	and.w	r2, r3, #15
 8006770:	6879      	ldr	r1, [r7, #4]
 8006772:	4613      	mov	r3, r2
 8006774:	00db      	lsls	r3, r3, #3
 8006776:	1a9b      	subs	r3, r3, r2
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	440b      	add	r3, r1
 800677c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006780:	681b      	ldr	r3, [r3, #0]
}
 8006782:	4618      	mov	r0, r3
 8006784:	370c      	adds	r7, #12
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr

0800678e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800678e:	b580      	push	{r7, lr}
 8006790:	b086      	sub	sp, #24
 8006792:	af00      	add	r7, sp, #0
 8006794:	60f8      	str	r0, [r7, #12]
 8006796:	607a      	str	r2, [r7, #4]
 8006798:	603b      	str	r3, [r7, #0]
 800679a:	460b      	mov	r3, r1
 800679c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800679e:	7afb      	ldrb	r3, [r7, #11]
 80067a0:	f003 020f 	and.w	r2, r3, #15
 80067a4:	4613      	mov	r3, r2
 80067a6:	00db      	lsls	r3, r3, #3
 80067a8:	1a9b      	subs	r3, r3, r2
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	3338      	adds	r3, #56	; 0x38
 80067ae:	68fa      	ldr	r2, [r7, #12]
 80067b0:	4413      	add	r3, r2
 80067b2:	3304      	adds	r3, #4
 80067b4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	683a      	ldr	r2, [r7, #0]
 80067c0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	2200      	movs	r2, #0
 80067c6:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	2201      	movs	r2, #1
 80067cc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80067ce:	7afb      	ldrb	r3, [r7, #11]
 80067d0:	f003 030f 	and.w	r3, r3, #15
 80067d4:	b2da      	uxtb	r2, r3
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	691b      	ldr	r3, [r3, #16]
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d102      	bne.n	80067e8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80067e8:	7afb      	ldrb	r3, [r7, #11]
 80067ea:	f003 030f 	and.w	r3, r3, #15
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d109      	bne.n	8006806 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	6818      	ldr	r0, [r3, #0]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	461a      	mov	r2, r3
 80067fe:	6979      	ldr	r1, [r7, #20]
 8006800:	f003 fac8 	bl	8009d94 <USB_EP0StartXfer>
 8006804:	e008      	b.n	8006818 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6818      	ldr	r0, [r3, #0]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	b2db      	uxtb	r3, r3
 8006810:	461a      	mov	r2, r3
 8006812:	6979      	ldr	r1, [r7, #20]
 8006814:	f003 f87a 	bl	800990c <USB_EPStartXfer>
  }

  return HAL_OK;
 8006818:	2300      	movs	r3, #0
}
 800681a:	4618      	mov	r0, r3
 800681c:	3718      	adds	r7, #24
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}

08006822 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006822:	b580      	push	{r7, lr}
 8006824:	b084      	sub	sp, #16
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
 800682a:	460b      	mov	r3, r1
 800682c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800682e:	78fb      	ldrb	r3, [r7, #3]
 8006830:	f003 020f 	and.w	r2, r3, #15
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	429a      	cmp	r2, r3
 800683a:	d901      	bls.n	8006840 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	e050      	b.n	80068e2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006840:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006844:	2b00      	cmp	r3, #0
 8006846:	da0f      	bge.n	8006868 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006848:	78fb      	ldrb	r3, [r7, #3]
 800684a:	f003 020f 	and.w	r2, r3, #15
 800684e:	4613      	mov	r3, r2
 8006850:	00db      	lsls	r3, r3, #3
 8006852:	1a9b      	subs	r3, r3, r2
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	3338      	adds	r3, #56	; 0x38
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	4413      	add	r3, r2
 800685c:	3304      	adds	r3, #4
 800685e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2201      	movs	r2, #1
 8006864:	705a      	strb	r2, [r3, #1]
 8006866:	e00d      	b.n	8006884 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006868:	78fa      	ldrb	r2, [r7, #3]
 800686a:	4613      	mov	r3, r2
 800686c:	00db      	lsls	r3, r3, #3
 800686e:	1a9b      	subs	r3, r3, r2
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	4413      	add	r3, r2
 800687a:	3304      	adds	r3, #4
 800687c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2200      	movs	r2, #0
 8006882:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2201      	movs	r2, #1
 8006888:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800688a:	78fb      	ldrb	r3, [r7, #3]
 800688c:	f003 030f 	and.w	r3, r3, #15
 8006890:	b2da      	uxtb	r2, r3
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800689c:	2b01      	cmp	r3, #1
 800689e:	d101      	bne.n	80068a4 <HAL_PCD_EP_SetStall+0x82>
 80068a0:	2302      	movs	r3, #2
 80068a2:	e01e      	b.n	80068e2 <HAL_PCD_EP_SetStall+0xc0>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	68f9      	ldr	r1, [r7, #12]
 80068b2:	4618      	mov	r0, r3
 80068b4:	f003 fc57 	bl	800a166 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80068b8:	78fb      	ldrb	r3, [r7, #3]
 80068ba:	f003 030f 	and.w	r3, r3, #15
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d10a      	bne.n	80068d8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6818      	ldr	r0, [r3, #0]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	b2d9      	uxtb	r1, r3
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80068d2:	461a      	mov	r2, r3
 80068d4:	f003 fe48 	bl	800a568 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80068e0:	2300      	movs	r3, #0
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3710      	adds	r7, #16
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}

080068ea <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80068ea:	b580      	push	{r7, lr}
 80068ec:	b084      	sub	sp, #16
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
 80068f2:	460b      	mov	r3, r1
 80068f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80068f6:	78fb      	ldrb	r3, [r7, #3]
 80068f8:	f003 020f 	and.w	r2, r3, #15
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	429a      	cmp	r2, r3
 8006902:	d901      	bls.n	8006908 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	e042      	b.n	800698e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006908:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800690c:	2b00      	cmp	r3, #0
 800690e:	da0f      	bge.n	8006930 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006910:	78fb      	ldrb	r3, [r7, #3]
 8006912:	f003 020f 	and.w	r2, r3, #15
 8006916:	4613      	mov	r3, r2
 8006918:	00db      	lsls	r3, r3, #3
 800691a:	1a9b      	subs	r3, r3, r2
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	3338      	adds	r3, #56	; 0x38
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	4413      	add	r3, r2
 8006924:	3304      	adds	r3, #4
 8006926:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2201      	movs	r2, #1
 800692c:	705a      	strb	r2, [r3, #1]
 800692e:	e00f      	b.n	8006950 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006930:	78fb      	ldrb	r3, [r7, #3]
 8006932:	f003 020f 	and.w	r2, r3, #15
 8006936:	4613      	mov	r3, r2
 8006938:	00db      	lsls	r3, r3, #3
 800693a:	1a9b      	subs	r3, r3, r2
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	4413      	add	r3, r2
 8006946:	3304      	adds	r3, #4
 8006948:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2200      	movs	r2, #0
 800694e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2200      	movs	r2, #0
 8006954:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006956:	78fb      	ldrb	r3, [r7, #3]
 8006958:	f003 030f 	and.w	r3, r3, #15
 800695c:	b2da      	uxtb	r2, r3
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006968:	2b01      	cmp	r3, #1
 800696a:	d101      	bne.n	8006970 <HAL_PCD_EP_ClrStall+0x86>
 800696c:	2302      	movs	r3, #2
 800696e:	e00e      	b.n	800698e <HAL_PCD_EP_ClrStall+0xa4>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2201      	movs	r2, #1
 8006974:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	68f9      	ldr	r1, [r7, #12]
 800697e:	4618      	mov	r0, r3
 8006980:	f003 fc5f 	bl	800a242 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800698c:	2300      	movs	r3, #0
}
 800698e:	4618      	mov	r0, r3
 8006990:	3710      	adds	r7, #16
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}

08006996 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006996:	b580      	push	{r7, lr}
 8006998:	b08a      	sub	sp, #40	; 0x28
 800699a:	af02      	add	r7, sp, #8
 800699c:	6078      	str	r0, [r7, #4]
 800699e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80069aa:	683a      	ldr	r2, [r7, #0]
 80069ac:	4613      	mov	r3, r2
 80069ae:	00db      	lsls	r3, r3, #3
 80069b0:	1a9b      	subs	r3, r3, r2
 80069b2:	009b      	lsls	r3, r3, #2
 80069b4:	3338      	adds	r3, #56	; 0x38
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	4413      	add	r3, r2
 80069ba:	3304      	adds	r3, #4
 80069bc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	699a      	ldr	r2, [r3, #24]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	695b      	ldr	r3, [r3, #20]
 80069c6:	429a      	cmp	r2, r3
 80069c8:	d901      	bls.n	80069ce <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80069ca:	2301      	movs	r3, #1
 80069cc:	e06c      	b.n	8006aa8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	695a      	ldr	r2, [r3, #20]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	699b      	ldr	r3, [r3, #24]
 80069d6:	1ad3      	subs	r3, r2, r3
 80069d8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	69fa      	ldr	r2, [r7, #28]
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d902      	bls.n	80069ea <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80069ea:	69fb      	ldr	r3, [r7, #28]
 80069ec:	3303      	adds	r3, #3
 80069ee:	089b      	lsrs	r3, r3, #2
 80069f0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80069f2:	e02b      	b.n	8006a4c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	695a      	ldr	r2, [r3, #20]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	699b      	ldr	r3, [r3, #24]
 80069fc:	1ad3      	subs	r3, r2, r3
 80069fe:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	69fa      	ldr	r2, [r7, #28]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d902      	bls.n	8006a10 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006a10:	69fb      	ldr	r3, [r7, #28]
 8006a12:	3303      	adds	r3, #3
 8006a14:	089b      	lsrs	r3, r3, #2
 8006a16:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	68d9      	ldr	r1, [r3, #12]
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	b2da      	uxtb	r2, r3
 8006a20:	69fb      	ldr	r3, [r7, #28]
 8006a22:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	9300      	str	r3, [sp, #0]
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	6978      	ldr	r0, [r7, #20]
 8006a30:	f003 fb03 	bl	800a03a <USB_WritePacket>

    ep->xfer_buff  += len;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	68da      	ldr	r2, [r3, #12]
 8006a38:	69fb      	ldr	r3, [r7, #28]
 8006a3a:	441a      	add	r2, r3
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	699a      	ldr	r2, [r3, #24]
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	441a      	add	r2, r3
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	015a      	lsls	r2, r3, #5
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	4413      	add	r3, r2
 8006a54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a58:	699b      	ldr	r3, [r3, #24]
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	69ba      	ldr	r2, [r7, #24]
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d809      	bhi.n	8006a76 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	699a      	ldr	r2, [r3, #24]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d203      	bcs.n	8006a76 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	695b      	ldr	r3, [r3, #20]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d1be      	bne.n	80069f4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	695a      	ldr	r2, [r3, #20]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	699b      	ldr	r3, [r3, #24]
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d811      	bhi.n	8006aa6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	f003 030f 	and.w	r3, r3, #15
 8006a88:	2201      	movs	r2, #1
 8006a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a8e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	43db      	mvns	r3, r3
 8006a9c:	6939      	ldr	r1, [r7, #16]
 8006a9e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006aa2:	4013      	ands	r3, r2
 8006aa4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006aa6:	2300      	movs	r3, #0
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3720      	adds	r7, #32
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}

08006ab0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b086      	sub	sp, #24
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	333c      	adds	r3, #60	; 0x3c
 8006ac8:	3304      	adds	r3, #4
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	015a      	lsls	r2, r3, #5
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	4413      	add	r3, r2
 8006ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	691b      	ldr	r3, [r3, #16]
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	f040 80a0 	bne.w	8006c28 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	f003 0308 	and.w	r3, r3, #8
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d015      	beq.n	8006b1e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	4a72      	ldr	r2, [pc, #456]	; (8006cc0 <PCD_EP_OutXfrComplete_int+0x210>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	f240 80dd 	bls.w	8006cb6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	f000 80d7 	beq.w	8006cb6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	015a      	lsls	r2, r3, #5
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	4413      	add	r3, r2
 8006b10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b14:	461a      	mov	r2, r3
 8006b16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b1a:	6093      	str	r3, [r2, #8]
 8006b1c:	e0cb      	b.n	8006cb6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	f003 0320 	and.w	r3, r3, #32
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d009      	beq.n	8006b3c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	015a      	lsls	r2, r3, #5
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	4413      	add	r3, r2
 8006b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b34:	461a      	mov	r2, r3
 8006b36:	2320      	movs	r3, #32
 8006b38:	6093      	str	r3, [r2, #8]
 8006b3a:	e0bc      	b.n	8006cb6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	f040 80b7 	bne.w	8006cb6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	4a5d      	ldr	r2, [pc, #372]	; (8006cc0 <PCD_EP_OutXfrComplete_int+0x210>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d90f      	bls.n	8006b70 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d00a      	beq.n	8006b70 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	015a      	lsls	r2, r3, #5
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	4413      	add	r3, r2
 8006b62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b66:	461a      	mov	r2, r3
 8006b68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b6c:	6093      	str	r3, [r2, #8]
 8006b6e:	e0a2      	b.n	8006cb6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8006b70:	6879      	ldr	r1, [r7, #4]
 8006b72:	683a      	ldr	r2, [r7, #0]
 8006b74:	4613      	mov	r3, r2
 8006b76:	00db      	lsls	r3, r3, #3
 8006b78:	1a9b      	subs	r3, r3, r2
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	440b      	add	r3, r1
 8006b7e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006b82:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	0159      	lsls	r1, r3, #5
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	440b      	add	r3, r1
 8006b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b90:	691b      	ldr	r3, [r3, #16]
 8006b92:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8006b96:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	683a      	ldr	r2, [r7, #0]
 8006b9c:	4613      	mov	r3, r2
 8006b9e:	00db      	lsls	r3, r3, #3
 8006ba0:	1a9b      	subs	r3, r3, r2
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	4403      	add	r3, r0
 8006ba6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006baa:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8006bac:	6879      	ldr	r1, [r7, #4]
 8006bae:	683a      	ldr	r2, [r7, #0]
 8006bb0:	4613      	mov	r3, r2
 8006bb2:	00db      	lsls	r3, r3, #3
 8006bb4:	1a9b      	subs	r3, r3, r2
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	440b      	add	r3, r1
 8006bba:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006bbe:	6819      	ldr	r1, [r3, #0]
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	683a      	ldr	r2, [r7, #0]
 8006bc4:	4613      	mov	r3, r2
 8006bc6:	00db      	lsls	r3, r3, #3
 8006bc8:	1a9b      	subs	r3, r3, r2
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	4403      	add	r3, r0
 8006bce:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4419      	add	r1, r3
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	683a      	ldr	r2, [r7, #0]
 8006bda:	4613      	mov	r3, r2
 8006bdc:	00db      	lsls	r3, r3, #3
 8006bde:	1a9b      	subs	r3, r3, r2
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	4403      	add	r3, r0
 8006be4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006be8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d114      	bne.n	8006c1a <PCD_EP_OutXfrComplete_int+0x16a>
 8006bf0:	6879      	ldr	r1, [r7, #4]
 8006bf2:	683a      	ldr	r2, [r7, #0]
 8006bf4:	4613      	mov	r3, r2
 8006bf6:	00db      	lsls	r3, r3, #3
 8006bf8:	1a9b      	subs	r3, r3, r2
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	440b      	add	r3, r1
 8006bfe:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d108      	bne.n	8006c1a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6818      	ldr	r0, [r3, #0]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006c12:	461a      	mov	r2, r3
 8006c14:	2101      	movs	r1, #1
 8006c16:	f003 fca7 	bl	800a568 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	4619      	mov	r1, r3
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f005 fc2d 	bl	800c480 <HAL_PCD_DataOutStageCallback>
 8006c26:	e046      	b.n	8006cb6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	4a26      	ldr	r2, [pc, #152]	; (8006cc4 <PCD_EP_OutXfrComplete_int+0x214>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d124      	bne.n	8006c7a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d00a      	beq.n	8006c50 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	015a      	lsls	r2, r3, #5
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	4413      	add	r3, r2
 8006c42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c46:	461a      	mov	r2, r3
 8006c48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c4c:	6093      	str	r3, [r2, #8]
 8006c4e:	e032      	b.n	8006cb6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	f003 0320 	and.w	r3, r3, #32
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d008      	beq.n	8006c6c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	015a      	lsls	r2, r3, #5
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	4413      	add	r3, r2
 8006c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c66:	461a      	mov	r2, r3
 8006c68:	2320      	movs	r3, #32
 8006c6a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	4619      	mov	r1, r3
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f005 fc04 	bl	800c480 <HAL_PCD_DataOutStageCallback>
 8006c78:	e01d      	b.n	8006cb6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d114      	bne.n	8006caa <PCD_EP_OutXfrComplete_int+0x1fa>
 8006c80:	6879      	ldr	r1, [r7, #4]
 8006c82:	683a      	ldr	r2, [r7, #0]
 8006c84:	4613      	mov	r3, r2
 8006c86:	00db      	lsls	r3, r3, #3
 8006c88:	1a9b      	subs	r3, r3, r2
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	440b      	add	r3, r1
 8006c8e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d108      	bne.n	8006caa <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6818      	ldr	r0, [r3, #0]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006ca2:	461a      	mov	r2, r3
 8006ca4:	2100      	movs	r1, #0
 8006ca6:	f003 fc5f 	bl	800a568 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	4619      	mov	r1, r3
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f005 fbe5 	bl	800c480 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006cb6:	2300      	movs	r3, #0
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3718      	adds	r7, #24
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}
 8006cc0:	4f54300a 	.word	0x4f54300a
 8006cc4:	4f54310a 	.word	0x4f54310a

08006cc8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b086      	sub	sp, #24
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	333c      	adds	r3, #60	; 0x3c
 8006ce0:	3304      	adds	r3, #4
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	015a      	lsls	r2, r3, #5
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	4413      	add	r3, r2
 8006cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	4a15      	ldr	r2, [pc, #84]	; (8006d50 <PCD_EP_OutSetupPacket_int+0x88>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d90e      	bls.n	8006d1c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d009      	beq.n	8006d1c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	015a      	lsls	r2, r3, #5
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	4413      	add	r3, r2
 8006d10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d14:	461a      	mov	r2, r3
 8006d16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d1a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f005 fb9d 	bl	800c45c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	4a0a      	ldr	r2, [pc, #40]	; (8006d50 <PCD_EP_OutSetupPacket_int+0x88>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d90c      	bls.n	8006d44 <PCD_EP_OutSetupPacket_int+0x7c>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	691b      	ldr	r3, [r3, #16]
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d108      	bne.n	8006d44 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6818      	ldr	r0, [r3, #0]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	2101      	movs	r1, #1
 8006d40:	f003 fc12 	bl	800a568 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006d44:	2300      	movs	r3, #0
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3718      	adds	r7, #24
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	bf00      	nop
 8006d50:	4f54300a 	.word	0x4f54300a

08006d54 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b085      	sub	sp, #20
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	460b      	mov	r3, r1
 8006d5e:	70fb      	strb	r3, [r7, #3]
 8006d60:	4613      	mov	r3, r2
 8006d62:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d6a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006d6c:	78fb      	ldrb	r3, [r7, #3]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d107      	bne.n	8006d82 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006d72:	883b      	ldrh	r3, [r7, #0]
 8006d74:	0419      	lsls	r1, r3, #16
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	68ba      	ldr	r2, [r7, #8]
 8006d7c:	430a      	orrs	r2, r1
 8006d7e:	629a      	str	r2, [r3, #40]	; 0x28
 8006d80:	e028      	b.n	8006dd4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d88:	0c1b      	lsrs	r3, r3, #16
 8006d8a:	68ba      	ldr	r2, [r7, #8]
 8006d8c:	4413      	add	r3, r2
 8006d8e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006d90:	2300      	movs	r3, #0
 8006d92:	73fb      	strb	r3, [r7, #15]
 8006d94:	e00d      	b.n	8006db2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	7bfb      	ldrb	r3, [r7, #15]
 8006d9c:	3340      	adds	r3, #64	; 0x40
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	4413      	add	r3, r2
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	0c1b      	lsrs	r3, r3, #16
 8006da6:	68ba      	ldr	r2, [r7, #8]
 8006da8:	4413      	add	r3, r2
 8006daa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006dac:	7bfb      	ldrb	r3, [r7, #15]
 8006dae:	3301      	adds	r3, #1
 8006db0:	73fb      	strb	r3, [r7, #15]
 8006db2:	7bfa      	ldrb	r2, [r7, #15]
 8006db4:	78fb      	ldrb	r3, [r7, #3]
 8006db6:	3b01      	subs	r3, #1
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d3ec      	bcc.n	8006d96 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006dbc:	883b      	ldrh	r3, [r7, #0]
 8006dbe:	0418      	lsls	r0, r3, #16
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6819      	ldr	r1, [r3, #0]
 8006dc4:	78fb      	ldrb	r3, [r7, #3]
 8006dc6:	3b01      	subs	r3, #1
 8006dc8:	68ba      	ldr	r2, [r7, #8]
 8006dca:	4302      	orrs	r2, r0
 8006dcc:	3340      	adds	r3, #64	; 0x40
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	440b      	add	r3, r1
 8006dd2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006dd4:	2300      	movs	r3, #0
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3714      	adds	r7, #20
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr

08006de2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006de2:	b480      	push	{r7}
 8006de4:	b083      	sub	sp, #12
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
 8006dea:	460b      	mov	r3, r1
 8006dec:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	887a      	ldrh	r2, [r7, #2]
 8006df4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006df6:	2300      	movs	r3, #0
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	370c      	adds	r7, #12
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr

08006e04 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	460b      	mov	r3, r1
 8006e0e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006e10:	bf00      	nop
 8006e12:	370c      	adds	r7, #12
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr

08006e1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b086      	sub	sp, #24
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d101      	bne.n	8006e2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	e267      	b.n	80072fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f003 0301 	and.w	r3, r3, #1
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d075      	beq.n	8006f26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006e3a:	4b88      	ldr	r3, [pc, #544]	; (800705c <HAL_RCC_OscConfig+0x240>)
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	f003 030c 	and.w	r3, r3, #12
 8006e42:	2b04      	cmp	r3, #4
 8006e44:	d00c      	beq.n	8006e60 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006e46:	4b85      	ldr	r3, [pc, #532]	; (800705c <HAL_RCC_OscConfig+0x240>)
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006e4e:	2b08      	cmp	r3, #8
 8006e50:	d112      	bne.n	8006e78 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006e52:	4b82      	ldr	r3, [pc, #520]	; (800705c <HAL_RCC_OscConfig+0x240>)
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e5e:	d10b      	bne.n	8006e78 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e60:	4b7e      	ldr	r3, [pc, #504]	; (800705c <HAL_RCC_OscConfig+0x240>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d05b      	beq.n	8006f24 <HAL_RCC_OscConfig+0x108>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d157      	bne.n	8006f24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006e74:	2301      	movs	r3, #1
 8006e76:	e242      	b.n	80072fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e80:	d106      	bne.n	8006e90 <HAL_RCC_OscConfig+0x74>
 8006e82:	4b76      	ldr	r3, [pc, #472]	; (800705c <HAL_RCC_OscConfig+0x240>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a75      	ldr	r2, [pc, #468]	; (800705c <HAL_RCC_OscConfig+0x240>)
 8006e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e8c:	6013      	str	r3, [r2, #0]
 8006e8e:	e01d      	b.n	8006ecc <HAL_RCC_OscConfig+0xb0>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006e98:	d10c      	bne.n	8006eb4 <HAL_RCC_OscConfig+0x98>
 8006e9a:	4b70      	ldr	r3, [pc, #448]	; (800705c <HAL_RCC_OscConfig+0x240>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a6f      	ldr	r2, [pc, #444]	; (800705c <HAL_RCC_OscConfig+0x240>)
 8006ea0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ea4:	6013      	str	r3, [r2, #0]
 8006ea6:	4b6d      	ldr	r3, [pc, #436]	; (800705c <HAL_RCC_OscConfig+0x240>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a6c      	ldr	r2, [pc, #432]	; (800705c <HAL_RCC_OscConfig+0x240>)
 8006eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006eb0:	6013      	str	r3, [r2, #0]
 8006eb2:	e00b      	b.n	8006ecc <HAL_RCC_OscConfig+0xb0>
 8006eb4:	4b69      	ldr	r3, [pc, #420]	; (800705c <HAL_RCC_OscConfig+0x240>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a68      	ldr	r2, [pc, #416]	; (800705c <HAL_RCC_OscConfig+0x240>)
 8006eba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ebe:	6013      	str	r3, [r2, #0]
 8006ec0:	4b66      	ldr	r3, [pc, #408]	; (800705c <HAL_RCC_OscConfig+0x240>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a65      	ldr	r2, [pc, #404]	; (800705c <HAL_RCC_OscConfig+0x240>)
 8006ec6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006eca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d013      	beq.n	8006efc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ed4:	f7fd fa8c 	bl	80043f0 <HAL_GetTick>
 8006ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006eda:	e008      	b.n	8006eee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006edc:	f7fd fa88 	bl	80043f0 <HAL_GetTick>
 8006ee0:	4602      	mov	r2, r0
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	1ad3      	subs	r3, r2, r3
 8006ee6:	2b64      	cmp	r3, #100	; 0x64
 8006ee8:	d901      	bls.n	8006eee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006eea:	2303      	movs	r3, #3
 8006eec:	e207      	b.n	80072fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006eee:	4b5b      	ldr	r3, [pc, #364]	; (800705c <HAL_RCC_OscConfig+0x240>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d0f0      	beq.n	8006edc <HAL_RCC_OscConfig+0xc0>
 8006efa:	e014      	b.n	8006f26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006efc:	f7fd fa78 	bl	80043f0 <HAL_GetTick>
 8006f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f02:	e008      	b.n	8006f16 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006f04:	f7fd fa74 	bl	80043f0 <HAL_GetTick>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	1ad3      	subs	r3, r2, r3
 8006f0e:	2b64      	cmp	r3, #100	; 0x64
 8006f10:	d901      	bls.n	8006f16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006f12:	2303      	movs	r3, #3
 8006f14:	e1f3      	b.n	80072fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f16:	4b51      	ldr	r3, [pc, #324]	; (800705c <HAL_RCC_OscConfig+0x240>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d1f0      	bne.n	8006f04 <HAL_RCC_OscConfig+0xe8>
 8006f22:	e000      	b.n	8006f26 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f003 0302 	and.w	r3, r3, #2
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d063      	beq.n	8006ffa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006f32:	4b4a      	ldr	r3, [pc, #296]	; (800705c <HAL_RCC_OscConfig+0x240>)
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	f003 030c 	and.w	r3, r3, #12
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d00b      	beq.n	8006f56 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006f3e:	4b47      	ldr	r3, [pc, #284]	; (800705c <HAL_RCC_OscConfig+0x240>)
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006f46:	2b08      	cmp	r3, #8
 8006f48:	d11c      	bne.n	8006f84 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006f4a:	4b44      	ldr	r3, [pc, #272]	; (800705c <HAL_RCC_OscConfig+0x240>)
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d116      	bne.n	8006f84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f56:	4b41      	ldr	r3, [pc, #260]	; (800705c <HAL_RCC_OscConfig+0x240>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f003 0302 	and.w	r3, r3, #2
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d005      	beq.n	8006f6e <HAL_RCC_OscConfig+0x152>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	68db      	ldr	r3, [r3, #12]
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d001      	beq.n	8006f6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e1c7      	b.n	80072fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f6e:	4b3b      	ldr	r3, [pc, #236]	; (800705c <HAL_RCC_OscConfig+0x240>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	691b      	ldr	r3, [r3, #16]
 8006f7a:	00db      	lsls	r3, r3, #3
 8006f7c:	4937      	ldr	r1, [pc, #220]	; (800705c <HAL_RCC_OscConfig+0x240>)
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f82:	e03a      	b.n	8006ffa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d020      	beq.n	8006fce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006f8c:	4b34      	ldr	r3, [pc, #208]	; (8007060 <HAL_RCC_OscConfig+0x244>)
 8006f8e:	2201      	movs	r2, #1
 8006f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f92:	f7fd fa2d 	bl	80043f0 <HAL_GetTick>
 8006f96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f98:	e008      	b.n	8006fac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f9a:	f7fd fa29 	bl	80043f0 <HAL_GetTick>
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	1ad3      	subs	r3, r2, r3
 8006fa4:	2b02      	cmp	r3, #2
 8006fa6:	d901      	bls.n	8006fac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006fa8:	2303      	movs	r3, #3
 8006faa:	e1a8      	b.n	80072fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006fac:	4b2b      	ldr	r3, [pc, #172]	; (800705c <HAL_RCC_OscConfig+0x240>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f003 0302 	and.w	r3, r3, #2
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d0f0      	beq.n	8006f9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fb8:	4b28      	ldr	r3, [pc, #160]	; (800705c <HAL_RCC_OscConfig+0x240>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	691b      	ldr	r3, [r3, #16]
 8006fc4:	00db      	lsls	r3, r3, #3
 8006fc6:	4925      	ldr	r1, [pc, #148]	; (800705c <HAL_RCC_OscConfig+0x240>)
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	600b      	str	r3, [r1, #0]
 8006fcc:	e015      	b.n	8006ffa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006fce:	4b24      	ldr	r3, [pc, #144]	; (8007060 <HAL_RCC_OscConfig+0x244>)
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fd4:	f7fd fa0c 	bl	80043f0 <HAL_GetTick>
 8006fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006fda:	e008      	b.n	8006fee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006fdc:	f7fd fa08 	bl	80043f0 <HAL_GetTick>
 8006fe0:	4602      	mov	r2, r0
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	1ad3      	subs	r3, r2, r3
 8006fe6:	2b02      	cmp	r3, #2
 8006fe8:	d901      	bls.n	8006fee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006fea:	2303      	movs	r3, #3
 8006fec:	e187      	b.n	80072fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006fee:	4b1b      	ldr	r3, [pc, #108]	; (800705c <HAL_RCC_OscConfig+0x240>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f003 0302 	and.w	r3, r3, #2
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d1f0      	bne.n	8006fdc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f003 0308 	and.w	r3, r3, #8
 8007002:	2b00      	cmp	r3, #0
 8007004:	d036      	beq.n	8007074 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	695b      	ldr	r3, [r3, #20]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d016      	beq.n	800703c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800700e:	4b15      	ldr	r3, [pc, #84]	; (8007064 <HAL_RCC_OscConfig+0x248>)
 8007010:	2201      	movs	r2, #1
 8007012:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007014:	f7fd f9ec 	bl	80043f0 <HAL_GetTick>
 8007018:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800701a:	e008      	b.n	800702e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800701c:	f7fd f9e8 	bl	80043f0 <HAL_GetTick>
 8007020:	4602      	mov	r2, r0
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	1ad3      	subs	r3, r2, r3
 8007026:	2b02      	cmp	r3, #2
 8007028:	d901      	bls.n	800702e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800702a:	2303      	movs	r3, #3
 800702c:	e167      	b.n	80072fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800702e:	4b0b      	ldr	r3, [pc, #44]	; (800705c <HAL_RCC_OscConfig+0x240>)
 8007030:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007032:	f003 0302 	and.w	r3, r3, #2
 8007036:	2b00      	cmp	r3, #0
 8007038:	d0f0      	beq.n	800701c <HAL_RCC_OscConfig+0x200>
 800703a:	e01b      	b.n	8007074 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800703c:	4b09      	ldr	r3, [pc, #36]	; (8007064 <HAL_RCC_OscConfig+0x248>)
 800703e:	2200      	movs	r2, #0
 8007040:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007042:	f7fd f9d5 	bl	80043f0 <HAL_GetTick>
 8007046:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007048:	e00e      	b.n	8007068 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800704a:	f7fd f9d1 	bl	80043f0 <HAL_GetTick>
 800704e:	4602      	mov	r2, r0
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	1ad3      	subs	r3, r2, r3
 8007054:	2b02      	cmp	r3, #2
 8007056:	d907      	bls.n	8007068 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007058:	2303      	movs	r3, #3
 800705a:	e150      	b.n	80072fe <HAL_RCC_OscConfig+0x4e2>
 800705c:	40023800 	.word	0x40023800
 8007060:	42470000 	.word	0x42470000
 8007064:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007068:	4b88      	ldr	r3, [pc, #544]	; (800728c <HAL_RCC_OscConfig+0x470>)
 800706a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800706c:	f003 0302 	and.w	r3, r3, #2
 8007070:	2b00      	cmp	r3, #0
 8007072:	d1ea      	bne.n	800704a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f003 0304 	and.w	r3, r3, #4
 800707c:	2b00      	cmp	r3, #0
 800707e:	f000 8097 	beq.w	80071b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007082:	2300      	movs	r3, #0
 8007084:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007086:	4b81      	ldr	r3, [pc, #516]	; (800728c <HAL_RCC_OscConfig+0x470>)
 8007088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800708a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800708e:	2b00      	cmp	r3, #0
 8007090:	d10f      	bne.n	80070b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007092:	2300      	movs	r3, #0
 8007094:	60bb      	str	r3, [r7, #8]
 8007096:	4b7d      	ldr	r3, [pc, #500]	; (800728c <HAL_RCC_OscConfig+0x470>)
 8007098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800709a:	4a7c      	ldr	r2, [pc, #496]	; (800728c <HAL_RCC_OscConfig+0x470>)
 800709c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070a0:	6413      	str	r3, [r2, #64]	; 0x40
 80070a2:	4b7a      	ldr	r3, [pc, #488]	; (800728c <HAL_RCC_OscConfig+0x470>)
 80070a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070aa:	60bb      	str	r3, [r7, #8]
 80070ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80070ae:	2301      	movs	r3, #1
 80070b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070b2:	4b77      	ldr	r3, [pc, #476]	; (8007290 <HAL_RCC_OscConfig+0x474>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d118      	bne.n	80070f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80070be:	4b74      	ldr	r3, [pc, #464]	; (8007290 <HAL_RCC_OscConfig+0x474>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a73      	ldr	r2, [pc, #460]	; (8007290 <HAL_RCC_OscConfig+0x474>)
 80070c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80070ca:	f7fd f991 	bl	80043f0 <HAL_GetTick>
 80070ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070d0:	e008      	b.n	80070e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070d2:	f7fd f98d 	bl	80043f0 <HAL_GetTick>
 80070d6:	4602      	mov	r2, r0
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	1ad3      	subs	r3, r2, r3
 80070dc:	2b02      	cmp	r3, #2
 80070de:	d901      	bls.n	80070e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80070e0:	2303      	movs	r3, #3
 80070e2:	e10c      	b.n	80072fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070e4:	4b6a      	ldr	r3, [pc, #424]	; (8007290 <HAL_RCC_OscConfig+0x474>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d0f0      	beq.n	80070d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	689b      	ldr	r3, [r3, #8]
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d106      	bne.n	8007106 <HAL_RCC_OscConfig+0x2ea>
 80070f8:	4b64      	ldr	r3, [pc, #400]	; (800728c <HAL_RCC_OscConfig+0x470>)
 80070fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070fc:	4a63      	ldr	r2, [pc, #396]	; (800728c <HAL_RCC_OscConfig+0x470>)
 80070fe:	f043 0301 	orr.w	r3, r3, #1
 8007102:	6713      	str	r3, [r2, #112]	; 0x70
 8007104:	e01c      	b.n	8007140 <HAL_RCC_OscConfig+0x324>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	2b05      	cmp	r3, #5
 800710c:	d10c      	bne.n	8007128 <HAL_RCC_OscConfig+0x30c>
 800710e:	4b5f      	ldr	r3, [pc, #380]	; (800728c <HAL_RCC_OscConfig+0x470>)
 8007110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007112:	4a5e      	ldr	r2, [pc, #376]	; (800728c <HAL_RCC_OscConfig+0x470>)
 8007114:	f043 0304 	orr.w	r3, r3, #4
 8007118:	6713      	str	r3, [r2, #112]	; 0x70
 800711a:	4b5c      	ldr	r3, [pc, #368]	; (800728c <HAL_RCC_OscConfig+0x470>)
 800711c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800711e:	4a5b      	ldr	r2, [pc, #364]	; (800728c <HAL_RCC_OscConfig+0x470>)
 8007120:	f043 0301 	orr.w	r3, r3, #1
 8007124:	6713      	str	r3, [r2, #112]	; 0x70
 8007126:	e00b      	b.n	8007140 <HAL_RCC_OscConfig+0x324>
 8007128:	4b58      	ldr	r3, [pc, #352]	; (800728c <HAL_RCC_OscConfig+0x470>)
 800712a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800712c:	4a57      	ldr	r2, [pc, #348]	; (800728c <HAL_RCC_OscConfig+0x470>)
 800712e:	f023 0301 	bic.w	r3, r3, #1
 8007132:	6713      	str	r3, [r2, #112]	; 0x70
 8007134:	4b55      	ldr	r3, [pc, #340]	; (800728c <HAL_RCC_OscConfig+0x470>)
 8007136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007138:	4a54      	ldr	r2, [pc, #336]	; (800728c <HAL_RCC_OscConfig+0x470>)
 800713a:	f023 0304 	bic.w	r3, r3, #4
 800713e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d015      	beq.n	8007174 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007148:	f7fd f952 	bl	80043f0 <HAL_GetTick>
 800714c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800714e:	e00a      	b.n	8007166 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007150:	f7fd f94e 	bl	80043f0 <HAL_GetTick>
 8007154:	4602      	mov	r2, r0
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	1ad3      	subs	r3, r2, r3
 800715a:	f241 3288 	movw	r2, #5000	; 0x1388
 800715e:	4293      	cmp	r3, r2
 8007160:	d901      	bls.n	8007166 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007162:	2303      	movs	r3, #3
 8007164:	e0cb      	b.n	80072fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007166:	4b49      	ldr	r3, [pc, #292]	; (800728c <HAL_RCC_OscConfig+0x470>)
 8007168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800716a:	f003 0302 	and.w	r3, r3, #2
 800716e:	2b00      	cmp	r3, #0
 8007170:	d0ee      	beq.n	8007150 <HAL_RCC_OscConfig+0x334>
 8007172:	e014      	b.n	800719e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007174:	f7fd f93c 	bl	80043f0 <HAL_GetTick>
 8007178:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800717a:	e00a      	b.n	8007192 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800717c:	f7fd f938 	bl	80043f0 <HAL_GetTick>
 8007180:	4602      	mov	r2, r0
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	1ad3      	subs	r3, r2, r3
 8007186:	f241 3288 	movw	r2, #5000	; 0x1388
 800718a:	4293      	cmp	r3, r2
 800718c:	d901      	bls.n	8007192 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800718e:	2303      	movs	r3, #3
 8007190:	e0b5      	b.n	80072fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007192:	4b3e      	ldr	r3, [pc, #248]	; (800728c <HAL_RCC_OscConfig+0x470>)
 8007194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007196:	f003 0302 	and.w	r3, r3, #2
 800719a:	2b00      	cmp	r3, #0
 800719c:	d1ee      	bne.n	800717c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800719e:	7dfb      	ldrb	r3, [r7, #23]
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d105      	bne.n	80071b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80071a4:	4b39      	ldr	r3, [pc, #228]	; (800728c <HAL_RCC_OscConfig+0x470>)
 80071a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a8:	4a38      	ldr	r2, [pc, #224]	; (800728c <HAL_RCC_OscConfig+0x470>)
 80071aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80071ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	699b      	ldr	r3, [r3, #24]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	f000 80a1 	beq.w	80072fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80071ba:	4b34      	ldr	r3, [pc, #208]	; (800728c <HAL_RCC_OscConfig+0x470>)
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	f003 030c 	and.w	r3, r3, #12
 80071c2:	2b08      	cmp	r3, #8
 80071c4:	d05c      	beq.n	8007280 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	699b      	ldr	r3, [r3, #24]
 80071ca:	2b02      	cmp	r3, #2
 80071cc:	d141      	bne.n	8007252 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071ce:	4b31      	ldr	r3, [pc, #196]	; (8007294 <HAL_RCC_OscConfig+0x478>)
 80071d0:	2200      	movs	r2, #0
 80071d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071d4:	f7fd f90c 	bl	80043f0 <HAL_GetTick>
 80071d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071da:	e008      	b.n	80071ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80071dc:	f7fd f908 	bl	80043f0 <HAL_GetTick>
 80071e0:	4602      	mov	r2, r0
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	1ad3      	subs	r3, r2, r3
 80071e6:	2b02      	cmp	r3, #2
 80071e8:	d901      	bls.n	80071ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80071ea:	2303      	movs	r3, #3
 80071ec:	e087      	b.n	80072fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071ee:	4b27      	ldr	r3, [pc, #156]	; (800728c <HAL_RCC_OscConfig+0x470>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d1f0      	bne.n	80071dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	69da      	ldr	r2, [r3, #28]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6a1b      	ldr	r3, [r3, #32]
 8007202:	431a      	orrs	r2, r3
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007208:	019b      	lsls	r3, r3, #6
 800720a:	431a      	orrs	r2, r3
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007210:	085b      	lsrs	r3, r3, #1
 8007212:	3b01      	subs	r3, #1
 8007214:	041b      	lsls	r3, r3, #16
 8007216:	431a      	orrs	r2, r3
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800721c:	061b      	lsls	r3, r3, #24
 800721e:	491b      	ldr	r1, [pc, #108]	; (800728c <HAL_RCC_OscConfig+0x470>)
 8007220:	4313      	orrs	r3, r2
 8007222:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007224:	4b1b      	ldr	r3, [pc, #108]	; (8007294 <HAL_RCC_OscConfig+0x478>)
 8007226:	2201      	movs	r2, #1
 8007228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800722a:	f7fd f8e1 	bl	80043f0 <HAL_GetTick>
 800722e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007230:	e008      	b.n	8007244 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007232:	f7fd f8dd 	bl	80043f0 <HAL_GetTick>
 8007236:	4602      	mov	r2, r0
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	1ad3      	subs	r3, r2, r3
 800723c:	2b02      	cmp	r3, #2
 800723e:	d901      	bls.n	8007244 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007240:	2303      	movs	r3, #3
 8007242:	e05c      	b.n	80072fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007244:	4b11      	ldr	r3, [pc, #68]	; (800728c <HAL_RCC_OscConfig+0x470>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800724c:	2b00      	cmp	r3, #0
 800724e:	d0f0      	beq.n	8007232 <HAL_RCC_OscConfig+0x416>
 8007250:	e054      	b.n	80072fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007252:	4b10      	ldr	r3, [pc, #64]	; (8007294 <HAL_RCC_OscConfig+0x478>)
 8007254:	2200      	movs	r2, #0
 8007256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007258:	f7fd f8ca 	bl	80043f0 <HAL_GetTick>
 800725c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800725e:	e008      	b.n	8007272 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007260:	f7fd f8c6 	bl	80043f0 <HAL_GetTick>
 8007264:	4602      	mov	r2, r0
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	1ad3      	subs	r3, r2, r3
 800726a:	2b02      	cmp	r3, #2
 800726c:	d901      	bls.n	8007272 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800726e:	2303      	movs	r3, #3
 8007270:	e045      	b.n	80072fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007272:	4b06      	ldr	r3, [pc, #24]	; (800728c <HAL_RCC_OscConfig+0x470>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800727a:	2b00      	cmp	r3, #0
 800727c:	d1f0      	bne.n	8007260 <HAL_RCC_OscConfig+0x444>
 800727e:	e03d      	b.n	80072fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	699b      	ldr	r3, [r3, #24]
 8007284:	2b01      	cmp	r3, #1
 8007286:	d107      	bne.n	8007298 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007288:	2301      	movs	r3, #1
 800728a:	e038      	b.n	80072fe <HAL_RCC_OscConfig+0x4e2>
 800728c:	40023800 	.word	0x40023800
 8007290:	40007000 	.word	0x40007000
 8007294:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007298:	4b1b      	ldr	r3, [pc, #108]	; (8007308 <HAL_RCC_OscConfig+0x4ec>)
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	699b      	ldr	r3, [r3, #24]
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d028      	beq.n	80072f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d121      	bne.n	80072f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072be:	429a      	cmp	r2, r3
 80072c0:	d11a      	bne.n	80072f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80072c2:	68fa      	ldr	r2, [r7, #12]
 80072c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80072c8:	4013      	ands	r3, r2
 80072ca:	687a      	ldr	r2, [r7, #4]
 80072cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80072ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d111      	bne.n	80072f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072de:	085b      	lsrs	r3, r3, #1
 80072e0:	3b01      	subs	r3, #1
 80072e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d107      	bne.n	80072f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d001      	beq.n	80072fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80072f8:	2301      	movs	r3, #1
 80072fa:	e000      	b.n	80072fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80072fc:	2300      	movs	r3, #0
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3718      	adds	r7, #24
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
 8007306:	bf00      	nop
 8007308:	40023800 	.word	0x40023800

0800730c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b084      	sub	sp, #16
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d101      	bne.n	8007320 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800731c:	2301      	movs	r3, #1
 800731e:	e0cc      	b.n	80074ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007320:	4b68      	ldr	r3, [pc, #416]	; (80074c4 <HAL_RCC_ClockConfig+0x1b8>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f003 0307 	and.w	r3, r3, #7
 8007328:	683a      	ldr	r2, [r7, #0]
 800732a:	429a      	cmp	r2, r3
 800732c:	d90c      	bls.n	8007348 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800732e:	4b65      	ldr	r3, [pc, #404]	; (80074c4 <HAL_RCC_ClockConfig+0x1b8>)
 8007330:	683a      	ldr	r2, [r7, #0]
 8007332:	b2d2      	uxtb	r2, r2
 8007334:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007336:	4b63      	ldr	r3, [pc, #396]	; (80074c4 <HAL_RCC_ClockConfig+0x1b8>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f003 0307 	and.w	r3, r3, #7
 800733e:	683a      	ldr	r2, [r7, #0]
 8007340:	429a      	cmp	r2, r3
 8007342:	d001      	beq.n	8007348 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007344:	2301      	movs	r3, #1
 8007346:	e0b8      	b.n	80074ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f003 0302 	and.w	r3, r3, #2
 8007350:	2b00      	cmp	r3, #0
 8007352:	d020      	beq.n	8007396 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f003 0304 	and.w	r3, r3, #4
 800735c:	2b00      	cmp	r3, #0
 800735e:	d005      	beq.n	800736c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007360:	4b59      	ldr	r3, [pc, #356]	; (80074c8 <HAL_RCC_ClockConfig+0x1bc>)
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	4a58      	ldr	r2, [pc, #352]	; (80074c8 <HAL_RCC_ClockConfig+0x1bc>)
 8007366:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800736a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f003 0308 	and.w	r3, r3, #8
 8007374:	2b00      	cmp	r3, #0
 8007376:	d005      	beq.n	8007384 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007378:	4b53      	ldr	r3, [pc, #332]	; (80074c8 <HAL_RCC_ClockConfig+0x1bc>)
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	4a52      	ldr	r2, [pc, #328]	; (80074c8 <HAL_RCC_ClockConfig+0x1bc>)
 800737e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007382:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007384:	4b50      	ldr	r3, [pc, #320]	; (80074c8 <HAL_RCC_ClockConfig+0x1bc>)
 8007386:	689b      	ldr	r3, [r3, #8]
 8007388:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	494d      	ldr	r1, [pc, #308]	; (80074c8 <HAL_RCC_ClockConfig+0x1bc>)
 8007392:	4313      	orrs	r3, r2
 8007394:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f003 0301 	and.w	r3, r3, #1
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d044      	beq.n	800742c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d107      	bne.n	80073ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073aa:	4b47      	ldr	r3, [pc, #284]	; (80074c8 <HAL_RCC_ClockConfig+0x1bc>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d119      	bne.n	80073ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80073b6:	2301      	movs	r3, #1
 80073b8:	e07f      	b.n	80074ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	2b02      	cmp	r3, #2
 80073c0:	d003      	beq.n	80073ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80073c6:	2b03      	cmp	r3, #3
 80073c8:	d107      	bne.n	80073da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073ca:	4b3f      	ldr	r3, [pc, #252]	; (80074c8 <HAL_RCC_ClockConfig+0x1bc>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d109      	bne.n	80073ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80073d6:	2301      	movs	r3, #1
 80073d8:	e06f      	b.n	80074ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073da:	4b3b      	ldr	r3, [pc, #236]	; (80074c8 <HAL_RCC_ClockConfig+0x1bc>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f003 0302 	and.w	r3, r3, #2
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d101      	bne.n	80073ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80073e6:	2301      	movs	r3, #1
 80073e8:	e067      	b.n	80074ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80073ea:	4b37      	ldr	r3, [pc, #220]	; (80074c8 <HAL_RCC_ClockConfig+0x1bc>)
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	f023 0203 	bic.w	r2, r3, #3
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	4934      	ldr	r1, [pc, #208]	; (80074c8 <HAL_RCC_ClockConfig+0x1bc>)
 80073f8:	4313      	orrs	r3, r2
 80073fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80073fc:	f7fc fff8 	bl	80043f0 <HAL_GetTick>
 8007400:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007402:	e00a      	b.n	800741a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007404:	f7fc fff4 	bl	80043f0 <HAL_GetTick>
 8007408:	4602      	mov	r2, r0
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	1ad3      	subs	r3, r2, r3
 800740e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007412:	4293      	cmp	r3, r2
 8007414:	d901      	bls.n	800741a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007416:	2303      	movs	r3, #3
 8007418:	e04f      	b.n	80074ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800741a:	4b2b      	ldr	r3, [pc, #172]	; (80074c8 <HAL_RCC_ClockConfig+0x1bc>)
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	f003 020c 	and.w	r2, r3, #12
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	429a      	cmp	r2, r3
 800742a:	d1eb      	bne.n	8007404 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800742c:	4b25      	ldr	r3, [pc, #148]	; (80074c4 <HAL_RCC_ClockConfig+0x1b8>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f003 0307 	and.w	r3, r3, #7
 8007434:	683a      	ldr	r2, [r7, #0]
 8007436:	429a      	cmp	r2, r3
 8007438:	d20c      	bcs.n	8007454 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800743a:	4b22      	ldr	r3, [pc, #136]	; (80074c4 <HAL_RCC_ClockConfig+0x1b8>)
 800743c:	683a      	ldr	r2, [r7, #0]
 800743e:	b2d2      	uxtb	r2, r2
 8007440:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007442:	4b20      	ldr	r3, [pc, #128]	; (80074c4 <HAL_RCC_ClockConfig+0x1b8>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f003 0307 	and.w	r3, r3, #7
 800744a:	683a      	ldr	r2, [r7, #0]
 800744c:	429a      	cmp	r2, r3
 800744e:	d001      	beq.n	8007454 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007450:	2301      	movs	r3, #1
 8007452:	e032      	b.n	80074ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f003 0304 	and.w	r3, r3, #4
 800745c:	2b00      	cmp	r3, #0
 800745e:	d008      	beq.n	8007472 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007460:	4b19      	ldr	r3, [pc, #100]	; (80074c8 <HAL_RCC_ClockConfig+0x1bc>)
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	68db      	ldr	r3, [r3, #12]
 800746c:	4916      	ldr	r1, [pc, #88]	; (80074c8 <HAL_RCC_ClockConfig+0x1bc>)
 800746e:	4313      	orrs	r3, r2
 8007470:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f003 0308 	and.w	r3, r3, #8
 800747a:	2b00      	cmp	r3, #0
 800747c:	d009      	beq.n	8007492 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800747e:	4b12      	ldr	r3, [pc, #72]	; (80074c8 <HAL_RCC_ClockConfig+0x1bc>)
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	691b      	ldr	r3, [r3, #16]
 800748a:	00db      	lsls	r3, r3, #3
 800748c:	490e      	ldr	r1, [pc, #56]	; (80074c8 <HAL_RCC_ClockConfig+0x1bc>)
 800748e:	4313      	orrs	r3, r2
 8007490:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007492:	f000 f821 	bl	80074d8 <HAL_RCC_GetSysClockFreq>
 8007496:	4602      	mov	r2, r0
 8007498:	4b0b      	ldr	r3, [pc, #44]	; (80074c8 <HAL_RCC_ClockConfig+0x1bc>)
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	091b      	lsrs	r3, r3, #4
 800749e:	f003 030f 	and.w	r3, r3, #15
 80074a2:	490a      	ldr	r1, [pc, #40]	; (80074cc <HAL_RCC_ClockConfig+0x1c0>)
 80074a4:	5ccb      	ldrb	r3, [r1, r3]
 80074a6:	fa22 f303 	lsr.w	r3, r2, r3
 80074aa:	4a09      	ldr	r2, [pc, #36]	; (80074d0 <HAL_RCC_ClockConfig+0x1c4>)
 80074ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80074ae:	4b09      	ldr	r3, [pc, #36]	; (80074d4 <HAL_RCC_ClockConfig+0x1c8>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4618      	mov	r0, r3
 80074b4:	f7fc ff58 	bl	8004368 <HAL_InitTick>

  return HAL_OK;
 80074b8:	2300      	movs	r3, #0
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3710      	adds	r7, #16
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
 80074c2:	bf00      	nop
 80074c4:	40023c00 	.word	0x40023c00
 80074c8:	40023800 	.word	0x40023800
 80074cc:	08010d44 	.word	0x08010d44
 80074d0:	20000034 	.word	0x20000034
 80074d4:	20000038 	.word	0x20000038

080074d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80074d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80074dc:	b094      	sub	sp, #80	; 0x50
 80074de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80074e0:	2300      	movs	r3, #0
 80074e2:	647b      	str	r3, [r7, #68]	; 0x44
 80074e4:	2300      	movs	r3, #0
 80074e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074e8:	2300      	movs	r3, #0
 80074ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80074ec:	2300      	movs	r3, #0
 80074ee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80074f0:	4b79      	ldr	r3, [pc, #484]	; (80076d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	f003 030c 	and.w	r3, r3, #12
 80074f8:	2b08      	cmp	r3, #8
 80074fa:	d00d      	beq.n	8007518 <HAL_RCC_GetSysClockFreq+0x40>
 80074fc:	2b08      	cmp	r3, #8
 80074fe:	f200 80e1 	bhi.w	80076c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007502:	2b00      	cmp	r3, #0
 8007504:	d002      	beq.n	800750c <HAL_RCC_GetSysClockFreq+0x34>
 8007506:	2b04      	cmp	r3, #4
 8007508:	d003      	beq.n	8007512 <HAL_RCC_GetSysClockFreq+0x3a>
 800750a:	e0db      	b.n	80076c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800750c:	4b73      	ldr	r3, [pc, #460]	; (80076dc <HAL_RCC_GetSysClockFreq+0x204>)
 800750e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007510:	e0db      	b.n	80076ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007512:	4b72      	ldr	r3, [pc, #456]	; (80076dc <HAL_RCC_GetSysClockFreq+0x204>)
 8007514:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007516:	e0d8      	b.n	80076ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007518:	4b6f      	ldr	r3, [pc, #444]	; (80076d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007520:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007522:	4b6d      	ldr	r3, [pc, #436]	; (80076d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800752a:	2b00      	cmp	r3, #0
 800752c:	d063      	beq.n	80075f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800752e:	4b6a      	ldr	r3, [pc, #424]	; (80076d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	099b      	lsrs	r3, r3, #6
 8007534:	2200      	movs	r2, #0
 8007536:	63bb      	str	r3, [r7, #56]	; 0x38
 8007538:	63fa      	str	r2, [r7, #60]	; 0x3c
 800753a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800753c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007540:	633b      	str	r3, [r7, #48]	; 0x30
 8007542:	2300      	movs	r3, #0
 8007544:	637b      	str	r3, [r7, #52]	; 0x34
 8007546:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800754a:	4622      	mov	r2, r4
 800754c:	462b      	mov	r3, r5
 800754e:	f04f 0000 	mov.w	r0, #0
 8007552:	f04f 0100 	mov.w	r1, #0
 8007556:	0159      	lsls	r1, r3, #5
 8007558:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800755c:	0150      	lsls	r0, r2, #5
 800755e:	4602      	mov	r2, r0
 8007560:	460b      	mov	r3, r1
 8007562:	4621      	mov	r1, r4
 8007564:	1a51      	subs	r1, r2, r1
 8007566:	6139      	str	r1, [r7, #16]
 8007568:	4629      	mov	r1, r5
 800756a:	eb63 0301 	sbc.w	r3, r3, r1
 800756e:	617b      	str	r3, [r7, #20]
 8007570:	f04f 0200 	mov.w	r2, #0
 8007574:	f04f 0300 	mov.w	r3, #0
 8007578:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800757c:	4659      	mov	r1, fp
 800757e:	018b      	lsls	r3, r1, #6
 8007580:	4651      	mov	r1, sl
 8007582:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007586:	4651      	mov	r1, sl
 8007588:	018a      	lsls	r2, r1, #6
 800758a:	4651      	mov	r1, sl
 800758c:	ebb2 0801 	subs.w	r8, r2, r1
 8007590:	4659      	mov	r1, fp
 8007592:	eb63 0901 	sbc.w	r9, r3, r1
 8007596:	f04f 0200 	mov.w	r2, #0
 800759a:	f04f 0300 	mov.w	r3, #0
 800759e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80075a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80075a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80075aa:	4690      	mov	r8, r2
 80075ac:	4699      	mov	r9, r3
 80075ae:	4623      	mov	r3, r4
 80075b0:	eb18 0303 	adds.w	r3, r8, r3
 80075b4:	60bb      	str	r3, [r7, #8]
 80075b6:	462b      	mov	r3, r5
 80075b8:	eb49 0303 	adc.w	r3, r9, r3
 80075bc:	60fb      	str	r3, [r7, #12]
 80075be:	f04f 0200 	mov.w	r2, #0
 80075c2:	f04f 0300 	mov.w	r3, #0
 80075c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80075ca:	4629      	mov	r1, r5
 80075cc:	028b      	lsls	r3, r1, #10
 80075ce:	4621      	mov	r1, r4
 80075d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80075d4:	4621      	mov	r1, r4
 80075d6:	028a      	lsls	r2, r1, #10
 80075d8:	4610      	mov	r0, r2
 80075da:	4619      	mov	r1, r3
 80075dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075de:	2200      	movs	r2, #0
 80075e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80075e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80075e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80075e8:	f7f9 fb2e 	bl	8000c48 <__aeabi_uldivmod>
 80075ec:	4602      	mov	r2, r0
 80075ee:	460b      	mov	r3, r1
 80075f0:	4613      	mov	r3, r2
 80075f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075f4:	e058      	b.n	80076a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80075f6:	4b38      	ldr	r3, [pc, #224]	; (80076d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	099b      	lsrs	r3, r3, #6
 80075fc:	2200      	movs	r2, #0
 80075fe:	4618      	mov	r0, r3
 8007600:	4611      	mov	r1, r2
 8007602:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007606:	623b      	str	r3, [r7, #32]
 8007608:	2300      	movs	r3, #0
 800760a:	627b      	str	r3, [r7, #36]	; 0x24
 800760c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007610:	4642      	mov	r2, r8
 8007612:	464b      	mov	r3, r9
 8007614:	f04f 0000 	mov.w	r0, #0
 8007618:	f04f 0100 	mov.w	r1, #0
 800761c:	0159      	lsls	r1, r3, #5
 800761e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007622:	0150      	lsls	r0, r2, #5
 8007624:	4602      	mov	r2, r0
 8007626:	460b      	mov	r3, r1
 8007628:	4641      	mov	r1, r8
 800762a:	ebb2 0a01 	subs.w	sl, r2, r1
 800762e:	4649      	mov	r1, r9
 8007630:	eb63 0b01 	sbc.w	fp, r3, r1
 8007634:	f04f 0200 	mov.w	r2, #0
 8007638:	f04f 0300 	mov.w	r3, #0
 800763c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007640:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007644:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007648:	ebb2 040a 	subs.w	r4, r2, sl
 800764c:	eb63 050b 	sbc.w	r5, r3, fp
 8007650:	f04f 0200 	mov.w	r2, #0
 8007654:	f04f 0300 	mov.w	r3, #0
 8007658:	00eb      	lsls	r3, r5, #3
 800765a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800765e:	00e2      	lsls	r2, r4, #3
 8007660:	4614      	mov	r4, r2
 8007662:	461d      	mov	r5, r3
 8007664:	4643      	mov	r3, r8
 8007666:	18e3      	adds	r3, r4, r3
 8007668:	603b      	str	r3, [r7, #0]
 800766a:	464b      	mov	r3, r9
 800766c:	eb45 0303 	adc.w	r3, r5, r3
 8007670:	607b      	str	r3, [r7, #4]
 8007672:	f04f 0200 	mov.w	r2, #0
 8007676:	f04f 0300 	mov.w	r3, #0
 800767a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800767e:	4629      	mov	r1, r5
 8007680:	028b      	lsls	r3, r1, #10
 8007682:	4621      	mov	r1, r4
 8007684:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007688:	4621      	mov	r1, r4
 800768a:	028a      	lsls	r2, r1, #10
 800768c:	4610      	mov	r0, r2
 800768e:	4619      	mov	r1, r3
 8007690:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007692:	2200      	movs	r2, #0
 8007694:	61bb      	str	r3, [r7, #24]
 8007696:	61fa      	str	r2, [r7, #28]
 8007698:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800769c:	f7f9 fad4 	bl	8000c48 <__aeabi_uldivmod>
 80076a0:	4602      	mov	r2, r0
 80076a2:	460b      	mov	r3, r1
 80076a4:	4613      	mov	r3, r2
 80076a6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80076a8:	4b0b      	ldr	r3, [pc, #44]	; (80076d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	0c1b      	lsrs	r3, r3, #16
 80076ae:	f003 0303 	and.w	r3, r3, #3
 80076b2:	3301      	adds	r3, #1
 80076b4:	005b      	lsls	r3, r3, #1
 80076b6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80076b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80076ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80076c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80076c2:	e002      	b.n	80076ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80076c4:	4b05      	ldr	r3, [pc, #20]	; (80076dc <HAL_RCC_GetSysClockFreq+0x204>)
 80076c6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80076c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80076ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3750      	adds	r7, #80	; 0x50
 80076d0:	46bd      	mov	sp, r7
 80076d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80076d6:	bf00      	nop
 80076d8:	40023800 	.word	0x40023800
 80076dc:	00f42400 	.word	0x00f42400

080076e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80076e0:	b480      	push	{r7}
 80076e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80076e4:	4b03      	ldr	r3, [pc, #12]	; (80076f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80076e6:	681b      	ldr	r3, [r3, #0]
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr
 80076f2:	bf00      	nop
 80076f4:	20000034 	.word	0x20000034

080076f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80076fc:	f7ff fff0 	bl	80076e0 <HAL_RCC_GetHCLKFreq>
 8007700:	4602      	mov	r2, r0
 8007702:	4b05      	ldr	r3, [pc, #20]	; (8007718 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	0a9b      	lsrs	r3, r3, #10
 8007708:	f003 0307 	and.w	r3, r3, #7
 800770c:	4903      	ldr	r1, [pc, #12]	; (800771c <HAL_RCC_GetPCLK1Freq+0x24>)
 800770e:	5ccb      	ldrb	r3, [r1, r3]
 8007710:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007714:	4618      	mov	r0, r3
 8007716:	bd80      	pop	{r7, pc}
 8007718:	40023800 	.word	0x40023800
 800771c:	08010d54 	.word	0x08010d54

08007720 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007724:	f7ff ffdc 	bl	80076e0 <HAL_RCC_GetHCLKFreq>
 8007728:	4602      	mov	r2, r0
 800772a:	4b05      	ldr	r3, [pc, #20]	; (8007740 <HAL_RCC_GetPCLK2Freq+0x20>)
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	0b5b      	lsrs	r3, r3, #13
 8007730:	f003 0307 	and.w	r3, r3, #7
 8007734:	4903      	ldr	r1, [pc, #12]	; (8007744 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007736:	5ccb      	ldrb	r3, [r1, r3]
 8007738:	fa22 f303 	lsr.w	r3, r2, r3
}
 800773c:	4618      	mov	r0, r3
 800773e:	bd80      	pop	{r7, pc}
 8007740:	40023800 	.word	0x40023800
 8007744:	08010d54 	.word	0x08010d54

08007748 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b082      	sub	sp, #8
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d101      	bne.n	800775a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007756:	2301      	movs	r3, #1
 8007758:	e041      	b.n	80077de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007760:	b2db      	uxtb	r3, r3
 8007762:	2b00      	cmp	r3, #0
 8007764:	d106      	bne.n	8007774 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2200      	movs	r2, #0
 800776a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f7fa fffc 	bl	800276c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2202      	movs	r2, #2
 8007778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	3304      	adds	r3, #4
 8007784:	4619      	mov	r1, r3
 8007786:	4610      	mov	r0, r2
 8007788:	f000 fa96 	bl	8007cb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2201      	movs	r2, #1
 8007790:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2201      	movs	r2, #1
 8007798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2201      	movs	r2, #1
 80077a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2201      	movs	r2, #1
 80077a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2201      	movs	r2, #1
 80077b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2201      	movs	r2, #1
 80077b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2201      	movs	r2, #1
 80077c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2201      	movs	r2, #1
 80077c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2201      	movs	r2, #1
 80077d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2201      	movs	r2, #1
 80077d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80077dc:	2300      	movs	r3, #0
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3708      	adds	r7, #8
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
	...

080077e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b085      	sub	sp, #20
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	d001      	beq.n	8007800 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80077fc:	2301      	movs	r3, #1
 80077fe:	e04e      	b.n	800789e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2202      	movs	r2, #2
 8007804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	68da      	ldr	r2, [r3, #12]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f042 0201 	orr.w	r2, r2, #1
 8007816:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a23      	ldr	r2, [pc, #140]	; (80078ac <HAL_TIM_Base_Start_IT+0xc4>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d022      	beq.n	8007868 <HAL_TIM_Base_Start_IT+0x80>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800782a:	d01d      	beq.n	8007868 <HAL_TIM_Base_Start_IT+0x80>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a1f      	ldr	r2, [pc, #124]	; (80078b0 <HAL_TIM_Base_Start_IT+0xc8>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d018      	beq.n	8007868 <HAL_TIM_Base_Start_IT+0x80>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a1e      	ldr	r2, [pc, #120]	; (80078b4 <HAL_TIM_Base_Start_IT+0xcc>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d013      	beq.n	8007868 <HAL_TIM_Base_Start_IT+0x80>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a1c      	ldr	r2, [pc, #112]	; (80078b8 <HAL_TIM_Base_Start_IT+0xd0>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d00e      	beq.n	8007868 <HAL_TIM_Base_Start_IT+0x80>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a1b      	ldr	r2, [pc, #108]	; (80078bc <HAL_TIM_Base_Start_IT+0xd4>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d009      	beq.n	8007868 <HAL_TIM_Base_Start_IT+0x80>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a19      	ldr	r2, [pc, #100]	; (80078c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d004      	beq.n	8007868 <HAL_TIM_Base_Start_IT+0x80>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a18      	ldr	r2, [pc, #96]	; (80078c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d111      	bne.n	800788c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	f003 0307 	and.w	r3, r3, #7
 8007872:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2b06      	cmp	r3, #6
 8007878:	d010      	beq.n	800789c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	681a      	ldr	r2, [r3, #0]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f042 0201 	orr.w	r2, r2, #1
 8007888:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800788a:	e007      	b.n	800789c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	681a      	ldr	r2, [r3, #0]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f042 0201 	orr.w	r2, r2, #1
 800789a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800789c:	2300      	movs	r3, #0
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3714      	adds	r7, #20
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr
 80078aa:	bf00      	nop
 80078ac:	40010000 	.word	0x40010000
 80078b0:	40000400 	.word	0x40000400
 80078b4:	40000800 	.word	0x40000800
 80078b8:	40000c00 	.word	0x40000c00
 80078bc:	40010400 	.word	0x40010400
 80078c0:	40014000 	.word	0x40014000
 80078c4:	40001800 	.word	0x40001800

080078c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b082      	sub	sp, #8
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	691b      	ldr	r3, [r3, #16]
 80078d6:	f003 0302 	and.w	r3, r3, #2
 80078da:	2b02      	cmp	r3, #2
 80078dc:	d122      	bne.n	8007924 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	68db      	ldr	r3, [r3, #12]
 80078e4:	f003 0302 	and.w	r3, r3, #2
 80078e8:	2b02      	cmp	r3, #2
 80078ea:	d11b      	bne.n	8007924 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f06f 0202 	mvn.w	r2, #2
 80078f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2201      	movs	r2, #1
 80078fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	699b      	ldr	r3, [r3, #24]
 8007902:	f003 0303 	and.w	r3, r3, #3
 8007906:	2b00      	cmp	r3, #0
 8007908:	d003      	beq.n	8007912 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 f9b5 	bl	8007c7a <HAL_TIM_IC_CaptureCallback>
 8007910:	e005      	b.n	800791e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 f9a7 	bl	8007c66 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f000 f9b8 	bl	8007c8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2200      	movs	r2, #0
 8007922:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	691b      	ldr	r3, [r3, #16]
 800792a:	f003 0304 	and.w	r3, r3, #4
 800792e:	2b04      	cmp	r3, #4
 8007930:	d122      	bne.n	8007978 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	68db      	ldr	r3, [r3, #12]
 8007938:	f003 0304 	and.w	r3, r3, #4
 800793c:	2b04      	cmp	r3, #4
 800793e:	d11b      	bne.n	8007978 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f06f 0204 	mvn.w	r2, #4
 8007948:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2202      	movs	r2, #2
 800794e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	699b      	ldr	r3, [r3, #24]
 8007956:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800795a:	2b00      	cmp	r3, #0
 800795c:	d003      	beq.n	8007966 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 f98b 	bl	8007c7a <HAL_TIM_IC_CaptureCallback>
 8007964:	e005      	b.n	8007972 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f000 f97d 	bl	8007c66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 f98e 	bl	8007c8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2200      	movs	r2, #0
 8007976:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	691b      	ldr	r3, [r3, #16]
 800797e:	f003 0308 	and.w	r3, r3, #8
 8007982:	2b08      	cmp	r3, #8
 8007984:	d122      	bne.n	80079cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	68db      	ldr	r3, [r3, #12]
 800798c:	f003 0308 	and.w	r3, r3, #8
 8007990:	2b08      	cmp	r3, #8
 8007992:	d11b      	bne.n	80079cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f06f 0208 	mvn.w	r2, #8
 800799c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2204      	movs	r2, #4
 80079a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	69db      	ldr	r3, [r3, #28]
 80079aa:	f003 0303 	and.w	r3, r3, #3
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d003      	beq.n	80079ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 f961 	bl	8007c7a <HAL_TIM_IC_CaptureCallback>
 80079b8:	e005      	b.n	80079c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 f953 	bl	8007c66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f000 f964 	bl	8007c8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2200      	movs	r2, #0
 80079ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	691b      	ldr	r3, [r3, #16]
 80079d2:	f003 0310 	and.w	r3, r3, #16
 80079d6:	2b10      	cmp	r3, #16
 80079d8:	d122      	bne.n	8007a20 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	68db      	ldr	r3, [r3, #12]
 80079e0:	f003 0310 	and.w	r3, r3, #16
 80079e4:	2b10      	cmp	r3, #16
 80079e6:	d11b      	bne.n	8007a20 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f06f 0210 	mvn.w	r2, #16
 80079f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2208      	movs	r2, #8
 80079f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	69db      	ldr	r3, [r3, #28]
 80079fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d003      	beq.n	8007a0e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 f937 	bl	8007c7a <HAL_TIM_IC_CaptureCallback>
 8007a0c:	e005      	b.n	8007a1a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 f929 	bl	8007c66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f000 f93a 	bl	8007c8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	691b      	ldr	r3, [r3, #16]
 8007a26:	f003 0301 	and.w	r3, r3, #1
 8007a2a:	2b01      	cmp	r3, #1
 8007a2c:	d10e      	bne.n	8007a4c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	68db      	ldr	r3, [r3, #12]
 8007a34:	f003 0301 	and.w	r3, r3, #1
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d107      	bne.n	8007a4c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f06f 0201 	mvn.w	r2, #1
 8007a44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f7f9 fa80 	bl	8000f4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	691b      	ldr	r3, [r3, #16]
 8007a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a56:	2b80      	cmp	r3, #128	; 0x80
 8007a58:	d10e      	bne.n	8007a78 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	68db      	ldr	r3, [r3, #12]
 8007a60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a64:	2b80      	cmp	r3, #128	; 0x80
 8007a66:	d107      	bne.n	8007a78 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007a70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 fae0 	bl	8008038 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	691b      	ldr	r3, [r3, #16]
 8007a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a82:	2b40      	cmp	r3, #64	; 0x40
 8007a84:	d10e      	bne.n	8007aa4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	68db      	ldr	r3, [r3, #12]
 8007a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a90:	2b40      	cmp	r3, #64	; 0x40
 8007a92:	d107      	bne.n	8007aa4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 f8ff 	bl	8007ca2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	691b      	ldr	r3, [r3, #16]
 8007aaa:	f003 0320 	and.w	r3, r3, #32
 8007aae:	2b20      	cmp	r3, #32
 8007ab0:	d10e      	bne.n	8007ad0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	68db      	ldr	r3, [r3, #12]
 8007ab8:	f003 0320 	and.w	r3, r3, #32
 8007abc:	2b20      	cmp	r3, #32
 8007abe:	d107      	bne.n	8007ad0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f06f 0220 	mvn.w	r2, #32
 8007ac8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f000 faaa 	bl	8008024 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007ad0:	bf00      	nop
 8007ad2:	3708      	adds	r7, #8
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d101      	bne.n	8007af4 <HAL_TIM_ConfigClockSource+0x1c>
 8007af0:	2302      	movs	r3, #2
 8007af2:	e0b4      	b.n	8007c5e <HAL_TIM_ConfigClockSource+0x186>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2201      	movs	r2, #1
 8007af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2202      	movs	r2, #2
 8007b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	689b      	ldr	r3, [r3, #8]
 8007b0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007b12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	68ba      	ldr	r2, [r7, #8]
 8007b22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b2c:	d03e      	beq.n	8007bac <HAL_TIM_ConfigClockSource+0xd4>
 8007b2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b32:	f200 8087 	bhi.w	8007c44 <HAL_TIM_ConfigClockSource+0x16c>
 8007b36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b3a:	f000 8086 	beq.w	8007c4a <HAL_TIM_ConfigClockSource+0x172>
 8007b3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b42:	d87f      	bhi.n	8007c44 <HAL_TIM_ConfigClockSource+0x16c>
 8007b44:	2b70      	cmp	r3, #112	; 0x70
 8007b46:	d01a      	beq.n	8007b7e <HAL_TIM_ConfigClockSource+0xa6>
 8007b48:	2b70      	cmp	r3, #112	; 0x70
 8007b4a:	d87b      	bhi.n	8007c44 <HAL_TIM_ConfigClockSource+0x16c>
 8007b4c:	2b60      	cmp	r3, #96	; 0x60
 8007b4e:	d050      	beq.n	8007bf2 <HAL_TIM_ConfigClockSource+0x11a>
 8007b50:	2b60      	cmp	r3, #96	; 0x60
 8007b52:	d877      	bhi.n	8007c44 <HAL_TIM_ConfigClockSource+0x16c>
 8007b54:	2b50      	cmp	r3, #80	; 0x50
 8007b56:	d03c      	beq.n	8007bd2 <HAL_TIM_ConfigClockSource+0xfa>
 8007b58:	2b50      	cmp	r3, #80	; 0x50
 8007b5a:	d873      	bhi.n	8007c44 <HAL_TIM_ConfigClockSource+0x16c>
 8007b5c:	2b40      	cmp	r3, #64	; 0x40
 8007b5e:	d058      	beq.n	8007c12 <HAL_TIM_ConfigClockSource+0x13a>
 8007b60:	2b40      	cmp	r3, #64	; 0x40
 8007b62:	d86f      	bhi.n	8007c44 <HAL_TIM_ConfigClockSource+0x16c>
 8007b64:	2b30      	cmp	r3, #48	; 0x30
 8007b66:	d064      	beq.n	8007c32 <HAL_TIM_ConfigClockSource+0x15a>
 8007b68:	2b30      	cmp	r3, #48	; 0x30
 8007b6a:	d86b      	bhi.n	8007c44 <HAL_TIM_ConfigClockSource+0x16c>
 8007b6c:	2b20      	cmp	r3, #32
 8007b6e:	d060      	beq.n	8007c32 <HAL_TIM_ConfigClockSource+0x15a>
 8007b70:	2b20      	cmp	r3, #32
 8007b72:	d867      	bhi.n	8007c44 <HAL_TIM_ConfigClockSource+0x16c>
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d05c      	beq.n	8007c32 <HAL_TIM_ConfigClockSource+0x15a>
 8007b78:	2b10      	cmp	r3, #16
 8007b7a:	d05a      	beq.n	8007c32 <HAL_TIM_ConfigClockSource+0x15a>
 8007b7c:	e062      	b.n	8007c44 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6818      	ldr	r0, [r3, #0]
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	6899      	ldr	r1, [r3, #8]
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	685a      	ldr	r2, [r3, #4]
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	68db      	ldr	r3, [r3, #12]
 8007b8e:	f000 f9ad 	bl	8007eec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	689b      	ldr	r3, [r3, #8]
 8007b98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007ba0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	68ba      	ldr	r2, [r7, #8]
 8007ba8:	609a      	str	r2, [r3, #8]
      break;
 8007baa:	e04f      	b.n	8007c4c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6818      	ldr	r0, [r3, #0]
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	6899      	ldr	r1, [r3, #8]
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	685a      	ldr	r2, [r3, #4]
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	68db      	ldr	r3, [r3, #12]
 8007bbc:	f000 f996 	bl	8007eec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	689a      	ldr	r2, [r3, #8]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007bce:	609a      	str	r2, [r3, #8]
      break;
 8007bd0:	e03c      	b.n	8007c4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6818      	ldr	r0, [r3, #0]
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	6859      	ldr	r1, [r3, #4]
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	68db      	ldr	r3, [r3, #12]
 8007bde:	461a      	mov	r2, r3
 8007be0:	f000 f90a 	bl	8007df8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	2150      	movs	r1, #80	; 0x50
 8007bea:	4618      	mov	r0, r3
 8007bec:	f000 f963 	bl	8007eb6 <TIM_ITRx_SetConfig>
      break;
 8007bf0:	e02c      	b.n	8007c4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6818      	ldr	r0, [r3, #0]
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	6859      	ldr	r1, [r3, #4]
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	68db      	ldr	r3, [r3, #12]
 8007bfe:	461a      	mov	r2, r3
 8007c00:	f000 f929 	bl	8007e56 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	2160      	movs	r1, #96	; 0x60
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f000 f953 	bl	8007eb6 <TIM_ITRx_SetConfig>
      break;
 8007c10:	e01c      	b.n	8007c4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6818      	ldr	r0, [r3, #0]
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	6859      	ldr	r1, [r3, #4]
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	68db      	ldr	r3, [r3, #12]
 8007c1e:	461a      	mov	r2, r3
 8007c20:	f000 f8ea 	bl	8007df8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	2140      	movs	r1, #64	; 0x40
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f000 f943 	bl	8007eb6 <TIM_ITRx_SetConfig>
      break;
 8007c30:	e00c      	b.n	8007c4c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681a      	ldr	r2, [r3, #0]
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4619      	mov	r1, r3
 8007c3c:	4610      	mov	r0, r2
 8007c3e:	f000 f93a 	bl	8007eb6 <TIM_ITRx_SetConfig>
      break;
 8007c42:	e003      	b.n	8007c4c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007c44:	2301      	movs	r3, #1
 8007c46:	73fb      	strb	r3, [r7, #15]
      break;
 8007c48:	e000      	b.n	8007c4c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007c4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3710      	adds	r7, #16
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}

08007c66 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c66:	b480      	push	{r7}
 8007c68:	b083      	sub	sp, #12
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007c6e:	bf00      	nop
 8007c70:	370c      	adds	r7, #12
 8007c72:	46bd      	mov	sp, r7
 8007c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c78:	4770      	bx	lr

08007c7a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007c7a:	b480      	push	{r7}
 8007c7c:	b083      	sub	sp, #12
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007c82:	bf00      	nop
 8007c84:	370c      	adds	r7, #12
 8007c86:	46bd      	mov	sp, r7
 8007c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8c:	4770      	bx	lr

08007c8e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007c8e:	b480      	push	{r7}
 8007c90:	b083      	sub	sp, #12
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007c96:	bf00      	nop
 8007c98:	370c      	adds	r7, #12
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca0:	4770      	bx	lr

08007ca2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007ca2:	b480      	push	{r7}
 8007ca4:	b083      	sub	sp, #12
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007caa:	bf00      	nop
 8007cac:	370c      	adds	r7, #12
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb4:	4770      	bx	lr
	...

08007cb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b085      	sub	sp, #20
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	4a40      	ldr	r2, [pc, #256]	; (8007dcc <TIM_Base_SetConfig+0x114>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d013      	beq.n	8007cf8 <TIM_Base_SetConfig+0x40>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cd6:	d00f      	beq.n	8007cf8 <TIM_Base_SetConfig+0x40>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	4a3d      	ldr	r2, [pc, #244]	; (8007dd0 <TIM_Base_SetConfig+0x118>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d00b      	beq.n	8007cf8 <TIM_Base_SetConfig+0x40>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	4a3c      	ldr	r2, [pc, #240]	; (8007dd4 <TIM_Base_SetConfig+0x11c>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d007      	beq.n	8007cf8 <TIM_Base_SetConfig+0x40>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	4a3b      	ldr	r2, [pc, #236]	; (8007dd8 <TIM_Base_SetConfig+0x120>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d003      	beq.n	8007cf8 <TIM_Base_SetConfig+0x40>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	4a3a      	ldr	r2, [pc, #232]	; (8007ddc <TIM_Base_SetConfig+0x124>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d108      	bne.n	8007d0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	68fa      	ldr	r2, [r7, #12]
 8007d06:	4313      	orrs	r3, r2
 8007d08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	4a2f      	ldr	r2, [pc, #188]	; (8007dcc <TIM_Base_SetConfig+0x114>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d02b      	beq.n	8007d6a <TIM_Base_SetConfig+0xb2>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d18:	d027      	beq.n	8007d6a <TIM_Base_SetConfig+0xb2>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	4a2c      	ldr	r2, [pc, #176]	; (8007dd0 <TIM_Base_SetConfig+0x118>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d023      	beq.n	8007d6a <TIM_Base_SetConfig+0xb2>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	4a2b      	ldr	r2, [pc, #172]	; (8007dd4 <TIM_Base_SetConfig+0x11c>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d01f      	beq.n	8007d6a <TIM_Base_SetConfig+0xb2>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	4a2a      	ldr	r2, [pc, #168]	; (8007dd8 <TIM_Base_SetConfig+0x120>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d01b      	beq.n	8007d6a <TIM_Base_SetConfig+0xb2>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	4a29      	ldr	r2, [pc, #164]	; (8007ddc <TIM_Base_SetConfig+0x124>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d017      	beq.n	8007d6a <TIM_Base_SetConfig+0xb2>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	4a28      	ldr	r2, [pc, #160]	; (8007de0 <TIM_Base_SetConfig+0x128>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d013      	beq.n	8007d6a <TIM_Base_SetConfig+0xb2>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	4a27      	ldr	r2, [pc, #156]	; (8007de4 <TIM_Base_SetConfig+0x12c>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d00f      	beq.n	8007d6a <TIM_Base_SetConfig+0xb2>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	4a26      	ldr	r2, [pc, #152]	; (8007de8 <TIM_Base_SetConfig+0x130>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d00b      	beq.n	8007d6a <TIM_Base_SetConfig+0xb2>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	4a25      	ldr	r2, [pc, #148]	; (8007dec <TIM_Base_SetConfig+0x134>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d007      	beq.n	8007d6a <TIM_Base_SetConfig+0xb2>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	4a24      	ldr	r2, [pc, #144]	; (8007df0 <TIM_Base_SetConfig+0x138>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d003      	beq.n	8007d6a <TIM_Base_SetConfig+0xb2>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	4a23      	ldr	r2, [pc, #140]	; (8007df4 <TIM_Base_SetConfig+0x13c>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d108      	bne.n	8007d7c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	68db      	ldr	r3, [r3, #12]
 8007d76:	68fa      	ldr	r2, [r7, #12]
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	695b      	ldr	r3, [r3, #20]
 8007d86:	4313      	orrs	r3, r2
 8007d88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	68fa      	ldr	r2, [r7, #12]
 8007d8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	689a      	ldr	r2, [r3, #8]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	4a0a      	ldr	r2, [pc, #40]	; (8007dcc <TIM_Base_SetConfig+0x114>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d003      	beq.n	8007db0 <TIM_Base_SetConfig+0xf8>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	4a0c      	ldr	r2, [pc, #48]	; (8007ddc <TIM_Base_SetConfig+0x124>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d103      	bne.n	8007db8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	691a      	ldr	r2, [r3, #16]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	615a      	str	r2, [r3, #20]
}
 8007dbe:	bf00      	nop
 8007dc0:	3714      	adds	r7, #20
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr
 8007dca:	bf00      	nop
 8007dcc:	40010000 	.word	0x40010000
 8007dd0:	40000400 	.word	0x40000400
 8007dd4:	40000800 	.word	0x40000800
 8007dd8:	40000c00 	.word	0x40000c00
 8007ddc:	40010400 	.word	0x40010400
 8007de0:	40014000 	.word	0x40014000
 8007de4:	40014400 	.word	0x40014400
 8007de8:	40014800 	.word	0x40014800
 8007dec:	40001800 	.word	0x40001800
 8007df0:	40001c00 	.word	0x40001c00
 8007df4:	40002000 	.word	0x40002000

08007df8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b087      	sub	sp, #28
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	60f8      	str	r0, [r7, #12]
 8007e00:	60b9      	str	r1, [r7, #8]
 8007e02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	6a1b      	ldr	r3, [r3, #32]
 8007e08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	6a1b      	ldr	r3, [r3, #32]
 8007e0e:	f023 0201 	bic.w	r2, r3, #1
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	699b      	ldr	r3, [r3, #24]
 8007e1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	011b      	lsls	r3, r3, #4
 8007e28:	693a      	ldr	r2, [r7, #16]
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	f023 030a 	bic.w	r3, r3, #10
 8007e34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007e36:	697a      	ldr	r2, [r7, #20]
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	693a      	ldr	r2, [r7, #16]
 8007e42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	697a      	ldr	r2, [r7, #20]
 8007e48:	621a      	str	r2, [r3, #32]
}
 8007e4a:	bf00      	nop
 8007e4c:	371c      	adds	r7, #28
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e54:	4770      	bx	lr

08007e56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e56:	b480      	push	{r7}
 8007e58:	b087      	sub	sp, #28
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	60f8      	str	r0, [r7, #12]
 8007e5e:	60b9      	str	r1, [r7, #8]
 8007e60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	6a1b      	ldr	r3, [r3, #32]
 8007e66:	f023 0210 	bic.w	r2, r3, #16
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	699b      	ldr	r3, [r3, #24]
 8007e72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	6a1b      	ldr	r3, [r3, #32]
 8007e78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007e80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	031b      	lsls	r3, r3, #12
 8007e86:	697a      	ldr	r2, [r7, #20]
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007e92:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	011b      	lsls	r3, r3, #4
 8007e98:	693a      	ldr	r2, [r7, #16]
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	697a      	ldr	r2, [r7, #20]
 8007ea2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	693a      	ldr	r2, [r7, #16]
 8007ea8:	621a      	str	r2, [r3, #32]
}
 8007eaa:	bf00      	nop
 8007eac:	371c      	adds	r7, #28
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb4:	4770      	bx	lr

08007eb6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007eb6:	b480      	push	{r7}
 8007eb8:	b085      	sub	sp, #20
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	6078      	str	r0, [r7, #4]
 8007ebe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	689b      	ldr	r3, [r3, #8]
 8007ec4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ecc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007ece:	683a      	ldr	r2, [r7, #0]
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	f043 0307 	orr.w	r3, r3, #7
 8007ed8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	68fa      	ldr	r2, [r7, #12]
 8007ede:	609a      	str	r2, [r3, #8]
}
 8007ee0:	bf00      	nop
 8007ee2:	3714      	adds	r7, #20
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr

08007eec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b087      	sub	sp, #28
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	60f8      	str	r0, [r7, #12]
 8007ef4:	60b9      	str	r1, [r7, #8]
 8007ef6:	607a      	str	r2, [r7, #4]
 8007ef8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	689b      	ldr	r3, [r3, #8]
 8007efe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	021a      	lsls	r2, r3, #8
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	431a      	orrs	r2, r3
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	4313      	orrs	r3, r2
 8007f14:	697a      	ldr	r2, [r7, #20]
 8007f16:	4313      	orrs	r3, r2
 8007f18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	697a      	ldr	r2, [r7, #20]
 8007f1e:	609a      	str	r2, [r3, #8]
}
 8007f20:	bf00      	nop
 8007f22:	371c      	adds	r7, #28
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr

08007f2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b085      	sub	sp, #20
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d101      	bne.n	8007f44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f40:	2302      	movs	r3, #2
 8007f42:	e05a      	b.n	8007ffa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2201      	movs	r2, #1
 8007f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2202      	movs	r2, #2
 8007f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	68fa      	ldr	r2, [r7, #12]
 8007f72:	4313      	orrs	r3, r2
 8007f74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	68fa      	ldr	r2, [r7, #12]
 8007f7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a21      	ldr	r2, [pc, #132]	; (8008008 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d022      	beq.n	8007fce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f90:	d01d      	beq.n	8007fce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a1d      	ldr	r2, [pc, #116]	; (800800c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d018      	beq.n	8007fce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a1b      	ldr	r2, [pc, #108]	; (8008010 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d013      	beq.n	8007fce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a1a      	ldr	r2, [pc, #104]	; (8008014 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d00e      	beq.n	8007fce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a18      	ldr	r2, [pc, #96]	; (8008018 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d009      	beq.n	8007fce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a17      	ldr	r2, [pc, #92]	; (800801c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d004      	beq.n	8007fce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a15      	ldr	r2, [pc, #84]	; (8008020 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d10c      	bne.n	8007fe8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007fd4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	68ba      	ldr	r2, [r7, #8]
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	68ba      	ldr	r2, [r7, #8]
 8007fe6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2201      	movs	r2, #1
 8007fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ff8:	2300      	movs	r3, #0
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3714      	adds	r7, #20
 8007ffe:	46bd      	mov	sp, r7
 8008000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008004:	4770      	bx	lr
 8008006:	bf00      	nop
 8008008:	40010000 	.word	0x40010000
 800800c:	40000400 	.word	0x40000400
 8008010:	40000800 	.word	0x40000800
 8008014:	40000c00 	.word	0x40000c00
 8008018:	40010400 	.word	0x40010400
 800801c:	40014000 	.word	0x40014000
 8008020:	40001800 	.word	0x40001800

08008024 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008024:	b480      	push	{r7}
 8008026:	b083      	sub	sp, #12
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800802c:	bf00      	nop
 800802e:	370c      	adds	r7, #12
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr

08008038 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008038:	b480      	push	{r7}
 800803a:	b083      	sub	sp, #12
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008040:	bf00      	nop
 8008042:	370c      	adds	r7, #12
 8008044:	46bd      	mov	sp, r7
 8008046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804a:	4770      	bx	lr

0800804c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b082      	sub	sp, #8
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d101      	bne.n	800805e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800805a:	2301      	movs	r3, #1
 800805c:	e03f      	b.n	80080de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008064:	b2db      	uxtb	r3, r3
 8008066:	2b00      	cmp	r3, #0
 8008068:	d106      	bne.n	8008078 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2200      	movs	r2, #0
 800806e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f7fa fbbe 	bl	80027f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2224      	movs	r2, #36	; 0x24
 800807c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	68da      	ldr	r2, [r3, #12]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800808e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f000 fd0b 	bl	8008aac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	691a      	ldr	r2, [r3, #16]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80080a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	695a      	ldr	r2, [r3, #20]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80080b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	68da      	ldr	r2, [r3, #12]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80080c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2200      	movs	r2, #0
 80080ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2220      	movs	r2, #32
 80080d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2220      	movs	r2, #32
 80080d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80080dc:	2300      	movs	r3, #0
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3708      	adds	r7, #8
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}

080080e6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80080e6:	b480      	push	{r7}
 80080e8:	b085      	sub	sp, #20
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	60f8      	str	r0, [r7, #12]
 80080ee:	60b9      	str	r1, [r7, #8]
 80080f0:	4613      	mov	r3, r2
 80080f2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080fa:	b2db      	uxtb	r3, r3
 80080fc:	2b20      	cmp	r3, #32
 80080fe:	d130      	bne.n	8008162 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d002      	beq.n	800810c <HAL_UART_Transmit_IT+0x26>
 8008106:	88fb      	ldrh	r3, [r7, #6]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d101      	bne.n	8008110 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800810c:	2301      	movs	r3, #1
 800810e:	e029      	b.n	8008164 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008116:	2b01      	cmp	r3, #1
 8008118:	d101      	bne.n	800811e <HAL_UART_Transmit_IT+0x38>
 800811a:	2302      	movs	r3, #2
 800811c:	e022      	b.n	8008164 <HAL_UART_Transmit_IT+0x7e>
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	2201      	movs	r2, #1
 8008122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	68ba      	ldr	r2, [r7, #8]
 800812a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	88fa      	ldrh	r2, [r7, #6]
 8008130:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	88fa      	ldrh	r2, [r7, #6]
 8008136:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	2200      	movs	r2, #0
 800813c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2221      	movs	r2, #33	; 0x21
 8008142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2200      	movs	r2, #0
 800814a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	68da      	ldr	r2, [r3, #12]
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800815c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800815e:	2300      	movs	r3, #0
 8008160:	e000      	b.n	8008164 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8008162:	2302      	movs	r3, #2
  }
}
 8008164:	4618      	mov	r0, r3
 8008166:	3714      	adds	r7, #20
 8008168:	46bd      	mov	sp, r7
 800816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816e:	4770      	bx	lr

08008170 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b084      	sub	sp, #16
 8008174:	af00      	add	r7, sp, #0
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	60b9      	str	r1, [r7, #8]
 800817a:	4613      	mov	r3, r2
 800817c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008184:	b2db      	uxtb	r3, r3
 8008186:	2b20      	cmp	r3, #32
 8008188:	d11d      	bne.n	80081c6 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d002      	beq.n	8008196 <HAL_UART_Receive_IT+0x26>
 8008190:	88fb      	ldrh	r3, [r7, #6]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d101      	bne.n	800819a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008196:	2301      	movs	r3, #1
 8008198:	e016      	b.n	80081c8 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	d101      	bne.n	80081a8 <HAL_UART_Receive_IT+0x38>
 80081a4:	2302      	movs	r3, #2
 80081a6:	e00f      	b.n	80081c8 <HAL_UART_Receive_IT+0x58>
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	2201      	movs	r2, #1
 80081ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	2200      	movs	r2, #0
 80081b4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80081b6:	88fb      	ldrh	r3, [r7, #6]
 80081b8:	461a      	mov	r2, r3
 80081ba:	68b9      	ldr	r1, [r7, #8]
 80081bc:	68f8      	ldr	r0, [r7, #12]
 80081be:	f000 faa1 	bl	8008704 <UART_Start_Receive_IT>
 80081c2:	4603      	mov	r3, r0
 80081c4:	e000      	b.n	80081c8 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80081c6:	2302      	movs	r3, #2
  }
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3710      	adds	r7, #16
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b0ba      	sub	sp, #232	; 0xe8
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	68db      	ldr	r3, [r3, #12]
 80081e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	695b      	ldr	r3, [r3, #20]
 80081f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80081f6:	2300      	movs	r3, #0
 80081f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80081fc:	2300      	movs	r3, #0
 80081fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008206:	f003 030f 	and.w	r3, r3, #15
 800820a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800820e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008212:	2b00      	cmp	r3, #0
 8008214:	d10f      	bne.n	8008236 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800821a:	f003 0320 	and.w	r3, r3, #32
 800821e:	2b00      	cmp	r3, #0
 8008220:	d009      	beq.n	8008236 <HAL_UART_IRQHandler+0x66>
 8008222:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008226:	f003 0320 	and.w	r3, r3, #32
 800822a:	2b00      	cmp	r3, #0
 800822c:	d003      	beq.n	8008236 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 fb81 	bl	8008936 <UART_Receive_IT>
      return;
 8008234:	e256      	b.n	80086e4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008236:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800823a:	2b00      	cmp	r3, #0
 800823c:	f000 80de 	beq.w	80083fc <HAL_UART_IRQHandler+0x22c>
 8008240:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008244:	f003 0301 	and.w	r3, r3, #1
 8008248:	2b00      	cmp	r3, #0
 800824a:	d106      	bne.n	800825a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800824c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008250:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008254:	2b00      	cmp	r3, #0
 8008256:	f000 80d1 	beq.w	80083fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800825a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800825e:	f003 0301 	and.w	r3, r3, #1
 8008262:	2b00      	cmp	r3, #0
 8008264:	d00b      	beq.n	800827e <HAL_UART_IRQHandler+0xae>
 8008266:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800826a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800826e:	2b00      	cmp	r3, #0
 8008270:	d005      	beq.n	800827e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008276:	f043 0201 	orr.w	r2, r3, #1
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800827e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008282:	f003 0304 	and.w	r3, r3, #4
 8008286:	2b00      	cmp	r3, #0
 8008288:	d00b      	beq.n	80082a2 <HAL_UART_IRQHandler+0xd2>
 800828a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800828e:	f003 0301 	and.w	r3, r3, #1
 8008292:	2b00      	cmp	r3, #0
 8008294:	d005      	beq.n	80082a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800829a:	f043 0202 	orr.w	r2, r3, #2
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80082a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082a6:	f003 0302 	and.w	r3, r3, #2
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d00b      	beq.n	80082c6 <HAL_UART_IRQHandler+0xf6>
 80082ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082b2:	f003 0301 	and.w	r3, r3, #1
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d005      	beq.n	80082c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082be:	f043 0204 	orr.w	r2, r3, #4
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80082c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082ca:	f003 0308 	and.w	r3, r3, #8
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d011      	beq.n	80082f6 <HAL_UART_IRQHandler+0x126>
 80082d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082d6:	f003 0320 	and.w	r3, r3, #32
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d105      	bne.n	80082ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80082de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082e2:	f003 0301 	and.w	r3, r3, #1
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d005      	beq.n	80082f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ee:	f043 0208 	orr.w	r2, r3, #8
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	f000 81ed 	beq.w	80086da <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008304:	f003 0320 	and.w	r3, r3, #32
 8008308:	2b00      	cmp	r3, #0
 800830a:	d008      	beq.n	800831e <HAL_UART_IRQHandler+0x14e>
 800830c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008310:	f003 0320 	and.w	r3, r3, #32
 8008314:	2b00      	cmp	r3, #0
 8008316:	d002      	beq.n	800831e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f000 fb0c 	bl	8008936 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	695b      	ldr	r3, [r3, #20]
 8008324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008328:	2b40      	cmp	r3, #64	; 0x40
 800832a:	bf0c      	ite	eq
 800832c:	2301      	moveq	r3, #1
 800832e:	2300      	movne	r3, #0
 8008330:	b2db      	uxtb	r3, r3
 8008332:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800833a:	f003 0308 	and.w	r3, r3, #8
 800833e:	2b00      	cmp	r3, #0
 8008340:	d103      	bne.n	800834a <HAL_UART_IRQHandler+0x17a>
 8008342:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008346:	2b00      	cmp	r3, #0
 8008348:	d04f      	beq.n	80083ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 fa14 	bl	8008778 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	695b      	ldr	r3, [r3, #20]
 8008356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800835a:	2b40      	cmp	r3, #64	; 0x40
 800835c:	d141      	bne.n	80083e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	3314      	adds	r3, #20
 8008364:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008368:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800836c:	e853 3f00 	ldrex	r3, [r3]
 8008370:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008374:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008378:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800837c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	3314      	adds	r3, #20
 8008386:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800838a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800838e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008392:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008396:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800839a:	e841 2300 	strex	r3, r2, [r1]
 800839e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80083a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d1d9      	bne.n	800835e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d013      	beq.n	80083da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b6:	4a7d      	ldr	r2, [pc, #500]	; (80085ac <HAL_UART_IRQHandler+0x3dc>)
 80083b8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083be:	4618      	mov	r0, r3
 80083c0:	f7fc f9f9 	bl	80047b6 <HAL_DMA_Abort_IT>
 80083c4:	4603      	mov	r3, r0
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d016      	beq.n	80083f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083d0:	687a      	ldr	r2, [r7, #4]
 80083d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80083d4:	4610      	mov	r0, r2
 80083d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083d8:	e00e      	b.n	80083f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f7f8 fef6 	bl	80011cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083e0:	e00a      	b.n	80083f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f7f8 fef2 	bl	80011cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083e8:	e006      	b.n	80083f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f7f8 feee 	bl	80011cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2200      	movs	r2, #0
 80083f4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80083f6:	e170      	b.n	80086da <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083f8:	bf00      	nop
    return;
 80083fa:	e16e      	b.n	80086da <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008400:	2b01      	cmp	r3, #1
 8008402:	f040 814a 	bne.w	800869a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800840a:	f003 0310 	and.w	r3, r3, #16
 800840e:	2b00      	cmp	r3, #0
 8008410:	f000 8143 	beq.w	800869a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008414:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008418:	f003 0310 	and.w	r3, r3, #16
 800841c:	2b00      	cmp	r3, #0
 800841e:	f000 813c 	beq.w	800869a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008422:	2300      	movs	r3, #0
 8008424:	60bb      	str	r3, [r7, #8]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	60bb      	str	r3, [r7, #8]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	60bb      	str	r3, [r7, #8]
 8008436:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	695b      	ldr	r3, [r3, #20]
 800843e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008442:	2b40      	cmp	r3, #64	; 0x40
 8008444:	f040 80b4 	bne.w	80085b0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008454:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008458:	2b00      	cmp	r3, #0
 800845a:	f000 8140 	beq.w	80086de <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008462:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008466:	429a      	cmp	r2, r3
 8008468:	f080 8139 	bcs.w	80086de <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008472:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008478:	69db      	ldr	r3, [r3, #28]
 800847a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800847e:	f000 8088 	beq.w	8008592 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	330c      	adds	r3, #12
 8008488:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800848c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008490:	e853 3f00 	ldrex	r3, [r3]
 8008494:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008498:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800849c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	330c      	adds	r3, #12
 80084aa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80084ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80084b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80084ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80084be:	e841 2300 	strex	r3, r2, [r1]
 80084c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80084c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d1d9      	bne.n	8008482 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	3314      	adds	r3, #20
 80084d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084d8:	e853 3f00 	ldrex	r3, [r3]
 80084dc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80084de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80084e0:	f023 0301 	bic.w	r3, r3, #1
 80084e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	3314      	adds	r3, #20
 80084ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80084f2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80084f6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80084fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80084fe:	e841 2300 	strex	r3, r2, [r1]
 8008502:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008504:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008506:	2b00      	cmp	r3, #0
 8008508:	d1e1      	bne.n	80084ce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	3314      	adds	r3, #20
 8008510:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008512:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008514:	e853 3f00 	ldrex	r3, [r3]
 8008518:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800851a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800851c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008520:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	3314      	adds	r3, #20
 800852a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800852e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008530:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008532:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008534:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008536:	e841 2300 	strex	r3, r2, [r1]
 800853a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800853c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800853e:	2b00      	cmp	r3, #0
 8008540:	d1e3      	bne.n	800850a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2220      	movs	r2, #32
 8008546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2200      	movs	r2, #0
 800854e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	330c      	adds	r3, #12
 8008556:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008558:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800855a:	e853 3f00 	ldrex	r3, [r3]
 800855e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008560:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008562:	f023 0310 	bic.w	r3, r3, #16
 8008566:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	330c      	adds	r3, #12
 8008570:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008574:	65ba      	str	r2, [r7, #88]	; 0x58
 8008576:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008578:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800857a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800857c:	e841 2300 	strex	r3, r2, [r1]
 8008580:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008582:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008584:	2b00      	cmp	r3, #0
 8008586:	d1e3      	bne.n	8008550 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800858c:	4618      	mov	r0, r3
 800858e:	f7fc f8a2 	bl	80046d6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800859a:	b29b      	uxth	r3, r3
 800859c:	1ad3      	subs	r3, r2, r3
 800859e:	b29b      	uxth	r3, r3
 80085a0:	4619      	mov	r1, r3
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 f8a2 	bl	80086ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80085a8:	e099      	b.n	80086de <HAL_UART_IRQHandler+0x50e>
 80085aa:	bf00      	nop
 80085ac:	0800883f 	.word	0x0800883f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80085b8:	b29b      	uxth	r3, r3
 80085ba:	1ad3      	subs	r3, r2, r3
 80085bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80085c4:	b29b      	uxth	r3, r3
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	f000 808b 	beq.w	80086e2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80085cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	f000 8086 	beq.w	80086e2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	330c      	adds	r3, #12
 80085dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e0:	e853 3f00 	ldrex	r3, [r3]
 80085e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80085e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80085ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	330c      	adds	r3, #12
 80085f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80085fa:	647a      	str	r2, [r7, #68]	; 0x44
 80085fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008600:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008602:	e841 2300 	strex	r3, r2, [r1]
 8008606:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800860a:	2b00      	cmp	r3, #0
 800860c:	d1e3      	bne.n	80085d6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	3314      	adds	r3, #20
 8008614:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008618:	e853 3f00 	ldrex	r3, [r3]
 800861c:	623b      	str	r3, [r7, #32]
   return(result);
 800861e:	6a3b      	ldr	r3, [r7, #32]
 8008620:	f023 0301 	bic.w	r3, r3, #1
 8008624:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	3314      	adds	r3, #20
 800862e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008632:	633a      	str	r2, [r7, #48]	; 0x30
 8008634:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008636:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008638:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800863a:	e841 2300 	strex	r3, r2, [r1]
 800863e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008642:	2b00      	cmp	r3, #0
 8008644:	d1e3      	bne.n	800860e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2220      	movs	r2, #32
 800864a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2200      	movs	r2, #0
 8008652:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	330c      	adds	r3, #12
 800865a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	e853 3f00 	ldrex	r3, [r3]
 8008662:	60fb      	str	r3, [r7, #12]
   return(result);
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	f023 0310 	bic.w	r3, r3, #16
 800866a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	330c      	adds	r3, #12
 8008674:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008678:	61fa      	str	r2, [r7, #28]
 800867a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800867c:	69b9      	ldr	r1, [r7, #24]
 800867e:	69fa      	ldr	r2, [r7, #28]
 8008680:	e841 2300 	strex	r3, r2, [r1]
 8008684:	617b      	str	r3, [r7, #20]
   return(result);
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d1e3      	bne.n	8008654 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800868c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008690:	4619      	mov	r1, r3
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 f82a 	bl	80086ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008698:	e023      	b.n	80086e2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800869a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800869e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d009      	beq.n	80086ba <HAL_UART_IRQHandler+0x4ea>
 80086a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d003      	beq.n	80086ba <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 f8d7 	bl	8008866 <UART_Transmit_IT>
    return;
 80086b8:	e014      	b.n	80086e4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80086ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d00e      	beq.n	80086e4 <HAL_UART_IRQHandler+0x514>
 80086c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d008      	beq.n	80086e4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 f917 	bl	8008906 <UART_EndTransmit_IT>
    return;
 80086d8:	e004      	b.n	80086e4 <HAL_UART_IRQHandler+0x514>
    return;
 80086da:	bf00      	nop
 80086dc:	e002      	b.n	80086e4 <HAL_UART_IRQHandler+0x514>
      return;
 80086de:	bf00      	nop
 80086e0:	e000      	b.n	80086e4 <HAL_UART_IRQHandler+0x514>
      return;
 80086e2:	bf00      	nop
  }
}
 80086e4:	37e8      	adds	r7, #232	; 0xe8
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}
 80086ea:	bf00      	nop

080086ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b083      	sub	sp, #12
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	460b      	mov	r3, r1
 80086f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80086f8:	bf00      	nop
 80086fa:	370c      	adds	r7, #12
 80086fc:	46bd      	mov	sp, r7
 80086fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008702:	4770      	bx	lr

08008704 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008704:	b480      	push	{r7}
 8008706:	b085      	sub	sp, #20
 8008708:	af00      	add	r7, sp, #0
 800870a:	60f8      	str	r0, [r7, #12]
 800870c:	60b9      	str	r1, [r7, #8]
 800870e:	4613      	mov	r3, r2
 8008710:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	68ba      	ldr	r2, [r7, #8]
 8008716:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	88fa      	ldrh	r2, [r7, #6]
 800871c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	88fa      	ldrh	r2, [r7, #6]
 8008722:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	2200      	movs	r2, #0
 8008728:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	2222      	movs	r2, #34	; 0x22
 800872e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2200      	movs	r2, #0
 8008736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	68da      	ldr	r2, [r3, #12]
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008748:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	695a      	ldr	r2, [r3, #20]
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f042 0201 	orr.w	r2, r2, #1
 8008758:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	68da      	ldr	r2, [r3, #12]
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f042 0220 	orr.w	r2, r2, #32
 8008768:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800876a:	2300      	movs	r3, #0
}
 800876c:	4618      	mov	r0, r3
 800876e:	3714      	adds	r7, #20
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr

08008778 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008778:	b480      	push	{r7}
 800877a:	b095      	sub	sp, #84	; 0x54
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	330c      	adds	r3, #12
 8008786:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800878a:	e853 3f00 	ldrex	r3, [r3]
 800878e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008792:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008796:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	330c      	adds	r3, #12
 800879e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80087a0:	643a      	str	r2, [r7, #64]	; 0x40
 80087a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80087a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80087a8:	e841 2300 	strex	r3, r2, [r1]
 80087ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80087ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d1e5      	bne.n	8008780 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	3314      	adds	r3, #20
 80087ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087bc:	6a3b      	ldr	r3, [r7, #32]
 80087be:	e853 3f00 	ldrex	r3, [r3]
 80087c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80087c4:	69fb      	ldr	r3, [r7, #28]
 80087c6:	f023 0301 	bic.w	r3, r3, #1
 80087ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	3314      	adds	r3, #20
 80087d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80087d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80087da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087dc:	e841 2300 	strex	r3, r2, [r1]
 80087e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80087e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d1e5      	bne.n	80087b4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	d119      	bne.n	8008824 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	330c      	adds	r3, #12
 80087f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	e853 3f00 	ldrex	r3, [r3]
 80087fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	f023 0310 	bic.w	r3, r3, #16
 8008806:	647b      	str	r3, [r7, #68]	; 0x44
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	330c      	adds	r3, #12
 800880e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008810:	61ba      	str	r2, [r7, #24]
 8008812:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008814:	6979      	ldr	r1, [r7, #20]
 8008816:	69ba      	ldr	r2, [r7, #24]
 8008818:	e841 2300 	strex	r3, r2, [r1]
 800881c:	613b      	str	r3, [r7, #16]
   return(result);
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d1e5      	bne.n	80087f0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2220      	movs	r2, #32
 8008828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2200      	movs	r2, #0
 8008830:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008832:	bf00      	nop
 8008834:	3754      	adds	r7, #84	; 0x54
 8008836:	46bd      	mov	sp, r7
 8008838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883c:	4770      	bx	lr

0800883e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800883e:	b580      	push	{r7, lr}
 8008840:	b084      	sub	sp, #16
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800884a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2200      	movs	r2, #0
 8008850:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	2200      	movs	r2, #0
 8008856:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008858:	68f8      	ldr	r0, [r7, #12]
 800885a:	f7f8 fcb7 	bl	80011cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800885e:	bf00      	nop
 8008860:	3710      	adds	r7, #16
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}

08008866 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008866:	b480      	push	{r7}
 8008868:	b085      	sub	sp, #20
 800886a:	af00      	add	r7, sp, #0
 800886c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008874:	b2db      	uxtb	r3, r3
 8008876:	2b21      	cmp	r3, #33	; 0x21
 8008878:	d13e      	bne.n	80088f8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	689b      	ldr	r3, [r3, #8]
 800887e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008882:	d114      	bne.n	80088ae <UART_Transmit_IT+0x48>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	691b      	ldr	r3, [r3, #16]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d110      	bne.n	80088ae <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6a1b      	ldr	r3, [r3, #32]
 8008890:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	881b      	ldrh	r3, [r3, #0]
 8008896:	461a      	mov	r2, r3
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80088a0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6a1b      	ldr	r3, [r3, #32]
 80088a6:	1c9a      	adds	r2, r3, #2
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	621a      	str	r2, [r3, #32]
 80088ac:	e008      	b.n	80088c0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6a1b      	ldr	r3, [r3, #32]
 80088b2:	1c59      	adds	r1, r3, #1
 80088b4:	687a      	ldr	r2, [r7, #4]
 80088b6:	6211      	str	r1, [r2, #32]
 80088b8:	781a      	ldrb	r2, [r3, #0]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80088c4:	b29b      	uxth	r3, r3
 80088c6:	3b01      	subs	r3, #1
 80088c8:	b29b      	uxth	r3, r3
 80088ca:	687a      	ldr	r2, [r7, #4]
 80088cc:	4619      	mov	r1, r3
 80088ce:	84d1      	strh	r1, [r2, #38]	; 0x26
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d10f      	bne.n	80088f4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	68da      	ldr	r2, [r3, #12]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80088e2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	68da      	ldr	r2, [r3, #12]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80088f2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80088f4:	2300      	movs	r3, #0
 80088f6:	e000      	b.n	80088fa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80088f8:	2302      	movs	r3, #2
  }
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3714      	adds	r7, #20
 80088fe:	46bd      	mov	sp, r7
 8008900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008904:	4770      	bx	lr

08008906 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008906:	b580      	push	{r7, lr}
 8008908:	b082      	sub	sp, #8
 800890a:	af00      	add	r7, sp, #0
 800890c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	68da      	ldr	r2, [r3, #12]
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800891c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2220      	movs	r2, #32
 8008922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f7f8 fc10 	bl	800114c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800892c:	2300      	movs	r3, #0
}
 800892e:	4618      	mov	r0, r3
 8008930:	3708      	adds	r7, #8
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}

08008936 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008936:	b580      	push	{r7, lr}
 8008938:	b08c      	sub	sp, #48	; 0x30
 800893a:	af00      	add	r7, sp, #0
 800893c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008944:	b2db      	uxtb	r3, r3
 8008946:	2b22      	cmp	r3, #34	; 0x22
 8008948:	f040 80ab 	bne.w	8008aa2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	689b      	ldr	r3, [r3, #8]
 8008950:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008954:	d117      	bne.n	8008986 <UART_Receive_IT+0x50>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	691b      	ldr	r3, [r3, #16]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d113      	bne.n	8008986 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800895e:	2300      	movs	r3, #0
 8008960:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008966:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	685b      	ldr	r3, [r3, #4]
 800896e:	b29b      	uxth	r3, r3
 8008970:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008974:	b29a      	uxth	r2, r3
 8008976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008978:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800897e:	1c9a      	adds	r2, r3, #2
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	629a      	str	r2, [r3, #40]	; 0x28
 8008984:	e026      	b.n	80089d4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800898a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800898c:	2300      	movs	r3, #0
 800898e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	689b      	ldr	r3, [r3, #8]
 8008994:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008998:	d007      	beq.n	80089aa <UART_Receive_IT+0x74>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	689b      	ldr	r3, [r3, #8]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d10a      	bne.n	80089b8 <UART_Receive_IT+0x82>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	691b      	ldr	r3, [r3, #16]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d106      	bne.n	80089b8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	685b      	ldr	r3, [r3, #4]
 80089b0:	b2da      	uxtb	r2, r3
 80089b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089b4:	701a      	strb	r2, [r3, #0]
 80089b6:	e008      	b.n	80089ca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	b2db      	uxtb	r3, r3
 80089c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089c4:	b2da      	uxtb	r2, r3
 80089c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089c8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ce:	1c5a      	adds	r2, r3, #1
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80089d8:	b29b      	uxth	r3, r3
 80089da:	3b01      	subs	r3, #1
 80089dc:	b29b      	uxth	r3, r3
 80089de:	687a      	ldr	r2, [r7, #4]
 80089e0:	4619      	mov	r1, r3
 80089e2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d15a      	bne.n	8008a9e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	68da      	ldr	r2, [r3, #12]
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f022 0220 	bic.w	r2, r2, #32
 80089f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	68da      	ldr	r2, [r3, #12]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008a06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	695a      	ldr	r2, [r3, #20]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f022 0201 	bic.w	r2, r2, #1
 8008a16:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2220      	movs	r2, #32
 8008a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	d135      	bne.n	8008a94 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	330c      	adds	r3, #12
 8008a34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	e853 3f00 	ldrex	r3, [r3]
 8008a3c:	613b      	str	r3, [r7, #16]
   return(result);
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	f023 0310 	bic.w	r3, r3, #16
 8008a44:	627b      	str	r3, [r7, #36]	; 0x24
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	330c      	adds	r3, #12
 8008a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a4e:	623a      	str	r2, [r7, #32]
 8008a50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a52:	69f9      	ldr	r1, [r7, #28]
 8008a54:	6a3a      	ldr	r2, [r7, #32]
 8008a56:	e841 2300 	strex	r3, r2, [r1]
 8008a5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a5c:	69bb      	ldr	r3, [r7, #24]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d1e5      	bne.n	8008a2e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f003 0310 	and.w	r3, r3, #16
 8008a6c:	2b10      	cmp	r3, #16
 8008a6e:	d10a      	bne.n	8008a86 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008a70:	2300      	movs	r3, #0
 8008a72:	60fb      	str	r3, [r7, #12]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	60fb      	str	r3, [r7, #12]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	60fb      	str	r3, [r7, #12]
 8008a84:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008a8a:	4619      	mov	r1, r3
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f7ff fe2d 	bl	80086ec <HAL_UARTEx_RxEventCallback>
 8008a92:	e002      	b.n	8008a9a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f7f8 fb79 	bl	800118c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	e002      	b.n	8008aa4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	e000      	b.n	8008aa4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008aa2:	2302      	movs	r3, #2
  }
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3730      	adds	r7, #48	; 0x30
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}

08008aac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008aac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ab0:	b0c0      	sub	sp, #256	; 0x100
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	691b      	ldr	r3, [r3, #16]
 8008ac0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ac8:	68d9      	ldr	r1, [r3, #12]
 8008aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ace:	681a      	ldr	r2, [r3, #0]
 8008ad0:	ea40 0301 	orr.w	r3, r0, r1
 8008ad4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ada:	689a      	ldr	r2, [r3, #8]
 8008adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ae0:	691b      	ldr	r3, [r3, #16]
 8008ae2:	431a      	orrs	r2, r3
 8008ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ae8:	695b      	ldr	r3, [r3, #20]
 8008aea:	431a      	orrs	r2, r3
 8008aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008af0:	69db      	ldr	r3, [r3, #28]
 8008af2:	4313      	orrs	r3, r2
 8008af4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	68db      	ldr	r3, [r3, #12]
 8008b00:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008b04:	f021 010c 	bic.w	r1, r1, #12
 8008b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b0c:	681a      	ldr	r2, [r3, #0]
 8008b0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008b12:	430b      	orrs	r3, r1
 8008b14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	695b      	ldr	r3, [r3, #20]
 8008b1e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b26:	6999      	ldr	r1, [r3, #24]
 8008b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b2c:	681a      	ldr	r2, [r3, #0]
 8008b2e:	ea40 0301 	orr.w	r3, r0, r1
 8008b32:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b38:	681a      	ldr	r2, [r3, #0]
 8008b3a:	4b8f      	ldr	r3, [pc, #572]	; (8008d78 <UART_SetConfig+0x2cc>)
 8008b3c:	429a      	cmp	r2, r3
 8008b3e:	d005      	beq.n	8008b4c <UART_SetConfig+0xa0>
 8008b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b44:	681a      	ldr	r2, [r3, #0]
 8008b46:	4b8d      	ldr	r3, [pc, #564]	; (8008d7c <UART_SetConfig+0x2d0>)
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	d104      	bne.n	8008b56 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008b4c:	f7fe fde8 	bl	8007720 <HAL_RCC_GetPCLK2Freq>
 8008b50:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008b54:	e003      	b.n	8008b5e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008b56:	f7fe fdcf 	bl	80076f8 <HAL_RCC_GetPCLK1Freq>
 8008b5a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b62:	69db      	ldr	r3, [r3, #28]
 8008b64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b68:	f040 810c 	bne.w	8008d84 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008b6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b70:	2200      	movs	r2, #0
 8008b72:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008b76:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008b7a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008b7e:	4622      	mov	r2, r4
 8008b80:	462b      	mov	r3, r5
 8008b82:	1891      	adds	r1, r2, r2
 8008b84:	65b9      	str	r1, [r7, #88]	; 0x58
 8008b86:	415b      	adcs	r3, r3
 8008b88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008b8e:	4621      	mov	r1, r4
 8008b90:	eb12 0801 	adds.w	r8, r2, r1
 8008b94:	4629      	mov	r1, r5
 8008b96:	eb43 0901 	adc.w	r9, r3, r1
 8008b9a:	f04f 0200 	mov.w	r2, #0
 8008b9e:	f04f 0300 	mov.w	r3, #0
 8008ba2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008ba6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008baa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008bae:	4690      	mov	r8, r2
 8008bb0:	4699      	mov	r9, r3
 8008bb2:	4623      	mov	r3, r4
 8008bb4:	eb18 0303 	adds.w	r3, r8, r3
 8008bb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008bbc:	462b      	mov	r3, r5
 8008bbe:	eb49 0303 	adc.w	r3, r9, r3
 8008bc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008bd2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008bd6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008bda:	460b      	mov	r3, r1
 8008bdc:	18db      	adds	r3, r3, r3
 8008bde:	653b      	str	r3, [r7, #80]	; 0x50
 8008be0:	4613      	mov	r3, r2
 8008be2:	eb42 0303 	adc.w	r3, r2, r3
 8008be6:	657b      	str	r3, [r7, #84]	; 0x54
 8008be8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008bec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008bf0:	f7f8 f82a 	bl	8000c48 <__aeabi_uldivmod>
 8008bf4:	4602      	mov	r2, r0
 8008bf6:	460b      	mov	r3, r1
 8008bf8:	4b61      	ldr	r3, [pc, #388]	; (8008d80 <UART_SetConfig+0x2d4>)
 8008bfa:	fba3 2302 	umull	r2, r3, r3, r2
 8008bfe:	095b      	lsrs	r3, r3, #5
 8008c00:	011c      	lsls	r4, r3, #4
 8008c02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c06:	2200      	movs	r2, #0
 8008c08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008c0c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008c10:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008c14:	4642      	mov	r2, r8
 8008c16:	464b      	mov	r3, r9
 8008c18:	1891      	adds	r1, r2, r2
 8008c1a:	64b9      	str	r1, [r7, #72]	; 0x48
 8008c1c:	415b      	adcs	r3, r3
 8008c1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008c24:	4641      	mov	r1, r8
 8008c26:	eb12 0a01 	adds.w	sl, r2, r1
 8008c2a:	4649      	mov	r1, r9
 8008c2c:	eb43 0b01 	adc.w	fp, r3, r1
 8008c30:	f04f 0200 	mov.w	r2, #0
 8008c34:	f04f 0300 	mov.w	r3, #0
 8008c38:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008c3c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008c40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008c44:	4692      	mov	sl, r2
 8008c46:	469b      	mov	fp, r3
 8008c48:	4643      	mov	r3, r8
 8008c4a:	eb1a 0303 	adds.w	r3, sl, r3
 8008c4e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008c52:	464b      	mov	r3, r9
 8008c54:	eb4b 0303 	adc.w	r3, fp, r3
 8008c58:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c60:	685b      	ldr	r3, [r3, #4]
 8008c62:	2200      	movs	r2, #0
 8008c64:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008c68:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008c6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008c70:	460b      	mov	r3, r1
 8008c72:	18db      	adds	r3, r3, r3
 8008c74:	643b      	str	r3, [r7, #64]	; 0x40
 8008c76:	4613      	mov	r3, r2
 8008c78:	eb42 0303 	adc.w	r3, r2, r3
 8008c7c:	647b      	str	r3, [r7, #68]	; 0x44
 8008c7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008c82:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008c86:	f7f7 ffdf 	bl	8000c48 <__aeabi_uldivmod>
 8008c8a:	4602      	mov	r2, r0
 8008c8c:	460b      	mov	r3, r1
 8008c8e:	4611      	mov	r1, r2
 8008c90:	4b3b      	ldr	r3, [pc, #236]	; (8008d80 <UART_SetConfig+0x2d4>)
 8008c92:	fba3 2301 	umull	r2, r3, r3, r1
 8008c96:	095b      	lsrs	r3, r3, #5
 8008c98:	2264      	movs	r2, #100	; 0x64
 8008c9a:	fb02 f303 	mul.w	r3, r2, r3
 8008c9e:	1acb      	subs	r3, r1, r3
 8008ca0:	00db      	lsls	r3, r3, #3
 8008ca2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008ca6:	4b36      	ldr	r3, [pc, #216]	; (8008d80 <UART_SetConfig+0x2d4>)
 8008ca8:	fba3 2302 	umull	r2, r3, r3, r2
 8008cac:	095b      	lsrs	r3, r3, #5
 8008cae:	005b      	lsls	r3, r3, #1
 8008cb0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008cb4:	441c      	add	r4, r3
 8008cb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008cba:	2200      	movs	r2, #0
 8008cbc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008cc0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008cc4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008cc8:	4642      	mov	r2, r8
 8008cca:	464b      	mov	r3, r9
 8008ccc:	1891      	adds	r1, r2, r2
 8008cce:	63b9      	str	r1, [r7, #56]	; 0x38
 8008cd0:	415b      	adcs	r3, r3
 8008cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008cd4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008cd8:	4641      	mov	r1, r8
 8008cda:	1851      	adds	r1, r2, r1
 8008cdc:	6339      	str	r1, [r7, #48]	; 0x30
 8008cde:	4649      	mov	r1, r9
 8008ce0:	414b      	adcs	r3, r1
 8008ce2:	637b      	str	r3, [r7, #52]	; 0x34
 8008ce4:	f04f 0200 	mov.w	r2, #0
 8008ce8:	f04f 0300 	mov.w	r3, #0
 8008cec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008cf0:	4659      	mov	r1, fp
 8008cf2:	00cb      	lsls	r3, r1, #3
 8008cf4:	4651      	mov	r1, sl
 8008cf6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008cfa:	4651      	mov	r1, sl
 8008cfc:	00ca      	lsls	r2, r1, #3
 8008cfe:	4610      	mov	r0, r2
 8008d00:	4619      	mov	r1, r3
 8008d02:	4603      	mov	r3, r0
 8008d04:	4642      	mov	r2, r8
 8008d06:	189b      	adds	r3, r3, r2
 8008d08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008d0c:	464b      	mov	r3, r9
 8008d0e:	460a      	mov	r2, r1
 8008d10:	eb42 0303 	adc.w	r3, r2, r3
 8008d14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d1c:	685b      	ldr	r3, [r3, #4]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008d24:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008d28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008d2c:	460b      	mov	r3, r1
 8008d2e:	18db      	adds	r3, r3, r3
 8008d30:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d32:	4613      	mov	r3, r2
 8008d34:	eb42 0303 	adc.w	r3, r2, r3
 8008d38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008d3e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008d42:	f7f7 ff81 	bl	8000c48 <__aeabi_uldivmod>
 8008d46:	4602      	mov	r2, r0
 8008d48:	460b      	mov	r3, r1
 8008d4a:	4b0d      	ldr	r3, [pc, #52]	; (8008d80 <UART_SetConfig+0x2d4>)
 8008d4c:	fba3 1302 	umull	r1, r3, r3, r2
 8008d50:	095b      	lsrs	r3, r3, #5
 8008d52:	2164      	movs	r1, #100	; 0x64
 8008d54:	fb01 f303 	mul.w	r3, r1, r3
 8008d58:	1ad3      	subs	r3, r2, r3
 8008d5a:	00db      	lsls	r3, r3, #3
 8008d5c:	3332      	adds	r3, #50	; 0x32
 8008d5e:	4a08      	ldr	r2, [pc, #32]	; (8008d80 <UART_SetConfig+0x2d4>)
 8008d60:	fba2 2303 	umull	r2, r3, r2, r3
 8008d64:	095b      	lsrs	r3, r3, #5
 8008d66:	f003 0207 	and.w	r2, r3, #7
 8008d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4422      	add	r2, r4
 8008d72:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008d74:	e105      	b.n	8008f82 <UART_SetConfig+0x4d6>
 8008d76:	bf00      	nop
 8008d78:	40011000 	.word	0x40011000
 8008d7c:	40011400 	.word	0x40011400
 8008d80:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008d84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d88:	2200      	movs	r2, #0
 8008d8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008d8e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008d92:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008d96:	4642      	mov	r2, r8
 8008d98:	464b      	mov	r3, r9
 8008d9a:	1891      	adds	r1, r2, r2
 8008d9c:	6239      	str	r1, [r7, #32]
 8008d9e:	415b      	adcs	r3, r3
 8008da0:	627b      	str	r3, [r7, #36]	; 0x24
 8008da2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008da6:	4641      	mov	r1, r8
 8008da8:	1854      	adds	r4, r2, r1
 8008daa:	4649      	mov	r1, r9
 8008dac:	eb43 0501 	adc.w	r5, r3, r1
 8008db0:	f04f 0200 	mov.w	r2, #0
 8008db4:	f04f 0300 	mov.w	r3, #0
 8008db8:	00eb      	lsls	r3, r5, #3
 8008dba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008dbe:	00e2      	lsls	r2, r4, #3
 8008dc0:	4614      	mov	r4, r2
 8008dc2:	461d      	mov	r5, r3
 8008dc4:	4643      	mov	r3, r8
 8008dc6:	18e3      	adds	r3, r4, r3
 8008dc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008dcc:	464b      	mov	r3, r9
 8008dce:	eb45 0303 	adc.w	r3, r5, r3
 8008dd2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dda:	685b      	ldr	r3, [r3, #4]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008de2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008de6:	f04f 0200 	mov.w	r2, #0
 8008dea:	f04f 0300 	mov.w	r3, #0
 8008dee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008df2:	4629      	mov	r1, r5
 8008df4:	008b      	lsls	r3, r1, #2
 8008df6:	4621      	mov	r1, r4
 8008df8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008dfc:	4621      	mov	r1, r4
 8008dfe:	008a      	lsls	r2, r1, #2
 8008e00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008e04:	f7f7 ff20 	bl	8000c48 <__aeabi_uldivmod>
 8008e08:	4602      	mov	r2, r0
 8008e0a:	460b      	mov	r3, r1
 8008e0c:	4b60      	ldr	r3, [pc, #384]	; (8008f90 <UART_SetConfig+0x4e4>)
 8008e0e:	fba3 2302 	umull	r2, r3, r3, r2
 8008e12:	095b      	lsrs	r3, r3, #5
 8008e14:	011c      	lsls	r4, r3, #4
 8008e16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008e20:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008e24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008e28:	4642      	mov	r2, r8
 8008e2a:	464b      	mov	r3, r9
 8008e2c:	1891      	adds	r1, r2, r2
 8008e2e:	61b9      	str	r1, [r7, #24]
 8008e30:	415b      	adcs	r3, r3
 8008e32:	61fb      	str	r3, [r7, #28]
 8008e34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008e38:	4641      	mov	r1, r8
 8008e3a:	1851      	adds	r1, r2, r1
 8008e3c:	6139      	str	r1, [r7, #16]
 8008e3e:	4649      	mov	r1, r9
 8008e40:	414b      	adcs	r3, r1
 8008e42:	617b      	str	r3, [r7, #20]
 8008e44:	f04f 0200 	mov.w	r2, #0
 8008e48:	f04f 0300 	mov.w	r3, #0
 8008e4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008e50:	4659      	mov	r1, fp
 8008e52:	00cb      	lsls	r3, r1, #3
 8008e54:	4651      	mov	r1, sl
 8008e56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e5a:	4651      	mov	r1, sl
 8008e5c:	00ca      	lsls	r2, r1, #3
 8008e5e:	4610      	mov	r0, r2
 8008e60:	4619      	mov	r1, r3
 8008e62:	4603      	mov	r3, r0
 8008e64:	4642      	mov	r2, r8
 8008e66:	189b      	adds	r3, r3, r2
 8008e68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008e6c:	464b      	mov	r3, r9
 8008e6e:	460a      	mov	r2, r1
 8008e70:	eb42 0303 	adc.w	r3, r2, r3
 8008e74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e7c:	685b      	ldr	r3, [r3, #4]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	67bb      	str	r3, [r7, #120]	; 0x78
 8008e82:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008e84:	f04f 0200 	mov.w	r2, #0
 8008e88:	f04f 0300 	mov.w	r3, #0
 8008e8c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008e90:	4649      	mov	r1, r9
 8008e92:	008b      	lsls	r3, r1, #2
 8008e94:	4641      	mov	r1, r8
 8008e96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e9a:	4641      	mov	r1, r8
 8008e9c:	008a      	lsls	r2, r1, #2
 8008e9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008ea2:	f7f7 fed1 	bl	8000c48 <__aeabi_uldivmod>
 8008ea6:	4602      	mov	r2, r0
 8008ea8:	460b      	mov	r3, r1
 8008eaa:	4b39      	ldr	r3, [pc, #228]	; (8008f90 <UART_SetConfig+0x4e4>)
 8008eac:	fba3 1302 	umull	r1, r3, r3, r2
 8008eb0:	095b      	lsrs	r3, r3, #5
 8008eb2:	2164      	movs	r1, #100	; 0x64
 8008eb4:	fb01 f303 	mul.w	r3, r1, r3
 8008eb8:	1ad3      	subs	r3, r2, r3
 8008eba:	011b      	lsls	r3, r3, #4
 8008ebc:	3332      	adds	r3, #50	; 0x32
 8008ebe:	4a34      	ldr	r2, [pc, #208]	; (8008f90 <UART_SetConfig+0x4e4>)
 8008ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8008ec4:	095b      	lsrs	r3, r3, #5
 8008ec6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008eca:	441c      	add	r4, r3
 8008ecc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	673b      	str	r3, [r7, #112]	; 0x70
 8008ed4:	677a      	str	r2, [r7, #116]	; 0x74
 8008ed6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008eda:	4642      	mov	r2, r8
 8008edc:	464b      	mov	r3, r9
 8008ede:	1891      	adds	r1, r2, r2
 8008ee0:	60b9      	str	r1, [r7, #8]
 8008ee2:	415b      	adcs	r3, r3
 8008ee4:	60fb      	str	r3, [r7, #12]
 8008ee6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008eea:	4641      	mov	r1, r8
 8008eec:	1851      	adds	r1, r2, r1
 8008eee:	6039      	str	r1, [r7, #0]
 8008ef0:	4649      	mov	r1, r9
 8008ef2:	414b      	adcs	r3, r1
 8008ef4:	607b      	str	r3, [r7, #4]
 8008ef6:	f04f 0200 	mov.w	r2, #0
 8008efa:	f04f 0300 	mov.w	r3, #0
 8008efe:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008f02:	4659      	mov	r1, fp
 8008f04:	00cb      	lsls	r3, r1, #3
 8008f06:	4651      	mov	r1, sl
 8008f08:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f0c:	4651      	mov	r1, sl
 8008f0e:	00ca      	lsls	r2, r1, #3
 8008f10:	4610      	mov	r0, r2
 8008f12:	4619      	mov	r1, r3
 8008f14:	4603      	mov	r3, r0
 8008f16:	4642      	mov	r2, r8
 8008f18:	189b      	adds	r3, r3, r2
 8008f1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8008f1c:	464b      	mov	r3, r9
 8008f1e:	460a      	mov	r2, r1
 8008f20:	eb42 0303 	adc.w	r3, r2, r3
 8008f24:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f2a:	685b      	ldr	r3, [r3, #4]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	663b      	str	r3, [r7, #96]	; 0x60
 8008f30:	667a      	str	r2, [r7, #100]	; 0x64
 8008f32:	f04f 0200 	mov.w	r2, #0
 8008f36:	f04f 0300 	mov.w	r3, #0
 8008f3a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008f3e:	4649      	mov	r1, r9
 8008f40:	008b      	lsls	r3, r1, #2
 8008f42:	4641      	mov	r1, r8
 8008f44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f48:	4641      	mov	r1, r8
 8008f4a:	008a      	lsls	r2, r1, #2
 8008f4c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008f50:	f7f7 fe7a 	bl	8000c48 <__aeabi_uldivmod>
 8008f54:	4602      	mov	r2, r0
 8008f56:	460b      	mov	r3, r1
 8008f58:	4b0d      	ldr	r3, [pc, #52]	; (8008f90 <UART_SetConfig+0x4e4>)
 8008f5a:	fba3 1302 	umull	r1, r3, r3, r2
 8008f5e:	095b      	lsrs	r3, r3, #5
 8008f60:	2164      	movs	r1, #100	; 0x64
 8008f62:	fb01 f303 	mul.w	r3, r1, r3
 8008f66:	1ad3      	subs	r3, r2, r3
 8008f68:	011b      	lsls	r3, r3, #4
 8008f6a:	3332      	adds	r3, #50	; 0x32
 8008f6c:	4a08      	ldr	r2, [pc, #32]	; (8008f90 <UART_SetConfig+0x4e4>)
 8008f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8008f72:	095b      	lsrs	r3, r3, #5
 8008f74:	f003 020f 	and.w	r2, r3, #15
 8008f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4422      	add	r2, r4
 8008f80:	609a      	str	r2, [r3, #8]
}
 8008f82:	bf00      	nop
 8008f84:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f8e:	bf00      	nop
 8008f90:	51eb851f 	.word	0x51eb851f

08008f94 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008f94:	b084      	sub	sp, #16
 8008f96:	b580      	push	{r7, lr}
 8008f98:	b084      	sub	sp, #16
 8008f9a:	af00      	add	r7, sp, #0
 8008f9c:	6078      	str	r0, [r7, #4]
 8008f9e:	f107 001c 	add.w	r0, r7, #28
 8008fa2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	d122      	bne.n	8008ff2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fb0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	68db      	ldr	r3, [r3, #12]
 8008fbc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008fc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fc4:	687a      	ldr	r2, [r7, #4]
 8008fc6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	68db      	ldr	r3, [r3, #12]
 8008fcc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008fd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fd6:	2b01      	cmp	r3, #1
 8008fd8:	d105      	bne.n	8008fe6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	68db      	ldr	r3, [r3, #12]
 8008fde:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f001 fb1c 	bl	800a624 <USB_CoreReset>
 8008fec:	4603      	mov	r3, r0
 8008fee:	73fb      	strb	r3, [r7, #15]
 8008ff0:	e01a      	b.n	8009028 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	68db      	ldr	r3, [r3, #12]
 8008ff6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f001 fb10 	bl	800a624 <USB_CoreReset>
 8009004:	4603      	mov	r3, r0
 8009006:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009008:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800900a:	2b00      	cmp	r3, #0
 800900c:	d106      	bne.n	800901c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009012:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	639a      	str	r2, [r3, #56]	; 0x38
 800901a:	e005      	b.n	8009028 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009020:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800902a:	2b01      	cmp	r3, #1
 800902c:	d10b      	bne.n	8009046 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	689b      	ldr	r3, [r3, #8]
 8009032:	f043 0206 	orr.w	r2, r3, #6
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	689b      	ldr	r3, [r3, #8]
 800903e:	f043 0220 	orr.w	r2, r3, #32
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009046:	7bfb      	ldrb	r3, [r7, #15]
}
 8009048:	4618      	mov	r0, r3
 800904a:	3710      	adds	r7, #16
 800904c:	46bd      	mov	sp, r7
 800904e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009052:	b004      	add	sp, #16
 8009054:	4770      	bx	lr
	...

08009058 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009058:	b480      	push	{r7}
 800905a:	b087      	sub	sp, #28
 800905c:	af00      	add	r7, sp, #0
 800905e:	60f8      	str	r0, [r7, #12]
 8009060:	60b9      	str	r1, [r7, #8]
 8009062:	4613      	mov	r3, r2
 8009064:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009066:	79fb      	ldrb	r3, [r7, #7]
 8009068:	2b02      	cmp	r3, #2
 800906a:	d165      	bne.n	8009138 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	4a41      	ldr	r2, [pc, #260]	; (8009174 <USB_SetTurnaroundTime+0x11c>)
 8009070:	4293      	cmp	r3, r2
 8009072:	d906      	bls.n	8009082 <USB_SetTurnaroundTime+0x2a>
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	4a40      	ldr	r2, [pc, #256]	; (8009178 <USB_SetTurnaroundTime+0x120>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d202      	bcs.n	8009082 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800907c:	230f      	movs	r3, #15
 800907e:	617b      	str	r3, [r7, #20]
 8009080:	e062      	b.n	8009148 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	4a3c      	ldr	r2, [pc, #240]	; (8009178 <USB_SetTurnaroundTime+0x120>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d306      	bcc.n	8009098 <USB_SetTurnaroundTime+0x40>
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	4a3b      	ldr	r2, [pc, #236]	; (800917c <USB_SetTurnaroundTime+0x124>)
 800908e:	4293      	cmp	r3, r2
 8009090:	d202      	bcs.n	8009098 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009092:	230e      	movs	r3, #14
 8009094:	617b      	str	r3, [r7, #20]
 8009096:	e057      	b.n	8009148 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	4a38      	ldr	r2, [pc, #224]	; (800917c <USB_SetTurnaroundTime+0x124>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d306      	bcc.n	80090ae <USB_SetTurnaroundTime+0x56>
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	4a37      	ldr	r2, [pc, #220]	; (8009180 <USB_SetTurnaroundTime+0x128>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d202      	bcs.n	80090ae <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80090a8:	230d      	movs	r3, #13
 80090aa:	617b      	str	r3, [r7, #20]
 80090ac:	e04c      	b.n	8009148 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	4a33      	ldr	r2, [pc, #204]	; (8009180 <USB_SetTurnaroundTime+0x128>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d306      	bcc.n	80090c4 <USB_SetTurnaroundTime+0x6c>
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	4a32      	ldr	r2, [pc, #200]	; (8009184 <USB_SetTurnaroundTime+0x12c>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d802      	bhi.n	80090c4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80090be:	230c      	movs	r3, #12
 80090c0:	617b      	str	r3, [r7, #20]
 80090c2:	e041      	b.n	8009148 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	4a2f      	ldr	r2, [pc, #188]	; (8009184 <USB_SetTurnaroundTime+0x12c>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d906      	bls.n	80090da <USB_SetTurnaroundTime+0x82>
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	4a2e      	ldr	r2, [pc, #184]	; (8009188 <USB_SetTurnaroundTime+0x130>)
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d802      	bhi.n	80090da <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80090d4:	230b      	movs	r3, #11
 80090d6:	617b      	str	r3, [r7, #20]
 80090d8:	e036      	b.n	8009148 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	4a2a      	ldr	r2, [pc, #168]	; (8009188 <USB_SetTurnaroundTime+0x130>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	d906      	bls.n	80090f0 <USB_SetTurnaroundTime+0x98>
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	4a29      	ldr	r2, [pc, #164]	; (800918c <USB_SetTurnaroundTime+0x134>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d802      	bhi.n	80090f0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80090ea:	230a      	movs	r3, #10
 80090ec:	617b      	str	r3, [r7, #20]
 80090ee:	e02b      	b.n	8009148 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	4a26      	ldr	r2, [pc, #152]	; (800918c <USB_SetTurnaroundTime+0x134>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d906      	bls.n	8009106 <USB_SetTurnaroundTime+0xae>
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	4a25      	ldr	r2, [pc, #148]	; (8009190 <USB_SetTurnaroundTime+0x138>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d202      	bcs.n	8009106 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009100:	2309      	movs	r3, #9
 8009102:	617b      	str	r3, [r7, #20]
 8009104:	e020      	b.n	8009148 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	4a21      	ldr	r2, [pc, #132]	; (8009190 <USB_SetTurnaroundTime+0x138>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d306      	bcc.n	800911c <USB_SetTurnaroundTime+0xc4>
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	4a20      	ldr	r2, [pc, #128]	; (8009194 <USB_SetTurnaroundTime+0x13c>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d802      	bhi.n	800911c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009116:	2308      	movs	r3, #8
 8009118:	617b      	str	r3, [r7, #20]
 800911a:	e015      	b.n	8009148 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	4a1d      	ldr	r2, [pc, #116]	; (8009194 <USB_SetTurnaroundTime+0x13c>)
 8009120:	4293      	cmp	r3, r2
 8009122:	d906      	bls.n	8009132 <USB_SetTurnaroundTime+0xda>
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	4a1c      	ldr	r2, [pc, #112]	; (8009198 <USB_SetTurnaroundTime+0x140>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d202      	bcs.n	8009132 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800912c:	2307      	movs	r3, #7
 800912e:	617b      	str	r3, [r7, #20]
 8009130:	e00a      	b.n	8009148 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009132:	2306      	movs	r3, #6
 8009134:	617b      	str	r3, [r7, #20]
 8009136:	e007      	b.n	8009148 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009138:	79fb      	ldrb	r3, [r7, #7]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d102      	bne.n	8009144 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800913e:	2309      	movs	r3, #9
 8009140:	617b      	str	r3, [r7, #20]
 8009142:	e001      	b.n	8009148 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009144:	2309      	movs	r3, #9
 8009146:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	68db      	ldr	r3, [r3, #12]
 800914c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	68da      	ldr	r2, [r3, #12]
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	029b      	lsls	r3, r3, #10
 800915c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009160:	431a      	orrs	r2, r3
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009166:	2300      	movs	r3, #0
}
 8009168:	4618      	mov	r0, r3
 800916a:	371c      	adds	r7, #28
 800916c:	46bd      	mov	sp, r7
 800916e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009172:	4770      	bx	lr
 8009174:	00d8acbf 	.word	0x00d8acbf
 8009178:	00e4e1c0 	.word	0x00e4e1c0
 800917c:	00f42400 	.word	0x00f42400
 8009180:	01067380 	.word	0x01067380
 8009184:	011a499f 	.word	0x011a499f
 8009188:	01312cff 	.word	0x01312cff
 800918c:	014ca43f 	.word	0x014ca43f
 8009190:	016e3600 	.word	0x016e3600
 8009194:	01a6ab1f 	.word	0x01a6ab1f
 8009198:	01e84800 	.word	0x01e84800

0800919c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800919c:	b480      	push	{r7}
 800919e:	b083      	sub	sp, #12
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	689b      	ldr	r3, [r3, #8]
 80091a8:	f043 0201 	orr.w	r2, r3, #1
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80091b0:	2300      	movs	r3, #0
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	370c      	adds	r7, #12
 80091b6:	46bd      	mov	sp, r7
 80091b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091bc:	4770      	bx	lr

080091be <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80091be:	b480      	push	{r7}
 80091c0:	b083      	sub	sp, #12
 80091c2:	af00      	add	r7, sp, #0
 80091c4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	689b      	ldr	r3, [r3, #8]
 80091ca:	f023 0201 	bic.w	r2, r3, #1
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80091d2:	2300      	movs	r3, #0
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	370c      	adds	r7, #12
 80091d8:	46bd      	mov	sp, r7
 80091da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091de:	4770      	bx	lr

080091e0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b084      	sub	sp, #16
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
 80091e8:	460b      	mov	r3, r1
 80091ea:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80091ec:	2300      	movs	r3, #0
 80091ee:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	68db      	ldr	r3, [r3, #12]
 80091f4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80091fc:	78fb      	ldrb	r3, [r7, #3]
 80091fe:	2b01      	cmp	r3, #1
 8009200:	d115      	bne.n	800922e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	68db      	ldr	r3, [r3, #12]
 8009206:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800920e:	2001      	movs	r0, #1
 8009210:	f7fb f8fa 	bl	8004408 <HAL_Delay>
      ms++;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	3301      	adds	r3, #1
 8009218:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f001 f972 	bl	800a504 <USB_GetMode>
 8009220:	4603      	mov	r3, r0
 8009222:	2b01      	cmp	r3, #1
 8009224:	d01e      	beq.n	8009264 <USB_SetCurrentMode+0x84>
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	2b31      	cmp	r3, #49	; 0x31
 800922a:	d9f0      	bls.n	800920e <USB_SetCurrentMode+0x2e>
 800922c:	e01a      	b.n	8009264 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800922e:	78fb      	ldrb	r3, [r7, #3]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d115      	bne.n	8009260 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	68db      	ldr	r3, [r3, #12]
 8009238:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009240:	2001      	movs	r0, #1
 8009242:	f7fb f8e1 	bl	8004408 <HAL_Delay>
      ms++;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	3301      	adds	r3, #1
 800924a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f001 f959 	bl	800a504 <USB_GetMode>
 8009252:	4603      	mov	r3, r0
 8009254:	2b00      	cmp	r3, #0
 8009256:	d005      	beq.n	8009264 <USB_SetCurrentMode+0x84>
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	2b31      	cmp	r3, #49	; 0x31
 800925c:	d9f0      	bls.n	8009240 <USB_SetCurrentMode+0x60>
 800925e:	e001      	b.n	8009264 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009260:	2301      	movs	r3, #1
 8009262:	e005      	b.n	8009270 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	2b32      	cmp	r3, #50	; 0x32
 8009268:	d101      	bne.n	800926e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800926a:	2301      	movs	r3, #1
 800926c:	e000      	b.n	8009270 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800926e:	2300      	movs	r3, #0
}
 8009270:	4618      	mov	r0, r3
 8009272:	3710      	adds	r7, #16
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}

08009278 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009278:	b084      	sub	sp, #16
 800927a:	b580      	push	{r7, lr}
 800927c:	b086      	sub	sp, #24
 800927e:	af00      	add	r7, sp, #0
 8009280:	6078      	str	r0, [r7, #4]
 8009282:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009286:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800928a:	2300      	movs	r3, #0
 800928c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009292:	2300      	movs	r3, #0
 8009294:	613b      	str	r3, [r7, #16]
 8009296:	e009      	b.n	80092ac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009298:	687a      	ldr	r2, [r7, #4]
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	3340      	adds	r3, #64	; 0x40
 800929e:	009b      	lsls	r3, r3, #2
 80092a0:	4413      	add	r3, r2
 80092a2:	2200      	movs	r2, #0
 80092a4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	3301      	adds	r3, #1
 80092aa:	613b      	str	r3, [r7, #16]
 80092ac:	693b      	ldr	r3, [r7, #16]
 80092ae:	2b0e      	cmp	r3, #14
 80092b0:	d9f2      	bls.n	8009298 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80092b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d11c      	bne.n	80092f2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092be:	685b      	ldr	r3, [r3, #4]
 80092c0:	68fa      	ldr	r2, [r7, #12]
 80092c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80092c6:	f043 0302 	orr.w	r3, r3, #2
 80092ca:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092d0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092dc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092e8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	639a      	str	r2, [r3, #56]	; 0x38
 80092f0:	e00b      	b.n	800930a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092f6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009302:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009310:	461a      	mov	r2, r3
 8009312:	2300      	movs	r3, #0
 8009314:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800931c:	4619      	mov	r1, r3
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009324:	461a      	mov	r2, r3
 8009326:	680b      	ldr	r3, [r1, #0]
 8009328:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800932a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800932c:	2b01      	cmp	r3, #1
 800932e:	d10c      	bne.n	800934a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009332:	2b00      	cmp	r3, #0
 8009334:	d104      	bne.n	8009340 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009336:	2100      	movs	r1, #0
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f000 f945 	bl	80095c8 <USB_SetDevSpeed>
 800933e:	e008      	b.n	8009352 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009340:	2101      	movs	r1, #1
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f000 f940 	bl	80095c8 <USB_SetDevSpeed>
 8009348:	e003      	b.n	8009352 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800934a:	2103      	movs	r1, #3
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f000 f93b 	bl	80095c8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009352:	2110      	movs	r1, #16
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f000 f8f3 	bl	8009540 <USB_FlushTxFifo>
 800935a:	4603      	mov	r3, r0
 800935c:	2b00      	cmp	r3, #0
 800935e:	d001      	beq.n	8009364 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8009360:	2301      	movs	r3, #1
 8009362:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f000 f90f 	bl	8009588 <USB_FlushRxFifo>
 800936a:	4603      	mov	r3, r0
 800936c:	2b00      	cmp	r3, #0
 800936e:	d001      	beq.n	8009374 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8009370:	2301      	movs	r3, #1
 8009372:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800937a:	461a      	mov	r2, r3
 800937c:	2300      	movs	r3, #0
 800937e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009386:	461a      	mov	r2, r3
 8009388:	2300      	movs	r3, #0
 800938a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009392:	461a      	mov	r2, r3
 8009394:	2300      	movs	r3, #0
 8009396:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009398:	2300      	movs	r3, #0
 800939a:	613b      	str	r3, [r7, #16]
 800939c:	e043      	b.n	8009426 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800939e:	693b      	ldr	r3, [r7, #16]
 80093a0:	015a      	lsls	r2, r3, #5
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	4413      	add	r3, r2
 80093a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80093b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80093b4:	d118      	bne.n	80093e8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80093b6:	693b      	ldr	r3, [r7, #16]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d10a      	bne.n	80093d2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80093bc:	693b      	ldr	r3, [r7, #16]
 80093be:	015a      	lsls	r2, r3, #5
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	4413      	add	r3, r2
 80093c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093c8:	461a      	mov	r2, r3
 80093ca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80093ce:	6013      	str	r3, [r2, #0]
 80093d0:	e013      	b.n	80093fa <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	015a      	lsls	r2, r3, #5
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	4413      	add	r3, r2
 80093da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093de:	461a      	mov	r2, r3
 80093e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80093e4:	6013      	str	r3, [r2, #0]
 80093e6:	e008      	b.n	80093fa <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	015a      	lsls	r2, r3, #5
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	4413      	add	r3, r2
 80093f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093f4:	461a      	mov	r2, r3
 80093f6:	2300      	movs	r3, #0
 80093f8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80093fa:	693b      	ldr	r3, [r7, #16]
 80093fc:	015a      	lsls	r2, r3, #5
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	4413      	add	r3, r2
 8009402:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009406:	461a      	mov	r2, r3
 8009408:	2300      	movs	r3, #0
 800940a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	015a      	lsls	r2, r3, #5
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	4413      	add	r3, r2
 8009414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009418:	461a      	mov	r2, r3
 800941a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800941e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	3301      	adds	r3, #1
 8009424:	613b      	str	r3, [r7, #16]
 8009426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009428:	693a      	ldr	r2, [r7, #16]
 800942a:	429a      	cmp	r2, r3
 800942c:	d3b7      	bcc.n	800939e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800942e:	2300      	movs	r3, #0
 8009430:	613b      	str	r3, [r7, #16]
 8009432:	e043      	b.n	80094bc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	015a      	lsls	r2, r3, #5
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	4413      	add	r3, r2
 800943c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009446:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800944a:	d118      	bne.n	800947e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800944c:	693b      	ldr	r3, [r7, #16]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d10a      	bne.n	8009468 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009452:	693b      	ldr	r3, [r7, #16]
 8009454:	015a      	lsls	r2, r3, #5
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	4413      	add	r3, r2
 800945a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800945e:	461a      	mov	r2, r3
 8009460:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009464:	6013      	str	r3, [r2, #0]
 8009466:	e013      	b.n	8009490 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	015a      	lsls	r2, r3, #5
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	4413      	add	r3, r2
 8009470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009474:	461a      	mov	r2, r3
 8009476:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800947a:	6013      	str	r3, [r2, #0]
 800947c:	e008      	b.n	8009490 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800947e:	693b      	ldr	r3, [r7, #16]
 8009480:	015a      	lsls	r2, r3, #5
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	4413      	add	r3, r2
 8009486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800948a:	461a      	mov	r2, r3
 800948c:	2300      	movs	r3, #0
 800948e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	015a      	lsls	r2, r3, #5
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	4413      	add	r3, r2
 8009498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800949c:	461a      	mov	r2, r3
 800949e:	2300      	movs	r3, #0
 80094a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80094a2:	693b      	ldr	r3, [r7, #16]
 80094a4:	015a      	lsls	r2, r3, #5
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	4413      	add	r3, r2
 80094aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094ae:	461a      	mov	r2, r3
 80094b0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80094b4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	3301      	adds	r3, #1
 80094ba:	613b      	str	r3, [r7, #16]
 80094bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094be:	693a      	ldr	r2, [r7, #16]
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d3b7      	bcc.n	8009434 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094ca:	691b      	ldr	r3, [r3, #16]
 80094cc:	68fa      	ldr	r2, [r7, #12]
 80094ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80094d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80094d6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2200      	movs	r2, #0
 80094dc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80094e4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80094e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d105      	bne.n	80094f8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	699b      	ldr	r3, [r3, #24]
 80094f0:	f043 0210 	orr.w	r2, r3, #16
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	699a      	ldr	r2, [r3, #24]
 80094fc:	4b0f      	ldr	r3, [pc, #60]	; (800953c <USB_DevInit+0x2c4>)
 80094fe:	4313      	orrs	r3, r2
 8009500:	687a      	ldr	r2, [r7, #4]
 8009502:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009506:	2b00      	cmp	r3, #0
 8009508:	d005      	beq.n	8009516 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	699b      	ldr	r3, [r3, #24]
 800950e:	f043 0208 	orr.w	r2, r3, #8
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009516:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009518:	2b01      	cmp	r3, #1
 800951a:	d107      	bne.n	800952c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	699b      	ldr	r3, [r3, #24]
 8009520:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009524:	f043 0304 	orr.w	r3, r3, #4
 8009528:	687a      	ldr	r2, [r7, #4]
 800952a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800952c:	7dfb      	ldrb	r3, [r7, #23]
}
 800952e:	4618      	mov	r0, r3
 8009530:	3718      	adds	r7, #24
 8009532:	46bd      	mov	sp, r7
 8009534:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009538:	b004      	add	sp, #16
 800953a:	4770      	bx	lr
 800953c:	803c3800 	.word	0x803c3800

08009540 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009540:	b480      	push	{r7}
 8009542:	b085      	sub	sp, #20
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
 8009548:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800954a:	2300      	movs	r3, #0
 800954c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	019b      	lsls	r3, r3, #6
 8009552:	f043 0220 	orr.w	r2, r3, #32
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	3301      	adds	r3, #1
 800955e:	60fb      	str	r3, [r7, #12]
 8009560:	4a08      	ldr	r2, [pc, #32]	; (8009584 <USB_FlushTxFifo+0x44>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d901      	bls.n	800956a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8009566:	2303      	movs	r3, #3
 8009568:	e006      	b.n	8009578 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	691b      	ldr	r3, [r3, #16]
 800956e:	f003 0320 	and.w	r3, r3, #32
 8009572:	2b20      	cmp	r3, #32
 8009574:	d0f1      	beq.n	800955a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009576:	2300      	movs	r3, #0
}
 8009578:	4618      	mov	r0, r3
 800957a:	3714      	adds	r7, #20
 800957c:	46bd      	mov	sp, r7
 800957e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009582:	4770      	bx	lr
 8009584:	00030d40 	.word	0x00030d40

08009588 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009588:	b480      	push	{r7}
 800958a:	b085      	sub	sp, #20
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009590:	2300      	movs	r3, #0
 8009592:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2210      	movs	r2, #16
 8009598:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	3301      	adds	r3, #1
 800959e:	60fb      	str	r3, [r7, #12]
 80095a0:	4a08      	ldr	r2, [pc, #32]	; (80095c4 <USB_FlushRxFifo+0x3c>)
 80095a2:	4293      	cmp	r3, r2
 80095a4:	d901      	bls.n	80095aa <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80095a6:	2303      	movs	r3, #3
 80095a8:	e006      	b.n	80095b8 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	691b      	ldr	r3, [r3, #16]
 80095ae:	f003 0310 	and.w	r3, r3, #16
 80095b2:	2b10      	cmp	r3, #16
 80095b4:	d0f1      	beq.n	800959a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80095b6:	2300      	movs	r3, #0
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	3714      	adds	r7, #20
 80095bc:	46bd      	mov	sp, r7
 80095be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c2:	4770      	bx	lr
 80095c4:	00030d40 	.word	0x00030d40

080095c8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b085      	sub	sp, #20
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
 80095d0:	460b      	mov	r3, r1
 80095d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095de:	681a      	ldr	r2, [r3, #0]
 80095e0:	78fb      	ldrb	r3, [r7, #3]
 80095e2:	68f9      	ldr	r1, [r7, #12]
 80095e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80095e8:	4313      	orrs	r3, r2
 80095ea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80095ec:	2300      	movs	r3, #0
}
 80095ee:	4618      	mov	r0, r3
 80095f0:	3714      	adds	r7, #20
 80095f2:	46bd      	mov	sp, r7
 80095f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f8:	4770      	bx	lr

080095fa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80095fa:	b480      	push	{r7}
 80095fc:	b087      	sub	sp, #28
 80095fe:	af00      	add	r7, sp, #0
 8009600:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009606:	693b      	ldr	r3, [r7, #16]
 8009608:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800960c:	689b      	ldr	r3, [r3, #8]
 800960e:	f003 0306 	and.w	r3, r3, #6
 8009612:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d102      	bne.n	8009620 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800961a:	2300      	movs	r3, #0
 800961c:	75fb      	strb	r3, [r7, #23]
 800961e:	e00a      	b.n	8009636 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	2b02      	cmp	r3, #2
 8009624:	d002      	beq.n	800962c <USB_GetDevSpeed+0x32>
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2b06      	cmp	r3, #6
 800962a:	d102      	bne.n	8009632 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800962c:	2302      	movs	r3, #2
 800962e:	75fb      	strb	r3, [r7, #23]
 8009630:	e001      	b.n	8009636 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009632:	230f      	movs	r3, #15
 8009634:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009636:	7dfb      	ldrb	r3, [r7, #23]
}
 8009638:	4618      	mov	r0, r3
 800963a:	371c      	adds	r7, #28
 800963c:	46bd      	mov	sp, r7
 800963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009642:	4770      	bx	lr

08009644 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009644:	b480      	push	{r7}
 8009646:	b085      	sub	sp, #20
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
 800964c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	781b      	ldrb	r3, [r3, #0]
 8009656:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	785b      	ldrb	r3, [r3, #1]
 800965c:	2b01      	cmp	r3, #1
 800965e:	d13a      	bne.n	80096d6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009666:	69da      	ldr	r2, [r3, #28]
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	781b      	ldrb	r3, [r3, #0]
 800966c:	f003 030f 	and.w	r3, r3, #15
 8009670:	2101      	movs	r1, #1
 8009672:	fa01 f303 	lsl.w	r3, r1, r3
 8009676:	b29b      	uxth	r3, r3
 8009678:	68f9      	ldr	r1, [r7, #12]
 800967a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800967e:	4313      	orrs	r3, r2
 8009680:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	015a      	lsls	r2, r3, #5
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	4413      	add	r3, r2
 800968a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009694:	2b00      	cmp	r3, #0
 8009696:	d155      	bne.n	8009744 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	015a      	lsls	r2, r3, #5
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	4413      	add	r3, r2
 80096a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096a4:	681a      	ldr	r2, [r3, #0]
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	689b      	ldr	r3, [r3, #8]
 80096aa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	78db      	ldrb	r3, [r3, #3]
 80096b2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80096b4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	059b      	lsls	r3, r3, #22
 80096ba:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80096bc:	4313      	orrs	r3, r2
 80096be:	68ba      	ldr	r2, [r7, #8]
 80096c0:	0151      	lsls	r1, r2, #5
 80096c2:	68fa      	ldr	r2, [r7, #12]
 80096c4:	440a      	add	r2, r1
 80096c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80096ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096d2:	6013      	str	r3, [r2, #0]
 80096d4:	e036      	b.n	8009744 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096dc:	69da      	ldr	r2, [r3, #28]
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	781b      	ldrb	r3, [r3, #0]
 80096e2:	f003 030f 	and.w	r3, r3, #15
 80096e6:	2101      	movs	r1, #1
 80096e8:	fa01 f303 	lsl.w	r3, r1, r3
 80096ec:	041b      	lsls	r3, r3, #16
 80096ee:	68f9      	ldr	r1, [r7, #12]
 80096f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80096f4:	4313      	orrs	r3, r2
 80096f6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	015a      	lsls	r2, r3, #5
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	4413      	add	r3, r2
 8009700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800970a:	2b00      	cmp	r3, #0
 800970c:	d11a      	bne.n	8009744 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800970e:	68bb      	ldr	r3, [r7, #8]
 8009710:	015a      	lsls	r2, r3, #5
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	4413      	add	r3, r2
 8009716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800971a:	681a      	ldr	r2, [r3, #0]
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	689b      	ldr	r3, [r3, #8]
 8009720:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	78db      	ldrb	r3, [r3, #3]
 8009728:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800972a:	430b      	orrs	r3, r1
 800972c:	4313      	orrs	r3, r2
 800972e:	68ba      	ldr	r2, [r7, #8]
 8009730:	0151      	lsls	r1, r2, #5
 8009732:	68fa      	ldr	r2, [r7, #12]
 8009734:	440a      	add	r2, r1
 8009736:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800973a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800973e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009742:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009744:	2300      	movs	r3, #0
}
 8009746:	4618      	mov	r0, r3
 8009748:	3714      	adds	r7, #20
 800974a:	46bd      	mov	sp, r7
 800974c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009750:	4770      	bx	lr
	...

08009754 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009754:	b480      	push	{r7}
 8009756:	b085      	sub	sp, #20
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	781b      	ldrb	r3, [r3, #0]
 8009766:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	785b      	ldrb	r3, [r3, #1]
 800976c:	2b01      	cmp	r3, #1
 800976e:	d161      	bne.n	8009834 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	015a      	lsls	r2, r3, #5
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	4413      	add	r3, r2
 8009778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009782:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009786:	d11f      	bne.n	80097c8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	015a      	lsls	r2, r3, #5
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	4413      	add	r3, r2
 8009790:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	68ba      	ldr	r2, [r7, #8]
 8009798:	0151      	lsls	r1, r2, #5
 800979a:	68fa      	ldr	r2, [r7, #12]
 800979c:	440a      	add	r2, r1
 800979e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80097a6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	015a      	lsls	r2, r3, #5
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	4413      	add	r3, r2
 80097b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	68ba      	ldr	r2, [r7, #8]
 80097b8:	0151      	lsls	r1, r2, #5
 80097ba:	68fa      	ldr	r2, [r7, #12]
 80097bc:	440a      	add	r2, r1
 80097be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80097c6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	781b      	ldrb	r3, [r3, #0]
 80097d4:	f003 030f 	and.w	r3, r3, #15
 80097d8:	2101      	movs	r1, #1
 80097da:	fa01 f303 	lsl.w	r3, r1, r3
 80097de:	b29b      	uxth	r3, r3
 80097e0:	43db      	mvns	r3, r3
 80097e2:	68f9      	ldr	r1, [r7, #12]
 80097e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80097e8:	4013      	ands	r3, r2
 80097ea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097f2:	69da      	ldr	r2, [r3, #28]
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	781b      	ldrb	r3, [r3, #0]
 80097f8:	f003 030f 	and.w	r3, r3, #15
 80097fc:	2101      	movs	r1, #1
 80097fe:	fa01 f303 	lsl.w	r3, r1, r3
 8009802:	b29b      	uxth	r3, r3
 8009804:	43db      	mvns	r3, r3
 8009806:	68f9      	ldr	r1, [r7, #12]
 8009808:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800980c:	4013      	ands	r3, r2
 800980e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	015a      	lsls	r2, r3, #5
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	4413      	add	r3, r2
 8009818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800981c:	681a      	ldr	r2, [r3, #0]
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	0159      	lsls	r1, r3, #5
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	440b      	add	r3, r1
 8009826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800982a:	4619      	mov	r1, r3
 800982c:	4b35      	ldr	r3, [pc, #212]	; (8009904 <USB_DeactivateEndpoint+0x1b0>)
 800982e:	4013      	ands	r3, r2
 8009830:	600b      	str	r3, [r1, #0]
 8009832:	e060      	b.n	80098f6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	015a      	lsls	r2, r3, #5
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	4413      	add	r3, r2
 800983c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009846:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800984a:	d11f      	bne.n	800988c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	015a      	lsls	r2, r3, #5
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	4413      	add	r3, r2
 8009854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	68ba      	ldr	r2, [r7, #8]
 800985c:	0151      	lsls	r1, r2, #5
 800985e:	68fa      	ldr	r2, [r7, #12]
 8009860:	440a      	add	r2, r1
 8009862:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009866:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800986a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	015a      	lsls	r2, r3, #5
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	4413      	add	r3, r2
 8009874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	68ba      	ldr	r2, [r7, #8]
 800987c:	0151      	lsls	r1, r2, #5
 800987e:	68fa      	ldr	r2, [r7, #12]
 8009880:	440a      	add	r2, r1
 8009882:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009886:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800988a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009892:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	781b      	ldrb	r3, [r3, #0]
 8009898:	f003 030f 	and.w	r3, r3, #15
 800989c:	2101      	movs	r1, #1
 800989e:	fa01 f303 	lsl.w	r3, r1, r3
 80098a2:	041b      	lsls	r3, r3, #16
 80098a4:	43db      	mvns	r3, r3
 80098a6:	68f9      	ldr	r1, [r7, #12]
 80098a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80098ac:	4013      	ands	r3, r2
 80098ae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098b6:	69da      	ldr	r2, [r3, #28]
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	781b      	ldrb	r3, [r3, #0]
 80098bc:	f003 030f 	and.w	r3, r3, #15
 80098c0:	2101      	movs	r1, #1
 80098c2:	fa01 f303 	lsl.w	r3, r1, r3
 80098c6:	041b      	lsls	r3, r3, #16
 80098c8:	43db      	mvns	r3, r3
 80098ca:	68f9      	ldr	r1, [r7, #12]
 80098cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80098d0:	4013      	ands	r3, r2
 80098d2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	015a      	lsls	r2, r3, #5
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	4413      	add	r3, r2
 80098dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098e0:	681a      	ldr	r2, [r3, #0]
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	0159      	lsls	r1, r3, #5
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	440b      	add	r3, r1
 80098ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098ee:	4619      	mov	r1, r3
 80098f0:	4b05      	ldr	r3, [pc, #20]	; (8009908 <USB_DeactivateEndpoint+0x1b4>)
 80098f2:	4013      	ands	r3, r2
 80098f4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80098f6:	2300      	movs	r3, #0
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	3714      	adds	r7, #20
 80098fc:	46bd      	mov	sp, r7
 80098fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009902:	4770      	bx	lr
 8009904:	ec337800 	.word	0xec337800
 8009908:	eff37800 	.word	0xeff37800

0800990c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b08a      	sub	sp, #40	; 0x28
 8009910:	af02      	add	r7, sp, #8
 8009912:	60f8      	str	r0, [r7, #12]
 8009914:	60b9      	str	r1, [r7, #8]
 8009916:	4613      	mov	r3, r2
 8009918:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	781b      	ldrb	r3, [r3, #0]
 8009922:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	785b      	ldrb	r3, [r3, #1]
 8009928:	2b01      	cmp	r3, #1
 800992a:	f040 815c 	bne.w	8009be6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	695b      	ldr	r3, [r3, #20]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d132      	bne.n	800999c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009936:	69bb      	ldr	r3, [r7, #24]
 8009938:	015a      	lsls	r2, r3, #5
 800993a:	69fb      	ldr	r3, [r7, #28]
 800993c:	4413      	add	r3, r2
 800993e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009942:	691b      	ldr	r3, [r3, #16]
 8009944:	69ba      	ldr	r2, [r7, #24]
 8009946:	0151      	lsls	r1, r2, #5
 8009948:	69fa      	ldr	r2, [r7, #28]
 800994a:	440a      	add	r2, r1
 800994c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009950:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009954:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009958:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800995a:	69bb      	ldr	r3, [r7, #24]
 800995c:	015a      	lsls	r2, r3, #5
 800995e:	69fb      	ldr	r3, [r7, #28]
 8009960:	4413      	add	r3, r2
 8009962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009966:	691b      	ldr	r3, [r3, #16]
 8009968:	69ba      	ldr	r2, [r7, #24]
 800996a:	0151      	lsls	r1, r2, #5
 800996c:	69fa      	ldr	r2, [r7, #28]
 800996e:	440a      	add	r2, r1
 8009970:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009974:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009978:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800997a:	69bb      	ldr	r3, [r7, #24]
 800997c:	015a      	lsls	r2, r3, #5
 800997e:	69fb      	ldr	r3, [r7, #28]
 8009980:	4413      	add	r3, r2
 8009982:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009986:	691b      	ldr	r3, [r3, #16]
 8009988:	69ba      	ldr	r2, [r7, #24]
 800998a:	0151      	lsls	r1, r2, #5
 800998c:	69fa      	ldr	r2, [r7, #28]
 800998e:	440a      	add	r2, r1
 8009990:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009994:	0cdb      	lsrs	r3, r3, #19
 8009996:	04db      	lsls	r3, r3, #19
 8009998:	6113      	str	r3, [r2, #16]
 800999a:	e074      	b.n	8009a86 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800999c:	69bb      	ldr	r3, [r7, #24]
 800999e:	015a      	lsls	r2, r3, #5
 80099a0:	69fb      	ldr	r3, [r7, #28]
 80099a2:	4413      	add	r3, r2
 80099a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099a8:	691b      	ldr	r3, [r3, #16]
 80099aa:	69ba      	ldr	r2, [r7, #24]
 80099ac:	0151      	lsls	r1, r2, #5
 80099ae:	69fa      	ldr	r2, [r7, #28]
 80099b0:	440a      	add	r2, r1
 80099b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099b6:	0cdb      	lsrs	r3, r3, #19
 80099b8:	04db      	lsls	r3, r3, #19
 80099ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80099bc:	69bb      	ldr	r3, [r7, #24]
 80099be:	015a      	lsls	r2, r3, #5
 80099c0:	69fb      	ldr	r3, [r7, #28]
 80099c2:	4413      	add	r3, r2
 80099c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099c8:	691b      	ldr	r3, [r3, #16]
 80099ca:	69ba      	ldr	r2, [r7, #24]
 80099cc:	0151      	lsls	r1, r2, #5
 80099ce:	69fa      	ldr	r2, [r7, #28]
 80099d0:	440a      	add	r2, r1
 80099d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099d6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80099da:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80099de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80099e0:	69bb      	ldr	r3, [r7, #24]
 80099e2:	015a      	lsls	r2, r3, #5
 80099e4:	69fb      	ldr	r3, [r7, #28]
 80099e6:	4413      	add	r3, r2
 80099e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099ec:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	6959      	ldr	r1, [r3, #20]
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	689b      	ldr	r3, [r3, #8]
 80099f6:	440b      	add	r3, r1
 80099f8:	1e59      	subs	r1, r3, #1
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	689b      	ldr	r3, [r3, #8]
 80099fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8009a02:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009a04:	4b9d      	ldr	r3, [pc, #628]	; (8009c7c <USB_EPStartXfer+0x370>)
 8009a06:	400b      	ands	r3, r1
 8009a08:	69b9      	ldr	r1, [r7, #24]
 8009a0a:	0148      	lsls	r0, r1, #5
 8009a0c:	69f9      	ldr	r1, [r7, #28]
 8009a0e:	4401      	add	r1, r0
 8009a10:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009a14:	4313      	orrs	r3, r2
 8009a16:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009a18:	69bb      	ldr	r3, [r7, #24]
 8009a1a:	015a      	lsls	r2, r3, #5
 8009a1c:	69fb      	ldr	r3, [r7, #28]
 8009a1e:	4413      	add	r3, r2
 8009a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a24:	691a      	ldr	r2, [r3, #16]
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	695b      	ldr	r3, [r3, #20]
 8009a2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a2e:	69b9      	ldr	r1, [r7, #24]
 8009a30:	0148      	lsls	r0, r1, #5
 8009a32:	69f9      	ldr	r1, [r7, #28]
 8009a34:	4401      	add	r1, r0
 8009a36:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	78db      	ldrb	r3, [r3, #3]
 8009a42:	2b01      	cmp	r3, #1
 8009a44:	d11f      	bne.n	8009a86 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009a46:	69bb      	ldr	r3, [r7, #24]
 8009a48:	015a      	lsls	r2, r3, #5
 8009a4a:	69fb      	ldr	r3, [r7, #28]
 8009a4c:	4413      	add	r3, r2
 8009a4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a52:	691b      	ldr	r3, [r3, #16]
 8009a54:	69ba      	ldr	r2, [r7, #24]
 8009a56:	0151      	lsls	r1, r2, #5
 8009a58:	69fa      	ldr	r2, [r7, #28]
 8009a5a:	440a      	add	r2, r1
 8009a5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a60:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009a64:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009a66:	69bb      	ldr	r3, [r7, #24]
 8009a68:	015a      	lsls	r2, r3, #5
 8009a6a:	69fb      	ldr	r3, [r7, #28]
 8009a6c:	4413      	add	r3, r2
 8009a6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a72:	691b      	ldr	r3, [r3, #16]
 8009a74:	69ba      	ldr	r2, [r7, #24]
 8009a76:	0151      	lsls	r1, r2, #5
 8009a78:	69fa      	ldr	r2, [r7, #28]
 8009a7a:	440a      	add	r2, r1
 8009a7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a80:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009a84:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009a86:	79fb      	ldrb	r3, [r7, #7]
 8009a88:	2b01      	cmp	r3, #1
 8009a8a:	d14b      	bne.n	8009b24 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	691b      	ldr	r3, [r3, #16]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d009      	beq.n	8009aa8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009a94:	69bb      	ldr	r3, [r7, #24]
 8009a96:	015a      	lsls	r2, r3, #5
 8009a98:	69fb      	ldr	r3, [r7, #28]
 8009a9a:	4413      	add	r3, r2
 8009a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009aa0:	461a      	mov	r2, r3
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	691b      	ldr	r3, [r3, #16]
 8009aa6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	78db      	ldrb	r3, [r3, #3]
 8009aac:	2b01      	cmp	r3, #1
 8009aae:	d128      	bne.n	8009b02 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009ab0:	69fb      	ldr	r3, [r7, #28]
 8009ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ab6:	689b      	ldr	r3, [r3, #8]
 8009ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d110      	bne.n	8009ae2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009ac0:	69bb      	ldr	r3, [r7, #24]
 8009ac2:	015a      	lsls	r2, r3, #5
 8009ac4:	69fb      	ldr	r3, [r7, #28]
 8009ac6:	4413      	add	r3, r2
 8009ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	69ba      	ldr	r2, [r7, #24]
 8009ad0:	0151      	lsls	r1, r2, #5
 8009ad2:	69fa      	ldr	r2, [r7, #28]
 8009ad4:	440a      	add	r2, r1
 8009ad6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ada:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009ade:	6013      	str	r3, [r2, #0]
 8009ae0:	e00f      	b.n	8009b02 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009ae2:	69bb      	ldr	r3, [r7, #24]
 8009ae4:	015a      	lsls	r2, r3, #5
 8009ae6:	69fb      	ldr	r3, [r7, #28]
 8009ae8:	4413      	add	r3, r2
 8009aea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	69ba      	ldr	r2, [r7, #24]
 8009af2:	0151      	lsls	r1, r2, #5
 8009af4:	69fa      	ldr	r2, [r7, #28]
 8009af6:	440a      	add	r2, r1
 8009af8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b00:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009b02:	69bb      	ldr	r3, [r7, #24]
 8009b04:	015a      	lsls	r2, r3, #5
 8009b06:	69fb      	ldr	r3, [r7, #28]
 8009b08:	4413      	add	r3, r2
 8009b0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	69ba      	ldr	r2, [r7, #24]
 8009b12:	0151      	lsls	r1, r2, #5
 8009b14:	69fa      	ldr	r2, [r7, #28]
 8009b16:	440a      	add	r2, r1
 8009b18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b1c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009b20:	6013      	str	r3, [r2, #0]
 8009b22:	e12f      	b.n	8009d84 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009b24:	69bb      	ldr	r3, [r7, #24]
 8009b26:	015a      	lsls	r2, r3, #5
 8009b28:	69fb      	ldr	r3, [r7, #28]
 8009b2a:	4413      	add	r3, r2
 8009b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	69ba      	ldr	r2, [r7, #24]
 8009b34:	0151      	lsls	r1, r2, #5
 8009b36:	69fa      	ldr	r2, [r7, #28]
 8009b38:	440a      	add	r2, r1
 8009b3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b3e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009b42:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	78db      	ldrb	r3, [r3, #3]
 8009b48:	2b01      	cmp	r3, #1
 8009b4a:	d015      	beq.n	8009b78 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	695b      	ldr	r3, [r3, #20]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	f000 8117 	beq.w	8009d84 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009b56:	69fb      	ldr	r3, [r7, #28]
 8009b58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b5e:	68bb      	ldr	r3, [r7, #8]
 8009b60:	781b      	ldrb	r3, [r3, #0]
 8009b62:	f003 030f 	and.w	r3, r3, #15
 8009b66:	2101      	movs	r1, #1
 8009b68:	fa01 f303 	lsl.w	r3, r1, r3
 8009b6c:	69f9      	ldr	r1, [r7, #28]
 8009b6e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009b72:	4313      	orrs	r3, r2
 8009b74:	634b      	str	r3, [r1, #52]	; 0x34
 8009b76:	e105      	b.n	8009d84 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009b78:	69fb      	ldr	r3, [r7, #28]
 8009b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b7e:	689b      	ldr	r3, [r3, #8]
 8009b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d110      	bne.n	8009baa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009b88:	69bb      	ldr	r3, [r7, #24]
 8009b8a:	015a      	lsls	r2, r3, #5
 8009b8c:	69fb      	ldr	r3, [r7, #28]
 8009b8e:	4413      	add	r3, r2
 8009b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	69ba      	ldr	r2, [r7, #24]
 8009b98:	0151      	lsls	r1, r2, #5
 8009b9a:	69fa      	ldr	r2, [r7, #28]
 8009b9c:	440a      	add	r2, r1
 8009b9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ba2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009ba6:	6013      	str	r3, [r2, #0]
 8009ba8:	e00f      	b.n	8009bca <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009baa:	69bb      	ldr	r3, [r7, #24]
 8009bac:	015a      	lsls	r2, r3, #5
 8009bae:	69fb      	ldr	r3, [r7, #28]
 8009bb0:	4413      	add	r3, r2
 8009bb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	69ba      	ldr	r2, [r7, #24]
 8009bba:	0151      	lsls	r1, r2, #5
 8009bbc:	69fa      	ldr	r2, [r7, #28]
 8009bbe:	440a      	add	r2, r1
 8009bc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009bc8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	68d9      	ldr	r1, [r3, #12]
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	781a      	ldrb	r2, [r3, #0]
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	695b      	ldr	r3, [r3, #20]
 8009bd6:	b298      	uxth	r0, r3
 8009bd8:	79fb      	ldrb	r3, [r7, #7]
 8009bda:	9300      	str	r3, [sp, #0]
 8009bdc:	4603      	mov	r3, r0
 8009bde:	68f8      	ldr	r0, [r7, #12]
 8009be0:	f000 fa2b 	bl	800a03a <USB_WritePacket>
 8009be4:	e0ce      	b.n	8009d84 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009be6:	69bb      	ldr	r3, [r7, #24]
 8009be8:	015a      	lsls	r2, r3, #5
 8009bea:	69fb      	ldr	r3, [r7, #28]
 8009bec:	4413      	add	r3, r2
 8009bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bf2:	691b      	ldr	r3, [r3, #16]
 8009bf4:	69ba      	ldr	r2, [r7, #24]
 8009bf6:	0151      	lsls	r1, r2, #5
 8009bf8:	69fa      	ldr	r2, [r7, #28]
 8009bfa:	440a      	add	r2, r1
 8009bfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c00:	0cdb      	lsrs	r3, r3, #19
 8009c02:	04db      	lsls	r3, r3, #19
 8009c04:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009c06:	69bb      	ldr	r3, [r7, #24]
 8009c08:	015a      	lsls	r2, r3, #5
 8009c0a:	69fb      	ldr	r3, [r7, #28]
 8009c0c:	4413      	add	r3, r2
 8009c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c12:	691b      	ldr	r3, [r3, #16]
 8009c14:	69ba      	ldr	r2, [r7, #24]
 8009c16:	0151      	lsls	r1, r2, #5
 8009c18:	69fa      	ldr	r2, [r7, #28]
 8009c1a:	440a      	add	r2, r1
 8009c1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c20:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009c24:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009c28:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	695b      	ldr	r3, [r3, #20]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d126      	bne.n	8009c80 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009c32:	69bb      	ldr	r3, [r7, #24]
 8009c34:	015a      	lsls	r2, r3, #5
 8009c36:	69fb      	ldr	r3, [r7, #28]
 8009c38:	4413      	add	r3, r2
 8009c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c3e:	691a      	ldr	r2, [r3, #16]
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	689b      	ldr	r3, [r3, #8]
 8009c44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c48:	69b9      	ldr	r1, [r7, #24]
 8009c4a:	0148      	lsls	r0, r1, #5
 8009c4c:	69f9      	ldr	r1, [r7, #28]
 8009c4e:	4401      	add	r1, r0
 8009c50:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009c54:	4313      	orrs	r3, r2
 8009c56:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009c58:	69bb      	ldr	r3, [r7, #24]
 8009c5a:	015a      	lsls	r2, r3, #5
 8009c5c:	69fb      	ldr	r3, [r7, #28]
 8009c5e:	4413      	add	r3, r2
 8009c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c64:	691b      	ldr	r3, [r3, #16]
 8009c66:	69ba      	ldr	r2, [r7, #24]
 8009c68:	0151      	lsls	r1, r2, #5
 8009c6a:	69fa      	ldr	r2, [r7, #28]
 8009c6c:	440a      	add	r2, r1
 8009c6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009c76:	6113      	str	r3, [r2, #16]
 8009c78:	e036      	b.n	8009ce8 <USB_EPStartXfer+0x3dc>
 8009c7a:	bf00      	nop
 8009c7c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	695a      	ldr	r2, [r3, #20]
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	689b      	ldr	r3, [r3, #8]
 8009c88:	4413      	add	r3, r2
 8009c8a:	1e5a      	subs	r2, r3, #1
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	689b      	ldr	r3, [r3, #8]
 8009c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c94:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009c96:	69bb      	ldr	r3, [r7, #24]
 8009c98:	015a      	lsls	r2, r3, #5
 8009c9a:	69fb      	ldr	r3, [r7, #28]
 8009c9c:	4413      	add	r3, r2
 8009c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ca2:	691a      	ldr	r2, [r3, #16]
 8009ca4:	8afb      	ldrh	r3, [r7, #22]
 8009ca6:	04d9      	lsls	r1, r3, #19
 8009ca8:	4b39      	ldr	r3, [pc, #228]	; (8009d90 <USB_EPStartXfer+0x484>)
 8009caa:	400b      	ands	r3, r1
 8009cac:	69b9      	ldr	r1, [r7, #24]
 8009cae:	0148      	lsls	r0, r1, #5
 8009cb0:	69f9      	ldr	r1, [r7, #28]
 8009cb2:	4401      	add	r1, r0
 8009cb4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009cb8:	4313      	orrs	r3, r2
 8009cba:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8009cbc:	69bb      	ldr	r3, [r7, #24]
 8009cbe:	015a      	lsls	r2, r3, #5
 8009cc0:	69fb      	ldr	r3, [r7, #28]
 8009cc2:	4413      	add	r3, r2
 8009cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cc8:	691a      	ldr	r2, [r3, #16]
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	689b      	ldr	r3, [r3, #8]
 8009cce:	8af9      	ldrh	r1, [r7, #22]
 8009cd0:	fb01 f303 	mul.w	r3, r1, r3
 8009cd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009cd8:	69b9      	ldr	r1, [r7, #24]
 8009cda:	0148      	lsls	r0, r1, #5
 8009cdc:	69f9      	ldr	r1, [r7, #28]
 8009cde:	4401      	add	r1, r0
 8009ce0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009ce4:	4313      	orrs	r3, r2
 8009ce6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009ce8:	79fb      	ldrb	r3, [r7, #7]
 8009cea:	2b01      	cmp	r3, #1
 8009cec:	d10d      	bne.n	8009d0a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	68db      	ldr	r3, [r3, #12]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d009      	beq.n	8009d0a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	68d9      	ldr	r1, [r3, #12]
 8009cfa:	69bb      	ldr	r3, [r7, #24]
 8009cfc:	015a      	lsls	r2, r3, #5
 8009cfe:	69fb      	ldr	r3, [r7, #28]
 8009d00:	4413      	add	r3, r2
 8009d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d06:	460a      	mov	r2, r1
 8009d08:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	78db      	ldrb	r3, [r3, #3]
 8009d0e:	2b01      	cmp	r3, #1
 8009d10:	d128      	bne.n	8009d64 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009d12:	69fb      	ldr	r3, [r7, #28]
 8009d14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d18:	689b      	ldr	r3, [r3, #8]
 8009d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d110      	bne.n	8009d44 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009d22:	69bb      	ldr	r3, [r7, #24]
 8009d24:	015a      	lsls	r2, r3, #5
 8009d26:	69fb      	ldr	r3, [r7, #28]
 8009d28:	4413      	add	r3, r2
 8009d2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	69ba      	ldr	r2, [r7, #24]
 8009d32:	0151      	lsls	r1, r2, #5
 8009d34:	69fa      	ldr	r2, [r7, #28]
 8009d36:	440a      	add	r2, r1
 8009d38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d3c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009d40:	6013      	str	r3, [r2, #0]
 8009d42:	e00f      	b.n	8009d64 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009d44:	69bb      	ldr	r3, [r7, #24]
 8009d46:	015a      	lsls	r2, r3, #5
 8009d48:	69fb      	ldr	r3, [r7, #28]
 8009d4a:	4413      	add	r3, r2
 8009d4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	69ba      	ldr	r2, [r7, #24]
 8009d54:	0151      	lsls	r1, r2, #5
 8009d56:	69fa      	ldr	r2, [r7, #28]
 8009d58:	440a      	add	r2, r1
 8009d5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d62:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009d64:	69bb      	ldr	r3, [r7, #24]
 8009d66:	015a      	lsls	r2, r3, #5
 8009d68:	69fb      	ldr	r3, [r7, #28]
 8009d6a:	4413      	add	r3, r2
 8009d6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	69ba      	ldr	r2, [r7, #24]
 8009d74:	0151      	lsls	r1, r2, #5
 8009d76:	69fa      	ldr	r2, [r7, #28]
 8009d78:	440a      	add	r2, r1
 8009d7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d7e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009d82:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009d84:	2300      	movs	r3, #0
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3720      	adds	r7, #32
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}
 8009d8e:	bf00      	nop
 8009d90:	1ff80000 	.word	0x1ff80000

08009d94 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009d94:	b480      	push	{r7}
 8009d96:	b087      	sub	sp, #28
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	60f8      	str	r0, [r7, #12]
 8009d9c:	60b9      	str	r1, [r7, #8]
 8009d9e:	4613      	mov	r3, r2
 8009da0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	781b      	ldrb	r3, [r3, #0]
 8009daa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	785b      	ldrb	r3, [r3, #1]
 8009db0:	2b01      	cmp	r3, #1
 8009db2:	f040 80cd 	bne.w	8009f50 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	695b      	ldr	r3, [r3, #20]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d132      	bne.n	8009e24 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009dbe:	693b      	ldr	r3, [r7, #16]
 8009dc0:	015a      	lsls	r2, r3, #5
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	4413      	add	r3, r2
 8009dc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dca:	691b      	ldr	r3, [r3, #16]
 8009dcc:	693a      	ldr	r2, [r7, #16]
 8009dce:	0151      	lsls	r1, r2, #5
 8009dd0:	697a      	ldr	r2, [r7, #20]
 8009dd2:	440a      	add	r2, r1
 8009dd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009dd8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009ddc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009de0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009de2:	693b      	ldr	r3, [r7, #16]
 8009de4:	015a      	lsls	r2, r3, #5
 8009de6:	697b      	ldr	r3, [r7, #20]
 8009de8:	4413      	add	r3, r2
 8009dea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dee:	691b      	ldr	r3, [r3, #16]
 8009df0:	693a      	ldr	r2, [r7, #16]
 8009df2:	0151      	lsls	r1, r2, #5
 8009df4:	697a      	ldr	r2, [r7, #20]
 8009df6:	440a      	add	r2, r1
 8009df8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009dfc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009e00:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	015a      	lsls	r2, r3, #5
 8009e06:	697b      	ldr	r3, [r7, #20]
 8009e08:	4413      	add	r3, r2
 8009e0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e0e:	691b      	ldr	r3, [r3, #16]
 8009e10:	693a      	ldr	r2, [r7, #16]
 8009e12:	0151      	lsls	r1, r2, #5
 8009e14:	697a      	ldr	r2, [r7, #20]
 8009e16:	440a      	add	r2, r1
 8009e18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e1c:	0cdb      	lsrs	r3, r3, #19
 8009e1e:	04db      	lsls	r3, r3, #19
 8009e20:	6113      	str	r3, [r2, #16]
 8009e22:	e04e      	b.n	8009ec2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009e24:	693b      	ldr	r3, [r7, #16]
 8009e26:	015a      	lsls	r2, r3, #5
 8009e28:	697b      	ldr	r3, [r7, #20]
 8009e2a:	4413      	add	r3, r2
 8009e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e30:	691b      	ldr	r3, [r3, #16]
 8009e32:	693a      	ldr	r2, [r7, #16]
 8009e34:	0151      	lsls	r1, r2, #5
 8009e36:	697a      	ldr	r2, [r7, #20]
 8009e38:	440a      	add	r2, r1
 8009e3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e3e:	0cdb      	lsrs	r3, r3, #19
 8009e40:	04db      	lsls	r3, r3, #19
 8009e42:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009e44:	693b      	ldr	r3, [r7, #16]
 8009e46:	015a      	lsls	r2, r3, #5
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	4413      	add	r3, r2
 8009e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e50:	691b      	ldr	r3, [r3, #16]
 8009e52:	693a      	ldr	r2, [r7, #16]
 8009e54:	0151      	lsls	r1, r2, #5
 8009e56:	697a      	ldr	r2, [r7, #20]
 8009e58:	440a      	add	r2, r1
 8009e5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e5e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009e62:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009e66:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	695a      	ldr	r2, [r3, #20]
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	689b      	ldr	r3, [r3, #8]
 8009e70:	429a      	cmp	r2, r3
 8009e72:	d903      	bls.n	8009e7c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	689a      	ldr	r2, [r3, #8]
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009e7c:	693b      	ldr	r3, [r7, #16]
 8009e7e:	015a      	lsls	r2, r3, #5
 8009e80:	697b      	ldr	r3, [r7, #20]
 8009e82:	4413      	add	r3, r2
 8009e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e88:	691b      	ldr	r3, [r3, #16]
 8009e8a:	693a      	ldr	r2, [r7, #16]
 8009e8c:	0151      	lsls	r1, r2, #5
 8009e8e:	697a      	ldr	r2, [r7, #20]
 8009e90:	440a      	add	r2, r1
 8009e92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e96:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009e9a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009e9c:	693b      	ldr	r3, [r7, #16]
 8009e9e:	015a      	lsls	r2, r3, #5
 8009ea0:	697b      	ldr	r3, [r7, #20]
 8009ea2:	4413      	add	r3, r2
 8009ea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ea8:	691a      	ldr	r2, [r3, #16]
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	695b      	ldr	r3, [r3, #20]
 8009eae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009eb2:	6939      	ldr	r1, [r7, #16]
 8009eb4:	0148      	lsls	r0, r1, #5
 8009eb6:	6979      	ldr	r1, [r7, #20]
 8009eb8:	4401      	add	r1, r0
 8009eba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009ebe:	4313      	orrs	r3, r2
 8009ec0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009ec2:	79fb      	ldrb	r3, [r7, #7]
 8009ec4:	2b01      	cmp	r3, #1
 8009ec6:	d11e      	bne.n	8009f06 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	691b      	ldr	r3, [r3, #16]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d009      	beq.n	8009ee4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009ed0:	693b      	ldr	r3, [r7, #16]
 8009ed2:	015a      	lsls	r2, r3, #5
 8009ed4:	697b      	ldr	r3, [r7, #20]
 8009ed6:	4413      	add	r3, r2
 8009ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009edc:	461a      	mov	r2, r3
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	691b      	ldr	r3, [r3, #16]
 8009ee2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009ee4:	693b      	ldr	r3, [r7, #16]
 8009ee6:	015a      	lsls	r2, r3, #5
 8009ee8:	697b      	ldr	r3, [r7, #20]
 8009eea:	4413      	add	r3, r2
 8009eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	693a      	ldr	r2, [r7, #16]
 8009ef4:	0151      	lsls	r1, r2, #5
 8009ef6:	697a      	ldr	r2, [r7, #20]
 8009ef8:	440a      	add	r2, r1
 8009efa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009efe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009f02:	6013      	str	r3, [r2, #0]
 8009f04:	e092      	b.n	800a02c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009f06:	693b      	ldr	r3, [r7, #16]
 8009f08:	015a      	lsls	r2, r3, #5
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	4413      	add	r3, r2
 8009f0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	693a      	ldr	r2, [r7, #16]
 8009f16:	0151      	lsls	r1, r2, #5
 8009f18:	697a      	ldr	r2, [r7, #20]
 8009f1a:	440a      	add	r2, r1
 8009f1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f20:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009f24:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	695b      	ldr	r3, [r3, #20]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d07e      	beq.n	800a02c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	781b      	ldrb	r3, [r3, #0]
 8009f3a:	f003 030f 	and.w	r3, r3, #15
 8009f3e:	2101      	movs	r1, #1
 8009f40:	fa01 f303 	lsl.w	r3, r1, r3
 8009f44:	6979      	ldr	r1, [r7, #20]
 8009f46:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009f4a:	4313      	orrs	r3, r2
 8009f4c:	634b      	str	r3, [r1, #52]	; 0x34
 8009f4e:	e06d      	b.n	800a02c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	015a      	lsls	r2, r3, #5
 8009f54:	697b      	ldr	r3, [r7, #20]
 8009f56:	4413      	add	r3, r2
 8009f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f5c:	691b      	ldr	r3, [r3, #16]
 8009f5e:	693a      	ldr	r2, [r7, #16]
 8009f60:	0151      	lsls	r1, r2, #5
 8009f62:	697a      	ldr	r2, [r7, #20]
 8009f64:	440a      	add	r2, r1
 8009f66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f6a:	0cdb      	lsrs	r3, r3, #19
 8009f6c:	04db      	lsls	r3, r3, #19
 8009f6e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009f70:	693b      	ldr	r3, [r7, #16]
 8009f72:	015a      	lsls	r2, r3, #5
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	4413      	add	r3, r2
 8009f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f7c:	691b      	ldr	r3, [r3, #16]
 8009f7e:	693a      	ldr	r2, [r7, #16]
 8009f80:	0151      	lsls	r1, r2, #5
 8009f82:	697a      	ldr	r2, [r7, #20]
 8009f84:	440a      	add	r2, r1
 8009f86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f8a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009f8e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009f92:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	695b      	ldr	r3, [r3, #20]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d003      	beq.n	8009fa4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	689a      	ldr	r2, [r3, #8]
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	015a      	lsls	r2, r3, #5
 8009fa8:	697b      	ldr	r3, [r7, #20]
 8009faa:	4413      	add	r3, r2
 8009fac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fb0:	691b      	ldr	r3, [r3, #16]
 8009fb2:	693a      	ldr	r2, [r7, #16]
 8009fb4:	0151      	lsls	r1, r2, #5
 8009fb6:	697a      	ldr	r2, [r7, #20]
 8009fb8:	440a      	add	r2, r1
 8009fba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fbe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009fc2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8009fc4:	693b      	ldr	r3, [r7, #16]
 8009fc6:	015a      	lsls	r2, r3, #5
 8009fc8:	697b      	ldr	r3, [r7, #20]
 8009fca:	4413      	add	r3, r2
 8009fcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fd0:	691a      	ldr	r2, [r3, #16]
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	689b      	ldr	r3, [r3, #8]
 8009fd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009fda:	6939      	ldr	r1, [r7, #16]
 8009fdc:	0148      	lsls	r0, r1, #5
 8009fde:	6979      	ldr	r1, [r7, #20]
 8009fe0:	4401      	add	r1, r0
 8009fe2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009fe6:	4313      	orrs	r3, r2
 8009fe8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009fea:	79fb      	ldrb	r3, [r7, #7]
 8009fec:	2b01      	cmp	r3, #1
 8009fee:	d10d      	bne.n	800a00c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	68db      	ldr	r3, [r3, #12]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d009      	beq.n	800a00c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	68d9      	ldr	r1, [r3, #12]
 8009ffc:	693b      	ldr	r3, [r7, #16]
 8009ffe:	015a      	lsls	r2, r3, #5
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	4413      	add	r3, r2
 800a004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a008:	460a      	mov	r2, r1
 800a00a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	015a      	lsls	r2, r3, #5
 800a010:	697b      	ldr	r3, [r7, #20]
 800a012:	4413      	add	r3, r2
 800a014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	693a      	ldr	r2, [r7, #16]
 800a01c:	0151      	lsls	r1, r2, #5
 800a01e:	697a      	ldr	r2, [r7, #20]
 800a020:	440a      	add	r2, r1
 800a022:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a026:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a02a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a02c:	2300      	movs	r3, #0
}
 800a02e:	4618      	mov	r0, r3
 800a030:	371c      	adds	r7, #28
 800a032:	46bd      	mov	sp, r7
 800a034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a038:	4770      	bx	lr

0800a03a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a03a:	b480      	push	{r7}
 800a03c:	b089      	sub	sp, #36	; 0x24
 800a03e:	af00      	add	r7, sp, #0
 800a040:	60f8      	str	r0, [r7, #12]
 800a042:	60b9      	str	r1, [r7, #8]
 800a044:	4611      	mov	r1, r2
 800a046:	461a      	mov	r2, r3
 800a048:	460b      	mov	r3, r1
 800a04a:	71fb      	strb	r3, [r7, #7]
 800a04c:	4613      	mov	r3, r2
 800a04e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a058:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d123      	bne.n	800a0a8 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a060:	88bb      	ldrh	r3, [r7, #4]
 800a062:	3303      	adds	r3, #3
 800a064:	089b      	lsrs	r3, r3, #2
 800a066:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a068:	2300      	movs	r3, #0
 800a06a:	61bb      	str	r3, [r7, #24]
 800a06c:	e018      	b.n	800a0a0 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a06e:	79fb      	ldrb	r3, [r7, #7]
 800a070:	031a      	lsls	r2, r3, #12
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	4413      	add	r3, r2
 800a076:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a07a:	461a      	mov	r2, r3
 800a07c:	69fb      	ldr	r3, [r7, #28]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a082:	69fb      	ldr	r3, [r7, #28]
 800a084:	3301      	adds	r3, #1
 800a086:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a088:	69fb      	ldr	r3, [r7, #28]
 800a08a:	3301      	adds	r3, #1
 800a08c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a08e:	69fb      	ldr	r3, [r7, #28]
 800a090:	3301      	adds	r3, #1
 800a092:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a094:	69fb      	ldr	r3, [r7, #28]
 800a096:	3301      	adds	r3, #1
 800a098:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a09a:	69bb      	ldr	r3, [r7, #24]
 800a09c:	3301      	adds	r3, #1
 800a09e:	61bb      	str	r3, [r7, #24]
 800a0a0:	69ba      	ldr	r2, [r7, #24]
 800a0a2:	693b      	ldr	r3, [r7, #16]
 800a0a4:	429a      	cmp	r2, r3
 800a0a6:	d3e2      	bcc.n	800a06e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a0a8:	2300      	movs	r3, #0
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3724      	adds	r7, #36	; 0x24
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b4:	4770      	bx	lr

0800a0b6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a0b6:	b480      	push	{r7}
 800a0b8:	b08b      	sub	sp, #44	; 0x2c
 800a0ba:	af00      	add	r7, sp, #0
 800a0bc:	60f8      	str	r0, [r7, #12]
 800a0be:	60b9      	str	r1, [r7, #8]
 800a0c0:	4613      	mov	r3, r2
 800a0c2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a0cc:	88fb      	ldrh	r3, [r7, #6]
 800a0ce:	089b      	lsrs	r3, r3, #2
 800a0d0:	b29b      	uxth	r3, r3
 800a0d2:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a0d4:	88fb      	ldrh	r3, [r7, #6]
 800a0d6:	f003 0303 	and.w	r3, r3, #3
 800a0da:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a0dc:	2300      	movs	r3, #0
 800a0de:	623b      	str	r3, [r7, #32]
 800a0e0:	e014      	b.n	800a10c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a0e2:	69bb      	ldr	r3, [r7, #24]
 800a0e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0e8:	681a      	ldr	r2, [r3, #0]
 800a0ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ec:	601a      	str	r2, [r3, #0]
    pDest++;
 800a0ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f0:	3301      	adds	r3, #1
 800a0f2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f6:	3301      	adds	r3, #1
 800a0f8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0fc:	3301      	adds	r3, #1
 800a0fe:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a102:	3301      	adds	r3, #1
 800a104:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a106:	6a3b      	ldr	r3, [r7, #32]
 800a108:	3301      	adds	r3, #1
 800a10a:	623b      	str	r3, [r7, #32]
 800a10c:	6a3a      	ldr	r2, [r7, #32]
 800a10e:	697b      	ldr	r3, [r7, #20]
 800a110:	429a      	cmp	r2, r3
 800a112:	d3e6      	bcc.n	800a0e2 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a114:	8bfb      	ldrh	r3, [r7, #30]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d01e      	beq.n	800a158 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a11a:	2300      	movs	r3, #0
 800a11c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a11e:	69bb      	ldr	r3, [r7, #24]
 800a120:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a124:	461a      	mov	r2, r3
 800a126:	f107 0310 	add.w	r3, r7, #16
 800a12a:	6812      	ldr	r2, [r2, #0]
 800a12c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a12e:	693a      	ldr	r2, [r7, #16]
 800a130:	6a3b      	ldr	r3, [r7, #32]
 800a132:	b2db      	uxtb	r3, r3
 800a134:	00db      	lsls	r3, r3, #3
 800a136:	fa22 f303 	lsr.w	r3, r2, r3
 800a13a:	b2da      	uxtb	r2, r3
 800a13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a13e:	701a      	strb	r2, [r3, #0]
      i++;
 800a140:	6a3b      	ldr	r3, [r7, #32]
 800a142:	3301      	adds	r3, #1
 800a144:	623b      	str	r3, [r7, #32]
      pDest++;
 800a146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a148:	3301      	adds	r3, #1
 800a14a:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a14c:	8bfb      	ldrh	r3, [r7, #30]
 800a14e:	3b01      	subs	r3, #1
 800a150:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a152:	8bfb      	ldrh	r3, [r7, #30]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d1ea      	bne.n	800a12e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	372c      	adds	r7, #44	; 0x2c
 800a15e:	46bd      	mov	sp, r7
 800a160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a164:	4770      	bx	lr

0800a166 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a166:	b480      	push	{r7}
 800a168:	b085      	sub	sp, #20
 800a16a:	af00      	add	r7, sp, #0
 800a16c:	6078      	str	r0, [r7, #4]
 800a16e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	781b      	ldrb	r3, [r3, #0]
 800a178:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	785b      	ldrb	r3, [r3, #1]
 800a17e:	2b01      	cmp	r3, #1
 800a180:	d12c      	bne.n	800a1dc <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	015a      	lsls	r2, r3, #5
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	4413      	add	r3, r2
 800a18a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	2b00      	cmp	r3, #0
 800a192:	db12      	blt.n	800a1ba <USB_EPSetStall+0x54>
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d00f      	beq.n	800a1ba <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	015a      	lsls	r2, r3, #5
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	4413      	add	r3, r2
 800a1a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	68ba      	ldr	r2, [r7, #8]
 800a1aa:	0151      	lsls	r1, r2, #5
 800a1ac:	68fa      	ldr	r2, [r7, #12]
 800a1ae:	440a      	add	r2, r1
 800a1b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a1b8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	015a      	lsls	r2, r3, #5
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	4413      	add	r3, r2
 800a1c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	68ba      	ldr	r2, [r7, #8]
 800a1ca:	0151      	lsls	r1, r2, #5
 800a1cc:	68fa      	ldr	r2, [r7, #12]
 800a1ce:	440a      	add	r2, r1
 800a1d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a1d8:	6013      	str	r3, [r2, #0]
 800a1da:	e02b      	b.n	800a234 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	015a      	lsls	r2, r3, #5
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	4413      	add	r3, r2
 800a1e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	db12      	blt.n	800a214 <USB_EPSetStall+0xae>
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d00f      	beq.n	800a214 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	015a      	lsls	r2, r3, #5
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	4413      	add	r3, r2
 800a1fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	68ba      	ldr	r2, [r7, #8]
 800a204:	0151      	lsls	r1, r2, #5
 800a206:	68fa      	ldr	r2, [r7, #12]
 800a208:	440a      	add	r2, r1
 800a20a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a20e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a212:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a214:	68bb      	ldr	r3, [r7, #8]
 800a216:	015a      	lsls	r2, r3, #5
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	4413      	add	r3, r2
 800a21c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	68ba      	ldr	r2, [r7, #8]
 800a224:	0151      	lsls	r1, r2, #5
 800a226:	68fa      	ldr	r2, [r7, #12]
 800a228:	440a      	add	r2, r1
 800a22a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a22e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a232:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a234:	2300      	movs	r3, #0
}
 800a236:	4618      	mov	r0, r3
 800a238:	3714      	adds	r7, #20
 800a23a:	46bd      	mov	sp, r7
 800a23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a240:	4770      	bx	lr

0800a242 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a242:	b480      	push	{r7}
 800a244:	b085      	sub	sp, #20
 800a246:	af00      	add	r7, sp, #0
 800a248:	6078      	str	r0, [r7, #4]
 800a24a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	781b      	ldrb	r3, [r3, #0]
 800a254:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	785b      	ldrb	r3, [r3, #1]
 800a25a:	2b01      	cmp	r3, #1
 800a25c:	d128      	bne.n	800a2b0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a25e:	68bb      	ldr	r3, [r7, #8]
 800a260:	015a      	lsls	r2, r3, #5
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	4413      	add	r3, r2
 800a266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	68ba      	ldr	r2, [r7, #8]
 800a26e:	0151      	lsls	r1, r2, #5
 800a270:	68fa      	ldr	r2, [r7, #12]
 800a272:	440a      	add	r2, r1
 800a274:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a278:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a27c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	78db      	ldrb	r3, [r3, #3]
 800a282:	2b03      	cmp	r3, #3
 800a284:	d003      	beq.n	800a28e <USB_EPClearStall+0x4c>
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	78db      	ldrb	r3, [r3, #3]
 800a28a:	2b02      	cmp	r3, #2
 800a28c:	d138      	bne.n	800a300 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	015a      	lsls	r2, r3, #5
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	4413      	add	r3, r2
 800a296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	68ba      	ldr	r2, [r7, #8]
 800a29e:	0151      	lsls	r1, r2, #5
 800a2a0:	68fa      	ldr	r2, [r7, #12]
 800a2a2:	440a      	add	r2, r1
 800a2a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a2ac:	6013      	str	r3, [r2, #0]
 800a2ae:	e027      	b.n	800a300 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	015a      	lsls	r2, r3, #5
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	4413      	add	r3, r2
 800a2b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	68ba      	ldr	r2, [r7, #8]
 800a2c0:	0151      	lsls	r1, r2, #5
 800a2c2:	68fa      	ldr	r2, [r7, #12]
 800a2c4:	440a      	add	r2, r1
 800a2c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a2ce:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	78db      	ldrb	r3, [r3, #3]
 800a2d4:	2b03      	cmp	r3, #3
 800a2d6:	d003      	beq.n	800a2e0 <USB_EPClearStall+0x9e>
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	78db      	ldrb	r3, [r3, #3]
 800a2dc:	2b02      	cmp	r3, #2
 800a2de:	d10f      	bne.n	800a300 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	015a      	lsls	r2, r3, #5
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	4413      	add	r3, r2
 800a2e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	68ba      	ldr	r2, [r7, #8]
 800a2f0:	0151      	lsls	r1, r2, #5
 800a2f2:	68fa      	ldr	r2, [r7, #12]
 800a2f4:	440a      	add	r2, r1
 800a2f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a2fe:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a300:	2300      	movs	r3, #0
}
 800a302:	4618      	mov	r0, r3
 800a304:	3714      	adds	r7, #20
 800a306:	46bd      	mov	sp, r7
 800a308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30c:	4770      	bx	lr

0800a30e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a30e:	b480      	push	{r7}
 800a310:	b085      	sub	sp, #20
 800a312:	af00      	add	r7, sp, #0
 800a314:	6078      	str	r0, [r7, #4]
 800a316:	460b      	mov	r3, r1
 800a318:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	68fa      	ldr	r2, [r7, #12]
 800a328:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a32c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a330:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a338:	681a      	ldr	r2, [r3, #0]
 800a33a:	78fb      	ldrb	r3, [r7, #3]
 800a33c:	011b      	lsls	r3, r3, #4
 800a33e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a342:	68f9      	ldr	r1, [r7, #12]
 800a344:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a348:	4313      	orrs	r3, r2
 800a34a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a34c:	2300      	movs	r3, #0
}
 800a34e:	4618      	mov	r0, r3
 800a350:	3714      	adds	r7, #20
 800a352:	46bd      	mov	sp, r7
 800a354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a358:	4770      	bx	lr

0800a35a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a35a:	b480      	push	{r7}
 800a35c:	b085      	sub	sp, #20
 800a35e:	af00      	add	r7, sp, #0
 800a360:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	68fa      	ldr	r2, [r7, #12]
 800a370:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a374:	f023 0303 	bic.w	r3, r3, #3
 800a378:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a380:	685b      	ldr	r3, [r3, #4]
 800a382:	68fa      	ldr	r2, [r7, #12]
 800a384:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a388:	f023 0302 	bic.w	r3, r3, #2
 800a38c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a38e:	2300      	movs	r3, #0
}
 800a390:	4618      	mov	r0, r3
 800a392:	3714      	adds	r7, #20
 800a394:	46bd      	mov	sp, r7
 800a396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39a:	4770      	bx	lr

0800a39c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a39c:	b480      	push	{r7}
 800a39e:	b085      	sub	sp, #20
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	68fa      	ldr	r2, [r7, #12]
 800a3b2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a3b6:	f023 0303 	bic.w	r3, r3, #3
 800a3ba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3c2:	685b      	ldr	r3, [r3, #4]
 800a3c4:	68fa      	ldr	r2, [r7, #12]
 800a3c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a3ca:	f043 0302 	orr.w	r3, r3, #2
 800a3ce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a3d0:	2300      	movs	r3, #0
}
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	3714      	adds	r7, #20
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3dc:	4770      	bx	lr

0800a3de <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a3de:	b480      	push	{r7}
 800a3e0:	b085      	sub	sp, #20
 800a3e2:	af00      	add	r7, sp, #0
 800a3e4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	695b      	ldr	r3, [r3, #20]
 800a3ea:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	699b      	ldr	r3, [r3, #24]
 800a3f0:	68fa      	ldr	r2, [r7, #12]
 800a3f2:	4013      	ands	r3, r2
 800a3f4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	3714      	adds	r7, #20
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a402:	4770      	bx	lr

0800a404 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a404:	b480      	push	{r7}
 800a406:	b085      	sub	sp, #20
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a416:	699b      	ldr	r3, [r3, #24]
 800a418:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a420:	69db      	ldr	r3, [r3, #28]
 800a422:	68ba      	ldr	r2, [r7, #8]
 800a424:	4013      	ands	r3, r2
 800a426:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	0c1b      	lsrs	r3, r3, #16
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	3714      	adds	r7, #20
 800a430:	46bd      	mov	sp, r7
 800a432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a436:	4770      	bx	lr

0800a438 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a438:	b480      	push	{r7}
 800a43a:	b085      	sub	sp, #20
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a44a:	699b      	ldr	r3, [r3, #24]
 800a44c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a454:	69db      	ldr	r3, [r3, #28]
 800a456:	68ba      	ldr	r2, [r7, #8]
 800a458:	4013      	ands	r3, r2
 800a45a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	b29b      	uxth	r3, r3
}
 800a460:	4618      	mov	r0, r3
 800a462:	3714      	adds	r7, #20
 800a464:	46bd      	mov	sp, r7
 800a466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46a:	4770      	bx	lr

0800a46c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a46c:	b480      	push	{r7}
 800a46e:	b085      	sub	sp, #20
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
 800a474:	460b      	mov	r3, r1
 800a476:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a47c:	78fb      	ldrb	r3, [r7, #3]
 800a47e:	015a      	lsls	r2, r3, #5
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	4413      	add	r3, r2
 800a484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a488:	689b      	ldr	r3, [r3, #8]
 800a48a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a492:	695b      	ldr	r3, [r3, #20]
 800a494:	68ba      	ldr	r2, [r7, #8]
 800a496:	4013      	ands	r3, r2
 800a498:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a49a:	68bb      	ldr	r3, [r7, #8]
}
 800a49c:	4618      	mov	r0, r3
 800a49e:	3714      	adds	r7, #20
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a6:	4770      	bx	lr

0800a4a8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a4a8:	b480      	push	{r7}
 800a4aa:	b087      	sub	sp, #28
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
 800a4b0:	460b      	mov	r3, r1
 800a4b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a4b8:	697b      	ldr	r3, [r7, #20]
 800a4ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4be:	691b      	ldr	r3, [r3, #16]
 800a4c0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a4c2:	697b      	ldr	r3, [r7, #20]
 800a4c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4ca:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a4cc:	78fb      	ldrb	r3, [r7, #3]
 800a4ce:	f003 030f 	and.w	r3, r3, #15
 800a4d2:	68fa      	ldr	r2, [r7, #12]
 800a4d4:	fa22 f303 	lsr.w	r3, r2, r3
 800a4d8:	01db      	lsls	r3, r3, #7
 800a4da:	b2db      	uxtb	r3, r3
 800a4dc:	693a      	ldr	r2, [r7, #16]
 800a4de:	4313      	orrs	r3, r2
 800a4e0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a4e2:	78fb      	ldrb	r3, [r7, #3]
 800a4e4:	015a      	lsls	r2, r3, #5
 800a4e6:	697b      	ldr	r3, [r7, #20]
 800a4e8:	4413      	add	r3, r2
 800a4ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4ee:	689b      	ldr	r3, [r3, #8]
 800a4f0:	693a      	ldr	r2, [r7, #16]
 800a4f2:	4013      	ands	r3, r2
 800a4f4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a4f6:	68bb      	ldr	r3, [r7, #8]
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	371c      	adds	r7, #28
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a502:	4770      	bx	lr

0800a504 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a504:	b480      	push	{r7}
 800a506:	b083      	sub	sp, #12
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	695b      	ldr	r3, [r3, #20]
 800a510:	f003 0301 	and.w	r3, r3, #1
}
 800a514:	4618      	mov	r0, r3
 800a516:	370c      	adds	r7, #12
 800a518:	46bd      	mov	sp, r7
 800a51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51e:	4770      	bx	lr

0800a520 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a520:	b480      	push	{r7}
 800a522:	b085      	sub	sp, #20
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	68fa      	ldr	r2, [r7, #12]
 800a536:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a53a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a53e:	f023 0307 	bic.w	r3, r3, #7
 800a542:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a54a:	685b      	ldr	r3, [r3, #4]
 800a54c:	68fa      	ldr	r2, [r7, #12]
 800a54e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a552:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a556:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a558:	2300      	movs	r3, #0
}
 800a55a:	4618      	mov	r0, r3
 800a55c:	3714      	adds	r7, #20
 800a55e:	46bd      	mov	sp, r7
 800a560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a564:	4770      	bx	lr
	...

0800a568 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a568:	b480      	push	{r7}
 800a56a:	b087      	sub	sp, #28
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	60f8      	str	r0, [r7, #12]
 800a570:	460b      	mov	r3, r1
 800a572:	607a      	str	r2, [r7, #4]
 800a574:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	333c      	adds	r3, #60	; 0x3c
 800a57e:	3304      	adds	r3, #4
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a584:	693b      	ldr	r3, [r7, #16]
 800a586:	4a26      	ldr	r2, [pc, #152]	; (800a620 <USB_EP0_OutStart+0xb8>)
 800a588:	4293      	cmp	r3, r2
 800a58a:	d90a      	bls.n	800a5a2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a58c:	697b      	ldr	r3, [r7, #20]
 800a58e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a598:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a59c:	d101      	bne.n	800a5a2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	e037      	b.n	800a612 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5a8:	461a      	mov	r2, r3
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a5ae:	697b      	ldr	r3, [r7, #20]
 800a5b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5b4:	691b      	ldr	r3, [r3, #16]
 800a5b6:	697a      	ldr	r2, [r7, #20]
 800a5b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a5bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a5c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a5c2:	697b      	ldr	r3, [r7, #20]
 800a5c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5c8:	691b      	ldr	r3, [r3, #16]
 800a5ca:	697a      	ldr	r2, [r7, #20]
 800a5cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a5d0:	f043 0318 	orr.w	r3, r3, #24
 800a5d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a5d6:	697b      	ldr	r3, [r7, #20]
 800a5d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5dc:	691b      	ldr	r3, [r3, #16]
 800a5de:	697a      	ldr	r2, [r7, #20]
 800a5e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a5e4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a5e8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a5ea:	7afb      	ldrb	r3, [r7, #11]
 800a5ec:	2b01      	cmp	r3, #1
 800a5ee:	d10f      	bne.n	800a610 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a5f0:	697b      	ldr	r3, [r7, #20]
 800a5f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5f6:	461a      	mov	r2, r3
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	697a      	ldr	r2, [r7, #20]
 800a606:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a60a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a60e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a610:	2300      	movs	r3, #0
}
 800a612:	4618      	mov	r0, r3
 800a614:	371c      	adds	r7, #28
 800a616:	46bd      	mov	sp, r7
 800a618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61c:	4770      	bx	lr
 800a61e:	bf00      	nop
 800a620:	4f54300a 	.word	0x4f54300a

0800a624 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a624:	b480      	push	{r7}
 800a626:	b085      	sub	sp, #20
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a62c:	2300      	movs	r3, #0
 800a62e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	3301      	adds	r3, #1
 800a634:	60fb      	str	r3, [r7, #12]
 800a636:	4a13      	ldr	r2, [pc, #76]	; (800a684 <USB_CoreReset+0x60>)
 800a638:	4293      	cmp	r3, r2
 800a63a:	d901      	bls.n	800a640 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800a63c:	2303      	movs	r3, #3
 800a63e:	e01a      	b.n	800a676 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	691b      	ldr	r3, [r3, #16]
 800a644:	2b00      	cmp	r3, #0
 800a646:	daf3      	bge.n	800a630 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a648:	2300      	movs	r3, #0
 800a64a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	691b      	ldr	r3, [r3, #16]
 800a650:	f043 0201 	orr.w	r2, r3, #1
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	3301      	adds	r3, #1
 800a65c:	60fb      	str	r3, [r7, #12]
 800a65e:	4a09      	ldr	r2, [pc, #36]	; (800a684 <USB_CoreReset+0x60>)
 800a660:	4293      	cmp	r3, r2
 800a662:	d901      	bls.n	800a668 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800a664:	2303      	movs	r3, #3
 800a666:	e006      	b.n	800a676 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	691b      	ldr	r3, [r3, #16]
 800a66c:	f003 0301 	and.w	r3, r3, #1
 800a670:	2b01      	cmp	r3, #1
 800a672:	d0f1      	beq.n	800a658 <USB_CoreReset+0x34>

  return HAL_OK;
 800a674:	2300      	movs	r3, #0
}
 800a676:	4618      	mov	r0, r3
 800a678:	3714      	adds	r7, #20
 800a67a:	46bd      	mov	sp, r7
 800a67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a680:	4770      	bx	lr
 800a682:	bf00      	nop
 800a684:	00030d40 	.word	0x00030d40

0800a688 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b084      	sub	sp, #16
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
 800a690:	460b      	mov	r3, r1
 800a692:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a694:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a698:	f002 f95c 	bl	800c954 <USBD_static_malloc>
 800a69c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d105      	bne.n	800a6b0 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800a6ac:	2302      	movs	r3, #2
 800a6ae:	e066      	b.n	800a77e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	68fa      	ldr	r2, [r7, #12]
 800a6b4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	7c1b      	ldrb	r3, [r3, #16]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d119      	bne.n	800a6f4 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a6c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a6c4:	2202      	movs	r2, #2
 800a6c6:	2181      	movs	r1, #129	; 0x81
 800a6c8:	6878      	ldr	r0, [r7, #4]
 800a6ca:	f002 f820 	bl	800c70e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2201      	movs	r2, #1
 800a6d2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a6d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a6d8:	2202      	movs	r2, #2
 800a6da:	2101      	movs	r1, #1
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	f002 f816 	bl	800c70e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2201      	movs	r2, #1
 800a6e6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2210      	movs	r2, #16
 800a6ee:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800a6f2:	e016      	b.n	800a722 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a6f4:	2340      	movs	r3, #64	; 0x40
 800a6f6:	2202      	movs	r2, #2
 800a6f8:	2181      	movs	r1, #129	; 0x81
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	f002 f807 	bl	800c70e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2201      	movs	r2, #1
 800a704:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a706:	2340      	movs	r3, #64	; 0x40
 800a708:	2202      	movs	r2, #2
 800a70a:	2101      	movs	r1, #1
 800a70c:	6878      	ldr	r0, [r7, #4]
 800a70e:	f001 fffe 	bl	800c70e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2201      	movs	r2, #1
 800a716:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2210      	movs	r2, #16
 800a71e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a722:	2308      	movs	r3, #8
 800a724:	2203      	movs	r2, #3
 800a726:	2182      	movs	r1, #130	; 0x82
 800a728:	6878      	ldr	r0, [r7, #4]
 800a72a:	f001 fff0 	bl	800c70e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2201      	movs	r2, #1
 800a732:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	2200      	movs	r2, #0
 800a744:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	2200      	movs	r2, #0
 800a74c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	7c1b      	ldrb	r3, [r3, #16]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d109      	bne.n	800a76c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a75e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a762:	2101      	movs	r1, #1
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	f002 f8c1 	bl	800c8ec <USBD_LL_PrepareReceive>
 800a76a:	e007      	b.n	800a77c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a772:	2340      	movs	r3, #64	; 0x40
 800a774:	2101      	movs	r1, #1
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f002 f8b8 	bl	800c8ec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a77c:	2300      	movs	r3, #0
}
 800a77e:	4618      	mov	r0, r3
 800a780:	3710      	adds	r7, #16
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}

0800a786 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a786:	b580      	push	{r7, lr}
 800a788:	b082      	sub	sp, #8
 800a78a:	af00      	add	r7, sp, #0
 800a78c:	6078      	str	r0, [r7, #4]
 800a78e:	460b      	mov	r3, r1
 800a790:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a792:	2181      	movs	r1, #129	; 0x81
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f001 ffe0 	bl	800c75a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2200      	movs	r2, #0
 800a79e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a7a0:	2101      	movs	r1, #1
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f001 ffd9 	bl	800c75a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a7b0:	2182      	movs	r1, #130	; 0x82
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	f001 ffd1 	bl	800c75a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d00e      	beq.n	800a7f0 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a7d8:	685b      	ldr	r3, [r3, #4]
 800a7da:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f002 f8c4 	bl	800c970 <USBD_static_free>
    pdev->pClassData = NULL;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a7f0:	2300      	movs	r3, #0
}
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	3708      	adds	r7, #8
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}
	...

0800a7fc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b086      	sub	sp, #24
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
 800a804:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a80c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a80e:	2300      	movs	r3, #0
 800a810:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a812:	2300      	movs	r3, #0
 800a814:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a816:	2300      	movs	r3, #0
 800a818:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a81a:	693b      	ldr	r3, [r7, #16]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d101      	bne.n	800a824 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800a820:	2303      	movs	r3, #3
 800a822:	e0af      	b.n	800a984 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	781b      	ldrb	r3, [r3, #0]
 800a828:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d03f      	beq.n	800a8b0 <USBD_CDC_Setup+0xb4>
 800a830:	2b20      	cmp	r3, #32
 800a832:	f040 809f 	bne.w	800a974 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	88db      	ldrh	r3, [r3, #6]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d02e      	beq.n	800a89c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	781b      	ldrb	r3, [r3, #0]
 800a842:	b25b      	sxtb	r3, r3
 800a844:	2b00      	cmp	r3, #0
 800a846:	da16      	bge.n	800a876 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a84e:	689b      	ldr	r3, [r3, #8]
 800a850:	683a      	ldr	r2, [r7, #0]
 800a852:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800a854:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a856:	683a      	ldr	r2, [r7, #0]
 800a858:	88d2      	ldrh	r2, [r2, #6]
 800a85a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	88db      	ldrh	r3, [r3, #6]
 800a860:	2b07      	cmp	r3, #7
 800a862:	bf28      	it	cs
 800a864:	2307      	movcs	r3, #7
 800a866:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a868:	693b      	ldr	r3, [r7, #16]
 800a86a:	89fa      	ldrh	r2, [r7, #14]
 800a86c:	4619      	mov	r1, r3
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	f001 fb19 	bl	800bea6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800a874:	e085      	b.n	800a982 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	785a      	ldrb	r2, [r3, #1]
 800a87a:	693b      	ldr	r3, [r7, #16]
 800a87c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	88db      	ldrh	r3, [r3, #6]
 800a884:	b2da      	uxtb	r2, r3
 800a886:	693b      	ldr	r3, [r7, #16]
 800a888:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a88c:	6939      	ldr	r1, [r7, #16]
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	88db      	ldrh	r3, [r3, #6]
 800a892:	461a      	mov	r2, r3
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f001 fb32 	bl	800befe <USBD_CtlPrepareRx>
      break;
 800a89a:	e072      	b.n	800a982 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a8a2:	689b      	ldr	r3, [r3, #8]
 800a8a4:	683a      	ldr	r2, [r7, #0]
 800a8a6:	7850      	ldrb	r0, [r2, #1]
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	6839      	ldr	r1, [r7, #0]
 800a8ac:	4798      	blx	r3
      break;
 800a8ae:	e068      	b.n	800a982 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	785b      	ldrb	r3, [r3, #1]
 800a8b4:	2b0b      	cmp	r3, #11
 800a8b6:	d852      	bhi.n	800a95e <USBD_CDC_Setup+0x162>
 800a8b8:	a201      	add	r2, pc, #4	; (adr r2, 800a8c0 <USBD_CDC_Setup+0xc4>)
 800a8ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8be:	bf00      	nop
 800a8c0:	0800a8f1 	.word	0x0800a8f1
 800a8c4:	0800a96d 	.word	0x0800a96d
 800a8c8:	0800a95f 	.word	0x0800a95f
 800a8cc:	0800a95f 	.word	0x0800a95f
 800a8d0:	0800a95f 	.word	0x0800a95f
 800a8d4:	0800a95f 	.word	0x0800a95f
 800a8d8:	0800a95f 	.word	0x0800a95f
 800a8dc:	0800a95f 	.word	0x0800a95f
 800a8e0:	0800a95f 	.word	0x0800a95f
 800a8e4:	0800a95f 	.word	0x0800a95f
 800a8e8:	0800a91b 	.word	0x0800a91b
 800a8ec:	0800a945 	.word	0x0800a945
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8f6:	b2db      	uxtb	r3, r3
 800a8f8:	2b03      	cmp	r3, #3
 800a8fa:	d107      	bne.n	800a90c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a8fc:	f107 030a 	add.w	r3, r7, #10
 800a900:	2202      	movs	r2, #2
 800a902:	4619      	mov	r1, r3
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f001 face 	bl	800bea6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a90a:	e032      	b.n	800a972 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a90c:	6839      	ldr	r1, [r7, #0]
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	f001 fa58 	bl	800bdc4 <USBD_CtlError>
            ret = USBD_FAIL;
 800a914:	2303      	movs	r3, #3
 800a916:	75fb      	strb	r3, [r7, #23]
          break;
 800a918:	e02b      	b.n	800a972 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a920:	b2db      	uxtb	r3, r3
 800a922:	2b03      	cmp	r3, #3
 800a924:	d107      	bne.n	800a936 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a926:	f107 030d 	add.w	r3, r7, #13
 800a92a:	2201      	movs	r2, #1
 800a92c:	4619      	mov	r1, r3
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	f001 fab9 	bl	800bea6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a934:	e01d      	b.n	800a972 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a936:	6839      	ldr	r1, [r7, #0]
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	f001 fa43 	bl	800bdc4 <USBD_CtlError>
            ret = USBD_FAIL;
 800a93e:	2303      	movs	r3, #3
 800a940:	75fb      	strb	r3, [r7, #23]
          break;
 800a942:	e016      	b.n	800a972 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a94a:	b2db      	uxtb	r3, r3
 800a94c:	2b03      	cmp	r3, #3
 800a94e:	d00f      	beq.n	800a970 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800a950:	6839      	ldr	r1, [r7, #0]
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f001 fa36 	bl	800bdc4 <USBD_CtlError>
            ret = USBD_FAIL;
 800a958:	2303      	movs	r3, #3
 800a95a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a95c:	e008      	b.n	800a970 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a95e:	6839      	ldr	r1, [r7, #0]
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	f001 fa2f 	bl	800bdc4 <USBD_CtlError>
          ret = USBD_FAIL;
 800a966:	2303      	movs	r3, #3
 800a968:	75fb      	strb	r3, [r7, #23]
          break;
 800a96a:	e002      	b.n	800a972 <USBD_CDC_Setup+0x176>
          break;
 800a96c:	bf00      	nop
 800a96e:	e008      	b.n	800a982 <USBD_CDC_Setup+0x186>
          break;
 800a970:	bf00      	nop
      }
      break;
 800a972:	e006      	b.n	800a982 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800a974:	6839      	ldr	r1, [r7, #0]
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f001 fa24 	bl	800bdc4 <USBD_CtlError>
      ret = USBD_FAIL;
 800a97c:	2303      	movs	r3, #3
 800a97e:	75fb      	strb	r3, [r7, #23]
      break;
 800a980:	bf00      	nop
  }

  return (uint8_t)ret;
 800a982:	7dfb      	ldrb	r3, [r7, #23]
}
 800a984:	4618      	mov	r0, r3
 800a986:	3718      	adds	r7, #24
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}

0800a98c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b084      	sub	sp, #16
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
 800a994:	460b      	mov	r3, r1
 800a996:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a99e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d101      	bne.n	800a9ae <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a9aa:	2303      	movs	r3, #3
 800a9ac:	e04f      	b.n	800aa4e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a9b4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a9b6:	78fa      	ldrb	r2, [r7, #3]
 800a9b8:	6879      	ldr	r1, [r7, #4]
 800a9ba:	4613      	mov	r3, r2
 800a9bc:	009b      	lsls	r3, r3, #2
 800a9be:	4413      	add	r3, r2
 800a9c0:	009b      	lsls	r3, r3, #2
 800a9c2:	440b      	add	r3, r1
 800a9c4:	3318      	adds	r3, #24
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d029      	beq.n	800aa20 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a9cc:	78fa      	ldrb	r2, [r7, #3]
 800a9ce:	6879      	ldr	r1, [r7, #4]
 800a9d0:	4613      	mov	r3, r2
 800a9d2:	009b      	lsls	r3, r3, #2
 800a9d4:	4413      	add	r3, r2
 800a9d6:	009b      	lsls	r3, r3, #2
 800a9d8:	440b      	add	r3, r1
 800a9da:	3318      	adds	r3, #24
 800a9dc:	681a      	ldr	r2, [r3, #0]
 800a9de:	78f9      	ldrb	r1, [r7, #3]
 800a9e0:	68f8      	ldr	r0, [r7, #12]
 800a9e2:	460b      	mov	r3, r1
 800a9e4:	00db      	lsls	r3, r3, #3
 800a9e6:	1a5b      	subs	r3, r3, r1
 800a9e8:	009b      	lsls	r3, r3, #2
 800a9ea:	4403      	add	r3, r0
 800a9ec:	3344      	adds	r3, #68	; 0x44
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	fbb2 f1f3 	udiv	r1, r2, r3
 800a9f4:	fb01 f303 	mul.w	r3, r1, r3
 800a9f8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d110      	bne.n	800aa20 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800a9fe:	78fa      	ldrb	r2, [r7, #3]
 800aa00:	6879      	ldr	r1, [r7, #4]
 800aa02:	4613      	mov	r3, r2
 800aa04:	009b      	lsls	r3, r3, #2
 800aa06:	4413      	add	r3, r2
 800aa08:	009b      	lsls	r3, r3, #2
 800aa0a:	440b      	add	r3, r1
 800aa0c:	3318      	adds	r3, #24
 800aa0e:	2200      	movs	r2, #0
 800aa10:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800aa12:	78f9      	ldrb	r1, [r7, #3]
 800aa14:	2300      	movs	r3, #0
 800aa16:	2200      	movs	r2, #0
 800aa18:	6878      	ldr	r0, [r7, #4]
 800aa1a:	f001 ff46 	bl	800c8aa <USBD_LL_Transmit>
 800aa1e:	e015      	b.n	800aa4c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	2200      	movs	r2, #0
 800aa24:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa2e:	691b      	ldr	r3, [r3, #16]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d00b      	beq.n	800aa4c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa3a:	691b      	ldr	r3, [r3, #16]
 800aa3c:	68ba      	ldr	r2, [r7, #8]
 800aa3e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800aa42:	68ba      	ldr	r2, [r7, #8]
 800aa44:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800aa48:	78fa      	ldrb	r2, [r7, #3]
 800aa4a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800aa4c:	2300      	movs	r3, #0
}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	3710      	adds	r7, #16
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}

0800aa56 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aa56:	b580      	push	{r7, lr}
 800aa58:	b084      	sub	sp, #16
 800aa5a:	af00      	add	r7, sp, #0
 800aa5c:	6078      	str	r0, [r7, #4]
 800aa5e:	460b      	mov	r3, r1
 800aa60:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa68:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d101      	bne.n	800aa78 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800aa74:	2303      	movs	r3, #3
 800aa76:	e015      	b.n	800aaa4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800aa78:	78fb      	ldrb	r3, [r7, #3]
 800aa7a:	4619      	mov	r1, r3
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	f001 ff56 	bl	800c92e <USBD_LL_GetRxDataSize>
 800aa82:	4602      	mov	r2, r0
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa90:	68db      	ldr	r3, [r3, #12]
 800aa92:	68fa      	ldr	r2, [r7, #12]
 800aa94:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800aa98:	68fa      	ldr	r2, [r7, #12]
 800aa9a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800aa9e:	4611      	mov	r1, r2
 800aaa0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800aaa2:	2300      	movs	r3, #0
}
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	3710      	adds	r7, #16
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	bd80      	pop	{r7, pc}

0800aaac <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b084      	sub	sp, #16
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aaba:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d101      	bne.n	800aac6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800aac2:	2303      	movs	r3, #3
 800aac4:	e01b      	b.n	800aafe <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d015      	beq.n	800aafc <USBD_CDC_EP0_RxReady+0x50>
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800aad6:	2bff      	cmp	r3, #255	; 0xff
 800aad8:	d010      	beq.n	800aafc <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aae0:	689b      	ldr	r3, [r3, #8]
 800aae2:	68fa      	ldr	r2, [r7, #12]
 800aae4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800aae8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800aaea:	68fa      	ldr	r2, [r7, #12]
 800aaec:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800aaf0:	b292      	uxth	r2, r2
 800aaf2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	22ff      	movs	r2, #255	; 0xff
 800aaf8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800aafc:	2300      	movs	r3, #0
}
 800aafe:	4618      	mov	r0, r3
 800ab00:	3710      	adds	r7, #16
 800ab02:	46bd      	mov	sp, r7
 800ab04:	bd80      	pop	{r7, pc}
	...

0800ab08 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ab08:	b480      	push	{r7}
 800ab0a:	b083      	sub	sp, #12
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2243      	movs	r2, #67	; 0x43
 800ab14:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800ab16:	4b03      	ldr	r3, [pc, #12]	; (800ab24 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	370c      	adds	r7, #12
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab22:	4770      	bx	lr
 800ab24:	200000c8 	.word	0x200000c8

0800ab28 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ab28:	b480      	push	{r7}
 800ab2a:	b083      	sub	sp, #12
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2243      	movs	r2, #67	; 0x43
 800ab34:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800ab36:	4b03      	ldr	r3, [pc, #12]	; (800ab44 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800ab38:	4618      	mov	r0, r3
 800ab3a:	370c      	adds	r7, #12
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab42:	4770      	bx	lr
 800ab44:	20000084 	.word	0x20000084

0800ab48 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b083      	sub	sp, #12
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2243      	movs	r2, #67	; 0x43
 800ab54:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800ab56:	4b03      	ldr	r3, [pc, #12]	; (800ab64 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	370c      	adds	r7, #12
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab62:	4770      	bx	lr
 800ab64:	2000010c 	.word	0x2000010c

0800ab68 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ab68:	b480      	push	{r7}
 800ab6a:	b083      	sub	sp, #12
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	220a      	movs	r2, #10
 800ab74:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ab76:	4b03      	ldr	r3, [pc, #12]	; (800ab84 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	370c      	adds	r7, #12
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab82:	4770      	bx	lr
 800ab84:	20000040 	.word	0x20000040

0800ab88 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ab88:	b480      	push	{r7}
 800ab8a:	b083      	sub	sp, #12
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
 800ab90:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d101      	bne.n	800ab9c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ab98:	2303      	movs	r3, #3
 800ab9a:	e004      	b.n	800aba6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	683a      	ldr	r2, [r7, #0]
 800aba0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800aba4:	2300      	movs	r3, #0
}
 800aba6:	4618      	mov	r0, r3
 800aba8:	370c      	adds	r7, #12
 800abaa:	46bd      	mov	sp, r7
 800abac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb0:	4770      	bx	lr

0800abb2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800abb2:	b480      	push	{r7}
 800abb4:	b087      	sub	sp, #28
 800abb6:	af00      	add	r7, sp, #0
 800abb8:	60f8      	str	r0, [r7, #12]
 800abba:	60b9      	str	r1, [r7, #8]
 800abbc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800abc4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800abc6:	697b      	ldr	r3, [r7, #20]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d101      	bne.n	800abd0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800abcc:	2303      	movs	r3, #3
 800abce:	e008      	b.n	800abe2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800abd0:	697b      	ldr	r3, [r7, #20]
 800abd2:	68ba      	ldr	r2, [r7, #8]
 800abd4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800abd8:	697b      	ldr	r3, [r7, #20]
 800abda:	687a      	ldr	r2, [r7, #4]
 800abdc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800abe0:	2300      	movs	r3, #0
}
 800abe2:	4618      	mov	r0, r3
 800abe4:	371c      	adds	r7, #28
 800abe6:	46bd      	mov	sp, r7
 800abe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abec:	4770      	bx	lr

0800abee <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800abee:	b480      	push	{r7}
 800abf0:	b085      	sub	sp, #20
 800abf2:	af00      	add	r7, sp, #0
 800abf4:	6078      	str	r0, [r7, #4]
 800abf6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800abfe:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d101      	bne.n	800ac0a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800ac06:	2303      	movs	r3, #3
 800ac08:	e004      	b.n	800ac14 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	683a      	ldr	r2, [r7, #0]
 800ac0e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800ac12:	2300      	movs	r3, #0
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	3714      	adds	r7, #20
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1e:	4770      	bx	lr

0800ac20 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b084      	sub	sp, #16
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ac2e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800ac30:	2301      	movs	r3, #1
 800ac32:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d101      	bne.n	800ac42 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ac3e:	2303      	movs	r3, #3
 800ac40:	e01a      	b.n	800ac78 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800ac42:	68bb      	ldr	r3, [r7, #8]
 800ac44:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d114      	bne.n	800ac76 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	2201      	movs	r2, #1
 800ac50:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ac6a:	2181      	movs	r1, #129	; 0x81
 800ac6c:	6878      	ldr	r0, [r7, #4]
 800ac6e:	f001 fe1c 	bl	800c8aa <USBD_LL_Transmit>

    ret = USBD_OK;
 800ac72:	2300      	movs	r3, #0
 800ac74:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ac76:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	3710      	adds	r7, #16
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bd80      	pop	{r7, pc}

0800ac80 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b084      	sub	sp, #16
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ac8e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d101      	bne.n	800ac9e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800ac9a:	2303      	movs	r3, #3
 800ac9c:	e016      	b.n	800accc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	7c1b      	ldrb	r3, [r3, #16]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d109      	bne.n	800acba <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800acac:	f44f 7300 	mov.w	r3, #512	; 0x200
 800acb0:	2101      	movs	r1, #1
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f001 fe1a 	bl	800c8ec <USBD_LL_PrepareReceive>
 800acb8:	e007      	b.n	800acca <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800acc0:	2340      	movs	r3, #64	; 0x40
 800acc2:	2101      	movs	r1, #1
 800acc4:	6878      	ldr	r0, [r7, #4]
 800acc6:	f001 fe11 	bl	800c8ec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800acca:	2300      	movs	r3, #0
}
 800accc:	4618      	mov	r0, r3
 800acce:	3710      	adds	r7, #16
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}

0800acd4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b086      	sub	sp, #24
 800acd8:	af00      	add	r7, sp, #0
 800acda:	60f8      	str	r0, [r7, #12]
 800acdc:	60b9      	str	r1, [r7, #8]
 800acde:	4613      	mov	r3, r2
 800ace0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d101      	bne.n	800acec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ace8:	2303      	movs	r3, #3
 800acea:	e01f      	b.n	800ad2c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	2200      	movs	r2, #0
 800acf0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	2200      	movs	r2, #0
 800acf8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	2200      	movs	r2, #0
 800ad00:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d003      	beq.n	800ad12 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	68ba      	ldr	r2, [r7, #8]
 800ad0e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	2201      	movs	r2, #1
 800ad16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	79fa      	ldrb	r2, [r7, #7]
 800ad1e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ad20:	68f8      	ldr	r0, [r7, #12]
 800ad22:	f001 fc8d 	bl	800c640 <USBD_LL_Init>
 800ad26:	4603      	mov	r3, r0
 800ad28:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ad2a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	3718      	adds	r7, #24
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bd80      	pop	{r7, pc}

0800ad34 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b084      	sub	sp, #16
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
 800ad3c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ad3e:	2300      	movs	r3, #0
 800ad40:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d101      	bne.n	800ad4c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800ad48:	2303      	movs	r3, #3
 800ad4a:	e016      	b.n	800ad7a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	683a      	ldr	r2, [r7, #0]
 800ad50:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d00b      	beq.n	800ad78 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad68:	f107 020e 	add.w	r2, r7, #14
 800ad6c:	4610      	mov	r0, r2
 800ad6e:	4798      	blx	r3
 800ad70:	4602      	mov	r2, r0
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800ad78:	2300      	movs	r3, #0
}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	3710      	adds	r7, #16
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bd80      	pop	{r7, pc}

0800ad82 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ad82:	b580      	push	{r7, lr}
 800ad84:	b082      	sub	sp, #8
 800ad86:	af00      	add	r7, sp, #0
 800ad88:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f001 fca4 	bl	800c6d8 <USBD_LL_Start>
 800ad90:	4603      	mov	r3, r0
}
 800ad92:	4618      	mov	r0, r3
 800ad94:	3708      	adds	r7, #8
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd80      	pop	{r7, pc}

0800ad9a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ad9a:	b480      	push	{r7}
 800ad9c:	b083      	sub	sp, #12
 800ad9e:	af00      	add	r7, sp, #0
 800ada0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ada2:	2300      	movs	r3, #0
}
 800ada4:	4618      	mov	r0, r3
 800ada6:	370c      	adds	r7, #12
 800ada8:	46bd      	mov	sp, r7
 800adaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adae:	4770      	bx	lr

0800adb0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b084      	sub	sp, #16
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
 800adb8:	460b      	mov	r3, r1
 800adba:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800adbc:	2303      	movs	r3, #3
 800adbe:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d009      	beq.n	800adde <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	78fa      	ldrb	r2, [r7, #3]
 800add4:	4611      	mov	r1, r2
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	4798      	blx	r3
 800adda:	4603      	mov	r3, r0
 800addc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800adde:	7bfb      	ldrb	r3, [r7, #15]
}
 800ade0:	4618      	mov	r0, r3
 800ade2:	3710      	adds	r7, #16
 800ade4:	46bd      	mov	sp, r7
 800ade6:	bd80      	pop	{r7, pc}

0800ade8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b082      	sub	sp, #8
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
 800adf0:	460b      	mov	r3, r1
 800adf2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d007      	beq.n	800ae0e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae04:	685b      	ldr	r3, [r3, #4]
 800ae06:	78fa      	ldrb	r2, [r7, #3]
 800ae08:	4611      	mov	r1, r2
 800ae0a:	6878      	ldr	r0, [r7, #4]
 800ae0c:	4798      	blx	r3
  }

  return USBD_OK;
 800ae0e:	2300      	movs	r3, #0
}
 800ae10:	4618      	mov	r0, r3
 800ae12:	3708      	adds	r7, #8
 800ae14:	46bd      	mov	sp, r7
 800ae16:	bd80      	pop	{r7, pc}

0800ae18 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b084      	sub	sp, #16
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
 800ae20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ae28:	6839      	ldr	r1, [r7, #0]
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	f000 ff90 	bl	800bd50 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2201      	movs	r2, #1
 800ae34:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ae3e:	461a      	mov	r2, r3
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ae4c:	f003 031f 	and.w	r3, r3, #31
 800ae50:	2b02      	cmp	r3, #2
 800ae52:	d01a      	beq.n	800ae8a <USBD_LL_SetupStage+0x72>
 800ae54:	2b02      	cmp	r3, #2
 800ae56:	d822      	bhi.n	800ae9e <USBD_LL_SetupStage+0x86>
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d002      	beq.n	800ae62 <USBD_LL_SetupStage+0x4a>
 800ae5c:	2b01      	cmp	r3, #1
 800ae5e:	d00a      	beq.n	800ae76 <USBD_LL_SetupStage+0x5e>
 800ae60:	e01d      	b.n	800ae9e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ae68:	4619      	mov	r1, r3
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	f000 fa62 	bl	800b334 <USBD_StdDevReq>
 800ae70:	4603      	mov	r3, r0
 800ae72:	73fb      	strb	r3, [r7, #15]
      break;
 800ae74:	e020      	b.n	800aeb8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ae7c:	4619      	mov	r1, r3
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f000 fac6 	bl	800b410 <USBD_StdItfReq>
 800ae84:	4603      	mov	r3, r0
 800ae86:	73fb      	strb	r3, [r7, #15]
      break;
 800ae88:	e016      	b.n	800aeb8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ae90:	4619      	mov	r1, r3
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	f000 fb05 	bl	800b4a2 <USBD_StdEPReq>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	73fb      	strb	r3, [r7, #15]
      break;
 800ae9c:	e00c      	b.n	800aeb8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800aea4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800aea8:	b2db      	uxtb	r3, r3
 800aeaa:	4619      	mov	r1, r3
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f001 fc73 	bl	800c798 <USBD_LL_StallEP>
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	73fb      	strb	r3, [r7, #15]
      break;
 800aeb6:	bf00      	nop
  }

  return ret;
 800aeb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeba:	4618      	mov	r0, r3
 800aebc:	3710      	adds	r7, #16
 800aebe:	46bd      	mov	sp, r7
 800aec0:	bd80      	pop	{r7, pc}

0800aec2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800aec2:	b580      	push	{r7, lr}
 800aec4:	b086      	sub	sp, #24
 800aec6:	af00      	add	r7, sp, #0
 800aec8:	60f8      	str	r0, [r7, #12]
 800aeca:	460b      	mov	r3, r1
 800aecc:	607a      	str	r2, [r7, #4]
 800aece:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800aed0:	7afb      	ldrb	r3, [r7, #11]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d138      	bne.n	800af48 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800aedc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800aee4:	2b03      	cmp	r3, #3
 800aee6:	d14a      	bne.n	800af7e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800aee8:	693b      	ldr	r3, [r7, #16]
 800aeea:	689a      	ldr	r2, [r3, #8]
 800aeec:	693b      	ldr	r3, [r7, #16]
 800aeee:	68db      	ldr	r3, [r3, #12]
 800aef0:	429a      	cmp	r2, r3
 800aef2:	d913      	bls.n	800af1c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800aef4:	693b      	ldr	r3, [r7, #16]
 800aef6:	689a      	ldr	r2, [r3, #8]
 800aef8:	693b      	ldr	r3, [r7, #16]
 800aefa:	68db      	ldr	r3, [r3, #12]
 800aefc:	1ad2      	subs	r2, r2, r3
 800aefe:	693b      	ldr	r3, [r7, #16]
 800af00:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800af02:	693b      	ldr	r3, [r7, #16]
 800af04:	68da      	ldr	r2, [r3, #12]
 800af06:	693b      	ldr	r3, [r7, #16]
 800af08:	689b      	ldr	r3, [r3, #8]
 800af0a:	4293      	cmp	r3, r2
 800af0c:	bf28      	it	cs
 800af0e:	4613      	movcs	r3, r2
 800af10:	461a      	mov	r2, r3
 800af12:	6879      	ldr	r1, [r7, #4]
 800af14:	68f8      	ldr	r0, [r7, #12]
 800af16:	f001 f80f 	bl	800bf38 <USBD_CtlContinueRx>
 800af1a:	e030      	b.n	800af7e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af22:	b2db      	uxtb	r3, r3
 800af24:	2b03      	cmp	r3, #3
 800af26:	d10b      	bne.n	800af40 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af2e:	691b      	ldr	r3, [r3, #16]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d005      	beq.n	800af40 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af3a:	691b      	ldr	r3, [r3, #16]
 800af3c:	68f8      	ldr	r0, [r7, #12]
 800af3e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800af40:	68f8      	ldr	r0, [r7, #12]
 800af42:	f001 f80a 	bl	800bf5a <USBD_CtlSendStatus>
 800af46:	e01a      	b.n	800af7e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af4e:	b2db      	uxtb	r3, r3
 800af50:	2b03      	cmp	r3, #3
 800af52:	d114      	bne.n	800af7e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af5a:	699b      	ldr	r3, [r3, #24]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d00e      	beq.n	800af7e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af66:	699b      	ldr	r3, [r3, #24]
 800af68:	7afa      	ldrb	r2, [r7, #11]
 800af6a:	4611      	mov	r1, r2
 800af6c:	68f8      	ldr	r0, [r7, #12]
 800af6e:	4798      	blx	r3
 800af70:	4603      	mov	r3, r0
 800af72:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800af74:	7dfb      	ldrb	r3, [r7, #23]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d001      	beq.n	800af7e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800af7a:	7dfb      	ldrb	r3, [r7, #23]
 800af7c:	e000      	b.n	800af80 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800af7e:	2300      	movs	r3, #0
}
 800af80:	4618      	mov	r0, r3
 800af82:	3718      	adds	r7, #24
 800af84:	46bd      	mov	sp, r7
 800af86:	bd80      	pop	{r7, pc}

0800af88 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b086      	sub	sp, #24
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	60f8      	str	r0, [r7, #12]
 800af90:	460b      	mov	r3, r1
 800af92:	607a      	str	r2, [r7, #4]
 800af94:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800af96:	7afb      	ldrb	r3, [r7, #11]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d16b      	bne.n	800b074 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	3314      	adds	r3, #20
 800afa0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800afa8:	2b02      	cmp	r3, #2
 800afaa:	d156      	bne.n	800b05a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800afac:	693b      	ldr	r3, [r7, #16]
 800afae:	689a      	ldr	r2, [r3, #8]
 800afb0:	693b      	ldr	r3, [r7, #16]
 800afb2:	68db      	ldr	r3, [r3, #12]
 800afb4:	429a      	cmp	r2, r3
 800afb6:	d914      	bls.n	800afe2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800afb8:	693b      	ldr	r3, [r7, #16]
 800afba:	689a      	ldr	r2, [r3, #8]
 800afbc:	693b      	ldr	r3, [r7, #16]
 800afbe:	68db      	ldr	r3, [r3, #12]
 800afc0:	1ad2      	subs	r2, r2, r3
 800afc2:	693b      	ldr	r3, [r7, #16]
 800afc4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800afc6:	693b      	ldr	r3, [r7, #16]
 800afc8:	689b      	ldr	r3, [r3, #8]
 800afca:	461a      	mov	r2, r3
 800afcc:	6879      	ldr	r1, [r7, #4]
 800afce:	68f8      	ldr	r0, [r7, #12]
 800afd0:	f000 ff84 	bl	800bedc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800afd4:	2300      	movs	r3, #0
 800afd6:	2200      	movs	r2, #0
 800afd8:	2100      	movs	r1, #0
 800afda:	68f8      	ldr	r0, [r7, #12]
 800afdc:	f001 fc86 	bl	800c8ec <USBD_LL_PrepareReceive>
 800afe0:	e03b      	b.n	800b05a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800afe2:	693b      	ldr	r3, [r7, #16]
 800afe4:	68da      	ldr	r2, [r3, #12]
 800afe6:	693b      	ldr	r3, [r7, #16]
 800afe8:	689b      	ldr	r3, [r3, #8]
 800afea:	429a      	cmp	r2, r3
 800afec:	d11c      	bne.n	800b028 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800afee:	693b      	ldr	r3, [r7, #16]
 800aff0:	685a      	ldr	r2, [r3, #4]
 800aff2:	693b      	ldr	r3, [r7, #16]
 800aff4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800aff6:	429a      	cmp	r2, r3
 800aff8:	d316      	bcc.n	800b028 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800affa:	693b      	ldr	r3, [r7, #16]
 800affc:	685a      	ldr	r2, [r3, #4]
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b004:	429a      	cmp	r2, r3
 800b006:	d20f      	bcs.n	800b028 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b008:	2200      	movs	r2, #0
 800b00a:	2100      	movs	r1, #0
 800b00c:	68f8      	ldr	r0, [r7, #12]
 800b00e:	f000 ff65 	bl	800bedc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	2200      	movs	r2, #0
 800b016:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b01a:	2300      	movs	r3, #0
 800b01c:	2200      	movs	r2, #0
 800b01e:	2100      	movs	r1, #0
 800b020:	68f8      	ldr	r0, [r7, #12]
 800b022:	f001 fc63 	bl	800c8ec <USBD_LL_PrepareReceive>
 800b026:	e018      	b.n	800b05a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b02e:	b2db      	uxtb	r3, r3
 800b030:	2b03      	cmp	r3, #3
 800b032:	d10b      	bne.n	800b04c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b03a:	68db      	ldr	r3, [r3, #12]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d005      	beq.n	800b04c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b046:	68db      	ldr	r3, [r3, #12]
 800b048:	68f8      	ldr	r0, [r7, #12]
 800b04a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b04c:	2180      	movs	r1, #128	; 0x80
 800b04e:	68f8      	ldr	r0, [r7, #12]
 800b050:	f001 fba2 	bl	800c798 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b054:	68f8      	ldr	r0, [r7, #12]
 800b056:	f000 ff93 	bl	800bf80 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b060:	2b01      	cmp	r3, #1
 800b062:	d122      	bne.n	800b0aa <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800b064:	68f8      	ldr	r0, [r7, #12]
 800b066:	f7ff fe98 	bl	800ad9a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	2200      	movs	r2, #0
 800b06e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b072:	e01a      	b.n	800b0aa <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b07a:	b2db      	uxtb	r3, r3
 800b07c:	2b03      	cmp	r3, #3
 800b07e:	d114      	bne.n	800b0aa <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b086:	695b      	ldr	r3, [r3, #20]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d00e      	beq.n	800b0aa <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b092:	695b      	ldr	r3, [r3, #20]
 800b094:	7afa      	ldrb	r2, [r7, #11]
 800b096:	4611      	mov	r1, r2
 800b098:	68f8      	ldr	r0, [r7, #12]
 800b09a:	4798      	blx	r3
 800b09c:	4603      	mov	r3, r0
 800b09e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b0a0:	7dfb      	ldrb	r3, [r7, #23]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d001      	beq.n	800b0aa <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800b0a6:	7dfb      	ldrb	r3, [r7, #23]
 800b0a8:	e000      	b.n	800b0ac <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800b0aa:	2300      	movs	r3, #0
}
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	3718      	adds	r7, #24
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}

0800b0b4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b082      	sub	sp, #8
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2201      	movs	r2, #1
 800b0c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d101      	bne.n	800b0e8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800b0e4:	2303      	movs	r3, #3
 800b0e6:	e02f      	b.n	800b148 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d00f      	beq.n	800b112 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0f8:	685b      	ldr	r3, [r3, #4]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d009      	beq.n	800b112 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b104:	685b      	ldr	r3, [r3, #4]
 800b106:	687a      	ldr	r2, [r7, #4]
 800b108:	6852      	ldr	r2, [r2, #4]
 800b10a:	b2d2      	uxtb	r2, r2
 800b10c:	4611      	mov	r1, r2
 800b10e:	6878      	ldr	r0, [r7, #4]
 800b110:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b112:	2340      	movs	r3, #64	; 0x40
 800b114:	2200      	movs	r2, #0
 800b116:	2100      	movs	r1, #0
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	f001 faf8 	bl	800c70e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2201      	movs	r2, #1
 800b122:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2240      	movs	r2, #64	; 0x40
 800b12a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b12e:	2340      	movs	r3, #64	; 0x40
 800b130:	2200      	movs	r2, #0
 800b132:	2180      	movs	r1, #128	; 0x80
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	f001 faea 	bl	800c70e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2201      	movs	r2, #1
 800b13e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2240      	movs	r2, #64	; 0x40
 800b144:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800b146:	2300      	movs	r3, #0
}
 800b148:	4618      	mov	r0, r3
 800b14a:	3708      	adds	r7, #8
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}

0800b150 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b150:	b480      	push	{r7}
 800b152:	b083      	sub	sp, #12
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
 800b158:	460b      	mov	r3, r1
 800b15a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	78fa      	ldrb	r2, [r7, #3]
 800b160:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b162:	2300      	movs	r3, #0
}
 800b164:	4618      	mov	r0, r3
 800b166:	370c      	adds	r7, #12
 800b168:	46bd      	mov	sp, r7
 800b16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16e:	4770      	bx	lr

0800b170 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b170:	b480      	push	{r7}
 800b172:	b083      	sub	sp, #12
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b17e:	b2da      	uxtb	r2, r3
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	2204      	movs	r2, #4
 800b18a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b18e:	2300      	movs	r3, #0
}
 800b190:	4618      	mov	r0, r3
 800b192:	370c      	adds	r7, #12
 800b194:	46bd      	mov	sp, r7
 800b196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19a:	4770      	bx	lr

0800b19c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b19c:	b480      	push	{r7}
 800b19e:	b083      	sub	sp, #12
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1aa:	b2db      	uxtb	r3, r3
 800b1ac:	2b04      	cmp	r3, #4
 800b1ae:	d106      	bne.n	800b1be <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b1b6:	b2da      	uxtb	r2, r3
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b1be:	2300      	movs	r3, #0
}
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	370c      	adds	r7, #12
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ca:	4770      	bx	lr

0800b1cc <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b082      	sub	sp, #8
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d101      	bne.n	800b1e2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800b1de:	2303      	movs	r3, #3
 800b1e0:	e012      	b.n	800b208 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1e8:	b2db      	uxtb	r3, r3
 800b1ea:	2b03      	cmp	r3, #3
 800b1ec:	d10b      	bne.n	800b206 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1f4:	69db      	ldr	r3, [r3, #28]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d005      	beq.n	800b206 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b200:	69db      	ldr	r3, [r3, #28]
 800b202:	6878      	ldr	r0, [r7, #4]
 800b204:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b206:	2300      	movs	r3, #0
}
 800b208:	4618      	mov	r0, r3
 800b20a:	3708      	adds	r7, #8
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}

0800b210 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b082      	sub	sp, #8
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
 800b218:	460b      	mov	r3, r1
 800b21a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b222:	2b00      	cmp	r3, #0
 800b224:	d101      	bne.n	800b22a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800b226:	2303      	movs	r3, #3
 800b228:	e014      	b.n	800b254 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b230:	b2db      	uxtb	r3, r3
 800b232:	2b03      	cmp	r3, #3
 800b234:	d10d      	bne.n	800b252 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b23c:	6a1b      	ldr	r3, [r3, #32]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d007      	beq.n	800b252 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b248:	6a1b      	ldr	r3, [r3, #32]
 800b24a:	78fa      	ldrb	r2, [r7, #3]
 800b24c:	4611      	mov	r1, r2
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b252:	2300      	movs	r3, #0
}
 800b254:	4618      	mov	r0, r3
 800b256:	3708      	adds	r7, #8
 800b258:	46bd      	mov	sp, r7
 800b25a:	bd80      	pop	{r7, pc}

0800b25c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b082      	sub	sp, #8
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
 800b264:	460b      	mov	r3, r1
 800b266:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d101      	bne.n	800b276 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800b272:	2303      	movs	r3, #3
 800b274:	e014      	b.n	800b2a0 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b27c:	b2db      	uxtb	r3, r3
 800b27e:	2b03      	cmp	r3, #3
 800b280:	d10d      	bne.n	800b29e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d007      	beq.n	800b29e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b296:	78fa      	ldrb	r2, [r7, #3]
 800b298:	4611      	mov	r1, r2
 800b29a:	6878      	ldr	r0, [r7, #4]
 800b29c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b29e:	2300      	movs	r3, #0
}
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	3708      	adds	r7, #8
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	bd80      	pop	{r7, pc}

0800b2a8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b2a8:	b480      	push	{r7}
 800b2aa:	b083      	sub	sp, #12
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b2b0:	2300      	movs	r3, #0
}
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	370c      	adds	r7, #12
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2bc:	4770      	bx	lr

0800b2be <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b2be:	b580      	push	{r7, lr}
 800b2c0:	b082      	sub	sp, #8
 800b2c2:	af00      	add	r7, sp, #0
 800b2c4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2201      	movs	r2, #1
 800b2ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d009      	beq.n	800b2ec <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2de:	685b      	ldr	r3, [r3, #4]
 800b2e0:	687a      	ldr	r2, [r7, #4]
 800b2e2:	6852      	ldr	r2, [r2, #4]
 800b2e4:	b2d2      	uxtb	r2, r2
 800b2e6:	4611      	mov	r1, r2
 800b2e8:	6878      	ldr	r0, [r7, #4]
 800b2ea:	4798      	blx	r3
  }

  return USBD_OK;
 800b2ec:	2300      	movs	r3, #0
}
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	3708      	adds	r7, #8
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}

0800b2f6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b2f6:	b480      	push	{r7}
 800b2f8:	b087      	sub	sp, #28
 800b2fa:	af00      	add	r7, sp, #0
 800b2fc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b302:	697b      	ldr	r3, [r7, #20]
 800b304:	781b      	ldrb	r3, [r3, #0]
 800b306:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b308:	697b      	ldr	r3, [r7, #20]
 800b30a:	3301      	adds	r3, #1
 800b30c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b30e:	697b      	ldr	r3, [r7, #20]
 800b310:	781b      	ldrb	r3, [r3, #0]
 800b312:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b314:	8a3b      	ldrh	r3, [r7, #16]
 800b316:	021b      	lsls	r3, r3, #8
 800b318:	b21a      	sxth	r2, r3
 800b31a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b31e:	4313      	orrs	r3, r2
 800b320:	b21b      	sxth	r3, r3
 800b322:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b324:	89fb      	ldrh	r3, [r7, #14]
}
 800b326:	4618      	mov	r0, r3
 800b328:	371c      	adds	r7, #28
 800b32a:	46bd      	mov	sp, r7
 800b32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b330:	4770      	bx	lr
	...

0800b334 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b084      	sub	sp, #16
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
 800b33c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b33e:	2300      	movs	r3, #0
 800b340:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	781b      	ldrb	r3, [r3, #0]
 800b346:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b34a:	2b40      	cmp	r3, #64	; 0x40
 800b34c:	d005      	beq.n	800b35a <USBD_StdDevReq+0x26>
 800b34e:	2b40      	cmp	r3, #64	; 0x40
 800b350:	d853      	bhi.n	800b3fa <USBD_StdDevReq+0xc6>
 800b352:	2b00      	cmp	r3, #0
 800b354:	d00b      	beq.n	800b36e <USBD_StdDevReq+0x3a>
 800b356:	2b20      	cmp	r3, #32
 800b358:	d14f      	bne.n	800b3fa <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b360:	689b      	ldr	r3, [r3, #8]
 800b362:	6839      	ldr	r1, [r7, #0]
 800b364:	6878      	ldr	r0, [r7, #4]
 800b366:	4798      	blx	r3
 800b368:	4603      	mov	r3, r0
 800b36a:	73fb      	strb	r3, [r7, #15]
      break;
 800b36c:	e04a      	b.n	800b404 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	785b      	ldrb	r3, [r3, #1]
 800b372:	2b09      	cmp	r3, #9
 800b374:	d83b      	bhi.n	800b3ee <USBD_StdDevReq+0xba>
 800b376:	a201      	add	r2, pc, #4	; (adr r2, 800b37c <USBD_StdDevReq+0x48>)
 800b378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b37c:	0800b3d1 	.word	0x0800b3d1
 800b380:	0800b3e5 	.word	0x0800b3e5
 800b384:	0800b3ef 	.word	0x0800b3ef
 800b388:	0800b3db 	.word	0x0800b3db
 800b38c:	0800b3ef 	.word	0x0800b3ef
 800b390:	0800b3af 	.word	0x0800b3af
 800b394:	0800b3a5 	.word	0x0800b3a5
 800b398:	0800b3ef 	.word	0x0800b3ef
 800b39c:	0800b3c7 	.word	0x0800b3c7
 800b3a0:	0800b3b9 	.word	0x0800b3b9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b3a4:	6839      	ldr	r1, [r7, #0]
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f000 f9de 	bl	800b768 <USBD_GetDescriptor>
          break;
 800b3ac:	e024      	b.n	800b3f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b3ae:	6839      	ldr	r1, [r7, #0]
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	f000 fb43 	bl	800ba3c <USBD_SetAddress>
          break;
 800b3b6:	e01f      	b.n	800b3f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b3b8:	6839      	ldr	r1, [r7, #0]
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	f000 fb82 	bl	800bac4 <USBD_SetConfig>
 800b3c0:	4603      	mov	r3, r0
 800b3c2:	73fb      	strb	r3, [r7, #15]
          break;
 800b3c4:	e018      	b.n	800b3f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b3c6:	6839      	ldr	r1, [r7, #0]
 800b3c8:	6878      	ldr	r0, [r7, #4]
 800b3ca:	f000 fc21 	bl	800bc10 <USBD_GetConfig>
          break;
 800b3ce:	e013      	b.n	800b3f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b3d0:	6839      	ldr	r1, [r7, #0]
 800b3d2:	6878      	ldr	r0, [r7, #4]
 800b3d4:	f000 fc52 	bl	800bc7c <USBD_GetStatus>
          break;
 800b3d8:	e00e      	b.n	800b3f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b3da:	6839      	ldr	r1, [r7, #0]
 800b3dc:	6878      	ldr	r0, [r7, #4]
 800b3de:	f000 fc81 	bl	800bce4 <USBD_SetFeature>
          break;
 800b3e2:	e009      	b.n	800b3f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b3e4:	6839      	ldr	r1, [r7, #0]
 800b3e6:	6878      	ldr	r0, [r7, #4]
 800b3e8:	f000 fc90 	bl	800bd0c <USBD_ClrFeature>
          break;
 800b3ec:	e004      	b.n	800b3f8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800b3ee:	6839      	ldr	r1, [r7, #0]
 800b3f0:	6878      	ldr	r0, [r7, #4]
 800b3f2:	f000 fce7 	bl	800bdc4 <USBD_CtlError>
          break;
 800b3f6:	bf00      	nop
      }
      break;
 800b3f8:	e004      	b.n	800b404 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800b3fa:	6839      	ldr	r1, [r7, #0]
 800b3fc:	6878      	ldr	r0, [r7, #4]
 800b3fe:	f000 fce1 	bl	800bdc4 <USBD_CtlError>
      break;
 800b402:	bf00      	nop
  }

  return ret;
 800b404:	7bfb      	ldrb	r3, [r7, #15]
}
 800b406:	4618      	mov	r0, r3
 800b408:	3710      	adds	r7, #16
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bd80      	pop	{r7, pc}
 800b40e:	bf00      	nop

0800b410 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b084      	sub	sp, #16
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
 800b418:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b41a:	2300      	movs	r3, #0
 800b41c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	781b      	ldrb	r3, [r3, #0]
 800b422:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b426:	2b40      	cmp	r3, #64	; 0x40
 800b428:	d005      	beq.n	800b436 <USBD_StdItfReq+0x26>
 800b42a:	2b40      	cmp	r3, #64	; 0x40
 800b42c:	d82f      	bhi.n	800b48e <USBD_StdItfReq+0x7e>
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d001      	beq.n	800b436 <USBD_StdItfReq+0x26>
 800b432:	2b20      	cmp	r3, #32
 800b434:	d12b      	bne.n	800b48e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b43c:	b2db      	uxtb	r3, r3
 800b43e:	3b01      	subs	r3, #1
 800b440:	2b02      	cmp	r3, #2
 800b442:	d81d      	bhi.n	800b480 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	889b      	ldrh	r3, [r3, #4]
 800b448:	b2db      	uxtb	r3, r3
 800b44a:	2b01      	cmp	r3, #1
 800b44c:	d813      	bhi.n	800b476 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b454:	689b      	ldr	r3, [r3, #8]
 800b456:	6839      	ldr	r1, [r7, #0]
 800b458:	6878      	ldr	r0, [r7, #4]
 800b45a:	4798      	blx	r3
 800b45c:	4603      	mov	r3, r0
 800b45e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	88db      	ldrh	r3, [r3, #6]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d110      	bne.n	800b48a <USBD_StdItfReq+0x7a>
 800b468:	7bfb      	ldrb	r3, [r7, #15]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d10d      	bne.n	800b48a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	f000 fd73 	bl	800bf5a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b474:	e009      	b.n	800b48a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800b476:	6839      	ldr	r1, [r7, #0]
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	f000 fca3 	bl	800bdc4 <USBD_CtlError>
          break;
 800b47e:	e004      	b.n	800b48a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800b480:	6839      	ldr	r1, [r7, #0]
 800b482:	6878      	ldr	r0, [r7, #4]
 800b484:	f000 fc9e 	bl	800bdc4 <USBD_CtlError>
          break;
 800b488:	e000      	b.n	800b48c <USBD_StdItfReq+0x7c>
          break;
 800b48a:	bf00      	nop
      }
      break;
 800b48c:	e004      	b.n	800b498 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800b48e:	6839      	ldr	r1, [r7, #0]
 800b490:	6878      	ldr	r0, [r7, #4]
 800b492:	f000 fc97 	bl	800bdc4 <USBD_CtlError>
      break;
 800b496:	bf00      	nop
  }

  return ret;
 800b498:	7bfb      	ldrb	r3, [r7, #15]
}
 800b49a:	4618      	mov	r0, r3
 800b49c:	3710      	adds	r7, #16
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bd80      	pop	{r7, pc}

0800b4a2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4a2:	b580      	push	{r7, lr}
 800b4a4:	b084      	sub	sp, #16
 800b4a6:	af00      	add	r7, sp, #0
 800b4a8:	6078      	str	r0, [r7, #4]
 800b4aa:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	889b      	ldrh	r3, [r3, #4]
 800b4b4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b4b6:	683b      	ldr	r3, [r7, #0]
 800b4b8:	781b      	ldrb	r3, [r3, #0]
 800b4ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b4be:	2b40      	cmp	r3, #64	; 0x40
 800b4c0:	d007      	beq.n	800b4d2 <USBD_StdEPReq+0x30>
 800b4c2:	2b40      	cmp	r3, #64	; 0x40
 800b4c4:	f200 8145 	bhi.w	800b752 <USBD_StdEPReq+0x2b0>
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d00c      	beq.n	800b4e6 <USBD_StdEPReq+0x44>
 800b4cc:	2b20      	cmp	r3, #32
 800b4ce:	f040 8140 	bne.w	800b752 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4d8:	689b      	ldr	r3, [r3, #8]
 800b4da:	6839      	ldr	r1, [r7, #0]
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	4798      	blx	r3
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	73fb      	strb	r3, [r7, #15]
      break;
 800b4e4:	e13a      	b.n	800b75c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	785b      	ldrb	r3, [r3, #1]
 800b4ea:	2b03      	cmp	r3, #3
 800b4ec:	d007      	beq.n	800b4fe <USBD_StdEPReq+0x5c>
 800b4ee:	2b03      	cmp	r3, #3
 800b4f0:	f300 8129 	bgt.w	800b746 <USBD_StdEPReq+0x2a4>
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d07f      	beq.n	800b5f8 <USBD_StdEPReq+0x156>
 800b4f8:	2b01      	cmp	r3, #1
 800b4fa:	d03c      	beq.n	800b576 <USBD_StdEPReq+0xd4>
 800b4fc:	e123      	b.n	800b746 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b504:	b2db      	uxtb	r3, r3
 800b506:	2b02      	cmp	r3, #2
 800b508:	d002      	beq.n	800b510 <USBD_StdEPReq+0x6e>
 800b50a:	2b03      	cmp	r3, #3
 800b50c:	d016      	beq.n	800b53c <USBD_StdEPReq+0x9a>
 800b50e:	e02c      	b.n	800b56a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b510:	7bbb      	ldrb	r3, [r7, #14]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d00d      	beq.n	800b532 <USBD_StdEPReq+0x90>
 800b516:	7bbb      	ldrb	r3, [r7, #14]
 800b518:	2b80      	cmp	r3, #128	; 0x80
 800b51a:	d00a      	beq.n	800b532 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b51c:	7bbb      	ldrb	r3, [r7, #14]
 800b51e:	4619      	mov	r1, r3
 800b520:	6878      	ldr	r0, [r7, #4]
 800b522:	f001 f939 	bl	800c798 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b526:	2180      	movs	r1, #128	; 0x80
 800b528:	6878      	ldr	r0, [r7, #4]
 800b52a:	f001 f935 	bl	800c798 <USBD_LL_StallEP>
 800b52e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b530:	e020      	b.n	800b574 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800b532:	6839      	ldr	r1, [r7, #0]
 800b534:	6878      	ldr	r0, [r7, #4]
 800b536:	f000 fc45 	bl	800bdc4 <USBD_CtlError>
              break;
 800b53a:	e01b      	b.n	800b574 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	885b      	ldrh	r3, [r3, #2]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d10e      	bne.n	800b562 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b544:	7bbb      	ldrb	r3, [r7, #14]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d00b      	beq.n	800b562 <USBD_StdEPReq+0xc0>
 800b54a:	7bbb      	ldrb	r3, [r7, #14]
 800b54c:	2b80      	cmp	r3, #128	; 0x80
 800b54e:	d008      	beq.n	800b562 <USBD_StdEPReq+0xc0>
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	88db      	ldrh	r3, [r3, #6]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d104      	bne.n	800b562 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b558:	7bbb      	ldrb	r3, [r7, #14]
 800b55a:	4619      	mov	r1, r3
 800b55c:	6878      	ldr	r0, [r7, #4]
 800b55e:	f001 f91b 	bl	800c798 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	f000 fcf9 	bl	800bf5a <USBD_CtlSendStatus>

              break;
 800b568:	e004      	b.n	800b574 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800b56a:	6839      	ldr	r1, [r7, #0]
 800b56c:	6878      	ldr	r0, [r7, #4]
 800b56e:	f000 fc29 	bl	800bdc4 <USBD_CtlError>
              break;
 800b572:	bf00      	nop
          }
          break;
 800b574:	e0ec      	b.n	800b750 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b57c:	b2db      	uxtb	r3, r3
 800b57e:	2b02      	cmp	r3, #2
 800b580:	d002      	beq.n	800b588 <USBD_StdEPReq+0xe6>
 800b582:	2b03      	cmp	r3, #3
 800b584:	d016      	beq.n	800b5b4 <USBD_StdEPReq+0x112>
 800b586:	e030      	b.n	800b5ea <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b588:	7bbb      	ldrb	r3, [r7, #14]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d00d      	beq.n	800b5aa <USBD_StdEPReq+0x108>
 800b58e:	7bbb      	ldrb	r3, [r7, #14]
 800b590:	2b80      	cmp	r3, #128	; 0x80
 800b592:	d00a      	beq.n	800b5aa <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b594:	7bbb      	ldrb	r3, [r7, #14]
 800b596:	4619      	mov	r1, r3
 800b598:	6878      	ldr	r0, [r7, #4]
 800b59a:	f001 f8fd 	bl	800c798 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b59e:	2180      	movs	r1, #128	; 0x80
 800b5a0:	6878      	ldr	r0, [r7, #4]
 800b5a2:	f001 f8f9 	bl	800c798 <USBD_LL_StallEP>
 800b5a6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b5a8:	e025      	b.n	800b5f6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800b5aa:	6839      	ldr	r1, [r7, #0]
 800b5ac:	6878      	ldr	r0, [r7, #4]
 800b5ae:	f000 fc09 	bl	800bdc4 <USBD_CtlError>
              break;
 800b5b2:	e020      	b.n	800b5f6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	885b      	ldrh	r3, [r3, #2]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d11b      	bne.n	800b5f4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b5bc:	7bbb      	ldrb	r3, [r7, #14]
 800b5be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d004      	beq.n	800b5d0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b5c6:	7bbb      	ldrb	r3, [r7, #14]
 800b5c8:	4619      	mov	r1, r3
 800b5ca:	6878      	ldr	r0, [r7, #4]
 800b5cc:	f001 f903 	bl	800c7d6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b5d0:	6878      	ldr	r0, [r7, #4]
 800b5d2:	f000 fcc2 	bl	800bf5a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5dc:	689b      	ldr	r3, [r3, #8]
 800b5de:	6839      	ldr	r1, [r7, #0]
 800b5e0:	6878      	ldr	r0, [r7, #4]
 800b5e2:	4798      	blx	r3
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800b5e8:	e004      	b.n	800b5f4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800b5ea:	6839      	ldr	r1, [r7, #0]
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f000 fbe9 	bl	800bdc4 <USBD_CtlError>
              break;
 800b5f2:	e000      	b.n	800b5f6 <USBD_StdEPReq+0x154>
              break;
 800b5f4:	bf00      	nop
          }
          break;
 800b5f6:	e0ab      	b.n	800b750 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5fe:	b2db      	uxtb	r3, r3
 800b600:	2b02      	cmp	r3, #2
 800b602:	d002      	beq.n	800b60a <USBD_StdEPReq+0x168>
 800b604:	2b03      	cmp	r3, #3
 800b606:	d032      	beq.n	800b66e <USBD_StdEPReq+0x1cc>
 800b608:	e097      	b.n	800b73a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b60a:	7bbb      	ldrb	r3, [r7, #14]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d007      	beq.n	800b620 <USBD_StdEPReq+0x17e>
 800b610:	7bbb      	ldrb	r3, [r7, #14]
 800b612:	2b80      	cmp	r3, #128	; 0x80
 800b614:	d004      	beq.n	800b620 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800b616:	6839      	ldr	r1, [r7, #0]
 800b618:	6878      	ldr	r0, [r7, #4]
 800b61a:	f000 fbd3 	bl	800bdc4 <USBD_CtlError>
                break;
 800b61e:	e091      	b.n	800b744 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b620:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b624:	2b00      	cmp	r3, #0
 800b626:	da0b      	bge.n	800b640 <USBD_StdEPReq+0x19e>
 800b628:	7bbb      	ldrb	r3, [r7, #14]
 800b62a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b62e:	4613      	mov	r3, r2
 800b630:	009b      	lsls	r3, r3, #2
 800b632:	4413      	add	r3, r2
 800b634:	009b      	lsls	r3, r3, #2
 800b636:	3310      	adds	r3, #16
 800b638:	687a      	ldr	r2, [r7, #4]
 800b63a:	4413      	add	r3, r2
 800b63c:	3304      	adds	r3, #4
 800b63e:	e00b      	b.n	800b658 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b640:	7bbb      	ldrb	r3, [r7, #14]
 800b642:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b646:	4613      	mov	r3, r2
 800b648:	009b      	lsls	r3, r3, #2
 800b64a:	4413      	add	r3, r2
 800b64c:	009b      	lsls	r3, r3, #2
 800b64e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b652:	687a      	ldr	r2, [r7, #4]
 800b654:	4413      	add	r3, r2
 800b656:	3304      	adds	r3, #4
 800b658:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b65a:	68bb      	ldr	r3, [r7, #8]
 800b65c:	2200      	movs	r2, #0
 800b65e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b660:	68bb      	ldr	r3, [r7, #8]
 800b662:	2202      	movs	r2, #2
 800b664:	4619      	mov	r1, r3
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	f000 fc1d 	bl	800bea6 <USBD_CtlSendData>
              break;
 800b66c:	e06a      	b.n	800b744 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b66e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b672:	2b00      	cmp	r3, #0
 800b674:	da11      	bge.n	800b69a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b676:	7bbb      	ldrb	r3, [r7, #14]
 800b678:	f003 020f 	and.w	r2, r3, #15
 800b67c:	6879      	ldr	r1, [r7, #4]
 800b67e:	4613      	mov	r3, r2
 800b680:	009b      	lsls	r3, r3, #2
 800b682:	4413      	add	r3, r2
 800b684:	009b      	lsls	r3, r3, #2
 800b686:	440b      	add	r3, r1
 800b688:	3324      	adds	r3, #36	; 0x24
 800b68a:	881b      	ldrh	r3, [r3, #0]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d117      	bne.n	800b6c0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b690:	6839      	ldr	r1, [r7, #0]
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	f000 fb96 	bl	800bdc4 <USBD_CtlError>
                  break;
 800b698:	e054      	b.n	800b744 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b69a:	7bbb      	ldrb	r3, [r7, #14]
 800b69c:	f003 020f 	and.w	r2, r3, #15
 800b6a0:	6879      	ldr	r1, [r7, #4]
 800b6a2:	4613      	mov	r3, r2
 800b6a4:	009b      	lsls	r3, r3, #2
 800b6a6:	4413      	add	r3, r2
 800b6a8:	009b      	lsls	r3, r3, #2
 800b6aa:	440b      	add	r3, r1
 800b6ac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b6b0:	881b      	ldrh	r3, [r3, #0]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d104      	bne.n	800b6c0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b6b6:	6839      	ldr	r1, [r7, #0]
 800b6b8:	6878      	ldr	r0, [r7, #4]
 800b6ba:	f000 fb83 	bl	800bdc4 <USBD_CtlError>
                  break;
 800b6be:	e041      	b.n	800b744 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b6c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	da0b      	bge.n	800b6e0 <USBD_StdEPReq+0x23e>
 800b6c8:	7bbb      	ldrb	r3, [r7, #14]
 800b6ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b6ce:	4613      	mov	r3, r2
 800b6d0:	009b      	lsls	r3, r3, #2
 800b6d2:	4413      	add	r3, r2
 800b6d4:	009b      	lsls	r3, r3, #2
 800b6d6:	3310      	adds	r3, #16
 800b6d8:	687a      	ldr	r2, [r7, #4]
 800b6da:	4413      	add	r3, r2
 800b6dc:	3304      	adds	r3, #4
 800b6de:	e00b      	b.n	800b6f8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b6e0:	7bbb      	ldrb	r3, [r7, #14]
 800b6e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b6e6:	4613      	mov	r3, r2
 800b6e8:	009b      	lsls	r3, r3, #2
 800b6ea:	4413      	add	r3, r2
 800b6ec:	009b      	lsls	r3, r3, #2
 800b6ee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b6f2:	687a      	ldr	r2, [r7, #4]
 800b6f4:	4413      	add	r3, r2
 800b6f6:	3304      	adds	r3, #4
 800b6f8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b6fa:	7bbb      	ldrb	r3, [r7, #14]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d002      	beq.n	800b706 <USBD_StdEPReq+0x264>
 800b700:	7bbb      	ldrb	r3, [r7, #14]
 800b702:	2b80      	cmp	r3, #128	; 0x80
 800b704:	d103      	bne.n	800b70e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800b706:	68bb      	ldr	r3, [r7, #8]
 800b708:	2200      	movs	r2, #0
 800b70a:	601a      	str	r2, [r3, #0]
 800b70c:	e00e      	b.n	800b72c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b70e:	7bbb      	ldrb	r3, [r7, #14]
 800b710:	4619      	mov	r1, r3
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f001 f87e 	bl	800c814 <USBD_LL_IsStallEP>
 800b718:	4603      	mov	r3, r0
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d003      	beq.n	800b726 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800b71e:	68bb      	ldr	r3, [r7, #8]
 800b720:	2201      	movs	r2, #1
 800b722:	601a      	str	r2, [r3, #0]
 800b724:	e002      	b.n	800b72c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	2200      	movs	r2, #0
 800b72a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b72c:	68bb      	ldr	r3, [r7, #8]
 800b72e:	2202      	movs	r2, #2
 800b730:	4619      	mov	r1, r3
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f000 fbb7 	bl	800bea6 <USBD_CtlSendData>
              break;
 800b738:	e004      	b.n	800b744 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800b73a:	6839      	ldr	r1, [r7, #0]
 800b73c:	6878      	ldr	r0, [r7, #4]
 800b73e:	f000 fb41 	bl	800bdc4 <USBD_CtlError>
              break;
 800b742:	bf00      	nop
          }
          break;
 800b744:	e004      	b.n	800b750 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800b746:	6839      	ldr	r1, [r7, #0]
 800b748:	6878      	ldr	r0, [r7, #4]
 800b74a:	f000 fb3b 	bl	800bdc4 <USBD_CtlError>
          break;
 800b74e:	bf00      	nop
      }
      break;
 800b750:	e004      	b.n	800b75c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800b752:	6839      	ldr	r1, [r7, #0]
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f000 fb35 	bl	800bdc4 <USBD_CtlError>
      break;
 800b75a:	bf00      	nop
  }

  return ret;
 800b75c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b75e:	4618      	mov	r0, r3
 800b760:	3710      	adds	r7, #16
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}
	...

0800b768 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b084      	sub	sp, #16
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
 800b770:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b772:	2300      	movs	r3, #0
 800b774:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b776:	2300      	movs	r3, #0
 800b778:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b77a:	2300      	movs	r3, #0
 800b77c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	885b      	ldrh	r3, [r3, #2]
 800b782:	0a1b      	lsrs	r3, r3, #8
 800b784:	b29b      	uxth	r3, r3
 800b786:	3b01      	subs	r3, #1
 800b788:	2b06      	cmp	r3, #6
 800b78a:	f200 8128 	bhi.w	800b9de <USBD_GetDescriptor+0x276>
 800b78e:	a201      	add	r2, pc, #4	; (adr r2, 800b794 <USBD_GetDescriptor+0x2c>)
 800b790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b794:	0800b7b1 	.word	0x0800b7b1
 800b798:	0800b7c9 	.word	0x0800b7c9
 800b79c:	0800b809 	.word	0x0800b809
 800b7a0:	0800b9df 	.word	0x0800b9df
 800b7a4:	0800b9df 	.word	0x0800b9df
 800b7a8:	0800b97f 	.word	0x0800b97f
 800b7ac:	0800b9ab 	.word	0x0800b9ab
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	687a      	ldr	r2, [r7, #4]
 800b7ba:	7c12      	ldrb	r2, [r2, #16]
 800b7bc:	f107 0108 	add.w	r1, r7, #8
 800b7c0:	4610      	mov	r0, r2
 800b7c2:	4798      	blx	r3
 800b7c4:	60f8      	str	r0, [r7, #12]
      break;
 800b7c6:	e112      	b.n	800b9ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	7c1b      	ldrb	r3, [r3, #16]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d10d      	bne.n	800b7ec <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7d8:	f107 0208 	add.w	r2, r7, #8
 800b7dc:	4610      	mov	r0, r2
 800b7de:	4798      	blx	r3
 800b7e0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	3301      	adds	r3, #1
 800b7e6:	2202      	movs	r2, #2
 800b7e8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b7ea:	e100      	b.n	800b9ee <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7f4:	f107 0208 	add.w	r2, r7, #8
 800b7f8:	4610      	mov	r0, r2
 800b7fa:	4798      	blx	r3
 800b7fc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	3301      	adds	r3, #1
 800b802:	2202      	movs	r2, #2
 800b804:	701a      	strb	r2, [r3, #0]
      break;
 800b806:	e0f2      	b.n	800b9ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	885b      	ldrh	r3, [r3, #2]
 800b80c:	b2db      	uxtb	r3, r3
 800b80e:	2b05      	cmp	r3, #5
 800b810:	f200 80ac 	bhi.w	800b96c <USBD_GetDescriptor+0x204>
 800b814:	a201      	add	r2, pc, #4	; (adr r2, 800b81c <USBD_GetDescriptor+0xb4>)
 800b816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b81a:	bf00      	nop
 800b81c:	0800b835 	.word	0x0800b835
 800b820:	0800b869 	.word	0x0800b869
 800b824:	0800b89d 	.word	0x0800b89d
 800b828:	0800b8d1 	.word	0x0800b8d1
 800b82c:	0800b905 	.word	0x0800b905
 800b830:	0800b939 	.word	0x0800b939
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b83a:	685b      	ldr	r3, [r3, #4]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d00b      	beq.n	800b858 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b846:	685b      	ldr	r3, [r3, #4]
 800b848:	687a      	ldr	r2, [r7, #4]
 800b84a:	7c12      	ldrb	r2, [r2, #16]
 800b84c:	f107 0108 	add.w	r1, r7, #8
 800b850:	4610      	mov	r0, r2
 800b852:	4798      	blx	r3
 800b854:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b856:	e091      	b.n	800b97c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b858:	6839      	ldr	r1, [r7, #0]
 800b85a:	6878      	ldr	r0, [r7, #4]
 800b85c:	f000 fab2 	bl	800bdc4 <USBD_CtlError>
            err++;
 800b860:	7afb      	ldrb	r3, [r7, #11]
 800b862:	3301      	adds	r3, #1
 800b864:	72fb      	strb	r3, [r7, #11]
          break;
 800b866:	e089      	b.n	800b97c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b86e:	689b      	ldr	r3, [r3, #8]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d00b      	beq.n	800b88c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b87a:	689b      	ldr	r3, [r3, #8]
 800b87c:	687a      	ldr	r2, [r7, #4]
 800b87e:	7c12      	ldrb	r2, [r2, #16]
 800b880:	f107 0108 	add.w	r1, r7, #8
 800b884:	4610      	mov	r0, r2
 800b886:	4798      	blx	r3
 800b888:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b88a:	e077      	b.n	800b97c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b88c:	6839      	ldr	r1, [r7, #0]
 800b88e:	6878      	ldr	r0, [r7, #4]
 800b890:	f000 fa98 	bl	800bdc4 <USBD_CtlError>
            err++;
 800b894:	7afb      	ldrb	r3, [r7, #11]
 800b896:	3301      	adds	r3, #1
 800b898:	72fb      	strb	r3, [r7, #11]
          break;
 800b89a:	e06f      	b.n	800b97c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8a2:	68db      	ldr	r3, [r3, #12]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d00b      	beq.n	800b8c0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8ae:	68db      	ldr	r3, [r3, #12]
 800b8b0:	687a      	ldr	r2, [r7, #4]
 800b8b2:	7c12      	ldrb	r2, [r2, #16]
 800b8b4:	f107 0108 	add.w	r1, r7, #8
 800b8b8:	4610      	mov	r0, r2
 800b8ba:	4798      	blx	r3
 800b8bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b8be:	e05d      	b.n	800b97c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b8c0:	6839      	ldr	r1, [r7, #0]
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f000 fa7e 	bl	800bdc4 <USBD_CtlError>
            err++;
 800b8c8:	7afb      	ldrb	r3, [r7, #11]
 800b8ca:	3301      	adds	r3, #1
 800b8cc:	72fb      	strb	r3, [r7, #11]
          break;
 800b8ce:	e055      	b.n	800b97c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8d6:	691b      	ldr	r3, [r3, #16]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d00b      	beq.n	800b8f4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8e2:	691b      	ldr	r3, [r3, #16]
 800b8e4:	687a      	ldr	r2, [r7, #4]
 800b8e6:	7c12      	ldrb	r2, [r2, #16]
 800b8e8:	f107 0108 	add.w	r1, r7, #8
 800b8ec:	4610      	mov	r0, r2
 800b8ee:	4798      	blx	r3
 800b8f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b8f2:	e043      	b.n	800b97c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b8f4:	6839      	ldr	r1, [r7, #0]
 800b8f6:	6878      	ldr	r0, [r7, #4]
 800b8f8:	f000 fa64 	bl	800bdc4 <USBD_CtlError>
            err++;
 800b8fc:	7afb      	ldrb	r3, [r7, #11]
 800b8fe:	3301      	adds	r3, #1
 800b900:	72fb      	strb	r3, [r7, #11]
          break;
 800b902:	e03b      	b.n	800b97c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b90a:	695b      	ldr	r3, [r3, #20]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d00b      	beq.n	800b928 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b916:	695b      	ldr	r3, [r3, #20]
 800b918:	687a      	ldr	r2, [r7, #4]
 800b91a:	7c12      	ldrb	r2, [r2, #16]
 800b91c:	f107 0108 	add.w	r1, r7, #8
 800b920:	4610      	mov	r0, r2
 800b922:	4798      	blx	r3
 800b924:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b926:	e029      	b.n	800b97c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b928:	6839      	ldr	r1, [r7, #0]
 800b92a:	6878      	ldr	r0, [r7, #4]
 800b92c:	f000 fa4a 	bl	800bdc4 <USBD_CtlError>
            err++;
 800b930:	7afb      	ldrb	r3, [r7, #11]
 800b932:	3301      	adds	r3, #1
 800b934:	72fb      	strb	r3, [r7, #11]
          break;
 800b936:	e021      	b.n	800b97c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b93e:	699b      	ldr	r3, [r3, #24]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d00b      	beq.n	800b95c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b94a:	699b      	ldr	r3, [r3, #24]
 800b94c:	687a      	ldr	r2, [r7, #4]
 800b94e:	7c12      	ldrb	r2, [r2, #16]
 800b950:	f107 0108 	add.w	r1, r7, #8
 800b954:	4610      	mov	r0, r2
 800b956:	4798      	blx	r3
 800b958:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b95a:	e00f      	b.n	800b97c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b95c:	6839      	ldr	r1, [r7, #0]
 800b95e:	6878      	ldr	r0, [r7, #4]
 800b960:	f000 fa30 	bl	800bdc4 <USBD_CtlError>
            err++;
 800b964:	7afb      	ldrb	r3, [r7, #11]
 800b966:	3301      	adds	r3, #1
 800b968:	72fb      	strb	r3, [r7, #11]
          break;
 800b96a:	e007      	b.n	800b97c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b96c:	6839      	ldr	r1, [r7, #0]
 800b96e:	6878      	ldr	r0, [r7, #4]
 800b970:	f000 fa28 	bl	800bdc4 <USBD_CtlError>
          err++;
 800b974:	7afb      	ldrb	r3, [r7, #11]
 800b976:	3301      	adds	r3, #1
 800b978:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800b97a:	bf00      	nop
      }
      break;
 800b97c:	e037      	b.n	800b9ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	7c1b      	ldrb	r3, [r3, #16]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d109      	bne.n	800b99a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b98c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b98e:	f107 0208 	add.w	r2, r7, #8
 800b992:	4610      	mov	r0, r2
 800b994:	4798      	blx	r3
 800b996:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b998:	e029      	b.n	800b9ee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b99a:	6839      	ldr	r1, [r7, #0]
 800b99c:	6878      	ldr	r0, [r7, #4]
 800b99e:	f000 fa11 	bl	800bdc4 <USBD_CtlError>
        err++;
 800b9a2:	7afb      	ldrb	r3, [r7, #11]
 800b9a4:	3301      	adds	r3, #1
 800b9a6:	72fb      	strb	r3, [r7, #11]
      break;
 800b9a8:	e021      	b.n	800b9ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	7c1b      	ldrb	r3, [r3, #16]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d10d      	bne.n	800b9ce <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9ba:	f107 0208 	add.w	r2, r7, #8
 800b9be:	4610      	mov	r0, r2
 800b9c0:	4798      	blx	r3
 800b9c2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	3301      	adds	r3, #1
 800b9c8:	2207      	movs	r2, #7
 800b9ca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b9cc:	e00f      	b.n	800b9ee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b9ce:	6839      	ldr	r1, [r7, #0]
 800b9d0:	6878      	ldr	r0, [r7, #4]
 800b9d2:	f000 f9f7 	bl	800bdc4 <USBD_CtlError>
        err++;
 800b9d6:	7afb      	ldrb	r3, [r7, #11]
 800b9d8:	3301      	adds	r3, #1
 800b9da:	72fb      	strb	r3, [r7, #11]
      break;
 800b9dc:	e007      	b.n	800b9ee <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b9de:	6839      	ldr	r1, [r7, #0]
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	f000 f9ef 	bl	800bdc4 <USBD_CtlError>
      err++;
 800b9e6:	7afb      	ldrb	r3, [r7, #11]
 800b9e8:	3301      	adds	r3, #1
 800b9ea:	72fb      	strb	r3, [r7, #11]
      break;
 800b9ec:	bf00      	nop
  }

  if (err != 0U)
 800b9ee:	7afb      	ldrb	r3, [r7, #11]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d11e      	bne.n	800ba32 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	88db      	ldrh	r3, [r3, #6]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d016      	beq.n	800ba2a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b9fc:	893b      	ldrh	r3, [r7, #8]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d00e      	beq.n	800ba20 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	88da      	ldrh	r2, [r3, #6]
 800ba06:	893b      	ldrh	r3, [r7, #8]
 800ba08:	4293      	cmp	r3, r2
 800ba0a:	bf28      	it	cs
 800ba0c:	4613      	movcs	r3, r2
 800ba0e:	b29b      	uxth	r3, r3
 800ba10:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ba12:	893b      	ldrh	r3, [r7, #8]
 800ba14:	461a      	mov	r2, r3
 800ba16:	68f9      	ldr	r1, [r7, #12]
 800ba18:	6878      	ldr	r0, [r7, #4]
 800ba1a:	f000 fa44 	bl	800bea6 <USBD_CtlSendData>
 800ba1e:	e009      	b.n	800ba34 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ba20:	6839      	ldr	r1, [r7, #0]
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	f000 f9ce 	bl	800bdc4 <USBD_CtlError>
 800ba28:	e004      	b.n	800ba34 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ba2a:	6878      	ldr	r0, [r7, #4]
 800ba2c:	f000 fa95 	bl	800bf5a <USBD_CtlSendStatus>
 800ba30:	e000      	b.n	800ba34 <USBD_GetDescriptor+0x2cc>
    return;
 800ba32:	bf00      	nop
  }
}
 800ba34:	3710      	adds	r7, #16
 800ba36:	46bd      	mov	sp, r7
 800ba38:	bd80      	pop	{r7, pc}
 800ba3a:	bf00      	nop

0800ba3c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b084      	sub	sp, #16
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
 800ba44:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	889b      	ldrh	r3, [r3, #4]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d131      	bne.n	800bab2 <USBD_SetAddress+0x76>
 800ba4e:	683b      	ldr	r3, [r7, #0]
 800ba50:	88db      	ldrh	r3, [r3, #6]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d12d      	bne.n	800bab2 <USBD_SetAddress+0x76>
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	885b      	ldrh	r3, [r3, #2]
 800ba5a:	2b7f      	cmp	r3, #127	; 0x7f
 800ba5c:	d829      	bhi.n	800bab2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	885b      	ldrh	r3, [r3, #2]
 800ba62:	b2db      	uxtb	r3, r3
 800ba64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba68:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba70:	b2db      	uxtb	r3, r3
 800ba72:	2b03      	cmp	r3, #3
 800ba74:	d104      	bne.n	800ba80 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ba76:	6839      	ldr	r1, [r7, #0]
 800ba78:	6878      	ldr	r0, [r7, #4]
 800ba7a:	f000 f9a3 	bl	800bdc4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba7e:	e01d      	b.n	800babc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	7bfa      	ldrb	r2, [r7, #15]
 800ba84:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ba88:	7bfb      	ldrb	r3, [r7, #15]
 800ba8a:	4619      	mov	r1, r3
 800ba8c:	6878      	ldr	r0, [r7, #4]
 800ba8e:	f000 feed 	bl	800c86c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ba92:	6878      	ldr	r0, [r7, #4]
 800ba94:	f000 fa61 	bl	800bf5a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ba98:	7bfb      	ldrb	r3, [r7, #15]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d004      	beq.n	800baa8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	2202      	movs	r2, #2
 800baa2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800baa6:	e009      	b.n	800babc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2201      	movs	r2, #1
 800baac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bab0:	e004      	b.n	800babc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bab2:	6839      	ldr	r1, [r7, #0]
 800bab4:	6878      	ldr	r0, [r7, #4]
 800bab6:	f000 f985 	bl	800bdc4 <USBD_CtlError>
  }
}
 800baba:	bf00      	nop
 800babc:	bf00      	nop
 800babe:	3710      	adds	r7, #16
 800bac0:	46bd      	mov	sp, r7
 800bac2:	bd80      	pop	{r7, pc}

0800bac4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b084      	sub	sp, #16
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
 800bacc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bace:	2300      	movs	r3, #0
 800bad0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	885b      	ldrh	r3, [r3, #2]
 800bad6:	b2da      	uxtb	r2, r3
 800bad8:	4b4c      	ldr	r3, [pc, #304]	; (800bc0c <USBD_SetConfig+0x148>)
 800bada:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800badc:	4b4b      	ldr	r3, [pc, #300]	; (800bc0c <USBD_SetConfig+0x148>)
 800bade:	781b      	ldrb	r3, [r3, #0]
 800bae0:	2b01      	cmp	r3, #1
 800bae2:	d905      	bls.n	800baf0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bae4:	6839      	ldr	r1, [r7, #0]
 800bae6:	6878      	ldr	r0, [r7, #4]
 800bae8:	f000 f96c 	bl	800bdc4 <USBD_CtlError>
    return USBD_FAIL;
 800baec:	2303      	movs	r3, #3
 800baee:	e088      	b.n	800bc02 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800baf6:	b2db      	uxtb	r3, r3
 800baf8:	2b02      	cmp	r3, #2
 800bafa:	d002      	beq.n	800bb02 <USBD_SetConfig+0x3e>
 800bafc:	2b03      	cmp	r3, #3
 800bafe:	d025      	beq.n	800bb4c <USBD_SetConfig+0x88>
 800bb00:	e071      	b.n	800bbe6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800bb02:	4b42      	ldr	r3, [pc, #264]	; (800bc0c <USBD_SetConfig+0x148>)
 800bb04:	781b      	ldrb	r3, [r3, #0]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d01c      	beq.n	800bb44 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800bb0a:	4b40      	ldr	r3, [pc, #256]	; (800bc0c <USBD_SetConfig+0x148>)
 800bb0c:	781b      	ldrb	r3, [r3, #0]
 800bb0e:	461a      	mov	r2, r3
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bb14:	4b3d      	ldr	r3, [pc, #244]	; (800bc0c <USBD_SetConfig+0x148>)
 800bb16:	781b      	ldrb	r3, [r3, #0]
 800bb18:	4619      	mov	r1, r3
 800bb1a:	6878      	ldr	r0, [r7, #4]
 800bb1c:	f7ff f948 	bl	800adb0 <USBD_SetClassConfig>
 800bb20:	4603      	mov	r3, r0
 800bb22:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800bb24:	7bfb      	ldrb	r3, [r7, #15]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d004      	beq.n	800bb34 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800bb2a:	6839      	ldr	r1, [r7, #0]
 800bb2c:	6878      	ldr	r0, [r7, #4]
 800bb2e:	f000 f949 	bl	800bdc4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bb32:	e065      	b.n	800bc00 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800bb34:	6878      	ldr	r0, [r7, #4]
 800bb36:	f000 fa10 	bl	800bf5a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	2203      	movs	r2, #3
 800bb3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bb42:	e05d      	b.n	800bc00 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800bb44:	6878      	ldr	r0, [r7, #4]
 800bb46:	f000 fa08 	bl	800bf5a <USBD_CtlSendStatus>
      break;
 800bb4a:	e059      	b.n	800bc00 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800bb4c:	4b2f      	ldr	r3, [pc, #188]	; (800bc0c <USBD_SetConfig+0x148>)
 800bb4e:	781b      	ldrb	r3, [r3, #0]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d112      	bne.n	800bb7a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2202      	movs	r2, #2
 800bb58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800bb5c:	4b2b      	ldr	r3, [pc, #172]	; (800bc0c <USBD_SetConfig+0x148>)
 800bb5e:	781b      	ldrb	r3, [r3, #0]
 800bb60:	461a      	mov	r2, r3
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bb66:	4b29      	ldr	r3, [pc, #164]	; (800bc0c <USBD_SetConfig+0x148>)
 800bb68:	781b      	ldrb	r3, [r3, #0]
 800bb6a:	4619      	mov	r1, r3
 800bb6c:	6878      	ldr	r0, [r7, #4]
 800bb6e:	f7ff f93b 	bl	800ade8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bb72:	6878      	ldr	r0, [r7, #4]
 800bb74:	f000 f9f1 	bl	800bf5a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bb78:	e042      	b.n	800bc00 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800bb7a:	4b24      	ldr	r3, [pc, #144]	; (800bc0c <USBD_SetConfig+0x148>)
 800bb7c:	781b      	ldrb	r3, [r3, #0]
 800bb7e:	461a      	mov	r2, r3
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	685b      	ldr	r3, [r3, #4]
 800bb84:	429a      	cmp	r2, r3
 800bb86:	d02a      	beq.n	800bbde <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	685b      	ldr	r3, [r3, #4]
 800bb8c:	b2db      	uxtb	r3, r3
 800bb8e:	4619      	mov	r1, r3
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	f7ff f929 	bl	800ade8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bb96:	4b1d      	ldr	r3, [pc, #116]	; (800bc0c <USBD_SetConfig+0x148>)
 800bb98:	781b      	ldrb	r3, [r3, #0]
 800bb9a:	461a      	mov	r2, r3
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bba0:	4b1a      	ldr	r3, [pc, #104]	; (800bc0c <USBD_SetConfig+0x148>)
 800bba2:	781b      	ldrb	r3, [r3, #0]
 800bba4:	4619      	mov	r1, r3
 800bba6:	6878      	ldr	r0, [r7, #4]
 800bba8:	f7ff f902 	bl	800adb0 <USBD_SetClassConfig>
 800bbac:	4603      	mov	r3, r0
 800bbae:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800bbb0:	7bfb      	ldrb	r3, [r7, #15]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d00f      	beq.n	800bbd6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800bbb6:	6839      	ldr	r1, [r7, #0]
 800bbb8:	6878      	ldr	r0, [r7, #4]
 800bbba:	f000 f903 	bl	800bdc4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	685b      	ldr	r3, [r3, #4]
 800bbc2:	b2db      	uxtb	r3, r3
 800bbc4:	4619      	mov	r1, r3
 800bbc6:	6878      	ldr	r0, [r7, #4]
 800bbc8:	f7ff f90e 	bl	800ade8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	2202      	movs	r2, #2
 800bbd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bbd4:	e014      	b.n	800bc00 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800bbd6:	6878      	ldr	r0, [r7, #4]
 800bbd8:	f000 f9bf 	bl	800bf5a <USBD_CtlSendStatus>
      break;
 800bbdc:	e010      	b.n	800bc00 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800bbde:	6878      	ldr	r0, [r7, #4]
 800bbe0:	f000 f9bb 	bl	800bf5a <USBD_CtlSendStatus>
      break;
 800bbe4:	e00c      	b.n	800bc00 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800bbe6:	6839      	ldr	r1, [r7, #0]
 800bbe8:	6878      	ldr	r0, [r7, #4]
 800bbea:	f000 f8eb 	bl	800bdc4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bbee:	4b07      	ldr	r3, [pc, #28]	; (800bc0c <USBD_SetConfig+0x148>)
 800bbf0:	781b      	ldrb	r3, [r3, #0]
 800bbf2:	4619      	mov	r1, r3
 800bbf4:	6878      	ldr	r0, [r7, #4]
 800bbf6:	f7ff f8f7 	bl	800ade8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800bbfa:	2303      	movs	r3, #3
 800bbfc:	73fb      	strb	r3, [r7, #15]
      break;
 800bbfe:	bf00      	nop
  }

  return ret;
 800bc00:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc02:	4618      	mov	r0, r3
 800bc04:	3710      	adds	r7, #16
 800bc06:	46bd      	mov	sp, r7
 800bc08:	bd80      	pop	{r7, pc}
 800bc0a:	bf00      	nop
 800bc0c:	200096f0 	.word	0x200096f0

0800bc10 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b082      	sub	sp, #8
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
 800bc18:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	88db      	ldrh	r3, [r3, #6]
 800bc1e:	2b01      	cmp	r3, #1
 800bc20:	d004      	beq.n	800bc2c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bc22:	6839      	ldr	r1, [r7, #0]
 800bc24:	6878      	ldr	r0, [r7, #4]
 800bc26:	f000 f8cd 	bl	800bdc4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bc2a:	e023      	b.n	800bc74 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc32:	b2db      	uxtb	r3, r3
 800bc34:	2b02      	cmp	r3, #2
 800bc36:	dc02      	bgt.n	800bc3e <USBD_GetConfig+0x2e>
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	dc03      	bgt.n	800bc44 <USBD_GetConfig+0x34>
 800bc3c:	e015      	b.n	800bc6a <USBD_GetConfig+0x5a>
 800bc3e:	2b03      	cmp	r3, #3
 800bc40:	d00b      	beq.n	800bc5a <USBD_GetConfig+0x4a>
 800bc42:	e012      	b.n	800bc6a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2200      	movs	r2, #0
 800bc48:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	3308      	adds	r3, #8
 800bc4e:	2201      	movs	r2, #1
 800bc50:	4619      	mov	r1, r3
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	f000 f927 	bl	800bea6 <USBD_CtlSendData>
        break;
 800bc58:	e00c      	b.n	800bc74 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	3304      	adds	r3, #4
 800bc5e:	2201      	movs	r2, #1
 800bc60:	4619      	mov	r1, r3
 800bc62:	6878      	ldr	r0, [r7, #4]
 800bc64:	f000 f91f 	bl	800bea6 <USBD_CtlSendData>
        break;
 800bc68:	e004      	b.n	800bc74 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800bc6a:	6839      	ldr	r1, [r7, #0]
 800bc6c:	6878      	ldr	r0, [r7, #4]
 800bc6e:	f000 f8a9 	bl	800bdc4 <USBD_CtlError>
        break;
 800bc72:	bf00      	nop
}
 800bc74:	bf00      	nop
 800bc76:	3708      	adds	r7, #8
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	bd80      	pop	{r7, pc}

0800bc7c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b082      	sub	sp, #8
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
 800bc84:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc8c:	b2db      	uxtb	r3, r3
 800bc8e:	3b01      	subs	r3, #1
 800bc90:	2b02      	cmp	r3, #2
 800bc92:	d81e      	bhi.n	800bcd2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bc94:	683b      	ldr	r3, [r7, #0]
 800bc96:	88db      	ldrh	r3, [r3, #6]
 800bc98:	2b02      	cmp	r3, #2
 800bc9a:	d004      	beq.n	800bca6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800bc9c:	6839      	ldr	r1, [r7, #0]
 800bc9e:	6878      	ldr	r0, [r7, #4]
 800bca0:	f000 f890 	bl	800bdc4 <USBD_CtlError>
        break;
 800bca4:	e01a      	b.n	800bcdc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	2201      	movs	r2, #1
 800bcaa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d005      	beq.n	800bcc2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	68db      	ldr	r3, [r3, #12]
 800bcba:	f043 0202 	orr.w	r2, r3, #2
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	330c      	adds	r3, #12
 800bcc6:	2202      	movs	r2, #2
 800bcc8:	4619      	mov	r1, r3
 800bcca:	6878      	ldr	r0, [r7, #4]
 800bccc:	f000 f8eb 	bl	800bea6 <USBD_CtlSendData>
      break;
 800bcd0:	e004      	b.n	800bcdc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800bcd2:	6839      	ldr	r1, [r7, #0]
 800bcd4:	6878      	ldr	r0, [r7, #4]
 800bcd6:	f000 f875 	bl	800bdc4 <USBD_CtlError>
      break;
 800bcda:	bf00      	nop
  }
}
 800bcdc:	bf00      	nop
 800bcde:	3708      	adds	r7, #8
 800bce0:	46bd      	mov	sp, r7
 800bce2:	bd80      	pop	{r7, pc}

0800bce4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b082      	sub	sp, #8
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
 800bcec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	885b      	ldrh	r3, [r3, #2]
 800bcf2:	2b01      	cmp	r3, #1
 800bcf4:	d106      	bne.n	800bd04 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	2201      	movs	r2, #1
 800bcfa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800bcfe:	6878      	ldr	r0, [r7, #4]
 800bd00:	f000 f92b 	bl	800bf5a <USBD_CtlSendStatus>
  }
}
 800bd04:	bf00      	nop
 800bd06:	3708      	adds	r7, #8
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	bd80      	pop	{r7, pc}

0800bd0c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b082      	sub	sp, #8
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
 800bd14:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd1c:	b2db      	uxtb	r3, r3
 800bd1e:	3b01      	subs	r3, #1
 800bd20:	2b02      	cmp	r3, #2
 800bd22:	d80b      	bhi.n	800bd3c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	885b      	ldrh	r3, [r3, #2]
 800bd28:	2b01      	cmp	r3, #1
 800bd2a:	d10c      	bne.n	800bd46 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2200      	movs	r2, #0
 800bd30:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800bd34:	6878      	ldr	r0, [r7, #4]
 800bd36:	f000 f910 	bl	800bf5a <USBD_CtlSendStatus>
      }
      break;
 800bd3a:	e004      	b.n	800bd46 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800bd3c:	6839      	ldr	r1, [r7, #0]
 800bd3e:	6878      	ldr	r0, [r7, #4]
 800bd40:	f000 f840 	bl	800bdc4 <USBD_CtlError>
      break;
 800bd44:	e000      	b.n	800bd48 <USBD_ClrFeature+0x3c>
      break;
 800bd46:	bf00      	nop
  }
}
 800bd48:	bf00      	nop
 800bd4a:	3708      	adds	r7, #8
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	bd80      	pop	{r7, pc}

0800bd50 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b084      	sub	sp, #16
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
 800bd58:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	781a      	ldrb	r2, [r3, #0]
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	3301      	adds	r3, #1
 800bd6a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	781a      	ldrb	r2, [r3, #0]
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	3301      	adds	r3, #1
 800bd78:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800bd7a:	68f8      	ldr	r0, [r7, #12]
 800bd7c:	f7ff fabb 	bl	800b2f6 <SWAPBYTE>
 800bd80:	4603      	mov	r3, r0
 800bd82:	461a      	mov	r2, r3
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	3301      	adds	r3, #1
 800bd8c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	3301      	adds	r3, #1
 800bd92:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800bd94:	68f8      	ldr	r0, [r7, #12]
 800bd96:	f7ff faae 	bl	800b2f6 <SWAPBYTE>
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	461a      	mov	r2, r3
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	3301      	adds	r3, #1
 800bda6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	3301      	adds	r3, #1
 800bdac:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800bdae:	68f8      	ldr	r0, [r7, #12]
 800bdb0:	f7ff faa1 	bl	800b2f6 <SWAPBYTE>
 800bdb4:	4603      	mov	r3, r0
 800bdb6:	461a      	mov	r2, r3
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	80da      	strh	r2, [r3, #6]
}
 800bdbc:	bf00      	nop
 800bdbe:	3710      	adds	r7, #16
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	bd80      	pop	{r7, pc}

0800bdc4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b082      	sub	sp, #8
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
 800bdcc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800bdce:	2180      	movs	r1, #128	; 0x80
 800bdd0:	6878      	ldr	r0, [r7, #4]
 800bdd2:	f000 fce1 	bl	800c798 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bdd6:	2100      	movs	r1, #0
 800bdd8:	6878      	ldr	r0, [r7, #4]
 800bdda:	f000 fcdd 	bl	800c798 <USBD_LL_StallEP>
}
 800bdde:	bf00      	nop
 800bde0:	3708      	adds	r7, #8
 800bde2:	46bd      	mov	sp, r7
 800bde4:	bd80      	pop	{r7, pc}

0800bde6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bde6:	b580      	push	{r7, lr}
 800bde8:	b086      	sub	sp, #24
 800bdea:	af00      	add	r7, sp, #0
 800bdec:	60f8      	str	r0, [r7, #12]
 800bdee:	60b9      	str	r1, [r7, #8]
 800bdf0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d036      	beq.n	800be6a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800be00:	6938      	ldr	r0, [r7, #16]
 800be02:	f000 f836 	bl	800be72 <USBD_GetLen>
 800be06:	4603      	mov	r3, r0
 800be08:	3301      	adds	r3, #1
 800be0a:	b29b      	uxth	r3, r3
 800be0c:	005b      	lsls	r3, r3, #1
 800be0e:	b29a      	uxth	r2, r3
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800be14:	7dfb      	ldrb	r3, [r7, #23]
 800be16:	68ba      	ldr	r2, [r7, #8]
 800be18:	4413      	add	r3, r2
 800be1a:	687a      	ldr	r2, [r7, #4]
 800be1c:	7812      	ldrb	r2, [r2, #0]
 800be1e:	701a      	strb	r2, [r3, #0]
  idx++;
 800be20:	7dfb      	ldrb	r3, [r7, #23]
 800be22:	3301      	adds	r3, #1
 800be24:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800be26:	7dfb      	ldrb	r3, [r7, #23]
 800be28:	68ba      	ldr	r2, [r7, #8]
 800be2a:	4413      	add	r3, r2
 800be2c:	2203      	movs	r2, #3
 800be2e:	701a      	strb	r2, [r3, #0]
  idx++;
 800be30:	7dfb      	ldrb	r3, [r7, #23]
 800be32:	3301      	adds	r3, #1
 800be34:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800be36:	e013      	b.n	800be60 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800be38:	7dfb      	ldrb	r3, [r7, #23]
 800be3a:	68ba      	ldr	r2, [r7, #8]
 800be3c:	4413      	add	r3, r2
 800be3e:	693a      	ldr	r2, [r7, #16]
 800be40:	7812      	ldrb	r2, [r2, #0]
 800be42:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800be44:	693b      	ldr	r3, [r7, #16]
 800be46:	3301      	adds	r3, #1
 800be48:	613b      	str	r3, [r7, #16]
    idx++;
 800be4a:	7dfb      	ldrb	r3, [r7, #23]
 800be4c:	3301      	adds	r3, #1
 800be4e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800be50:	7dfb      	ldrb	r3, [r7, #23]
 800be52:	68ba      	ldr	r2, [r7, #8]
 800be54:	4413      	add	r3, r2
 800be56:	2200      	movs	r2, #0
 800be58:	701a      	strb	r2, [r3, #0]
    idx++;
 800be5a:	7dfb      	ldrb	r3, [r7, #23]
 800be5c:	3301      	adds	r3, #1
 800be5e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800be60:	693b      	ldr	r3, [r7, #16]
 800be62:	781b      	ldrb	r3, [r3, #0]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d1e7      	bne.n	800be38 <USBD_GetString+0x52>
 800be68:	e000      	b.n	800be6c <USBD_GetString+0x86>
    return;
 800be6a:	bf00      	nop
  }
}
 800be6c:	3718      	adds	r7, #24
 800be6e:	46bd      	mov	sp, r7
 800be70:	bd80      	pop	{r7, pc}

0800be72 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800be72:	b480      	push	{r7}
 800be74:	b085      	sub	sp, #20
 800be76:	af00      	add	r7, sp, #0
 800be78:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800be7a:	2300      	movs	r3, #0
 800be7c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800be82:	e005      	b.n	800be90 <USBD_GetLen+0x1e>
  {
    len++;
 800be84:	7bfb      	ldrb	r3, [r7, #15]
 800be86:	3301      	adds	r3, #1
 800be88:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800be8a:	68bb      	ldr	r3, [r7, #8]
 800be8c:	3301      	adds	r3, #1
 800be8e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800be90:	68bb      	ldr	r3, [r7, #8]
 800be92:	781b      	ldrb	r3, [r3, #0]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d1f5      	bne.n	800be84 <USBD_GetLen+0x12>
  }

  return len;
 800be98:	7bfb      	ldrb	r3, [r7, #15]
}
 800be9a:	4618      	mov	r0, r3
 800be9c:	3714      	adds	r7, #20
 800be9e:	46bd      	mov	sp, r7
 800bea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea4:	4770      	bx	lr

0800bea6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bea6:	b580      	push	{r7, lr}
 800bea8:	b084      	sub	sp, #16
 800beaa:	af00      	add	r7, sp, #0
 800beac:	60f8      	str	r0, [r7, #12]
 800beae:	60b9      	str	r1, [r7, #8]
 800beb0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	2202      	movs	r2, #2
 800beb6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	687a      	ldr	r2, [r7, #4]
 800bebe:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	687a      	ldr	r2, [r7, #4]
 800bec4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	68ba      	ldr	r2, [r7, #8]
 800beca:	2100      	movs	r1, #0
 800becc:	68f8      	ldr	r0, [r7, #12]
 800bece:	f000 fcec 	bl	800c8aa <USBD_LL_Transmit>

  return USBD_OK;
 800bed2:	2300      	movs	r3, #0
}
 800bed4:	4618      	mov	r0, r3
 800bed6:	3710      	adds	r7, #16
 800bed8:	46bd      	mov	sp, r7
 800beda:	bd80      	pop	{r7, pc}

0800bedc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b084      	sub	sp, #16
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	60f8      	str	r0, [r7, #12]
 800bee4:	60b9      	str	r1, [r7, #8]
 800bee6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	68ba      	ldr	r2, [r7, #8]
 800beec:	2100      	movs	r1, #0
 800beee:	68f8      	ldr	r0, [r7, #12]
 800bef0:	f000 fcdb 	bl	800c8aa <USBD_LL_Transmit>

  return USBD_OK;
 800bef4:	2300      	movs	r3, #0
}
 800bef6:	4618      	mov	r0, r3
 800bef8:	3710      	adds	r7, #16
 800befa:	46bd      	mov	sp, r7
 800befc:	bd80      	pop	{r7, pc}

0800befe <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800befe:	b580      	push	{r7, lr}
 800bf00:	b084      	sub	sp, #16
 800bf02:	af00      	add	r7, sp, #0
 800bf04:	60f8      	str	r0, [r7, #12]
 800bf06:	60b9      	str	r1, [r7, #8]
 800bf08:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	2203      	movs	r2, #3
 800bf0e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	687a      	ldr	r2, [r7, #4]
 800bf16:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	687a      	ldr	r2, [r7, #4]
 800bf1e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	68ba      	ldr	r2, [r7, #8]
 800bf26:	2100      	movs	r1, #0
 800bf28:	68f8      	ldr	r0, [r7, #12]
 800bf2a:	f000 fcdf 	bl	800c8ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bf2e:	2300      	movs	r3, #0
}
 800bf30:	4618      	mov	r0, r3
 800bf32:	3710      	adds	r7, #16
 800bf34:	46bd      	mov	sp, r7
 800bf36:	bd80      	pop	{r7, pc}

0800bf38 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b084      	sub	sp, #16
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	60f8      	str	r0, [r7, #12]
 800bf40:	60b9      	str	r1, [r7, #8]
 800bf42:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	68ba      	ldr	r2, [r7, #8]
 800bf48:	2100      	movs	r1, #0
 800bf4a:	68f8      	ldr	r0, [r7, #12]
 800bf4c:	f000 fcce 	bl	800c8ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bf50:	2300      	movs	r3, #0
}
 800bf52:	4618      	mov	r0, r3
 800bf54:	3710      	adds	r7, #16
 800bf56:	46bd      	mov	sp, r7
 800bf58:	bd80      	pop	{r7, pc}

0800bf5a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bf5a:	b580      	push	{r7, lr}
 800bf5c:	b082      	sub	sp, #8
 800bf5e:	af00      	add	r7, sp, #0
 800bf60:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	2204      	movs	r2, #4
 800bf66:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	2100      	movs	r1, #0
 800bf70:	6878      	ldr	r0, [r7, #4]
 800bf72:	f000 fc9a 	bl	800c8aa <USBD_LL_Transmit>

  return USBD_OK;
 800bf76:	2300      	movs	r3, #0
}
 800bf78:	4618      	mov	r0, r3
 800bf7a:	3708      	adds	r7, #8
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bd80      	pop	{r7, pc}

0800bf80 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b082      	sub	sp, #8
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	2205      	movs	r2, #5
 800bf8c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bf90:	2300      	movs	r3, #0
 800bf92:	2200      	movs	r2, #0
 800bf94:	2100      	movs	r1, #0
 800bf96:	6878      	ldr	r0, [r7, #4]
 800bf98:	f000 fca8 	bl	800c8ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bf9c:	2300      	movs	r3, #0
}
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	3708      	adds	r7, #8
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	bd80      	pop	{r7, pc}
	...

0800bfa8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bfac:	2200      	movs	r2, #0
 800bfae:	4912      	ldr	r1, [pc, #72]	; (800bff8 <MX_USB_DEVICE_Init+0x50>)
 800bfb0:	4812      	ldr	r0, [pc, #72]	; (800bffc <MX_USB_DEVICE_Init+0x54>)
 800bfb2:	f7fe fe8f 	bl	800acd4 <USBD_Init>
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d001      	beq.n	800bfc0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bfbc:	f7f6 fa66 	bl	800248c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bfc0:	490f      	ldr	r1, [pc, #60]	; (800c000 <MX_USB_DEVICE_Init+0x58>)
 800bfc2:	480e      	ldr	r0, [pc, #56]	; (800bffc <MX_USB_DEVICE_Init+0x54>)
 800bfc4:	f7fe feb6 	bl	800ad34 <USBD_RegisterClass>
 800bfc8:	4603      	mov	r3, r0
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d001      	beq.n	800bfd2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bfce:	f7f6 fa5d 	bl	800248c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bfd2:	490c      	ldr	r1, [pc, #48]	; (800c004 <MX_USB_DEVICE_Init+0x5c>)
 800bfd4:	4809      	ldr	r0, [pc, #36]	; (800bffc <MX_USB_DEVICE_Init+0x54>)
 800bfd6:	f7fe fdd7 	bl	800ab88 <USBD_CDC_RegisterInterface>
 800bfda:	4603      	mov	r3, r0
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d001      	beq.n	800bfe4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bfe0:	f7f6 fa54 	bl	800248c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bfe4:	4805      	ldr	r0, [pc, #20]	; (800bffc <MX_USB_DEVICE_Init+0x54>)
 800bfe6:	f7fe fecc 	bl	800ad82 <USBD_Start>
 800bfea:	4603      	mov	r3, r0
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d001      	beq.n	800bff4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bff0:	f7f6 fa4c 	bl	800248c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bff4:	bf00      	nop
 800bff6:	bd80      	pop	{r7, pc}
 800bff8:	20000164 	.word	0x20000164
 800bffc:	200096f4 	.word	0x200096f4
 800c000:	2000004c 	.word	0x2000004c
 800c004:	20000150 	.word	0x20000150

0800c008 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c00c:	2200      	movs	r2, #0
 800c00e:	4905      	ldr	r1, [pc, #20]	; (800c024 <CDC_Init_FS+0x1c>)
 800c010:	4805      	ldr	r0, [pc, #20]	; (800c028 <CDC_Init_FS+0x20>)
 800c012:	f7fe fdce 	bl	800abb2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c016:	4905      	ldr	r1, [pc, #20]	; (800c02c <CDC_Init_FS+0x24>)
 800c018:	4803      	ldr	r0, [pc, #12]	; (800c028 <CDC_Init_FS+0x20>)
 800c01a:	f7fe fde8 	bl	800abee <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c01e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c020:	4618      	mov	r0, r3
 800c022:	bd80      	pop	{r7, pc}
 800c024:	2000a1c4 	.word	0x2000a1c4
 800c028:	200096f4 	.word	0x200096f4
 800c02c:	200099c4 	.word	0x200099c4

0800c030 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c030:	b480      	push	{r7}
 800c032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c034:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c036:	4618      	mov	r0, r3
 800c038:	46bd      	mov	sp, r7
 800c03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03e:	4770      	bx	lr

0800c040 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c040:	b480      	push	{r7}
 800c042:	b083      	sub	sp, #12
 800c044:	af00      	add	r7, sp, #0
 800c046:	4603      	mov	r3, r0
 800c048:	6039      	str	r1, [r7, #0]
 800c04a:	71fb      	strb	r3, [r7, #7]
 800c04c:	4613      	mov	r3, r2
 800c04e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c050:	79fb      	ldrb	r3, [r7, #7]
 800c052:	2b23      	cmp	r3, #35	; 0x23
 800c054:	d84a      	bhi.n	800c0ec <CDC_Control_FS+0xac>
 800c056:	a201      	add	r2, pc, #4	; (adr r2, 800c05c <CDC_Control_FS+0x1c>)
 800c058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c05c:	0800c0ed 	.word	0x0800c0ed
 800c060:	0800c0ed 	.word	0x0800c0ed
 800c064:	0800c0ed 	.word	0x0800c0ed
 800c068:	0800c0ed 	.word	0x0800c0ed
 800c06c:	0800c0ed 	.word	0x0800c0ed
 800c070:	0800c0ed 	.word	0x0800c0ed
 800c074:	0800c0ed 	.word	0x0800c0ed
 800c078:	0800c0ed 	.word	0x0800c0ed
 800c07c:	0800c0ed 	.word	0x0800c0ed
 800c080:	0800c0ed 	.word	0x0800c0ed
 800c084:	0800c0ed 	.word	0x0800c0ed
 800c088:	0800c0ed 	.word	0x0800c0ed
 800c08c:	0800c0ed 	.word	0x0800c0ed
 800c090:	0800c0ed 	.word	0x0800c0ed
 800c094:	0800c0ed 	.word	0x0800c0ed
 800c098:	0800c0ed 	.word	0x0800c0ed
 800c09c:	0800c0ed 	.word	0x0800c0ed
 800c0a0:	0800c0ed 	.word	0x0800c0ed
 800c0a4:	0800c0ed 	.word	0x0800c0ed
 800c0a8:	0800c0ed 	.word	0x0800c0ed
 800c0ac:	0800c0ed 	.word	0x0800c0ed
 800c0b0:	0800c0ed 	.word	0x0800c0ed
 800c0b4:	0800c0ed 	.word	0x0800c0ed
 800c0b8:	0800c0ed 	.word	0x0800c0ed
 800c0bc:	0800c0ed 	.word	0x0800c0ed
 800c0c0:	0800c0ed 	.word	0x0800c0ed
 800c0c4:	0800c0ed 	.word	0x0800c0ed
 800c0c8:	0800c0ed 	.word	0x0800c0ed
 800c0cc:	0800c0ed 	.word	0x0800c0ed
 800c0d0:	0800c0ed 	.word	0x0800c0ed
 800c0d4:	0800c0ed 	.word	0x0800c0ed
 800c0d8:	0800c0ed 	.word	0x0800c0ed
 800c0dc:	0800c0ed 	.word	0x0800c0ed
 800c0e0:	0800c0ed 	.word	0x0800c0ed
 800c0e4:	0800c0ed 	.word	0x0800c0ed
 800c0e8:	0800c0ed 	.word	0x0800c0ed
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c0ec:	bf00      	nop
  }

  return (USBD_OK);
 800c0ee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	370c      	adds	r7, #12
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fa:	4770      	bx	lr

0800c0fc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b082      	sub	sp, #8
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
 800c104:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c106:	6879      	ldr	r1, [r7, #4]
 800c108:	4805      	ldr	r0, [pc, #20]	; (800c120 <CDC_Receive_FS+0x24>)
 800c10a:	f7fe fd70 	bl	800abee <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c10e:	4804      	ldr	r0, [pc, #16]	; (800c120 <CDC_Receive_FS+0x24>)
 800c110:	f7fe fdb6 	bl	800ac80 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c114:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c116:	4618      	mov	r0, r3
 800c118:	3708      	adds	r7, #8
 800c11a:	46bd      	mov	sp, r7
 800c11c:	bd80      	pop	{r7, pc}
 800c11e:	bf00      	nop
 800c120:	200096f4 	.word	0x200096f4

0800c124 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b084      	sub	sp, #16
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
 800c12c:	460b      	mov	r3, r1
 800c12e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c130:	2300      	movs	r3, #0
 800c132:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c134:	4b0d      	ldr	r3, [pc, #52]	; (800c16c <CDC_Transmit_FS+0x48>)
 800c136:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c13a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c13c:	68bb      	ldr	r3, [r7, #8]
 800c13e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c142:	2b00      	cmp	r3, #0
 800c144:	d001      	beq.n	800c14a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c146:	2301      	movs	r3, #1
 800c148:	e00b      	b.n	800c162 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c14a:	887b      	ldrh	r3, [r7, #2]
 800c14c:	461a      	mov	r2, r3
 800c14e:	6879      	ldr	r1, [r7, #4]
 800c150:	4806      	ldr	r0, [pc, #24]	; (800c16c <CDC_Transmit_FS+0x48>)
 800c152:	f7fe fd2e 	bl	800abb2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c156:	4805      	ldr	r0, [pc, #20]	; (800c16c <CDC_Transmit_FS+0x48>)
 800c158:	f7fe fd62 	bl	800ac20 <USBD_CDC_TransmitPacket>
 800c15c:	4603      	mov	r3, r0
 800c15e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c160:	7bfb      	ldrb	r3, [r7, #15]
}
 800c162:	4618      	mov	r0, r3
 800c164:	3710      	adds	r7, #16
 800c166:	46bd      	mov	sp, r7
 800c168:	bd80      	pop	{r7, pc}
 800c16a:	bf00      	nop
 800c16c:	200096f4 	.word	0x200096f4

0800c170 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c170:	b480      	push	{r7}
 800c172:	b087      	sub	sp, #28
 800c174:	af00      	add	r7, sp, #0
 800c176:	60f8      	str	r0, [r7, #12]
 800c178:	60b9      	str	r1, [r7, #8]
 800c17a:	4613      	mov	r3, r2
 800c17c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c17e:	2300      	movs	r3, #0
 800c180:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c182:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c186:	4618      	mov	r0, r3
 800c188:	371c      	adds	r7, #28
 800c18a:	46bd      	mov	sp, r7
 800c18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c190:	4770      	bx	lr
	...

0800c194 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c194:	b480      	push	{r7}
 800c196:	b083      	sub	sp, #12
 800c198:	af00      	add	r7, sp, #0
 800c19a:	4603      	mov	r3, r0
 800c19c:	6039      	str	r1, [r7, #0]
 800c19e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c1a0:	683b      	ldr	r3, [r7, #0]
 800c1a2:	2212      	movs	r2, #18
 800c1a4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c1a6:	4b03      	ldr	r3, [pc, #12]	; (800c1b4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	370c      	adds	r7, #12
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b2:	4770      	bx	lr
 800c1b4:	20000180 	.word	0x20000180

0800c1b8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c1b8:	b480      	push	{r7}
 800c1ba:	b083      	sub	sp, #12
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	4603      	mov	r3, r0
 800c1c0:	6039      	str	r1, [r7, #0]
 800c1c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c1c4:	683b      	ldr	r3, [r7, #0]
 800c1c6:	2204      	movs	r2, #4
 800c1c8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c1ca:	4b03      	ldr	r3, [pc, #12]	; (800c1d8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	370c      	adds	r7, #12
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d6:	4770      	bx	lr
 800c1d8:	20000194 	.word	0x20000194

0800c1dc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b082      	sub	sp, #8
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	6039      	str	r1, [r7, #0]
 800c1e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c1e8:	79fb      	ldrb	r3, [r7, #7]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d105      	bne.n	800c1fa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c1ee:	683a      	ldr	r2, [r7, #0]
 800c1f0:	4907      	ldr	r1, [pc, #28]	; (800c210 <USBD_FS_ProductStrDescriptor+0x34>)
 800c1f2:	4808      	ldr	r0, [pc, #32]	; (800c214 <USBD_FS_ProductStrDescriptor+0x38>)
 800c1f4:	f7ff fdf7 	bl	800bde6 <USBD_GetString>
 800c1f8:	e004      	b.n	800c204 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c1fa:	683a      	ldr	r2, [r7, #0]
 800c1fc:	4904      	ldr	r1, [pc, #16]	; (800c210 <USBD_FS_ProductStrDescriptor+0x34>)
 800c1fe:	4805      	ldr	r0, [pc, #20]	; (800c214 <USBD_FS_ProductStrDescriptor+0x38>)
 800c200:	f7ff fdf1 	bl	800bde6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c204:	4b02      	ldr	r3, [pc, #8]	; (800c210 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c206:	4618      	mov	r0, r3
 800c208:	3708      	adds	r7, #8
 800c20a:	46bd      	mov	sp, r7
 800c20c:	bd80      	pop	{r7, pc}
 800c20e:	bf00      	nop
 800c210:	2000a9c4 	.word	0x2000a9c4
 800c214:	08010cd0 	.word	0x08010cd0

0800c218 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b082      	sub	sp, #8
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	4603      	mov	r3, r0
 800c220:	6039      	str	r1, [r7, #0]
 800c222:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c224:	683a      	ldr	r2, [r7, #0]
 800c226:	4904      	ldr	r1, [pc, #16]	; (800c238 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c228:	4804      	ldr	r0, [pc, #16]	; (800c23c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c22a:	f7ff fddc 	bl	800bde6 <USBD_GetString>
  return USBD_StrDesc;
 800c22e:	4b02      	ldr	r3, [pc, #8]	; (800c238 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c230:	4618      	mov	r0, r3
 800c232:	3708      	adds	r7, #8
 800c234:	46bd      	mov	sp, r7
 800c236:	bd80      	pop	{r7, pc}
 800c238:	2000a9c4 	.word	0x2000a9c4
 800c23c:	08010ce8 	.word	0x08010ce8

0800c240 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b082      	sub	sp, #8
 800c244:	af00      	add	r7, sp, #0
 800c246:	4603      	mov	r3, r0
 800c248:	6039      	str	r1, [r7, #0]
 800c24a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c24c:	683b      	ldr	r3, [r7, #0]
 800c24e:	221a      	movs	r2, #26
 800c250:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c252:	f000 f843 	bl	800c2dc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c256:	4b02      	ldr	r3, [pc, #8]	; (800c260 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c258:	4618      	mov	r0, r3
 800c25a:	3708      	adds	r7, #8
 800c25c:	46bd      	mov	sp, r7
 800c25e:	bd80      	pop	{r7, pc}
 800c260:	20000198 	.word	0x20000198

0800c264 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b082      	sub	sp, #8
 800c268:	af00      	add	r7, sp, #0
 800c26a:	4603      	mov	r3, r0
 800c26c:	6039      	str	r1, [r7, #0]
 800c26e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c270:	79fb      	ldrb	r3, [r7, #7]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d105      	bne.n	800c282 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c276:	683a      	ldr	r2, [r7, #0]
 800c278:	4907      	ldr	r1, [pc, #28]	; (800c298 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c27a:	4808      	ldr	r0, [pc, #32]	; (800c29c <USBD_FS_ConfigStrDescriptor+0x38>)
 800c27c:	f7ff fdb3 	bl	800bde6 <USBD_GetString>
 800c280:	e004      	b.n	800c28c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c282:	683a      	ldr	r2, [r7, #0]
 800c284:	4904      	ldr	r1, [pc, #16]	; (800c298 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c286:	4805      	ldr	r0, [pc, #20]	; (800c29c <USBD_FS_ConfigStrDescriptor+0x38>)
 800c288:	f7ff fdad 	bl	800bde6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c28c:	4b02      	ldr	r3, [pc, #8]	; (800c298 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c28e:	4618      	mov	r0, r3
 800c290:	3708      	adds	r7, #8
 800c292:	46bd      	mov	sp, r7
 800c294:	bd80      	pop	{r7, pc}
 800c296:	bf00      	nop
 800c298:	2000a9c4 	.word	0x2000a9c4
 800c29c:	08010cfc 	.word	0x08010cfc

0800c2a0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b082      	sub	sp, #8
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	4603      	mov	r3, r0
 800c2a8:	6039      	str	r1, [r7, #0]
 800c2aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c2ac:	79fb      	ldrb	r3, [r7, #7]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d105      	bne.n	800c2be <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c2b2:	683a      	ldr	r2, [r7, #0]
 800c2b4:	4907      	ldr	r1, [pc, #28]	; (800c2d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c2b6:	4808      	ldr	r0, [pc, #32]	; (800c2d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c2b8:	f7ff fd95 	bl	800bde6 <USBD_GetString>
 800c2bc:	e004      	b.n	800c2c8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c2be:	683a      	ldr	r2, [r7, #0]
 800c2c0:	4904      	ldr	r1, [pc, #16]	; (800c2d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c2c2:	4805      	ldr	r0, [pc, #20]	; (800c2d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c2c4:	f7ff fd8f 	bl	800bde6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c2c8:	4b02      	ldr	r3, [pc, #8]	; (800c2d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	3708      	adds	r7, #8
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	bd80      	pop	{r7, pc}
 800c2d2:	bf00      	nop
 800c2d4:	2000a9c4 	.word	0x2000a9c4
 800c2d8:	08010d08 	.word	0x08010d08

0800c2dc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b084      	sub	sp, #16
 800c2e0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c2e2:	4b0f      	ldr	r3, [pc, #60]	; (800c320 <Get_SerialNum+0x44>)
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c2e8:	4b0e      	ldr	r3, [pc, #56]	; (800c324 <Get_SerialNum+0x48>)
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c2ee:	4b0e      	ldr	r3, [pc, #56]	; (800c328 <Get_SerialNum+0x4c>)
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c2f4:	68fa      	ldr	r2, [r7, #12]
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	4413      	add	r3, r2
 800c2fa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d009      	beq.n	800c316 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c302:	2208      	movs	r2, #8
 800c304:	4909      	ldr	r1, [pc, #36]	; (800c32c <Get_SerialNum+0x50>)
 800c306:	68f8      	ldr	r0, [r7, #12]
 800c308:	f000 f814 	bl	800c334 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c30c:	2204      	movs	r2, #4
 800c30e:	4908      	ldr	r1, [pc, #32]	; (800c330 <Get_SerialNum+0x54>)
 800c310:	68b8      	ldr	r0, [r7, #8]
 800c312:	f000 f80f 	bl	800c334 <IntToUnicode>
  }
}
 800c316:	bf00      	nop
 800c318:	3710      	adds	r7, #16
 800c31a:	46bd      	mov	sp, r7
 800c31c:	bd80      	pop	{r7, pc}
 800c31e:	bf00      	nop
 800c320:	1fff7a10 	.word	0x1fff7a10
 800c324:	1fff7a14 	.word	0x1fff7a14
 800c328:	1fff7a18 	.word	0x1fff7a18
 800c32c:	2000019a 	.word	0x2000019a
 800c330:	200001aa 	.word	0x200001aa

0800c334 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c334:	b480      	push	{r7}
 800c336:	b087      	sub	sp, #28
 800c338:	af00      	add	r7, sp, #0
 800c33a:	60f8      	str	r0, [r7, #12]
 800c33c:	60b9      	str	r1, [r7, #8]
 800c33e:	4613      	mov	r3, r2
 800c340:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c342:	2300      	movs	r3, #0
 800c344:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c346:	2300      	movs	r3, #0
 800c348:	75fb      	strb	r3, [r7, #23]
 800c34a:	e027      	b.n	800c39c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	0f1b      	lsrs	r3, r3, #28
 800c350:	2b09      	cmp	r3, #9
 800c352:	d80b      	bhi.n	800c36c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	0f1b      	lsrs	r3, r3, #28
 800c358:	b2da      	uxtb	r2, r3
 800c35a:	7dfb      	ldrb	r3, [r7, #23]
 800c35c:	005b      	lsls	r3, r3, #1
 800c35e:	4619      	mov	r1, r3
 800c360:	68bb      	ldr	r3, [r7, #8]
 800c362:	440b      	add	r3, r1
 800c364:	3230      	adds	r2, #48	; 0x30
 800c366:	b2d2      	uxtb	r2, r2
 800c368:	701a      	strb	r2, [r3, #0]
 800c36a:	e00a      	b.n	800c382 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	0f1b      	lsrs	r3, r3, #28
 800c370:	b2da      	uxtb	r2, r3
 800c372:	7dfb      	ldrb	r3, [r7, #23]
 800c374:	005b      	lsls	r3, r3, #1
 800c376:	4619      	mov	r1, r3
 800c378:	68bb      	ldr	r3, [r7, #8]
 800c37a:	440b      	add	r3, r1
 800c37c:	3237      	adds	r2, #55	; 0x37
 800c37e:	b2d2      	uxtb	r2, r2
 800c380:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	011b      	lsls	r3, r3, #4
 800c386:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c388:	7dfb      	ldrb	r3, [r7, #23]
 800c38a:	005b      	lsls	r3, r3, #1
 800c38c:	3301      	adds	r3, #1
 800c38e:	68ba      	ldr	r2, [r7, #8]
 800c390:	4413      	add	r3, r2
 800c392:	2200      	movs	r2, #0
 800c394:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c396:	7dfb      	ldrb	r3, [r7, #23]
 800c398:	3301      	adds	r3, #1
 800c39a:	75fb      	strb	r3, [r7, #23]
 800c39c:	7dfa      	ldrb	r2, [r7, #23]
 800c39e:	79fb      	ldrb	r3, [r7, #7]
 800c3a0:	429a      	cmp	r2, r3
 800c3a2:	d3d3      	bcc.n	800c34c <IntToUnicode+0x18>
  }
}
 800c3a4:	bf00      	nop
 800c3a6:	bf00      	nop
 800c3a8:	371c      	adds	r7, #28
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b0:	4770      	bx	lr
	...

0800c3b4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b08a      	sub	sp, #40	; 0x28
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c3bc:	f107 0314 	add.w	r3, r7, #20
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	601a      	str	r2, [r3, #0]
 800c3c4:	605a      	str	r2, [r3, #4]
 800c3c6:	609a      	str	r2, [r3, #8]
 800c3c8:	60da      	str	r2, [r3, #12]
 800c3ca:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c3d4:	d13a      	bne.n	800c44c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	613b      	str	r3, [r7, #16]
 800c3da:	4b1e      	ldr	r3, [pc, #120]	; (800c454 <HAL_PCD_MspInit+0xa0>)
 800c3dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3de:	4a1d      	ldr	r2, [pc, #116]	; (800c454 <HAL_PCD_MspInit+0xa0>)
 800c3e0:	f043 0301 	orr.w	r3, r3, #1
 800c3e4:	6313      	str	r3, [r2, #48]	; 0x30
 800c3e6:	4b1b      	ldr	r3, [pc, #108]	; (800c454 <HAL_PCD_MspInit+0xa0>)
 800c3e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3ea:	f003 0301 	and.w	r3, r3, #1
 800c3ee:	613b      	str	r3, [r7, #16]
 800c3f0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c3f2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c3f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c3f8:	2302      	movs	r3, #2
 800c3fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c400:	2303      	movs	r3, #3
 800c402:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c404:	230a      	movs	r3, #10
 800c406:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c408:	f107 0314 	add.w	r3, r7, #20
 800c40c:	4619      	mov	r1, r3
 800c40e:	4812      	ldr	r0, [pc, #72]	; (800c458 <HAL_PCD_MspInit+0xa4>)
 800c410:	f7f8 f9f4 	bl	80047fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c414:	4b0f      	ldr	r3, [pc, #60]	; (800c454 <HAL_PCD_MspInit+0xa0>)
 800c416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c418:	4a0e      	ldr	r2, [pc, #56]	; (800c454 <HAL_PCD_MspInit+0xa0>)
 800c41a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c41e:	6353      	str	r3, [r2, #52]	; 0x34
 800c420:	2300      	movs	r3, #0
 800c422:	60fb      	str	r3, [r7, #12]
 800c424:	4b0b      	ldr	r3, [pc, #44]	; (800c454 <HAL_PCD_MspInit+0xa0>)
 800c426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c428:	4a0a      	ldr	r2, [pc, #40]	; (800c454 <HAL_PCD_MspInit+0xa0>)
 800c42a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c42e:	6453      	str	r3, [r2, #68]	; 0x44
 800c430:	4b08      	ldr	r3, [pc, #32]	; (800c454 <HAL_PCD_MspInit+0xa0>)
 800c432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c434:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c438:	60fb      	str	r3, [r7, #12]
 800c43a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c43c:	2200      	movs	r2, #0
 800c43e:	2100      	movs	r1, #0
 800c440:	2043      	movs	r0, #67	; 0x43
 800c442:	f7f8 f904 	bl	800464e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c446:	2043      	movs	r0, #67	; 0x43
 800c448:	f7f8 f91d 	bl	8004686 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c44c:	bf00      	nop
 800c44e:	3728      	adds	r7, #40	; 0x28
 800c450:	46bd      	mov	sp, r7
 800c452:	bd80      	pop	{r7, pc}
 800c454:	40023800 	.word	0x40023800
 800c458:	40020000 	.word	0x40020000

0800c45c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b082      	sub	sp, #8
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c470:	4619      	mov	r1, r3
 800c472:	4610      	mov	r0, r2
 800c474:	f7fe fcd0 	bl	800ae18 <USBD_LL_SetupStage>
}
 800c478:	bf00      	nop
 800c47a:	3708      	adds	r7, #8
 800c47c:	46bd      	mov	sp, r7
 800c47e:	bd80      	pop	{r7, pc}

0800c480 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b082      	sub	sp, #8
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
 800c488:	460b      	mov	r3, r1
 800c48a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800c492:	78fa      	ldrb	r2, [r7, #3]
 800c494:	6879      	ldr	r1, [r7, #4]
 800c496:	4613      	mov	r3, r2
 800c498:	00db      	lsls	r3, r3, #3
 800c49a:	1a9b      	subs	r3, r3, r2
 800c49c:	009b      	lsls	r3, r3, #2
 800c49e:	440b      	add	r3, r1
 800c4a0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c4a4:	681a      	ldr	r2, [r3, #0]
 800c4a6:	78fb      	ldrb	r3, [r7, #3]
 800c4a8:	4619      	mov	r1, r3
 800c4aa:	f7fe fd0a 	bl	800aec2 <USBD_LL_DataOutStage>
}
 800c4ae:	bf00      	nop
 800c4b0:	3708      	adds	r7, #8
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd80      	pop	{r7, pc}

0800c4b6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4b6:	b580      	push	{r7, lr}
 800c4b8:	b082      	sub	sp, #8
 800c4ba:	af00      	add	r7, sp, #0
 800c4bc:	6078      	str	r0, [r7, #4]
 800c4be:	460b      	mov	r3, r1
 800c4c0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800c4c8:	78fa      	ldrb	r2, [r7, #3]
 800c4ca:	6879      	ldr	r1, [r7, #4]
 800c4cc:	4613      	mov	r3, r2
 800c4ce:	00db      	lsls	r3, r3, #3
 800c4d0:	1a9b      	subs	r3, r3, r2
 800c4d2:	009b      	lsls	r3, r3, #2
 800c4d4:	440b      	add	r3, r1
 800c4d6:	3348      	adds	r3, #72	; 0x48
 800c4d8:	681a      	ldr	r2, [r3, #0]
 800c4da:	78fb      	ldrb	r3, [r7, #3]
 800c4dc:	4619      	mov	r1, r3
 800c4de:	f7fe fd53 	bl	800af88 <USBD_LL_DataInStage>
}
 800c4e2:	bf00      	nop
 800c4e4:	3708      	adds	r7, #8
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	bd80      	pop	{r7, pc}

0800c4ea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4ea:	b580      	push	{r7, lr}
 800c4ec:	b082      	sub	sp, #8
 800c4ee:	af00      	add	r7, sp, #0
 800c4f0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	f7fe fe67 	bl	800b1cc <USBD_LL_SOF>
}
 800c4fe:	bf00      	nop
 800c500:	3708      	adds	r7, #8
 800c502:	46bd      	mov	sp, r7
 800c504:	bd80      	pop	{r7, pc}

0800c506 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c506:	b580      	push	{r7, lr}
 800c508:	b084      	sub	sp, #16
 800c50a:	af00      	add	r7, sp, #0
 800c50c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c50e:	2301      	movs	r3, #1
 800c510:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	68db      	ldr	r3, [r3, #12]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d102      	bne.n	800c520 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c51a:	2300      	movs	r3, #0
 800c51c:	73fb      	strb	r3, [r7, #15]
 800c51e:	e008      	b.n	800c532 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	68db      	ldr	r3, [r3, #12]
 800c524:	2b02      	cmp	r3, #2
 800c526:	d102      	bne.n	800c52e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c528:	2301      	movs	r3, #1
 800c52a:	73fb      	strb	r3, [r7, #15]
 800c52c:	e001      	b.n	800c532 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c52e:	f7f5 ffad 	bl	800248c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c538:	7bfa      	ldrb	r2, [r7, #15]
 800c53a:	4611      	mov	r1, r2
 800c53c:	4618      	mov	r0, r3
 800c53e:	f7fe fe07 	bl	800b150 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c548:	4618      	mov	r0, r3
 800c54a:	f7fe fdb3 	bl	800b0b4 <USBD_LL_Reset>
}
 800c54e:	bf00      	nop
 800c550:	3710      	adds	r7, #16
 800c552:	46bd      	mov	sp, r7
 800c554:	bd80      	pop	{r7, pc}
	...

0800c558 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b082      	sub	sp, #8
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c566:	4618      	mov	r0, r3
 800c568:	f7fe fe02 	bl	800b170 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	687a      	ldr	r2, [r7, #4]
 800c578:	6812      	ldr	r2, [r2, #0]
 800c57a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c57e:	f043 0301 	orr.w	r3, r3, #1
 800c582:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	6a1b      	ldr	r3, [r3, #32]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d005      	beq.n	800c598 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c58c:	4b04      	ldr	r3, [pc, #16]	; (800c5a0 <HAL_PCD_SuspendCallback+0x48>)
 800c58e:	691b      	ldr	r3, [r3, #16]
 800c590:	4a03      	ldr	r2, [pc, #12]	; (800c5a0 <HAL_PCD_SuspendCallback+0x48>)
 800c592:	f043 0306 	orr.w	r3, r3, #6
 800c596:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c598:	bf00      	nop
 800c59a:	3708      	adds	r7, #8
 800c59c:	46bd      	mov	sp, r7
 800c59e:	bd80      	pop	{r7, pc}
 800c5a0:	e000ed00 	.word	0xe000ed00

0800c5a4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b082      	sub	sp, #8
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	f7fe fdf2 	bl	800b19c <USBD_LL_Resume>
}
 800c5b8:	bf00      	nop
 800c5ba:	3708      	adds	r7, #8
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	bd80      	pop	{r7, pc}

0800c5c0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b082      	sub	sp, #8
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
 800c5c8:	460b      	mov	r3, r1
 800c5ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c5d2:	78fa      	ldrb	r2, [r7, #3]
 800c5d4:	4611      	mov	r1, r2
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	f7fe fe40 	bl	800b25c <USBD_LL_IsoOUTIncomplete>
}
 800c5dc:	bf00      	nop
 800c5de:	3708      	adds	r7, #8
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	bd80      	pop	{r7, pc}

0800c5e4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b082      	sub	sp, #8
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
 800c5ec:	460b      	mov	r3, r1
 800c5ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c5f6:	78fa      	ldrb	r2, [r7, #3]
 800c5f8:	4611      	mov	r1, r2
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	f7fe fe08 	bl	800b210 <USBD_LL_IsoINIncomplete>
}
 800c600:	bf00      	nop
 800c602:	3708      	adds	r7, #8
 800c604:	46bd      	mov	sp, r7
 800c606:	bd80      	pop	{r7, pc}

0800c608 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b082      	sub	sp, #8
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c616:	4618      	mov	r0, r3
 800c618:	f7fe fe46 	bl	800b2a8 <USBD_LL_DevConnected>
}
 800c61c:	bf00      	nop
 800c61e:	3708      	adds	r7, #8
 800c620:	46bd      	mov	sp, r7
 800c622:	bd80      	pop	{r7, pc}

0800c624 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b082      	sub	sp, #8
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c632:	4618      	mov	r0, r3
 800c634:	f7fe fe43 	bl	800b2be <USBD_LL_DevDisconnected>
}
 800c638:	bf00      	nop
 800c63a:	3708      	adds	r7, #8
 800c63c:	46bd      	mov	sp, r7
 800c63e:	bd80      	pop	{r7, pc}

0800c640 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b082      	sub	sp, #8
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	781b      	ldrb	r3, [r3, #0]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d13c      	bne.n	800c6ca <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c650:	4a20      	ldr	r2, [pc, #128]	; (800c6d4 <USBD_LL_Init+0x94>)
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	4a1e      	ldr	r2, [pc, #120]	; (800c6d4 <USBD_LL_Init+0x94>)
 800c65c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c660:	4b1c      	ldr	r3, [pc, #112]	; (800c6d4 <USBD_LL_Init+0x94>)
 800c662:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c666:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c668:	4b1a      	ldr	r3, [pc, #104]	; (800c6d4 <USBD_LL_Init+0x94>)
 800c66a:	2204      	movs	r2, #4
 800c66c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c66e:	4b19      	ldr	r3, [pc, #100]	; (800c6d4 <USBD_LL_Init+0x94>)
 800c670:	2202      	movs	r2, #2
 800c672:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c674:	4b17      	ldr	r3, [pc, #92]	; (800c6d4 <USBD_LL_Init+0x94>)
 800c676:	2200      	movs	r2, #0
 800c678:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c67a:	4b16      	ldr	r3, [pc, #88]	; (800c6d4 <USBD_LL_Init+0x94>)
 800c67c:	2202      	movs	r2, #2
 800c67e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c680:	4b14      	ldr	r3, [pc, #80]	; (800c6d4 <USBD_LL_Init+0x94>)
 800c682:	2200      	movs	r2, #0
 800c684:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c686:	4b13      	ldr	r3, [pc, #76]	; (800c6d4 <USBD_LL_Init+0x94>)
 800c688:	2200      	movs	r2, #0
 800c68a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c68c:	4b11      	ldr	r3, [pc, #68]	; (800c6d4 <USBD_LL_Init+0x94>)
 800c68e:	2200      	movs	r2, #0
 800c690:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c692:	4b10      	ldr	r3, [pc, #64]	; (800c6d4 <USBD_LL_Init+0x94>)
 800c694:	2200      	movs	r2, #0
 800c696:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c698:	4b0e      	ldr	r3, [pc, #56]	; (800c6d4 <USBD_LL_Init+0x94>)
 800c69a:	2200      	movs	r2, #0
 800c69c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c69e:	480d      	ldr	r0, [pc, #52]	; (800c6d4 <USBD_LL_Init+0x94>)
 800c6a0:	f7f9 fa39 	bl	8005b16 <HAL_PCD_Init>
 800c6a4:	4603      	mov	r3, r0
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d001      	beq.n	800c6ae <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c6aa:	f7f5 feef 	bl	800248c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c6ae:	2180      	movs	r1, #128	; 0x80
 800c6b0:	4808      	ldr	r0, [pc, #32]	; (800c6d4 <USBD_LL_Init+0x94>)
 800c6b2:	f7fa fb96 	bl	8006de2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c6b6:	2240      	movs	r2, #64	; 0x40
 800c6b8:	2100      	movs	r1, #0
 800c6ba:	4806      	ldr	r0, [pc, #24]	; (800c6d4 <USBD_LL_Init+0x94>)
 800c6bc:	f7fa fb4a 	bl	8006d54 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c6c0:	2280      	movs	r2, #128	; 0x80
 800c6c2:	2101      	movs	r1, #1
 800c6c4:	4803      	ldr	r0, [pc, #12]	; (800c6d4 <USBD_LL_Init+0x94>)
 800c6c6:	f7fa fb45 	bl	8006d54 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c6ca:	2300      	movs	r3, #0
}
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	3708      	adds	r7, #8
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	bd80      	pop	{r7, pc}
 800c6d4:	2000abc4 	.word	0x2000abc4

0800c6d8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b084      	sub	sp, #16
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	f7f9 fb2e 	bl	8005d50 <HAL_PCD_Start>
 800c6f4:	4603      	mov	r3, r0
 800c6f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c6f8:	7bfb      	ldrb	r3, [r7, #15]
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	f000 f942 	bl	800c984 <USBD_Get_USB_Status>
 800c700:	4603      	mov	r3, r0
 800c702:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c704:	7bbb      	ldrb	r3, [r7, #14]
}
 800c706:	4618      	mov	r0, r3
 800c708:	3710      	adds	r7, #16
 800c70a:	46bd      	mov	sp, r7
 800c70c:	bd80      	pop	{r7, pc}

0800c70e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c70e:	b580      	push	{r7, lr}
 800c710:	b084      	sub	sp, #16
 800c712:	af00      	add	r7, sp, #0
 800c714:	6078      	str	r0, [r7, #4]
 800c716:	4608      	mov	r0, r1
 800c718:	4611      	mov	r1, r2
 800c71a:	461a      	mov	r2, r3
 800c71c:	4603      	mov	r3, r0
 800c71e:	70fb      	strb	r3, [r7, #3]
 800c720:	460b      	mov	r3, r1
 800c722:	70bb      	strb	r3, [r7, #2]
 800c724:	4613      	mov	r3, r2
 800c726:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c728:	2300      	movs	r3, #0
 800c72a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c72c:	2300      	movs	r3, #0
 800c72e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c736:	78bb      	ldrb	r3, [r7, #2]
 800c738:	883a      	ldrh	r2, [r7, #0]
 800c73a:	78f9      	ldrb	r1, [r7, #3]
 800c73c:	f7f9 ff12 	bl	8006564 <HAL_PCD_EP_Open>
 800c740:	4603      	mov	r3, r0
 800c742:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c744:	7bfb      	ldrb	r3, [r7, #15]
 800c746:	4618      	mov	r0, r3
 800c748:	f000 f91c 	bl	800c984 <USBD_Get_USB_Status>
 800c74c:	4603      	mov	r3, r0
 800c74e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c750:	7bbb      	ldrb	r3, [r7, #14]
}
 800c752:	4618      	mov	r0, r3
 800c754:	3710      	adds	r7, #16
 800c756:	46bd      	mov	sp, r7
 800c758:	bd80      	pop	{r7, pc}

0800c75a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c75a:	b580      	push	{r7, lr}
 800c75c:	b084      	sub	sp, #16
 800c75e:	af00      	add	r7, sp, #0
 800c760:	6078      	str	r0, [r7, #4]
 800c762:	460b      	mov	r3, r1
 800c764:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c766:	2300      	movs	r3, #0
 800c768:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c76a:	2300      	movs	r3, #0
 800c76c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c774:	78fa      	ldrb	r2, [r7, #3]
 800c776:	4611      	mov	r1, r2
 800c778:	4618      	mov	r0, r3
 800c77a:	f7f9 ff5b 	bl	8006634 <HAL_PCD_EP_Close>
 800c77e:	4603      	mov	r3, r0
 800c780:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c782:	7bfb      	ldrb	r3, [r7, #15]
 800c784:	4618      	mov	r0, r3
 800c786:	f000 f8fd 	bl	800c984 <USBD_Get_USB_Status>
 800c78a:	4603      	mov	r3, r0
 800c78c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c78e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c790:	4618      	mov	r0, r3
 800c792:	3710      	adds	r7, #16
 800c794:	46bd      	mov	sp, r7
 800c796:	bd80      	pop	{r7, pc}

0800c798 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b084      	sub	sp, #16
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
 800c7a0:	460b      	mov	r3, r1
 800c7a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c7b2:	78fa      	ldrb	r2, [r7, #3]
 800c7b4:	4611      	mov	r1, r2
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	f7fa f833 	bl	8006822 <HAL_PCD_EP_SetStall>
 800c7bc:	4603      	mov	r3, r0
 800c7be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c7c0:	7bfb      	ldrb	r3, [r7, #15]
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	f000 f8de 	bl	800c984 <USBD_Get_USB_Status>
 800c7c8:	4603      	mov	r3, r0
 800c7ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c7cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	3710      	adds	r7, #16
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	bd80      	pop	{r7, pc}

0800c7d6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c7d6:	b580      	push	{r7, lr}
 800c7d8:	b084      	sub	sp, #16
 800c7da:	af00      	add	r7, sp, #0
 800c7dc:	6078      	str	r0, [r7, #4]
 800c7de:	460b      	mov	r3, r1
 800c7e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c7f0:	78fa      	ldrb	r2, [r7, #3]
 800c7f2:	4611      	mov	r1, r2
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	f7fa f878 	bl	80068ea <HAL_PCD_EP_ClrStall>
 800c7fa:	4603      	mov	r3, r0
 800c7fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c7fe:	7bfb      	ldrb	r3, [r7, #15]
 800c800:	4618      	mov	r0, r3
 800c802:	f000 f8bf 	bl	800c984 <USBD_Get_USB_Status>
 800c806:	4603      	mov	r3, r0
 800c808:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c80a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c80c:	4618      	mov	r0, r3
 800c80e:	3710      	adds	r7, #16
 800c810:	46bd      	mov	sp, r7
 800c812:	bd80      	pop	{r7, pc}

0800c814 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c814:	b480      	push	{r7}
 800c816:	b085      	sub	sp, #20
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
 800c81c:	460b      	mov	r3, r1
 800c81e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c826:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c828:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	da0b      	bge.n	800c848 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c830:	78fb      	ldrb	r3, [r7, #3]
 800c832:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c836:	68f9      	ldr	r1, [r7, #12]
 800c838:	4613      	mov	r3, r2
 800c83a:	00db      	lsls	r3, r3, #3
 800c83c:	1a9b      	subs	r3, r3, r2
 800c83e:	009b      	lsls	r3, r3, #2
 800c840:	440b      	add	r3, r1
 800c842:	333e      	adds	r3, #62	; 0x3e
 800c844:	781b      	ldrb	r3, [r3, #0]
 800c846:	e00b      	b.n	800c860 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c848:	78fb      	ldrb	r3, [r7, #3]
 800c84a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c84e:	68f9      	ldr	r1, [r7, #12]
 800c850:	4613      	mov	r3, r2
 800c852:	00db      	lsls	r3, r3, #3
 800c854:	1a9b      	subs	r3, r3, r2
 800c856:	009b      	lsls	r3, r3, #2
 800c858:	440b      	add	r3, r1
 800c85a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c85e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c860:	4618      	mov	r0, r3
 800c862:	3714      	adds	r7, #20
 800c864:	46bd      	mov	sp, r7
 800c866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86a:	4770      	bx	lr

0800c86c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b084      	sub	sp, #16
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
 800c874:	460b      	mov	r3, r1
 800c876:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c878:	2300      	movs	r3, #0
 800c87a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c87c:	2300      	movs	r3, #0
 800c87e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c886:	78fa      	ldrb	r2, [r7, #3]
 800c888:	4611      	mov	r1, r2
 800c88a:	4618      	mov	r0, r3
 800c88c:	f7f9 fe45 	bl	800651a <HAL_PCD_SetAddress>
 800c890:	4603      	mov	r3, r0
 800c892:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c894:	7bfb      	ldrb	r3, [r7, #15]
 800c896:	4618      	mov	r0, r3
 800c898:	f000 f874 	bl	800c984 <USBD_Get_USB_Status>
 800c89c:	4603      	mov	r3, r0
 800c89e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c8a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	3710      	adds	r7, #16
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	bd80      	pop	{r7, pc}

0800c8aa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c8aa:	b580      	push	{r7, lr}
 800c8ac:	b086      	sub	sp, #24
 800c8ae:	af00      	add	r7, sp, #0
 800c8b0:	60f8      	str	r0, [r7, #12]
 800c8b2:	607a      	str	r2, [r7, #4]
 800c8b4:	603b      	str	r3, [r7, #0]
 800c8b6:	460b      	mov	r3, r1
 800c8b8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c8be:	2300      	movs	r3, #0
 800c8c0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c8c8:	7af9      	ldrb	r1, [r7, #11]
 800c8ca:	683b      	ldr	r3, [r7, #0]
 800c8cc:	687a      	ldr	r2, [r7, #4]
 800c8ce:	f7f9 ff5e 	bl	800678e <HAL_PCD_EP_Transmit>
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c8d6:	7dfb      	ldrb	r3, [r7, #23]
 800c8d8:	4618      	mov	r0, r3
 800c8da:	f000 f853 	bl	800c984 <USBD_Get_USB_Status>
 800c8de:	4603      	mov	r3, r0
 800c8e0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c8e2:	7dbb      	ldrb	r3, [r7, #22]
}
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	3718      	adds	r7, #24
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	bd80      	pop	{r7, pc}

0800c8ec <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b086      	sub	sp, #24
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	60f8      	str	r0, [r7, #12]
 800c8f4:	607a      	str	r2, [r7, #4]
 800c8f6:	603b      	str	r3, [r7, #0]
 800c8f8:	460b      	mov	r3, r1
 800c8fa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c900:	2300      	movs	r3, #0
 800c902:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c90a:	7af9      	ldrb	r1, [r7, #11]
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	687a      	ldr	r2, [r7, #4]
 800c910:	f7f9 feda 	bl	80066c8 <HAL_PCD_EP_Receive>
 800c914:	4603      	mov	r3, r0
 800c916:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c918:	7dfb      	ldrb	r3, [r7, #23]
 800c91a:	4618      	mov	r0, r3
 800c91c:	f000 f832 	bl	800c984 <USBD_Get_USB_Status>
 800c920:	4603      	mov	r3, r0
 800c922:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c924:	7dbb      	ldrb	r3, [r7, #22]
}
 800c926:	4618      	mov	r0, r3
 800c928:	3718      	adds	r7, #24
 800c92a:	46bd      	mov	sp, r7
 800c92c:	bd80      	pop	{r7, pc}

0800c92e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c92e:	b580      	push	{r7, lr}
 800c930:	b082      	sub	sp, #8
 800c932:	af00      	add	r7, sp, #0
 800c934:	6078      	str	r0, [r7, #4]
 800c936:	460b      	mov	r3, r1
 800c938:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c940:	78fa      	ldrb	r2, [r7, #3]
 800c942:	4611      	mov	r1, r2
 800c944:	4618      	mov	r0, r3
 800c946:	f7f9 ff0a 	bl	800675e <HAL_PCD_EP_GetRxCount>
 800c94a:	4603      	mov	r3, r0
}
 800c94c:	4618      	mov	r0, r3
 800c94e:	3708      	adds	r7, #8
 800c950:	46bd      	mov	sp, r7
 800c952:	bd80      	pop	{r7, pc}

0800c954 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c954:	b480      	push	{r7}
 800c956:	b083      	sub	sp, #12
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c95c:	4b03      	ldr	r3, [pc, #12]	; (800c96c <USBD_static_malloc+0x18>)
}
 800c95e:	4618      	mov	r0, r3
 800c960:	370c      	adds	r7, #12
 800c962:	46bd      	mov	sp, r7
 800c964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c968:	4770      	bx	lr
 800c96a:	bf00      	nop
 800c96c:	2000afcc 	.word	0x2000afcc

0800c970 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c970:	b480      	push	{r7}
 800c972:	b083      	sub	sp, #12
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]

}
 800c978:	bf00      	nop
 800c97a:	370c      	adds	r7, #12
 800c97c:	46bd      	mov	sp, r7
 800c97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c982:	4770      	bx	lr

0800c984 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c984:	b480      	push	{r7}
 800c986:	b085      	sub	sp, #20
 800c988:	af00      	add	r7, sp, #0
 800c98a:	4603      	mov	r3, r0
 800c98c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c98e:	2300      	movs	r3, #0
 800c990:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c992:	79fb      	ldrb	r3, [r7, #7]
 800c994:	2b03      	cmp	r3, #3
 800c996:	d817      	bhi.n	800c9c8 <USBD_Get_USB_Status+0x44>
 800c998:	a201      	add	r2, pc, #4	; (adr r2, 800c9a0 <USBD_Get_USB_Status+0x1c>)
 800c99a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c99e:	bf00      	nop
 800c9a0:	0800c9b1 	.word	0x0800c9b1
 800c9a4:	0800c9b7 	.word	0x0800c9b7
 800c9a8:	0800c9bd 	.word	0x0800c9bd
 800c9ac:	0800c9c3 	.word	0x0800c9c3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	73fb      	strb	r3, [r7, #15]
    break;
 800c9b4:	e00b      	b.n	800c9ce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c9b6:	2303      	movs	r3, #3
 800c9b8:	73fb      	strb	r3, [r7, #15]
    break;
 800c9ba:	e008      	b.n	800c9ce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c9bc:	2301      	movs	r3, #1
 800c9be:	73fb      	strb	r3, [r7, #15]
    break;
 800c9c0:	e005      	b.n	800c9ce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c9c2:	2303      	movs	r3, #3
 800c9c4:	73fb      	strb	r3, [r7, #15]
    break;
 800c9c6:	e002      	b.n	800c9ce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c9c8:	2303      	movs	r3, #3
 800c9ca:	73fb      	strb	r3, [r7, #15]
    break;
 800c9cc:	bf00      	nop
  }
  return usb_status;
 800c9ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	3714      	adds	r7, #20
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9da:	4770      	bx	lr

0800c9dc <__errno>:
 800c9dc:	4b01      	ldr	r3, [pc, #4]	; (800c9e4 <__errno+0x8>)
 800c9de:	6818      	ldr	r0, [r3, #0]
 800c9e0:	4770      	bx	lr
 800c9e2:	bf00      	nop
 800c9e4:	200001b4 	.word	0x200001b4

0800c9e8 <__libc_init_array>:
 800c9e8:	b570      	push	{r4, r5, r6, lr}
 800c9ea:	4d0d      	ldr	r5, [pc, #52]	; (800ca20 <__libc_init_array+0x38>)
 800c9ec:	4c0d      	ldr	r4, [pc, #52]	; (800ca24 <__libc_init_array+0x3c>)
 800c9ee:	1b64      	subs	r4, r4, r5
 800c9f0:	10a4      	asrs	r4, r4, #2
 800c9f2:	2600      	movs	r6, #0
 800c9f4:	42a6      	cmp	r6, r4
 800c9f6:	d109      	bne.n	800ca0c <__libc_init_array+0x24>
 800c9f8:	4d0b      	ldr	r5, [pc, #44]	; (800ca28 <__libc_init_array+0x40>)
 800c9fa:	4c0c      	ldr	r4, [pc, #48]	; (800ca2c <__libc_init_array+0x44>)
 800c9fc:	f004 f88a 	bl	8010b14 <_init>
 800ca00:	1b64      	subs	r4, r4, r5
 800ca02:	10a4      	asrs	r4, r4, #2
 800ca04:	2600      	movs	r6, #0
 800ca06:	42a6      	cmp	r6, r4
 800ca08:	d105      	bne.n	800ca16 <__libc_init_array+0x2e>
 800ca0a:	bd70      	pop	{r4, r5, r6, pc}
 800ca0c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca10:	4798      	blx	r3
 800ca12:	3601      	adds	r6, #1
 800ca14:	e7ee      	b.n	800c9f4 <__libc_init_array+0xc>
 800ca16:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca1a:	4798      	blx	r3
 800ca1c:	3601      	adds	r6, #1
 800ca1e:	e7f2      	b.n	800ca06 <__libc_init_array+0x1e>
 800ca20:	080113e0 	.word	0x080113e0
 800ca24:	080113e0 	.word	0x080113e0
 800ca28:	080113e0 	.word	0x080113e0
 800ca2c:	080113e4 	.word	0x080113e4

0800ca30 <memmove>:
 800ca30:	4288      	cmp	r0, r1
 800ca32:	b510      	push	{r4, lr}
 800ca34:	eb01 0402 	add.w	r4, r1, r2
 800ca38:	d902      	bls.n	800ca40 <memmove+0x10>
 800ca3a:	4284      	cmp	r4, r0
 800ca3c:	4623      	mov	r3, r4
 800ca3e:	d807      	bhi.n	800ca50 <memmove+0x20>
 800ca40:	1e43      	subs	r3, r0, #1
 800ca42:	42a1      	cmp	r1, r4
 800ca44:	d008      	beq.n	800ca58 <memmove+0x28>
 800ca46:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ca4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ca4e:	e7f8      	b.n	800ca42 <memmove+0x12>
 800ca50:	4402      	add	r2, r0
 800ca52:	4601      	mov	r1, r0
 800ca54:	428a      	cmp	r2, r1
 800ca56:	d100      	bne.n	800ca5a <memmove+0x2a>
 800ca58:	bd10      	pop	{r4, pc}
 800ca5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ca5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ca62:	e7f7      	b.n	800ca54 <memmove+0x24>

0800ca64 <memset>:
 800ca64:	4402      	add	r2, r0
 800ca66:	4603      	mov	r3, r0
 800ca68:	4293      	cmp	r3, r2
 800ca6a:	d100      	bne.n	800ca6e <memset+0xa>
 800ca6c:	4770      	bx	lr
 800ca6e:	f803 1b01 	strb.w	r1, [r3], #1
 800ca72:	e7f9      	b.n	800ca68 <memset+0x4>

0800ca74 <__cvt>:
 800ca74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ca78:	ec55 4b10 	vmov	r4, r5, d0
 800ca7c:	2d00      	cmp	r5, #0
 800ca7e:	460e      	mov	r6, r1
 800ca80:	4619      	mov	r1, r3
 800ca82:	462b      	mov	r3, r5
 800ca84:	bfbb      	ittet	lt
 800ca86:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ca8a:	461d      	movlt	r5, r3
 800ca8c:	2300      	movge	r3, #0
 800ca8e:	232d      	movlt	r3, #45	; 0x2d
 800ca90:	700b      	strb	r3, [r1, #0]
 800ca92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ca94:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ca98:	4691      	mov	r9, r2
 800ca9a:	f023 0820 	bic.w	r8, r3, #32
 800ca9e:	bfbc      	itt	lt
 800caa0:	4622      	movlt	r2, r4
 800caa2:	4614      	movlt	r4, r2
 800caa4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800caa8:	d005      	beq.n	800cab6 <__cvt+0x42>
 800caaa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800caae:	d100      	bne.n	800cab2 <__cvt+0x3e>
 800cab0:	3601      	adds	r6, #1
 800cab2:	2102      	movs	r1, #2
 800cab4:	e000      	b.n	800cab8 <__cvt+0x44>
 800cab6:	2103      	movs	r1, #3
 800cab8:	ab03      	add	r3, sp, #12
 800caba:	9301      	str	r3, [sp, #4]
 800cabc:	ab02      	add	r3, sp, #8
 800cabe:	9300      	str	r3, [sp, #0]
 800cac0:	ec45 4b10 	vmov	d0, r4, r5
 800cac4:	4653      	mov	r3, sl
 800cac6:	4632      	mov	r2, r6
 800cac8:	f000 fcea 	bl	800d4a0 <_dtoa_r>
 800cacc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800cad0:	4607      	mov	r7, r0
 800cad2:	d102      	bne.n	800cada <__cvt+0x66>
 800cad4:	f019 0f01 	tst.w	r9, #1
 800cad8:	d022      	beq.n	800cb20 <__cvt+0xac>
 800cada:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cade:	eb07 0906 	add.w	r9, r7, r6
 800cae2:	d110      	bne.n	800cb06 <__cvt+0x92>
 800cae4:	783b      	ldrb	r3, [r7, #0]
 800cae6:	2b30      	cmp	r3, #48	; 0x30
 800cae8:	d10a      	bne.n	800cb00 <__cvt+0x8c>
 800caea:	2200      	movs	r2, #0
 800caec:	2300      	movs	r3, #0
 800caee:	4620      	mov	r0, r4
 800caf0:	4629      	mov	r1, r5
 800caf2:	f7f3 ffe9 	bl	8000ac8 <__aeabi_dcmpeq>
 800caf6:	b918      	cbnz	r0, 800cb00 <__cvt+0x8c>
 800caf8:	f1c6 0601 	rsb	r6, r6, #1
 800cafc:	f8ca 6000 	str.w	r6, [sl]
 800cb00:	f8da 3000 	ldr.w	r3, [sl]
 800cb04:	4499      	add	r9, r3
 800cb06:	2200      	movs	r2, #0
 800cb08:	2300      	movs	r3, #0
 800cb0a:	4620      	mov	r0, r4
 800cb0c:	4629      	mov	r1, r5
 800cb0e:	f7f3 ffdb 	bl	8000ac8 <__aeabi_dcmpeq>
 800cb12:	b108      	cbz	r0, 800cb18 <__cvt+0xa4>
 800cb14:	f8cd 900c 	str.w	r9, [sp, #12]
 800cb18:	2230      	movs	r2, #48	; 0x30
 800cb1a:	9b03      	ldr	r3, [sp, #12]
 800cb1c:	454b      	cmp	r3, r9
 800cb1e:	d307      	bcc.n	800cb30 <__cvt+0xbc>
 800cb20:	9b03      	ldr	r3, [sp, #12]
 800cb22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cb24:	1bdb      	subs	r3, r3, r7
 800cb26:	4638      	mov	r0, r7
 800cb28:	6013      	str	r3, [r2, #0]
 800cb2a:	b004      	add	sp, #16
 800cb2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb30:	1c59      	adds	r1, r3, #1
 800cb32:	9103      	str	r1, [sp, #12]
 800cb34:	701a      	strb	r2, [r3, #0]
 800cb36:	e7f0      	b.n	800cb1a <__cvt+0xa6>

0800cb38 <__exponent>:
 800cb38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cb3a:	4603      	mov	r3, r0
 800cb3c:	2900      	cmp	r1, #0
 800cb3e:	bfb8      	it	lt
 800cb40:	4249      	neglt	r1, r1
 800cb42:	f803 2b02 	strb.w	r2, [r3], #2
 800cb46:	bfb4      	ite	lt
 800cb48:	222d      	movlt	r2, #45	; 0x2d
 800cb4a:	222b      	movge	r2, #43	; 0x2b
 800cb4c:	2909      	cmp	r1, #9
 800cb4e:	7042      	strb	r2, [r0, #1]
 800cb50:	dd2a      	ble.n	800cba8 <__exponent+0x70>
 800cb52:	f10d 0407 	add.w	r4, sp, #7
 800cb56:	46a4      	mov	ip, r4
 800cb58:	270a      	movs	r7, #10
 800cb5a:	46a6      	mov	lr, r4
 800cb5c:	460a      	mov	r2, r1
 800cb5e:	fb91 f6f7 	sdiv	r6, r1, r7
 800cb62:	fb07 1516 	mls	r5, r7, r6, r1
 800cb66:	3530      	adds	r5, #48	; 0x30
 800cb68:	2a63      	cmp	r2, #99	; 0x63
 800cb6a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800cb6e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800cb72:	4631      	mov	r1, r6
 800cb74:	dcf1      	bgt.n	800cb5a <__exponent+0x22>
 800cb76:	3130      	adds	r1, #48	; 0x30
 800cb78:	f1ae 0502 	sub.w	r5, lr, #2
 800cb7c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800cb80:	1c44      	adds	r4, r0, #1
 800cb82:	4629      	mov	r1, r5
 800cb84:	4561      	cmp	r1, ip
 800cb86:	d30a      	bcc.n	800cb9e <__exponent+0x66>
 800cb88:	f10d 0209 	add.w	r2, sp, #9
 800cb8c:	eba2 020e 	sub.w	r2, r2, lr
 800cb90:	4565      	cmp	r5, ip
 800cb92:	bf88      	it	hi
 800cb94:	2200      	movhi	r2, #0
 800cb96:	4413      	add	r3, r2
 800cb98:	1a18      	subs	r0, r3, r0
 800cb9a:	b003      	add	sp, #12
 800cb9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cba2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800cba6:	e7ed      	b.n	800cb84 <__exponent+0x4c>
 800cba8:	2330      	movs	r3, #48	; 0x30
 800cbaa:	3130      	adds	r1, #48	; 0x30
 800cbac:	7083      	strb	r3, [r0, #2]
 800cbae:	70c1      	strb	r1, [r0, #3]
 800cbb0:	1d03      	adds	r3, r0, #4
 800cbb2:	e7f1      	b.n	800cb98 <__exponent+0x60>

0800cbb4 <_printf_float>:
 800cbb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbb8:	ed2d 8b02 	vpush	{d8}
 800cbbc:	b08d      	sub	sp, #52	; 0x34
 800cbbe:	460c      	mov	r4, r1
 800cbc0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800cbc4:	4616      	mov	r6, r2
 800cbc6:	461f      	mov	r7, r3
 800cbc8:	4605      	mov	r5, r0
 800cbca:	f001 fa57 	bl	800e07c <_localeconv_r>
 800cbce:	f8d0 a000 	ldr.w	sl, [r0]
 800cbd2:	4650      	mov	r0, sl
 800cbd4:	f7f3 fafc 	bl	80001d0 <strlen>
 800cbd8:	2300      	movs	r3, #0
 800cbda:	930a      	str	r3, [sp, #40]	; 0x28
 800cbdc:	6823      	ldr	r3, [r4, #0]
 800cbde:	9305      	str	r3, [sp, #20]
 800cbe0:	f8d8 3000 	ldr.w	r3, [r8]
 800cbe4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800cbe8:	3307      	adds	r3, #7
 800cbea:	f023 0307 	bic.w	r3, r3, #7
 800cbee:	f103 0208 	add.w	r2, r3, #8
 800cbf2:	f8c8 2000 	str.w	r2, [r8]
 800cbf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbfa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800cbfe:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800cc02:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cc06:	9307      	str	r3, [sp, #28]
 800cc08:	f8cd 8018 	str.w	r8, [sp, #24]
 800cc0c:	ee08 0a10 	vmov	s16, r0
 800cc10:	4b9f      	ldr	r3, [pc, #636]	; (800ce90 <_printf_float+0x2dc>)
 800cc12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cc16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cc1a:	f7f3 ff87 	bl	8000b2c <__aeabi_dcmpun>
 800cc1e:	bb88      	cbnz	r0, 800cc84 <_printf_float+0xd0>
 800cc20:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cc24:	4b9a      	ldr	r3, [pc, #616]	; (800ce90 <_printf_float+0x2dc>)
 800cc26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cc2a:	f7f3 ff61 	bl	8000af0 <__aeabi_dcmple>
 800cc2e:	bb48      	cbnz	r0, 800cc84 <_printf_float+0xd0>
 800cc30:	2200      	movs	r2, #0
 800cc32:	2300      	movs	r3, #0
 800cc34:	4640      	mov	r0, r8
 800cc36:	4649      	mov	r1, r9
 800cc38:	f7f3 ff50 	bl	8000adc <__aeabi_dcmplt>
 800cc3c:	b110      	cbz	r0, 800cc44 <_printf_float+0x90>
 800cc3e:	232d      	movs	r3, #45	; 0x2d
 800cc40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc44:	4b93      	ldr	r3, [pc, #588]	; (800ce94 <_printf_float+0x2e0>)
 800cc46:	4894      	ldr	r0, [pc, #592]	; (800ce98 <_printf_float+0x2e4>)
 800cc48:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800cc4c:	bf94      	ite	ls
 800cc4e:	4698      	movls	r8, r3
 800cc50:	4680      	movhi	r8, r0
 800cc52:	2303      	movs	r3, #3
 800cc54:	6123      	str	r3, [r4, #16]
 800cc56:	9b05      	ldr	r3, [sp, #20]
 800cc58:	f023 0204 	bic.w	r2, r3, #4
 800cc5c:	6022      	str	r2, [r4, #0]
 800cc5e:	f04f 0900 	mov.w	r9, #0
 800cc62:	9700      	str	r7, [sp, #0]
 800cc64:	4633      	mov	r3, r6
 800cc66:	aa0b      	add	r2, sp, #44	; 0x2c
 800cc68:	4621      	mov	r1, r4
 800cc6a:	4628      	mov	r0, r5
 800cc6c:	f000 f9d8 	bl	800d020 <_printf_common>
 800cc70:	3001      	adds	r0, #1
 800cc72:	f040 8090 	bne.w	800cd96 <_printf_float+0x1e2>
 800cc76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cc7a:	b00d      	add	sp, #52	; 0x34
 800cc7c:	ecbd 8b02 	vpop	{d8}
 800cc80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc84:	4642      	mov	r2, r8
 800cc86:	464b      	mov	r3, r9
 800cc88:	4640      	mov	r0, r8
 800cc8a:	4649      	mov	r1, r9
 800cc8c:	f7f3 ff4e 	bl	8000b2c <__aeabi_dcmpun>
 800cc90:	b140      	cbz	r0, 800cca4 <_printf_float+0xf0>
 800cc92:	464b      	mov	r3, r9
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	bfbc      	itt	lt
 800cc98:	232d      	movlt	r3, #45	; 0x2d
 800cc9a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800cc9e:	487f      	ldr	r0, [pc, #508]	; (800ce9c <_printf_float+0x2e8>)
 800cca0:	4b7f      	ldr	r3, [pc, #508]	; (800cea0 <_printf_float+0x2ec>)
 800cca2:	e7d1      	b.n	800cc48 <_printf_float+0x94>
 800cca4:	6863      	ldr	r3, [r4, #4]
 800cca6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ccaa:	9206      	str	r2, [sp, #24]
 800ccac:	1c5a      	adds	r2, r3, #1
 800ccae:	d13f      	bne.n	800cd30 <_printf_float+0x17c>
 800ccb0:	2306      	movs	r3, #6
 800ccb2:	6063      	str	r3, [r4, #4]
 800ccb4:	9b05      	ldr	r3, [sp, #20]
 800ccb6:	6861      	ldr	r1, [r4, #4]
 800ccb8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	9303      	str	r3, [sp, #12]
 800ccc0:	ab0a      	add	r3, sp, #40	; 0x28
 800ccc2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ccc6:	ab09      	add	r3, sp, #36	; 0x24
 800ccc8:	ec49 8b10 	vmov	d0, r8, r9
 800cccc:	9300      	str	r3, [sp, #0]
 800ccce:	6022      	str	r2, [r4, #0]
 800ccd0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ccd4:	4628      	mov	r0, r5
 800ccd6:	f7ff fecd 	bl	800ca74 <__cvt>
 800ccda:	9b06      	ldr	r3, [sp, #24]
 800ccdc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ccde:	2b47      	cmp	r3, #71	; 0x47
 800cce0:	4680      	mov	r8, r0
 800cce2:	d108      	bne.n	800ccf6 <_printf_float+0x142>
 800cce4:	1cc8      	adds	r0, r1, #3
 800cce6:	db02      	blt.n	800ccee <_printf_float+0x13a>
 800cce8:	6863      	ldr	r3, [r4, #4]
 800ccea:	4299      	cmp	r1, r3
 800ccec:	dd41      	ble.n	800cd72 <_printf_float+0x1be>
 800ccee:	f1ab 0b02 	sub.w	fp, fp, #2
 800ccf2:	fa5f fb8b 	uxtb.w	fp, fp
 800ccf6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ccfa:	d820      	bhi.n	800cd3e <_printf_float+0x18a>
 800ccfc:	3901      	subs	r1, #1
 800ccfe:	465a      	mov	r2, fp
 800cd00:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cd04:	9109      	str	r1, [sp, #36]	; 0x24
 800cd06:	f7ff ff17 	bl	800cb38 <__exponent>
 800cd0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cd0c:	1813      	adds	r3, r2, r0
 800cd0e:	2a01      	cmp	r2, #1
 800cd10:	4681      	mov	r9, r0
 800cd12:	6123      	str	r3, [r4, #16]
 800cd14:	dc02      	bgt.n	800cd1c <_printf_float+0x168>
 800cd16:	6822      	ldr	r2, [r4, #0]
 800cd18:	07d2      	lsls	r2, r2, #31
 800cd1a:	d501      	bpl.n	800cd20 <_printf_float+0x16c>
 800cd1c:	3301      	adds	r3, #1
 800cd1e:	6123      	str	r3, [r4, #16]
 800cd20:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d09c      	beq.n	800cc62 <_printf_float+0xae>
 800cd28:	232d      	movs	r3, #45	; 0x2d
 800cd2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd2e:	e798      	b.n	800cc62 <_printf_float+0xae>
 800cd30:	9a06      	ldr	r2, [sp, #24]
 800cd32:	2a47      	cmp	r2, #71	; 0x47
 800cd34:	d1be      	bne.n	800ccb4 <_printf_float+0x100>
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d1bc      	bne.n	800ccb4 <_printf_float+0x100>
 800cd3a:	2301      	movs	r3, #1
 800cd3c:	e7b9      	b.n	800ccb2 <_printf_float+0xfe>
 800cd3e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800cd42:	d118      	bne.n	800cd76 <_printf_float+0x1c2>
 800cd44:	2900      	cmp	r1, #0
 800cd46:	6863      	ldr	r3, [r4, #4]
 800cd48:	dd0b      	ble.n	800cd62 <_printf_float+0x1ae>
 800cd4a:	6121      	str	r1, [r4, #16]
 800cd4c:	b913      	cbnz	r3, 800cd54 <_printf_float+0x1a0>
 800cd4e:	6822      	ldr	r2, [r4, #0]
 800cd50:	07d0      	lsls	r0, r2, #31
 800cd52:	d502      	bpl.n	800cd5a <_printf_float+0x1a6>
 800cd54:	3301      	adds	r3, #1
 800cd56:	440b      	add	r3, r1
 800cd58:	6123      	str	r3, [r4, #16]
 800cd5a:	65a1      	str	r1, [r4, #88]	; 0x58
 800cd5c:	f04f 0900 	mov.w	r9, #0
 800cd60:	e7de      	b.n	800cd20 <_printf_float+0x16c>
 800cd62:	b913      	cbnz	r3, 800cd6a <_printf_float+0x1b6>
 800cd64:	6822      	ldr	r2, [r4, #0]
 800cd66:	07d2      	lsls	r2, r2, #31
 800cd68:	d501      	bpl.n	800cd6e <_printf_float+0x1ba>
 800cd6a:	3302      	adds	r3, #2
 800cd6c:	e7f4      	b.n	800cd58 <_printf_float+0x1a4>
 800cd6e:	2301      	movs	r3, #1
 800cd70:	e7f2      	b.n	800cd58 <_printf_float+0x1a4>
 800cd72:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800cd76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd78:	4299      	cmp	r1, r3
 800cd7a:	db05      	blt.n	800cd88 <_printf_float+0x1d4>
 800cd7c:	6823      	ldr	r3, [r4, #0]
 800cd7e:	6121      	str	r1, [r4, #16]
 800cd80:	07d8      	lsls	r0, r3, #31
 800cd82:	d5ea      	bpl.n	800cd5a <_printf_float+0x1a6>
 800cd84:	1c4b      	adds	r3, r1, #1
 800cd86:	e7e7      	b.n	800cd58 <_printf_float+0x1a4>
 800cd88:	2900      	cmp	r1, #0
 800cd8a:	bfd4      	ite	le
 800cd8c:	f1c1 0202 	rsble	r2, r1, #2
 800cd90:	2201      	movgt	r2, #1
 800cd92:	4413      	add	r3, r2
 800cd94:	e7e0      	b.n	800cd58 <_printf_float+0x1a4>
 800cd96:	6823      	ldr	r3, [r4, #0]
 800cd98:	055a      	lsls	r2, r3, #21
 800cd9a:	d407      	bmi.n	800cdac <_printf_float+0x1f8>
 800cd9c:	6923      	ldr	r3, [r4, #16]
 800cd9e:	4642      	mov	r2, r8
 800cda0:	4631      	mov	r1, r6
 800cda2:	4628      	mov	r0, r5
 800cda4:	47b8      	blx	r7
 800cda6:	3001      	adds	r0, #1
 800cda8:	d12c      	bne.n	800ce04 <_printf_float+0x250>
 800cdaa:	e764      	b.n	800cc76 <_printf_float+0xc2>
 800cdac:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cdb0:	f240 80e0 	bls.w	800cf74 <_printf_float+0x3c0>
 800cdb4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cdb8:	2200      	movs	r2, #0
 800cdba:	2300      	movs	r3, #0
 800cdbc:	f7f3 fe84 	bl	8000ac8 <__aeabi_dcmpeq>
 800cdc0:	2800      	cmp	r0, #0
 800cdc2:	d034      	beq.n	800ce2e <_printf_float+0x27a>
 800cdc4:	4a37      	ldr	r2, [pc, #220]	; (800cea4 <_printf_float+0x2f0>)
 800cdc6:	2301      	movs	r3, #1
 800cdc8:	4631      	mov	r1, r6
 800cdca:	4628      	mov	r0, r5
 800cdcc:	47b8      	blx	r7
 800cdce:	3001      	adds	r0, #1
 800cdd0:	f43f af51 	beq.w	800cc76 <_printf_float+0xc2>
 800cdd4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cdd8:	429a      	cmp	r2, r3
 800cdda:	db02      	blt.n	800cde2 <_printf_float+0x22e>
 800cddc:	6823      	ldr	r3, [r4, #0]
 800cdde:	07d8      	lsls	r0, r3, #31
 800cde0:	d510      	bpl.n	800ce04 <_printf_float+0x250>
 800cde2:	ee18 3a10 	vmov	r3, s16
 800cde6:	4652      	mov	r2, sl
 800cde8:	4631      	mov	r1, r6
 800cdea:	4628      	mov	r0, r5
 800cdec:	47b8      	blx	r7
 800cdee:	3001      	adds	r0, #1
 800cdf0:	f43f af41 	beq.w	800cc76 <_printf_float+0xc2>
 800cdf4:	f04f 0800 	mov.w	r8, #0
 800cdf8:	f104 091a 	add.w	r9, r4, #26
 800cdfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cdfe:	3b01      	subs	r3, #1
 800ce00:	4543      	cmp	r3, r8
 800ce02:	dc09      	bgt.n	800ce18 <_printf_float+0x264>
 800ce04:	6823      	ldr	r3, [r4, #0]
 800ce06:	079b      	lsls	r3, r3, #30
 800ce08:	f100 8105 	bmi.w	800d016 <_printf_float+0x462>
 800ce0c:	68e0      	ldr	r0, [r4, #12]
 800ce0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce10:	4298      	cmp	r0, r3
 800ce12:	bfb8      	it	lt
 800ce14:	4618      	movlt	r0, r3
 800ce16:	e730      	b.n	800cc7a <_printf_float+0xc6>
 800ce18:	2301      	movs	r3, #1
 800ce1a:	464a      	mov	r2, r9
 800ce1c:	4631      	mov	r1, r6
 800ce1e:	4628      	mov	r0, r5
 800ce20:	47b8      	blx	r7
 800ce22:	3001      	adds	r0, #1
 800ce24:	f43f af27 	beq.w	800cc76 <_printf_float+0xc2>
 800ce28:	f108 0801 	add.w	r8, r8, #1
 800ce2c:	e7e6      	b.n	800cdfc <_printf_float+0x248>
 800ce2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	dc39      	bgt.n	800cea8 <_printf_float+0x2f4>
 800ce34:	4a1b      	ldr	r2, [pc, #108]	; (800cea4 <_printf_float+0x2f0>)
 800ce36:	2301      	movs	r3, #1
 800ce38:	4631      	mov	r1, r6
 800ce3a:	4628      	mov	r0, r5
 800ce3c:	47b8      	blx	r7
 800ce3e:	3001      	adds	r0, #1
 800ce40:	f43f af19 	beq.w	800cc76 <_printf_float+0xc2>
 800ce44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ce48:	4313      	orrs	r3, r2
 800ce4a:	d102      	bne.n	800ce52 <_printf_float+0x29e>
 800ce4c:	6823      	ldr	r3, [r4, #0]
 800ce4e:	07d9      	lsls	r1, r3, #31
 800ce50:	d5d8      	bpl.n	800ce04 <_printf_float+0x250>
 800ce52:	ee18 3a10 	vmov	r3, s16
 800ce56:	4652      	mov	r2, sl
 800ce58:	4631      	mov	r1, r6
 800ce5a:	4628      	mov	r0, r5
 800ce5c:	47b8      	blx	r7
 800ce5e:	3001      	adds	r0, #1
 800ce60:	f43f af09 	beq.w	800cc76 <_printf_float+0xc2>
 800ce64:	f04f 0900 	mov.w	r9, #0
 800ce68:	f104 0a1a 	add.w	sl, r4, #26
 800ce6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce6e:	425b      	negs	r3, r3
 800ce70:	454b      	cmp	r3, r9
 800ce72:	dc01      	bgt.n	800ce78 <_printf_float+0x2c4>
 800ce74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce76:	e792      	b.n	800cd9e <_printf_float+0x1ea>
 800ce78:	2301      	movs	r3, #1
 800ce7a:	4652      	mov	r2, sl
 800ce7c:	4631      	mov	r1, r6
 800ce7e:	4628      	mov	r0, r5
 800ce80:	47b8      	blx	r7
 800ce82:	3001      	adds	r0, #1
 800ce84:	f43f aef7 	beq.w	800cc76 <_printf_float+0xc2>
 800ce88:	f109 0901 	add.w	r9, r9, #1
 800ce8c:	e7ee      	b.n	800ce6c <_printf_float+0x2b8>
 800ce8e:	bf00      	nop
 800ce90:	7fefffff 	.word	0x7fefffff
 800ce94:	08010f60 	.word	0x08010f60
 800ce98:	08010f64 	.word	0x08010f64
 800ce9c:	08010f6c 	.word	0x08010f6c
 800cea0:	08010f68 	.word	0x08010f68
 800cea4:	08010f70 	.word	0x08010f70
 800cea8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ceaa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ceac:	429a      	cmp	r2, r3
 800ceae:	bfa8      	it	ge
 800ceb0:	461a      	movge	r2, r3
 800ceb2:	2a00      	cmp	r2, #0
 800ceb4:	4691      	mov	r9, r2
 800ceb6:	dc37      	bgt.n	800cf28 <_printf_float+0x374>
 800ceb8:	f04f 0b00 	mov.w	fp, #0
 800cebc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cec0:	f104 021a 	add.w	r2, r4, #26
 800cec4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cec6:	9305      	str	r3, [sp, #20]
 800cec8:	eba3 0309 	sub.w	r3, r3, r9
 800cecc:	455b      	cmp	r3, fp
 800cece:	dc33      	bgt.n	800cf38 <_printf_float+0x384>
 800ced0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ced4:	429a      	cmp	r2, r3
 800ced6:	db3b      	blt.n	800cf50 <_printf_float+0x39c>
 800ced8:	6823      	ldr	r3, [r4, #0]
 800ceda:	07da      	lsls	r2, r3, #31
 800cedc:	d438      	bmi.n	800cf50 <_printf_float+0x39c>
 800cede:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cee0:	9a05      	ldr	r2, [sp, #20]
 800cee2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cee4:	1a9a      	subs	r2, r3, r2
 800cee6:	eba3 0901 	sub.w	r9, r3, r1
 800ceea:	4591      	cmp	r9, r2
 800ceec:	bfa8      	it	ge
 800ceee:	4691      	movge	r9, r2
 800cef0:	f1b9 0f00 	cmp.w	r9, #0
 800cef4:	dc35      	bgt.n	800cf62 <_printf_float+0x3ae>
 800cef6:	f04f 0800 	mov.w	r8, #0
 800cefa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cefe:	f104 0a1a 	add.w	sl, r4, #26
 800cf02:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cf06:	1a9b      	subs	r3, r3, r2
 800cf08:	eba3 0309 	sub.w	r3, r3, r9
 800cf0c:	4543      	cmp	r3, r8
 800cf0e:	f77f af79 	ble.w	800ce04 <_printf_float+0x250>
 800cf12:	2301      	movs	r3, #1
 800cf14:	4652      	mov	r2, sl
 800cf16:	4631      	mov	r1, r6
 800cf18:	4628      	mov	r0, r5
 800cf1a:	47b8      	blx	r7
 800cf1c:	3001      	adds	r0, #1
 800cf1e:	f43f aeaa 	beq.w	800cc76 <_printf_float+0xc2>
 800cf22:	f108 0801 	add.w	r8, r8, #1
 800cf26:	e7ec      	b.n	800cf02 <_printf_float+0x34e>
 800cf28:	4613      	mov	r3, r2
 800cf2a:	4631      	mov	r1, r6
 800cf2c:	4642      	mov	r2, r8
 800cf2e:	4628      	mov	r0, r5
 800cf30:	47b8      	blx	r7
 800cf32:	3001      	adds	r0, #1
 800cf34:	d1c0      	bne.n	800ceb8 <_printf_float+0x304>
 800cf36:	e69e      	b.n	800cc76 <_printf_float+0xc2>
 800cf38:	2301      	movs	r3, #1
 800cf3a:	4631      	mov	r1, r6
 800cf3c:	4628      	mov	r0, r5
 800cf3e:	9205      	str	r2, [sp, #20]
 800cf40:	47b8      	blx	r7
 800cf42:	3001      	adds	r0, #1
 800cf44:	f43f ae97 	beq.w	800cc76 <_printf_float+0xc2>
 800cf48:	9a05      	ldr	r2, [sp, #20]
 800cf4a:	f10b 0b01 	add.w	fp, fp, #1
 800cf4e:	e7b9      	b.n	800cec4 <_printf_float+0x310>
 800cf50:	ee18 3a10 	vmov	r3, s16
 800cf54:	4652      	mov	r2, sl
 800cf56:	4631      	mov	r1, r6
 800cf58:	4628      	mov	r0, r5
 800cf5a:	47b8      	blx	r7
 800cf5c:	3001      	adds	r0, #1
 800cf5e:	d1be      	bne.n	800cede <_printf_float+0x32a>
 800cf60:	e689      	b.n	800cc76 <_printf_float+0xc2>
 800cf62:	9a05      	ldr	r2, [sp, #20]
 800cf64:	464b      	mov	r3, r9
 800cf66:	4442      	add	r2, r8
 800cf68:	4631      	mov	r1, r6
 800cf6a:	4628      	mov	r0, r5
 800cf6c:	47b8      	blx	r7
 800cf6e:	3001      	adds	r0, #1
 800cf70:	d1c1      	bne.n	800cef6 <_printf_float+0x342>
 800cf72:	e680      	b.n	800cc76 <_printf_float+0xc2>
 800cf74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cf76:	2a01      	cmp	r2, #1
 800cf78:	dc01      	bgt.n	800cf7e <_printf_float+0x3ca>
 800cf7a:	07db      	lsls	r3, r3, #31
 800cf7c:	d538      	bpl.n	800cff0 <_printf_float+0x43c>
 800cf7e:	2301      	movs	r3, #1
 800cf80:	4642      	mov	r2, r8
 800cf82:	4631      	mov	r1, r6
 800cf84:	4628      	mov	r0, r5
 800cf86:	47b8      	blx	r7
 800cf88:	3001      	adds	r0, #1
 800cf8a:	f43f ae74 	beq.w	800cc76 <_printf_float+0xc2>
 800cf8e:	ee18 3a10 	vmov	r3, s16
 800cf92:	4652      	mov	r2, sl
 800cf94:	4631      	mov	r1, r6
 800cf96:	4628      	mov	r0, r5
 800cf98:	47b8      	blx	r7
 800cf9a:	3001      	adds	r0, #1
 800cf9c:	f43f ae6b 	beq.w	800cc76 <_printf_float+0xc2>
 800cfa0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cfa4:	2200      	movs	r2, #0
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	f7f3 fd8e 	bl	8000ac8 <__aeabi_dcmpeq>
 800cfac:	b9d8      	cbnz	r0, 800cfe6 <_printf_float+0x432>
 800cfae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cfb0:	f108 0201 	add.w	r2, r8, #1
 800cfb4:	3b01      	subs	r3, #1
 800cfb6:	4631      	mov	r1, r6
 800cfb8:	4628      	mov	r0, r5
 800cfba:	47b8      	blx	r7
 800cfbc:	3001      	adds	r0, #1
 800cfbe:	d10e      	bne.n	800cfde <_printf_float+0x42a>
 800cfc0:	e659      	b.n	800cc76 <_printf_float+0xc2>
 800cfc2:	2301      	movs	r3, #1
 800cfc4:	4652      	mov	r2, sl
 800cfc6:	4631      	mov	r1, r6
 800cfc8:	4628      	mov	r0, r5
 800cfca:	47b8      	blx	r7
 800cfcc:	3001      	adds	r0, #1
 800cfce:	f43f ae52 	beq.w	800cc76 <_printf_float+0xc2>
 800cfd2:	f108 0801 	add.w	r8, r8, #1
 800cfd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cfd8:	3b01      	subs	r3, #1
 800cfda:	4543      	cmp	r3, r8
 800cfdc:	dcf1      	bgt.n	800cfc2 <_printf_float+0x40e>
 800cfde:	464b      	mov	r3, r9
 800cfe0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cfe4:	e6dc      	b.n	800cda0 <_printf_float+0x1ec>
 800cfe6:	f04f 0800 	mov.w	r8, #0
 800cfea:	f104 0a1a 	add.w	sl, r4, #26
 800cfee:	e7f2      	b.n	800cfd6 <_printf_float+0x422>
 800cff0:	2301      	movs	r3, #1
 800cff2:	4642      	mov	r2, r8
 800cff4:	e7df      	b.n	800cfb6 <_printf_float+0x402>
 800cff6:	2301      	movs	r3, #1
 800cff8:	464a      	mov	r2, r9
 800cffa:	4631      	mov	r1, r6
 800cffc:	4628      	mov	r0, r5
 800cffe:	47b8      	blx	r7
 800d000:	3001      	adds	r0, #1
 800d002:	f43f ae38 	beq.w	800cc76 <_printf_float+0xc2>
 800d006:	f108 0801 	add.w	r8, r8, #1
 800d00a:	68e3      	ldr	r3, [r4, #12]
 800d00c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d00e:	1a5b      	subs	r3, r3, r1
 800d010:	4543      	cmp	r3, r8
 800d012:	dcf0      	bgt.n	800cff6 <_printf_float+0x442>
 800d014:	e6fa      	b.n	800ce0c <_printf_float+0x258>
 800d016:	f04f 0800 	mov.w	r8, #0
 800d01a:	f104 0919 	add.w	r9, r4, #25
 800d01e:	e7f4      	b.n	800d00a <_printf_float+0x456>

0800d020 <_printf_common>:
 800d020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d024:	4616      	mov	r6, r2
 800d026:	4699      	mov	r9, r3
 800d028:	688a      	ldr	r2, [r1, #8]
 800d02a:	690b      	ldr	r3, [r1, #16]
 800d02c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d030:	4293      	cmp	r3, r2
 800d032:	bfb8      	it	lt
 800d034:	4613      	movlt	r3, r2
 800d036:	6033      	str	r3, [r6, #0]
 800d038:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d03c:	4607      	mov	r7, r0
 800d03e:	460c      	mov	r4, r1
 800d040:	b10a      	cbz	r2, 800d046 <_printf_common+0x26>
 800d042:	3301      	adds	r3, #1
 800d044:	6033      	str	r3, [r6, #0]
 800d046:	6823      	ldr	r3, [r4, #0]
 800d048:	0699      	lsls	r1, r3, #26
 800d04a:	bf42      	ittt	mi
 800d04c:	6833      	ldrmi	r3, [r6, #0]
 800d04e:	3302      	addmi	r3, #2
 800d050:	6033      	strmi	r3, [r6, #0]
 800d052:	6825      	ldr	r5, [r4, #0]
 800d054:	f015 0506 	ands.w	r5, r5, #6
 800d058:	d106      	bne.n	800d068 <_printf_common+0x48>
 800d05a:	f104 0a19 	add.w	sl, r4, #25
 800d05e:	68e3      	ldr	r3, [r4, #12]
 800d060:	6832      	ldr	r2, [r6, #0]
 800d062:	1a9b      	subs	r3, r3, r2
 800d064:	42ab      	cmp	r3, r5
 800d066:	dc26      	bgt.n	800d0b6 <_printf_common+0x96>
 800d068:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d06c:	1e13      	subs	r3, r2, #0
 800d06e:	6822      	ldr	r2, [r4, #0]
 800d070:	bf18      	it	ne
 800d072:	2301      	movne	r3, #1
 800d074:	0692      	lsls	r2, r2, #26
 800d076:	d42b      	bmi.n	800d0d0 <_printf_common+0xb0>
 800d078:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d07c:	4649      	mov	r1, r9
 800d07e:	4638      	mov	r0, r7
 800d080:	47c0      	blx	r8
 800d082:	3001      	adds	r0, #1
 800d084:	d01e      	beq.n	800d0c4 <_printf_common+0xa4>
 800d086:	6823      	ldr	r3, [r4, #0]
 800d088:	68e5      	ldr	r5, [r4, #12]
 800d08a:	6832      	ldr	r2, [r6, #0]
 800d08c:	f003 0306 	and.w	r3, r3, #6
 800d090:	2b04      	cmp	r3, #4
 800d092:	bf08      	it	eq
 800d094:	1aad      	subeq	r5, r5, r2
 800d096:	68a3      	ldr	r3, [r4, #8]
 800d098:	6922      	ldr	r2, [r4, #16]
 800d09a:	bf0c      	ite	eq
 800d09c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d0a0:	2500      	movne	r5, #0
 800d0a2:	4293      	cmp	r3, r2
 800d0a4:	bfc4      	itt	gt
 800d0a6:	1a9b      	subgt	r3, r3, r2
 800d0a8:	18ed      	addgt	r5, r5, r3
 800d0aa:	2600      	movs	r6, #0
 800d0ac:	341a      	adds	r4, #26
 800d0ae:	42b5      	cmp	r5, r6
 800d0b0:	d11a      	bne.n	800d0e8 <_printf_common+0xc8>
 800d0b2:	2000      	movs	r0, #0
 800d0b4:	e008      	b.n	800d0c8 <_printf_common+0xa8>
 800d0b6:	2301      	movs	r3, #1
 800d0b8:	4652      	mov	r2, sl
 800d0ba:	4649      	mov	r1, r9
 800d0bc:	4638      	mov	r0, r7
 800d0be:	47c0      	blx	r8
 800d0c0:	3001      	adds	r0, #1
 800d0c2:	d103      	bne.n	800d0cc <_printf_common+0xac>
 800d0c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d0c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0cc:	3501      	adds	r5, #1
 800d0ce:	e7c6      	b.n	800d05e <_printf_common+0x3e>
 800d0d0:	18e1      	adds	r1, r4, r3
 800d0d2:	1c5a      	adds	r2, r3, #1
 800d0d4:	2030      	movs	r0, #48	; 0x30
 800d0d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d0da:	4422      	add	r2, r4
 800d0dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d0e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d0e4:	3302      	adds	r3, #2
 800d0e6:	e7c7      	b.n	800d078 <_printf_common+0x58>
 800d0e8:	2301      	movs	r3, #1
 800d0ea:	4622      	mov	r2, r4
 800d0ec:	4649      	mov	r1, r9
 800d0ee:	4638      	mov	r0, r7
 800d0f0:	47c0      	blx	r8
 800d0f2:	3001      	adds	r0, #1
 800d0f4:	d0e6      	beq.n	800d0c4 <_printf_common+0xa4>
 800d0f6:	3601      	adds	r6, #1
 800d0f8:	e7d9      	b.n	800d0ae <_printf_common+0x8e>
	...

0800d0fc <_printf_i>:
 800d0fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d100:	7e0f      	ldrb	r7, [r1, #24]
 800d102:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d104:	2f78      	cmp	r7, #120	; 0x78
 800d106:	4691      	mov	r9, r2
 800d108:	4680      	mov	r8, r0
 800d10a:	460c      	mov	r4, r1
 800d10c:	469a      	mov	sl, r3
 800d10e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d112:	d807      	bhi.n	800d124 <_printf_i+0x28>
 800d114:	2f62      	cmp	r7, #98	; 0x62
 800d116:	d80a      	bhi.n	800d12e <_printf_i+0x32>
 800d118:	2f00      	cmp	r7, #0
 800d11a:	f000 80d8 	beq.w	800d2ce <_printf_i+0x1d2>
 800d11e:	2f58      	cmp	r7, #88	; 0x58
 800d120:	f000 80a3 	beq.w	800d26a <_printf_i+0x16e>
 800d124:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d128:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d12c:	e03a      	b.n	800d1a4 <_printf_i+0xa8>
 800d12e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d132:	2b15      	cmp	r3, #21
 800d134:	d8f6      	bhi.n	800d124 <_printf_i+0x28>
 800d136:	a101      	add	r1, pc, #4	; (adr r1, 800d13c <_printf_i+0x40>)
 800d138:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d13c:	0800d195 	.word	0x0800d195
 800d140:	0800d1a9 	.word	0x0800d1a9
 800d144:	0800d125 	.word	0x0800d125
 800d148:	0800d125 	.word	0x0800d125
 800d14c:	0800d125 	.word	0x0800d125
 800d150:	0800d125 	.word	0x0800d125
 800d154:	0800d1a9 	.word	0x0800d1a9
 800d158:	0800d125 	.word	0x0800d125
 800d15c:	0800d125 	.word	0x0800d125
 800d160:	0800d125 	.word	0x0800d125
 800d164:	0800d125 	.word	0x0800d125
 800d168:	0800d2b5 	.word	0x0800d2b5
 800d16c:	0800d1d9 	.word	0x0800d1d9
 800d170:	0800d297 	.word	0x0800d297
 800d174:	0800d125 	.word	0x0800d125
 800d178:	0800d125 	.word	0x0800d125
 800d17c:	0800d2d7 	.word	0x0800d2d7
 800d180:	0800d125 	.word	0x0800d125
 800d184:	0800d1d9 	.word	0x0800d1d9
 800d188:	0800d125 	.word	0x0800d125
 800d18c:	0800d125 	.word	0x0800d125
 800d190:	0800d29f 	.word	0x0800d29f
 800d194:	682b      	ldr	r3, [r5, #0]
 800d196:	1d1a      	adds	r2, r3, #4
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	602a      	str	r2, [r5, #0]
 800d19c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d1a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d1a4:	2301      	movs	r3, #1
 800d1a6:	e0a3      	b.n	800d2f0 <_printf_i+0x1f4>
 800d1a8:	6820      	ldr	r0, [r4, #0]
 800d1aa:	6829      	ldr	r1, [r5, #0]
 800d1ac:	0606      	lsls	r6, r0, #24
 800d1ae:	f101 0304 	add.w	r3, r1, #4
 800d1b2:	d50a      	bpl.n	800d1ca <_printf_i+0xce>
 800d1b4:	680e      	ldr	r6, [r1, #0]
 800d1b6:	602b      	str	r3, [r5, #0]
 800d1b8:	2e00      	cmp	r6, #0
 800d1ba:	da03      	bge.n	800d1c4 <_printf_i+0xc8>
 800d1bc:	232d      	movs	r3, #45	; 0x2d
 800d1be:	4276      	negs	r6, r6
 800d1c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d1c4:	485e      	ldr	r0, [pc, #376]	; (800d340 <_printf_i+0x244>)
 800d1c6:	230a      	movs	r3, #10
 800d1c8:	e019      	b.n	800d1fe <_printf_i+0x102>
 800d1ca:	680e      	ldr	r6, [r1, #0]
 800d1cc:	602b      	str	r3, [r5, #0]
 800d1ce:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d1d2:	bf18      	it	ne
 800d1d4:	b236      	sxthne	r6, r6
 800d1d6:	e7ef      	b.n	800d1b8 <_printf_i+0xbc>
 800d1d8:	682b      	ldr	r3, [r5, #0]
 800d1da:	6820      	ldr	r0, [r4, #0]
 800d1dc:	1d19      	adds	r1, r3, #4
 800d1de:	6029      	str	r1, [r5, #0]
 800d1e0:	0601      	lsls	r1, r0, #24
 800d1e2:	d501      	bpl.n	800d1e8 <_printf_i+0xec>
 800d1e4:	681e      	ldr	r6, [r3, #0]
 800d1e6:	e002      	b.n	800d1ee <_printf_i+0xf2>
 800d1e8:	0646      	lsls	r6, r0, #25
 800d1ea:	d5fb      	bpl.n	800d1e4 <_printf_i+0xe8>
 800d1ec:	881e      	ldrh	r6, [r3, #0]
 800d1ee:	4854      	ldr	r0, [pc, #336]	; (800d340 <_printf_i+0x244>)
 800d1f0:	2f6f      	cmp	r7, #111	; 0x6f
 800d1f2:	bf0c      	ite	eq
 800d1f4:	2308      	moveq	r3, #8
 800d1f6:	230a      	movne	r3, #10
 800d1f8:	2100      	movs	r1, #0
 800d1fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d1fe:	6865      	ldr	r5, [r4, #4]
 800d200:	60a5      	str	r5, [r4, #8]
 800d202:	2d00      	cmp	r5, #0
 800d204:	bfa2      	ittt	ge
 800d206:	6821      	ldrge	r1, [r4, #0]
 800d208:	f021 0104 	bicge.w	r1, r1, #4
 800d20c:	6021      	strge	r1, [r4, #0]
 800d20e:	b90e      	cbnz	r6, 800d214 <_printf_i+0x118>
 800d210:	2d00      	cmp	r5, #0
 800d212:	d04d      	beq.n	800d2b0 <_printf_i+0x1b4>
 800d214:	4615      	mov	r5, r2
 800d216:	fbb6 f1f3 	udiv	r1, r6, r3
 800d21a:	fb03 6711 	mls	r7, r3, r1, r6
 800d21e:	5dc7      	ldrb	r7, [r0, r7]
 800d220:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d224:	4637      	mov	r7, r6
 800d226:	42bb      	cmp	r3, r7
 800d228:	460e      	mov	r6, r1
 800d22a:	d9f4      	bls.n	800d216 <_printf_i+0x11a>
 800d22c:	2b08      	cmp	r3, #8
 800d22e:	d10b      	bne.n	800d248 <_printf_i+0x14c>
 800d230:	6823      	ldr	r3, [r4, #0]
 800d232:	07de      	lsls	r6, r3, #31
 800d234:	d508      	bpl.n	800d248 <_printf_i+0x14c>
 800d236:	6923      	ldr	r3, [r4, #16]
 800d238:	6861      	ldr	r1, [r4, #4]
 800d23a:	4299      	cmp	r1, r3
 800d23c:	bfde      	ittt	le
 800d23e:	2330      	movle	r3, #48	; 0x30
 800d240:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d244:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d248:	1b52      	subs	r2, r2, r5
 800d24a:	6122      	str	r2, [r4, #16]
 800d24c:	f8cd a000 	str.w	sl, [sp]
 800d250:	464b      	mov	r3, r9
 800d252:	aa03      	add	r2, sp, #12
 800d254:	4621      	mov	r1, r4
 800d256:	4640      	mov	r0, r8
 800d258:	f7ff fee2 	bl	800d020 <_printf_common>
 800d25c:	3001      	adds	r0, #1
 800d25e:	d14c      	bne.n	800d2fa <_printf_i+0x1fe>
 800d260:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d264:	b004      	add	sp, #16
 800d266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d26a:	4835      	ldr	r0, [pc, #212]	; (800d340 <_printf_i+0x244>)
 800d26c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d270:	6829      	ldr	r1, [r5, #0]
 800d272:	6823      	ldr	r3, [r4, #0]
 800d274:	f851 6b04 	ldr.w	r6, [r1], #4
 800d278:	6029      	str	r1, [r5, #0]
 800d27a:	061d      	lsls	r5, r3, #24
 800d27c:	d514      	bpl.n	800d2a8 <_printf_i+0x1ac>
 800d27e:	07df      	lsls	r7, r3, #31
 800d280:	bf44      	itt	mi
 800d282:	f043 0320 	orrmi.w	r3, r3, #32
 800d286:	6023      	strmi	r3, [r4, #0]
 800d288:	b91e      	cbnz	r6, 800d292 <_printf_i+0x196>
 800d28a:	6823      	ldr	r3, [r4, #0]
 800d28c:	f023 0320 	bic.w	r3, r3, #32
 800d290:	6023      	str	r3, [r4, #0]
 800d292:	2310      	movs	r3, #16
 800d294:	e7b0      	b.n	800d1f8 <_printf_i+0xfc>
 800d296:	6823      	ldr	r3, [r4, #0]
 800d298:	f043 0320 	orr.w	r3, r3, #32
 800d29c:	6023      	str	r3, [r4, #0]
 800d29e:	2378      	movs	r3, #120	; 0x78
 800d2a0:	4828      	ldr	r0, [pc, #160]	; (800d344 <_printf_i+0x248>)
 800d2a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d2a6:	e7e3      	b.n	800d270 <_printf_i+0x174>
 800d2a8:	0659      	lsls	r1, r3, #25
 800d2aa:	bf48      	it	mi
 800d2ac:	b2b6      	uxthmi	r6, r6
 800d2ae:	e7e6      	b.n	800d27e <_printf_i+0x182>
 800d2b0:	4615      	mov	r5, r2
 800d2b2:	e7bb      	b.n	800d22c <_printf_i+0x130>
 800d2b4:	682b      	ldr	r3, [r5, #0]
 800d2b6:	6826      	ldr	r6, [r4, #0]
 800d2b8:	6961      	ldr	r1, [r4, #20]
 800d2ba:	1d18      	adds	r0, r3, #4
 800d2bc:	6028      	str	r0, [r5, #0]
 800d2be:	0635      	lsls	r5, r6, #24
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	d501      	bpl.n	800d2c8 <_printf_i+0x1cc>
 800d2c4:	6019      	str	r1, [r3, #0]
 800d2c6:	e002      	b.n	800d2ce <_printf_i+0x1d2>
 800d2c8:	0670      	lsls	r0, r6, #25
 800d2ca:	d5fb      	bpl.n	800d2c4 <_printf_i+0x1c8>
 800d2cc:	8019      	strh	r1, [r3, #0]
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	6123      	str	r3, [r4, #16]
 800d2d2:	4615      	mov	r5, r2
 800d2d4:	e7ba      	b.n	800d24c <_printf_i+0x150>
 800d2d6:	682b      	ldr	r3, [r5, #0]
 800d2d8:	1d1a      	adds	r2, r3, #4
 800d2da:	602a      	str	r2, [r5, #0]
 800d2dc:	681d      	ldr	r5, [r3, #0]
 800d2de:	6862      	ldr	r2, [r4, #4]
 800d2e0:	2100      	movs	r1, #0
 800d2e2:	4628      	mov	r0, r5
 800d2e4:	f7f2 ff7c 	bl	80001e0 <memchr>
 800d2e8:	b108      	cbz	r0, 800d2ee <_printf_i+0x1f2>
 800d2ea:	1b40      	subs	r0, r0, r5
 800d2ec:	6060      	str	r0, [r4, #4]
 800d2ee:	6863      	ldr	r3, [r4, #4]
 800d2f0:	6123      	str	r3, [r4, #16]
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d2f8:	e7a8      	b.n	800d24c <_printf_i+0x150>
 800d2fa:	6923      	ldr	r3, [r4, #16]
 800d2fc:	462a      	mov	r2, r5
 800d2fe:	4649      	mov	r1, r9
 800d300:	4640      	mov	r0, r8
 800d302:	47d0      	blx	sl
 800d304:	3001      	adds	r0, #1
 800d306:	d0ab      	beq.n	800d260 <_printf_i+0x164>
 800d308:	6823      	ldr	r3, [r4, #0]
 800d30a:	079b      	lsls	r3, r3, #30
 800d30c:	d413      	bmi.n	800d336 <_printf_i+0x23a>
 800d30e:	68e0      	ldr	r0, [r4, #12]
 800d310:	9b03      	ldr	r3, [sp, #12]
 800d312:	4298      	cmp	r0, r3
 800d314:	bfb8      	it	lt
 800d316:	4618      	movlt	r0, r3
 800d318:	e7a4      	b.n	800d264 <_printf_i+0x168>
 800d31a:	2301      	movs	r3, #1
 800d31c:	4632      	mov	r2, r6
 800d31e:	4649      	mov	r1, r9
 800d320:	4640      	mov	r0, r8
 800d322:	47d0      	blx	sl
 800d324:	3001      	adds	r0, #1
 800d326:	d09b      	beq.n	800d260 <_printf_i+0x164>
 800d328:	3501      	adds	r5, #1
 800d32a:	68e3      	ldr	r3, [r4, #12]
 800d32c:	9903      	ldr	r1, [sp, #12]
 800d32e:	1a5b      	subs	r3, r3, r1
 800d330:	42ab      	cmp	r3, r5
 800d332:	dcf2      	bgt.n	800d31a <_printf_i+0x21e>
 800d334:	e7eb      	b.n	800d30e <_printf_i+0x212>
 800d336:	2500      	movs	r5, #0
 800d338:	f104 0619 	add.w	r6, r4, #25
 800d33c:	e7f5      	b.n	800d32a <_printf_i+0x22e>
 800d33e:	bf00      	nop
 800d340:	08010f72 	.word	0x08010f72
 800d344:	08010f83 	.word	0x08010f83

0800d348 <siprintf>:
 800d348:	b40e      	push	{r1, r2, r3}
 800d34a:	b500      	push	{lr}
 800d34c:	b09c      	sub	sp, #112	; 0x70
 800d34e:	ab1d      	add	r3, sp, #116	; 0x74
 800d350:	9002      	str	r0, [sp, #8]
 800d352:	9006      	str	r0, [sp, #24]
 800d354:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d358:	4809      	ldr	r0, [pc, #36]	; (800d380 <siprintf+0x38>)
 800d35a:	9107      	str	r1, [sp, #28]
 800d35c:	9104      	str	r1, [sp, #16]
 800d35e:	4909      	ldr	r1, [pc, #36]	; (800d384 <siprintf+0x3c>)
 800d360:	f853 2b04 	ldr.w	r2, [r3], #4
 800d364:	9105      	str	r1, [sp, #20]
 800d366:	6800      	ldr	r0, [r0, #0]
 800d368:	9301      	str	r3, [sp, #4]
 800d36a:	a902      	add	r1, sp, #8
 800d36c:	f001 fb76 	bl	800ea5c <_svfiprintf_r>
 800d370:	9b02      	ldr	r3, [sp, #8]
 800d372:	2200      	movs	r2, #0
 800d374:	701a      	strb	r2, [r3, #0]
 800d376:	b01c      	add	sp, #112	; 0x70
 800d378:	f85d eb04 	ldr.w	lr, [sp], #4
 800d37c:	b003      	add	sp, #12
 800d37e:	4770      	bx	lr
 800d380:	200001b4 	.word	0x200001b4
 800d384:	ffff0208 	.word	0xffff0208

0800d388 <quorem>:
 800d388:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d38c:	6903      	ldr	r3, [r0, #16]
 800d38e:	690c      	ldr	r4, [r1, #16]
 800d390:	42a3      	cmp	r3, r4
 800d392:	4607      	mov	r7, r0
 800d394:	f2c0 8081 	blt.w	800d49a <quorem+0x112>
 800d398:	3c01      	subs	r4, #1
 800d39a:	f101 0814 	add.w	r8, r1, #20
 800d39e:	f100 0514 	add.w	r5, r0, #20
 800d3a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d3a6:	9301      	str	r3, [sp, #4]
 800d3a8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d3ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d3b0:	3301      	adds	r3, #1
 800d3b2:	429a      	cmp	r2, r3
 800d3b4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d3b8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d3bc:	fbb2 f6f3 	udiv	r6, r2, r3
 800d3c0:	d331      	bcc.n	800d426 <quorem+0x9e>
 800d3c2:	f04f 0e00 	mov.w	lr, #0
 800d3c6:	4640      	mov	r0, r8
 800d3c8:	46ac      	mov	ip, r5
 800d3ca:	46f2      	mov	sl, lr
 800d3cc:	f850 2b04 	ldr.w	r2, [r0], #4
 800d3d0:	b293      	uxth	r3, r2
 800d3d2:	fb06 e303 	mla	r3, r6, r3, lr
 800d3d6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d3da:	b29b      	uxth	r3, r3
 800d3dc:	ebaa 0303 	sub.w	r3, sl, r3
 800d3e0:	f8dc a000 	ldr.w	sl, [ip]
 800d3e4:	0c12      	lsrs	r2, r2, #16
 800d3e6:	fa13 f38a 	uxtah	r3, r3, sl
 800d3ea:	fb06 e202 	mla	r2, r6, r2, lr
 800d3ee:	9300      	str	r3, [sp, #0]
 800d3f0:	9b00      	ldr	r3, [sp, #0]
 800d3f2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d3f6:	b292      	uxth	r2, r2
 800d3f8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d3fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d400:	f8bd 3000 	ldrh.w	r3, [sp]
 800d404:	4581      	cmp	r9, r0
 800d406:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d40a:	f84c 3b04 	str.w	r3, [ip], #4
 800d40e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d412:	d2db      	bcs.n	800d3cc <quorem+0x44>
 800d414:	f855 300b 	ldr.w	r3, [r5, fp]
 800d418:	b92b      	cbnz	r3, 800d426 <quorem+0x9e>
 800d41a:	9b01      	ldr	r3, [sp, #4]
 800d41c:	3b04      	subs	r3, #4
 800d41e:	429d      	cmp	r5, r3
 800d420:	461a      	mov	r2, r3
 800d422:	d32e      	bcc.n	800d482 <quorem+0xfa>
 800d424:	613c      	str	r4, [r7, #16]
 800d426:	4638      	mov	r0, r7
 800d428:	f001 f8c4 	bl	800e5b4 <__mcmp>
 800d42c:	2800      	cmp	r0, #0
 800d42e:	db24      	blt.n	800d47a <quorem+0xf2>
 800d430:	3601      	adds	r6, #1
 800d432:	4628      	mov	r0, r5
 800d434:	f04f 0c00 	mov.w	ip, #0
 800d438:	f858 2b04 	ldr.w	r2, [r8], #4
 800d43c:	f8d0 e000 	ldr.w	lr, [r0]
 800d440:	b293      	uxth	r3, r2
 800d442:	ebac 0303 	sub.w	r3, ip, r3
 800d446:	0c12      	lsrs	r2, r2, #16
 800d448:	fa13 f38e 	uxtah	r3, r3, lr
 800d44c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d450:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d454:	b29b      	uxth	r3, r3
 800d456:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d45a:	45c1      	cmp	r9, r8
 800d45c:	f840 3b04 	str.w	r3, [r0], #4
 800d460:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d464:	d2e8      	bcs.n	800d438 <quorem+0xb0>
 800d466:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d46a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d46e:	b922      	cbnz	r2, 800d47a <quorem+0xf2>
 800d470:	3b04      	subs	r3, #4
 800d472:	429d      	cmp	r5, r3
 800d474:	461a      	mov	r2, r3
 800d476:	d30a      	bcc.n	800d48e <quorem+0x106>
 800d478:	613c      	str	r4, [r7, #16]
 800d47a:	4630      	mov	r0, r6
 800d47c:	b003      	add	sp, #12
 800d47e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d482:	6812      	ldr	r2, [r2, #0]
 800d484:	3b04      	subs	r3, #4
 800d486:	2a00      	cmp	r2, #0
 800d488:	d1cc      	bne.n	800d424 <quorem+0x9c>
 800d48a:	3c01      	subs	r4, #1
 800d48c:	e7c7      	b.n	800d41e <quorem+0x96>
 800d48e:	6812      	ldr	r2, [r2, #0]
 800d490:	3b04      	subs	r3, #4
 800d492:	2a00      	cmp	r2, #0
 800d494:	d1f0      	bne.n	800d478 <quorem+0xf0>
 800d496:	3c01      	subs	r4, #1
 800d498:	e7eb      	b.n	800d472 <quorem+0xea>
 800d49a:	2000      	movs	r0, #0
 800d49c:	e7ee      	b.n	800d47c <quorem+0xf4>
	...

0800d4a0 <_dtoa_r>:
 800d4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4a4:	ed2d 8b04 	vpush	{d8-d9}
 800d4a8:	ec57 6b10 	vmov	r6, r7, d0
 800d4ac:	b093      	sub	sp, #76	; 0x4c
 800d4ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d4b0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d4b4:	9106      	str	r1, [sp, #24]
 800d4b6:	ee10 aa10 	vmov	sl, s0
 800d4ba:	4604      	mov	r4, r0
 800d4bc:	9209      	str	r2, [sp, #36]	; 0x24
 800d4be:	930c      	str	r3, [sp, #48]	; 0x30
 800d4c0:	46bb      	mov	fp, r7
 800d4c2:	b975      	cbnz	r5, 800d4e2 <_dtoa_r+0x42>
 800d4c4:	2010      	movs	r0, #16
 800d4c6:	f000 fddd 	bl	800e084 <malloc>
 800d4ca:	4602      	mov	r2, r0
 800d4cc:	6260      	str	r0, [r4, #36]	; 0x24
 800d4ce:	b920      	cbnz	r0, 800d4da <_dtoa_r+0x3a>
 800d4d0:	4ba7      	ldr	r3, [pc, #668]	; (800d770 <_dtoa_r+0x2d0>)
 800d4d2:	21ea      	movs	r1, #234	; 0xea
 800d4d4:	48a7      	ldr	r0, [pc, #668]	; (800d774 <_dtoa_r+0x2d4>)
 800d4d6:	f001 fbd1 	bl	800ec7c <__assert_func>
 800d4da:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d4de:	6005      	str	r5, [r0, #0]
 800d4e0:	60c5      	str	r5, [r0, #12]
 800d4e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d4e4:	6819      	ldr	r1, [r3, #0]
 800d4e6:	b151      	cbz	r1, 800d4fe <_dtoa_r+0x5e>
 800d4e8:	685a      	ldr	r2, [r3, #4]
 800d4ea:	604a      	str	r2, [r1, #4]
 800d4ec:	2301      	movs	r3, #1
 800d4ee:	4093      	lsls	r3, r2
 800d4f0:	608b      	str	r3, [r1, #8]
 800d4f2:	4620      	mov	r0, r4
 800d4f4:	f000 fe1c 	bl	800e130 <_Bfree>
 800d4f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	601a      	str	r2, [r3, #0]
 800d4fe:	1e3b      	subs	r3, r7, #0
 800d500:	bfaa      	itet	ge
 800d502:	2300      	movge	r3, #0
 800d504:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800d508:	f8c8 3000 	strge.w	r3, [r8]
 800d50c:	4b9a      	ldr	r3, [pc, #616]	; (800d778 <_dtoa_r+0x2d8>)
 800d50e:	bfbc      	itt	lt
 800d510:	2201      	movlt	r2, #1
 800d512:	f8c8 2000 	strlt.w	r2, [r8]
 800d516:	ea33 030b 	bics.w	r3, r3, fp
 800d51a:	d11b      	bne.n	800d554 <_dtoa_r+0xb4>
 800d51c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d51e:	f242 730f 	movw	r3, #9999	; 0x270f
 800d522:	6013      	str	r3, [r2, #0]
 800d524:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d528:	4333      	orrs	r3, r6
 800d52a:	f000 8592 	beq.w	800e052 <_dtoa_r+0xbb2>
 800d52e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d530:	b963      	cbnz	r3, 800d54c <_dtoa_r+0xac>
 800d532:	4b92      	ldr	r3, [pc, #584]	; (800d77c <_dtoa_r+0x2dc>)
 800d534:	e022      	b.n	800d57c <_dtoa_r+0xdc>
 800d536:	4b92      	ldr	r3, [pc, #584]	; (800d780 <_dtoa_r+0x2e0>)
 800d538:	9301      	str	r3, [sp, #4]
 800d53a:	3308      	adds	r3, #8
 800d53c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d53e:	6013      	str	r3, [r2, #0]
 800d540:	9801      	ldr	r0, [sp, #4]
 800d542:	b013      	add	sp, #76	; 0x4c
 800d544:	ecbd 8b04 	vpop	{d8-d9}
 800d548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d54c:	4b8b      	ldr	r3, [pc, #556]	; (800d77c <_dtoa_r+0x2dc>)
 800d54e:	9301      	str	r3, [sp, #4]
 800d550:	3303      	adds	r3, #3
 800d552:	e7f3      	b.n	800d53c <_dtoa_r+0x9c>
 800d554:	2200      	movs	r2, #0
 800d556:	2300      	movs	r3, #0
 800d558:	4650      	mov	r0, sl
 800d55a:	4659      	mov	r1, fp
 800d55c:	f7f3 fab4 	bl	8000ac8 <__aeabi_dcmpeq>
 800d560:	ec4b ab19 	vmov	d9, sl, fp
 800d564:	4680      	mov	r8, r0
 800d566:	b158      	cbz	r0, 800d580 <_dtoa_r+0xe0>
 800d568:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d56a:	2301      	movs	r3, #1
 800d56c:	6013      	str	r3, [r2, #0]
 800d56e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d570:	2b00      	cmp	r3, #0
 800d572:	f000 856b 	beq.w	800e04c <_dtoa_r+0xbac>
 800d576:	4883      	ldr	r0, [pc, #524]	; (800d784 <_dtoa_r+0x2e4>)
 800d578:	6018      	str	r0, [r3, #0]
 800d57a:	1e43      	subs	r3, r0, #1
 800d57c:	9301      	str	r3, [sp, #4]
 800d57e:	e7df      	b.n	800d540 <_dtoa_r+0xa0>
 800d580:	ec4b ab10 	vmov	d0, sl, fp
 800d584:	aa10      	add	r2, sp, #64	; 0x40
 800d586:	a911      	add	r1, sp, #68	; 0x44
 800d588:	4620      	mov	r0, r4
 800d58a:	f001 f8b9 	bl	800e700 <__d2b>
 800d58e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800d592:	ee08 0a10 	vmov	s16, r0
 800d596:	2d00      	cmp	r5, #0
 800d598:	f000 8084 	beq.w	800d6a4 <_dtoa_r+0x204>
 800d59c:	ee19 3a90 	vmov	r3, s19
 800d5a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d5a4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d5a8:	4656      	mov	r6, sl
 800d5aa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d5ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d5b2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800d5b6:	4b74      	ldr	r3, [pc, #464]	; (800d788 <_dtoa_r+0x2e8>)
 800d5b8:	2200      	movs	r2, #0
 800d5ba:	4630      	mov	r0, r6
 800d5bc:	4639      	mov	r1, r7
 800d5be:	f7f2 fe63 	bl	8000288 <__aeabi_dsub>
 800d5c2:	a365      	add	r3, pc, #404	; (adr r3, 800d758 <_dtoa_r+0x2b8>)
 800d5c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5c8:	f7f3 f816 	bl	80005f8 <__aeabi_dmul>
 800d5cc:	a364      	add	r3, pc, #400	; (adr r3, 800d760 <_dtoa_r+0x2c0>)
 800d5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5d2:	f7f2 fe5b 	bl	800028c <__adddf3>
 800d5d6:	4606      	mov	r6, r0
 800d5d8:	4628      	mov	r0, r5
 800d5da:	460f      	mov	r7, r1
 800d5dc:	f7f2 ffa2 	bl	8000524 <__aeabi_i2d>
 800d5e0:	a361      	add	r3, pc, #388	; (adr r3, 800d768 <_dtoa_r+0x2c8>)
 800d5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5e6:	f7f3 f807 	bl	80005f8 <__aeabi_dmul>
 800d5ea:	4602      	mov	r2, r0
 800d5ec:	460b      	mov	r3, r1
 800d5ee:	4630      	mov	r0, r6
 800d5f0:	4639      	mov	r1, r7
 800d5f2:	f7f2 fe4b 	bl	800028c <__adddf3>
 800d5f6:	4606      	mov	r6, r0
 800d5f8:	460f      	mov	r7, r1
 800d5fa:	f7f3 faad 	bl	8000b58 <__aeabi_d2iz>
 800d5fe:	2200      	movs	r2, #0
 800d600:	9000      	str	r0, [sp, #0]
 800d602:	2300      	movs	r3, #0
 800d604:	4630      	mov	r0, r6
 800d606:	4639      	mov	r1, r7
 800d608:	f7f3 fa68 	bl	8000adc <__aeabi_dcmplt>
 800d60c:	b150      	cbz	r0, 800d624 <_dtoa_r+0x184>
 800d60e:	9800      	ldr	r0, [sp, #0]
 800d610:	f7f2 ff88 	bl	8000524 <__aeabi_i2d>
 800d614:	4632      	mov	r2, r6
 800d616:	463b      	mov	r3, r7
 800d618:	f7f3 fa56 	bl	8000ac8 <__aeabi_dcmpeq>
 800d61c:	b910      	cbnz	r0, 800d624 <_dtoa_r+0x184>
 800d61e:	9b00      	ldr	r3, [sp, #0]
 800d620:	3b01      	subs	r3, #1
 800d622:	9300      	str	r3, [sp, #0]
 800d624:	9b00      	ldr	r3, [sp, #0]
 800d626:	2b16      	cmp	r3, #22
 800d628:	d85a      	bhi.n	800d6e0 <_dtoa_r+0x240>
 800d62a:	9a00      	ldr	r2, [sp, #0]
 800d62c:	4b57      	ldr	r3, [pc, #348]	; (800d78c <_dtoa_r+0x2ec>)
 800d62e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d632:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d636:	ec51 0b19 	vmov	r0, r1, d9
 800d63a:	f7f3 fa4f 	bl	8000adc <__aeabi_dcmplt>
 800d63e:	2800      	cmp	r0, #0
 800d640:	d050      	beq.n	800d6e4 <_dtoa_r+0x244>
 800d642:	9b00      	ldr	r3, [sp, #0]
 800d644:	3b01      	subs	r3, #1
 800d646:	9300      	str	r3, [sp, #0]
 800d648:	2300      	movs	r3, #0
 800d64a:	930b      	str	r3, [sp, #44]	; 0x2c
 800d64c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d64e:	1b5d      	subs	r5, r3, r5
 800d650:	1e6b      	subs	r3, r5, #1
 800d652:	9305      	str	r3, [sp, #20]
 800d654:	bf45      	ittet	mi
 800d656:	f1c5 0301 	rsbmi	r3, r5, #1
 800d65a:	9304      	strmi	r3, [sp, #16]
 800d65c:	2300      	movpl	r3, #0
 800d65e:	2300      	movmi	r3, #0
 800d660:	bf4c      	ite	mi
 800d662:	9305      	strmi	r3, [sp, #20]
 800d664:	9304      	strpl	r3, [sp, #16]
 800d666:	9b00      	ldr	r3, [sp, #0]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	db3d      	blt.n	800d6e8 <_dtoa_r+0x248>
 800d66c:	9b05      	ldr	r3, [sp, #20]
 800d66e:	9a00      	ldr	r2, [sp, #0]
 800d670:	920a      	str	r2, [sp, #40]	; 0x28
 800d672:	4413      	add	r3, r2
 800d674:	9305      	str	r3, [sp, #20]
 800d676:	2300      	movs	r3, #0
 800d678:	9307      	str	r3, [sp, #28]
 800d67a:	9b06      	ldr	r3, [sp, #24]
 800d67c:	2b09      	cmp	r3, #9
 800d67e:	f200 8089 	bhi.w	800d794 <_dtoa_r+0x2f4>
 800d682:	2b05      	cmp	r3, #5
 800d684:	bfc4      	itt	gt
 800d686:	3b04      	subgt	r3, #4
 800d688:	9306      	strgt	r3, [sp, #24]
 800d68a:	9b06      	ldr	r3, [sp, #24]
 800d68c:	f1a3 0302 	sub.w	r3, r3, #2
 800d690:	bfcc      	ite	gt
 800d692:	2500      	movgt	r5, #0
 800d694:	2501      	movle	r5, #1
 800d696:	2b03      	cmp	r3, #3
 800d698:	f200 8087 	bhi.w	800d7aa <_dtoa_r+0x30a>
 800d69c:	e8df f003 	tbb	[pc, r3]
 800d6a0:	59383a2d 	.word	0x59383a2d
 800d6a4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d6a8:	441d      	add	r5, r3
 800d6aa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d6ae:	2b20      	cmp	r3, #32
 800d6b0:	bfc1      	itttt	gt
 800d6b2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d6b6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d6ba:	fa0b f303 	lslgt.w	r3, fp, r3
 800d6be:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d6c2:	bfda      	itte	le
 800d6c4:	f1c3 0320 	rsble	r3, r3, #32
 800d6c8:	fa06 f003 	lslle.w	r0, r6, r3
 800d6cc:	4318      	orrgt	r0, r3
 800d6ce:	f7f2 ff19 	bl	8000504 <__aeabi_ui2d>
 800d6d2:	2301      	movs	r3, #1
 800d6d4:	4606      	mov	r6, r0
 800d6d6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d6da:	3d01      	subs	r5, #1
 800d6dc:	930e      	str	r3, [sp, #56]	; 0x38
 800d6de:	e76a      	b.n	800d5b6 <_dtoa_r+0x116>
 800d6e0:	2301      	movs	r3, #1
 800d6e2:	e7b2      	b.n	800d64a <_dtoa_r+0x1aa>
 800d6e4:	900b      	str	r0, [sp, #44]	; 0x2c
 800d6e6:	e7b1      	b.n	800d64c <_dtoa_r+0x1ac>
 800d6e8:	9b04      	ldr	r3, [sp, #16]
 800d6ea:	9a00      	ldr	r2, [sp, #0]
 800d6ec:	1a9b      	subs	r3, r3, r2
 800d6ee:	9304      	str	r3, [sp, #16]
 800d6f0:	4253      	negs	r3, r2
 800d6f2:	9307      	str	r3, [sp, #28]
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	930a      	str	r3, [sp, #40]	; 0x28
 800d6f8:	e7bf      	b.n	800d67a <_dtoa_r+0x1da>
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	9308      	str	r3, [sp, #32]
 800d6fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d700:	2b00      	cmp	r3, #0
 800d702:	dc55      	bgt.n	800d7b0 <_dtoa_r+0x310>
 800d704:	2301      	movs	r3, #1
 800d706:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d70a:	461a      	mov	r2, r3
 800d70c:	9209      	str	r2, [sp, #36]	; 0x24
 800d70e:	e00c      	b.n	800d72a <_dtoa_r+0x28a>
 800d710:	2301      	movs	r3, #1
 800d712:	e7f3      	b.n	800d6fc <_dtoa_r+0x25c>
 800d714:	2300      	movs	r3, #0
 800d716:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d718:	9308      	str	r3, [sp, #32]
 800d71a:	9b00      	ldr	r3, [sp, #0]
 800d71c:	4413      	add	r3, r2
 800d71e:	9302      	str	r3, [sp, #8]
 800d720:	3301      	adds	r3, #1
 800d722:	2b01      	cmp	r3, #1
 800d724:	9303      	str	r3, [sp, #12]
 800d726:	bfb8      	it	lt
 800d728:	2301      	movlt	r3, #1
 800d72a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d72c:	2200      	movs	r2, #0
 800d72e:	6042      	str	r2, [r0, #4]
 800d730:	2204      	movs	r2, #4
 800d732:	f102 0614 	add.w	r6, r2, #20
 800d736:	429e      	cmp	r6, r3
 800d738:	6841      	ldr	r1, [r0, #4]
 800d73a:	d93d      	bls.n	800d7b8 <_dtoa_r+0x318>
 800d73c:	4620      	mov	r0, r4
 800d73e:	f000 fcb7 	bl	800e0b0 <_Balloc>
 800d742:	9001      	str	r0, [sp, #4]
 800d744:	2800      	cmp	r0, #0
 800d746:	d13b      	bne.n	800d7c0 <_dtoa_r+0x320>
 800d748:	4b11      	ldr	r3, [pc, #68]	; (800d790 <_dtoa_r+0x2f0>)
 800d74a:	4602      	mov	r2, r0
 800d74c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d750:	e6c0      	b.n	800d4d4 <_dtoa_r+0x34>
 800d752:	2301      	movs	r3, #1
 800d754:	e7df      	b.n	800d716 <_dtoa_r+0x276>
 800d756:	bf00      	nop
 800d758:	636f4361 	.word	0x636f4361
 800d75c:	3fd287a7 	.word	0x3fd287a7
 800d760:	8b60c8b3 	.word	0x8b60c8b3
 800d764:	3fc68a28 	.word	0x3fc68a28
 800d768:	509f79fb 	.word	0x509f79fb
 800d76c:	3fd34413 	.word	0x3fd34413
 800d770:	08010fa1 	.word	0x08010fa1
 800d774:	08010fb8 	.word	0x08010fb8
 800d778:	7ff00000 	.word	0x7ff00000
 800d77c:	08010f9d 	.word	0x08010f9d
 800d780:	08010f94 	.word	0x08010f94
 800d784:	08010f71 	.word	0x08010f71
 800d788:	3ff80000 	.word	0x3ff80000
 800d78c:	080110a8 	.word	0x080110a8
 800d790:	08011013 	.word	0x08011013
 800d794:	2501      	movs	r5, #1
 800d796:	2300      	movs	r3, #0
 800d798:	9306      	str	r3, [sp, #24]
 800d79a:	9508      	str	r5, [sp, #32]
 800d79c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d7a0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	2312      	movs	r3, #18
 800d7a8:	e7b0      	b.n	800d70c <_dtoa_r+0x26c>
 800d7aa:	2301      	movs	r3, #1
 800d7ac:	9308      	str	r3, [sp, #32]
 800d7ae:	e7f5      	b.n	800d79c <_dtoa_r+0x2fc>
 800d7b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7b2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d7b6:	e7b8      	b.n	800d72a <_dtoa_r+0x28a>
 800d7b8:	3101      	adds	r1, #1
 800d7ba:	6041      	str	r1, [r0, #4]
 800d7bc:	0052      	lsls	r2, r2, #1
 800d7be:	e7b8      	b.n	800d732 <_dtoa_r+0x292>
 800d7c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d7c2:	9a01      	ldr	r2, [sp, #4]
 800d7c4:	601a      	str	r2, [r3, #0]
 800d7c6:	9b03      	ldr	r3, [sp, #12]
 800d7c8:	2b0e      	cmp	r3, #14
 800d7ca:	f200 809d 	bhi.w	800d908 <_dtoa_r+0x468>
 800d7ce:	2d00      	cmp	r5, #0
 800d7d0:	f000 809a 	beq.w	800d908 <_dtoa_r+0x468>
 800d7d4:	9b00      	ldr	r3, [sp, #0]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	dd32      	ble.n	800d840 <_dtoa_r+0x3a0>
 800d7da:	4ab7      	ldr	r2, [pc, #732]	; (800dab8 <_dtoa_r+0x618>)
 800d7dc:	f003 030f 	and.w	r3, r3, #15
 800d7e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d7e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d7e8:	9b00      	ldr	r3, [sp, #0]
 800d7ea:	05d8      	lsls	r0, r3, #23
 800d7ec:	ea4f 1723 	mov.w	r7, r3, asr #4
 800d7f0:	d516      	bpl.n	800d820 <_dtoa_r+0x380>
 800d7f2:	4bb2      	ldr	r3, [pc, #712]	; (800dabc <_dtoa_r+0x61c>)
 800d7f4:	ec51 0b19 	vmov	r0, r1, d9
 800d7f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d7fc:	f7f3 f826 	bl	800084c <__aeabi_ddiv>
 800d800:	f007 070f 	and.w	r7, r7, #15
 800d804:	4682      	mov	sl, r0
 800d806:	468b      	mov	fp, r1
 800d808:	2503      	movs	r5, #3
 800d80a:	4eac      	ldr	r6, [pc, #688]	; (800dabc <_dtoa_r+0x61c>)
 800d80c:	b957      	cbnz	r7, 800d824 <_dtoa_r+0x384>
 800d80e:	4642      	mov	r2, r8
 800d810:	464b      	mov	r3, r9
 800d812:	4650      	mov	r0, sl
 800d814:	4659      	mov	r1, fp
 800d816:	f7f3 f819 	bl	800084c <__aeabi_ddiv>
 800d81a:	4682      	mov	sl, r0
 800d81c:	468b      	mov	fp, r1
 800d81e:	e028      	b.n	800d872 <_dtoa_r+0x3d2>
 800d820:	2502      	movs	r5, #2
 800d822:	e7f2      	b.n	800d80a <_dtoa_r+0x36a>
 800d824:	07f9      	lsls	r1, r7, #31
 800d826:	d508      	bpl.n	800d83a <_dtoa_r+0x39a>
 800d828:	4640      	mov	r0, r8
 800d82a:	4649      	mov	r1, r9
 800d82c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d830:	f7f2 fee2 	bl	80005f8 <__aeabi_dmul>
 800d834:	3501      	adds	r5, #1
 800d836:	4680      	mov	r8, r0
 800d838:	4689      	mov	r9, r1
 800d83a:	107f      	asrs	r7, r7, #1
 800d83c:	3608      	adds	r6, #8
 800d83e:	e7e5      	b.n	800d80c <_dtoa_r+0x36c>
 800d840:	f000 809b 	beq.w	800d97a <_dtoa_r+0x4da>
 800d844:	9b00      	ldr	r3, [sp, #0]
 800d846:	4f9d      	ldr	r7, [pc, #628]	; (800dabc <_dtoa_r+0x61c>)
 800d848:	425e      	negs	r6, r3
 800d84a:	4b9b      	ldr	r3, [pc, #620]	; (800dab8 <_dtoa_r+0x618>)
 800d84c:	f006 020f 	and.w	r2, r6, #15
 800d850:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d858:	ec51 0b19 	vmov	r0, r1, d9
 800d85c:	f7f2 fecc 	bl	80005f8 <__aeabi_dmul>
 800d860:	1136      	asrs	r6, r6, #4
 800d862:	4682      	mov	sl, r0
 800d864:	468b      	mov	fp, r1
 800d866:	2300      	movs	r3, #0
 800d868:	2502      	movs	r5, #2
 800d86a:	2e00      	cmp	r6, #0
 800d86c:	d17a      	bne.n	800d964 <_dtoa_r+0x4c4>
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d1d3      	bne.n	800d81a <_dtoa_r+0x37a>
 800d872:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d874:	2b00      	cmp	r3, #0
 800d876:	f000 8082 	beq.w	800d97e <_dtoa_r+0x4de>
 800d87a:	4b91      	ldr	r3, [pc, #580]	; (800dac0 <_dtoa_r+0x620>)
 800d87c:	2200      	movs	r2, #0
 800d87e:	4650      	mov	r0, sl
 800d880:	4659      	mov	r1, fp
 800d882:	f7f3 f92b 	bl	8000adc <__aeabi_dcmplt>
 800d886:	2800      	cmp	r0, #0
 800d888:	d079      	beq.n	800d97e <_dtoa_r+0x4de>
 800d88a:	9b03      	ldr	r3, [sp, #12]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d076      	beq.n	800d97e <_dtoa_r+0x4de>
 800d890:	9b02      	ldr	r3, [sp, #8]
 800d892:	2b00      	cmp	r3, #0
 800d894:	dd36      	ble.n	800d904 <_dtoa_r+0x464>
 800d896:	9b00      	ldr	r3, [sp, #0]
 800d898:	4650      	mov	r0, sl
 800d89a:	4659      	mov	r1, fp
 800d89c:	1e5f      	subs	r7, r3, #1
 800d89e:	2200      	movs	r2, #0
 800d8a0:	4b88      	ldr	r3, [pc, #544]	; (800dac4 <_dtoa_r+0x624>)
 800d8a2:	f7f2 fea9 	bl	80005f8 <__aeabi_dmul>
 800d8a6:	9e02      	ldr	r6, [sp, #8]
 800d8a8:	4682      	mov	sl, r0
 800d8aa:	468b      	mov	fp, r1
 800d8ac:	3501      	adds	r5, #1
 800d8ae:	4628      	mov	r0, r5
 800d8b0:	f7f2 fe38 	bl	8000524 <__aeabi_i2d>
 800d8b4:	4652      	mov	r2, sl
 800d8b6:	465b      	mov	r3, fp
 800d8b8:	f7f2 fe9e 	bl	80005f8 <__aeabi_dmul>
 800d8bc:	4b82      	ldr	r3, [pc, #520]	; (800dac8 <_dtoa_r+0x628>)
 800d8be:	2200      	movs	r2, #0
 800d8c0:	f7f2 fce4 	bl	800028c <__adddf3>
 800d8c4:	46d0      	mov	r8, sl
 800d8c6:	46d9      	mov	r9, fp
 800d8c8:	4682      	mov	sl, r0
 800d8ca:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800d8ce:	2e00      	cmp	r6, #0
 800d8d0:	d158      	bne.n	800d984 <_dtoa_r+0x4e4>
 800d8d2:	4b7e      	ldr	r3, [pc, #504]	; (800dacc <_dtoa_r+0x62c>)
 800d8d4:	2200      	movs	r2, #0
 800d8d6:	4640      	mov	r0, r8
 800d8d8:	4649      	mov	r1, r9
 800d8da:	f7f2 fcd5 	bl	8000288 <__aeabi_dsub>
 800d8de:	4652      	mov	r2, sl
 800d8e0:	465b      	mov	r3, fp
 800d8e2:	4680      	mov	r8, r0
 800d8e4:	4689      	mov	r9, r1
 800d8e6:	f7f3 f917 	bl	8000b18 <__aeabi_dcmpgt>
 800d8ea:	2800      	cmp	r0, #0
 800d8ec:	f040 8295 	bne.w	800de1a <_dtoa_r+0x97a>
 800d8f0:	4652      	mov	r2, sl
 800d8f2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d8f6:	4640      	mov	r0, r8
 800d8f8:	4649      	mov	r1, r9
 800d8fa:	f7f3 f8ef 	bl	8000adc <__aeabi_dcmplt>
 800d8fe:	2800      	cmp	r0, #0
 800d900:	f040 8289 	bne.w	800de16 <_dtoa_r+0x976>
 800d904:	ec5b ab19 	vmov	sl, fp, d9
 800d908:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	f2c0 8148 	blt.w	800dba0 <_dtoa_r+0x700>
 800d910:	9a00      	ldr	r2, [sp, #0]
 800d912:	2a0e      	cmp	r2, #14
 800d914:	f300 8144 	bgt.w	800dba0 <_dtoa_r+0x700>
 800d918:	4b67      	ldr	r3, [pc, #412]	; (800dab8 <_dtoa_r+0x618>)
 800d91a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d91e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d922:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d924:	2b00      	cmp	r3, #0
 800d926:	f280 80d5 	bge.w	800dad4 <_dtoa_r+0x634>
 800d92a:	9b03      	ldr	r3, [sp, #12]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	f300 80d1 	bgt.w	800dad4 <_dtoa_r+0x634>
 800d932:	f040 826f 	bne.w	800de14 <_dtoa_r+0x974>
 800d936:	4b65      	ldr	r3, [pc, #404]	; (800dacc <_dtoa_r+0x62c>)
 800d938:	2200      	movs	r2, #0
 800d93a:	4640      	mov	r0, r8
 800d93c:	4649      	mov	r1, r9
 800d93e:	f7f2 fe5b 	bl	80005f8 <__aeabi_dmul>
 800d942:	4652      	mov	r2, sl
 800d944:	465b      	mov	r3, fp
 800d946:	f7f3 f8dd 	bl	8000b04 <__aeabi_dcmpge>
 800d94a:	9e03      	ldr	r6, [sp, #12]
 800d94c:	4637      	mov	r7, r6
 800d94e:	2800      	cmp	r0, #0
 800d950:	f040 8245 	bne.w	800ddde <_dtoa_r+0x93e>
 800d954:	9d01      	ldr	r5, [sp, #4]
 800d956:	2331      	movs	r3, #49	; 0x31
 800d958:	f805 3b01 	strb.w	r3, [r5], #1
 800d95c:	9b00      	ldr	r3, [sp, #0]
 800d95e:	3301      	adds	r3, #1
 800d960:	9300      	str	r3, [sp, #0]
 800d962:	e240      	b.n	800dde6 <_dtoa_r+0x946>
 800d964:	07f2      	lsls	r2, r6, #31
 800d966:	d505      	bpl.n	800d974 <_dtoa_r+0x4d4>
 800d968:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d96c:	f7f2 fe44 	bl	80005f8 <__aeabi_dmul>
 800d970:	3501      	adds	r5, #1
 800d972:	2301      	movs	r3, #1
 800d974:	1076      	asrs	r6, r6, #1
 800d976:	3708      	adds	r7, #8
 800d978:	e777      	b.n	800d86a <_dtoa_r+0x3ca>
 800d97a:	2502      	movs	r5, #2
 800d97c:	e779      	b.n	800d872 <_dtoa_r+0x3d2>
 800d97e:	9f00      	ldr	r7, [sp, #0]
 800d980:	9e03      	ldr	r6, [sp, #12]
 800d982:	e794      	b.n	800d8ae <_dtoa_r+0x40e>
 800d984:	9901      	ldr	r1, [sp, #4]
 800d986:	4b4c      	ldr	r3, [pc, #304]	; (800dab8 <_dtoa_r+0x618>)
 800d988:	4431      	add	r1, r6
 800d98a:	910d      	str	r1, [sp, #52]	; 0x34
 800d98c:	9908      	ldr	r1, [sp, #32]
 800d98e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d992:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d996:	2900      	cmp	r1, #0
 800d998:	d043      	beq.n	800da22 <_dtoa_r+0x582>
 800d99a:	494d      	ldr	r1, [pc, #308]	; (800dad0 <_dtoa_r+0x630>)
 800d99c:	2000      	movs	r0, #0
 800d99e:	f7f2 ff55 	bl	800084c <__aeabi_ddiv>
 800d9a2:	4652      	mov	r2, sl
 800d9a4:	465b      	mov	r3, fp
 800d9a6:	f7f2 fc6f 	bl	8000288 <__aeabi_dsub>
 800d9aa:	9d01      	ldr	r5, [sp, #4]
 800d9ac:	4682      	mov	sl, r0
 800d9ae:	468b      	mov	fp, r1
 800d9b0:	4649      	mov	r1, r9
 800d9b2:	4640      	mov	r0, r8
 800d9b4:	f7f3 f8d0 	bl	8000b58 <__aeabi_d2iz>
 800d9b8:	4606      	mov	r6, r0
 800d9ba:	f7f2 fdb3 	bl	8000524 <__aeabi_i2d>
 800d9be:	4602      	mov	r2, r0
 800d9c0:	460b      	mov	r3, r1
 800d9c2:	4640      	mov	r0, r8
 800d9c4:	4649      	mov	r1, r9
 800d9c6:	f7f2 fc5f 	bl	8000288 <__aeabi_dsub>
 800d9ca:	3630      	adds	r6, #48	; 0x30
 800d9cc:	f805 6b01 	strb.w	r6, [r5], #1
 800d9d0:	4652      	mov	r2, sl
 800d9d2:	465b      	mov	r3, fp
 800d9d4:	4680      	mov	r8, r0
 800d9d6:	4689      	mov	r9, r1
 800d9d8:	f7f3 f880 	bl	8000adc <__aeabi_dcmplt>
 800d9dc:	2800      	cmp	r0, #0
 800d9de:	d163      	bne.n	800daa8 <_dtoa_r+0x608>
 800d9e0:	4642      	mov	r2, r8
 800d9e2:	464b      	mov	r3, r9
 800d9e4:	4936      	ldr	r1, [pc, #216]	; (800dac0 <_dtoa_r+0x620>)
 800d9e6:	2000      	movs	r0, #0
 800d9e8:	f7f2 fc4e 	bl	8000288 <__aeabi_dsub>
 800d9ec:	4652      	mov	r2, sl
 800d9ee:	465b      	mov	r3, fp
 800d9f0:	f7f3 f874 	bl	8000adc <__aeabi_dcmplt>
 800d9f4:	2800      	cmp	r0, #0
 800d9f6:	f040 80b5 	bne.w	800db64 <_dtoa_r+0x6c4>
 800d9fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d9fc:	429d      	cmp	r5, r3
 800d9fe:	d081      	beq.n	800d904 <_dtoa_r+0x464>
 800da00:	4b30      	ldr	r3, [pc, #192]	; (800dac4 <_dtoa_r+0x624>)
 800da02:	2200      	movs	r2, #0
 800da04:	4650      	mov	r0, sl
 800da06:	4659      	mov	r1, fp
 800da08:	f7f2 fdf6 	bl	80005f8 <__aeabi_dmul>
 800da0c:	4b2d      	ldr	r3, [pc, #180]	; (800dac4 <_dtoa_r+0x624>)
 800da0e:	4682      	mov	sl, r0
 800da10:	468b      	mov	fp, r1
 800da12:	4640      	mov	r0, r8
 800da14:	4649      	mov	r1, r9
 800da16:	2200      	movs	r2, #0
 800da18:	f7f2 fdee 	bl	80005f8 <__aeabi_dmul>
 800da1c:	4680      	mov	r8, r0
 800da1e:	4689      	mov	r9, r1
 800da20:	e7c6      	b.n	800d9b0 <_dtoa_r+0x510>
 800da22:	4650      	mov	r0, sl
 800da24:	4659      	mov	r1, fp
 800da26:	f7f2 fde7 	bl	80005f8 <__aeabi_dmul>
 800da2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800da2c:	9d01      	ldr	r5, [sp, #4]
 800da2e:	930f      	str	r3, [sp, #60]	; 0x3c
 800da30:	4682      	mov	sl, r0
 800da32:	468b      	mov	fp, r1
 800da34:	4649      	mov	r1, r9
 800da36:	4640      	mov	r0, r8
 800da38:	f7f3 f88e 	bl	8000b58 <__aeabi_d2iz>
 800da3c:	4606      	mov	r6, r0
 800da3e:	f7f2 fd71 	bl	8000524 <__aeabi_i2d>
 800da42:	3630      	adds	r6, #48	; 0x30
 800da44:	4602      	mov	r2, r0
 800da46:	460b      	mov	r3, r1
 800da48:	4640      	mov	r0, r8
 800da4a:	4649      	mov	r1, r9
 800da4c:	f7f2 fc1c 	bl	8000288 <__aeabi_dsub>
 800da50:	f805 6b01 	strb.w	r6, [r5], #1
 800da54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800da56:	429d      	cmp	r5, r3
 800da58:	4680      	mov	r8, r0
 800da5a:	4689      	mov	r9, r1
 800da5c:	f04f 0200 	mov.w	r2, #0
 800da60:	d124      	bne.n	800daac <_dtoa_r+0x60c>
 800da62:	4b1b      	ldr	r3, [pc, #108]	; (800dad0 <_dtoa_r+0x630>)
 800da64:	4650      	mov	r0, sl
 800da66:	4659      	mov	r1, fp
 800da68:	f7f2 fc10 	bl	800028c <__adddf3>
 800da6c:	4602      	mov	r2, r0
 800da6e:	460b      	mov	r3, r1
 800da70:	4640      	mov	r0, r8
 800da72:	4649      	mov	r1, r9
 800da74:	f7f3 f850 	bl	8000b18 <__aeabi_dcmpgt>
 800da78:	2800      	cmp	r0, #0
 800da7a:	d173      	bne.n	800db64 <_dtoa_r+0x6c4>
 800da7c:	4652      	mov	r2, sl
 800da7e:	465b      	mov	r3, fp
 800da80:	4913      	ldr	r1, [pc, #76]	; (800dad0 <_dtoa_r+0x630>)
 800da82:	2000      	movs	r0, #0
 800da84:	f7f2 fc00 	bl	8000288 <__aeabi_dsub>
 800da88:	4602      	mov	r2, r0
 800da8a:	460b      	mov	r3, r1
 800da8c:	4640      	mov	r0, r8
 800da8e:	4649      	mov	r1, r9
 800da90:	f7f3 f824 	bl	8000adc <__aeabi_dcmplt>
 800da94:	2800      	cmp	r0, #0
 800da96:	f43f af35 	beq.w	800d904 <_dtoa_r+0x464>
 800da9a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800da9c:	1e6b      	subs	r3, r5, #1
 800da9e:	930f      	str	r3, [sp, #60]	; 0x3c
 800daa0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800daa4:	2b30      	cmp	r3, #48	; 0x30
 800daa6:	d0f8      	beq.n	800da9a <_dtoa_r+0x5fa>
 800daa8:	9700      	str	r7, [sp, #0]
 800daaa:	e049      	b.n	800db40 <_dtoa_r+0x6a0>
 800daac:	4b05      	ldr	r3, [pc, #20]	; (800dac4 <_dtoa_r+0x624>)
 800daae:	f7f2 fda3 	bl	80005f8 <__aeabi_dmul>
 800dab2:	4680      	mov	r8, r0
 800dab4:	4689      	mov	r9, r1
 800dab6:	e7bd      	b.n	800da34 <_dtoa_r+0x594>
 800dab8:	080110a8 	.word	0x080110a8
 800dabc:	08011080 	.word	0x08011080
 800dac0:	3ff00000 	.word	0x3ff00000
 800dac4:	40240000 	.word	0x40240000
 800dac8:	401c0000 	.word	0x401c0000
 800dacc:	40140000 	.word	0x40140000
 800dad0:	3fe00000 	.word	0x3fe00000
 800dad4:	9d01      	ldr	r5, [sp, #4]
 800dad6:	4656      	mov	r6, sl
 800dad8:	465f      	mov	r7, fp
 800dada:	4642      	mov	r2, r8
 800dadc:	464b      	mov	r3, r9
 800dade:	4630      	mov	r0, r6
 800dae0:	4639      	mov	r1, r7
 800dae2:	f7f2 feb3 	bl	800084c <__aeabi_ddiv>
 800dae6:	f7f3 f837 	bl	8000b58 <__aeabi_d2iz>
 800daea:	4682      	mov	sl, r0
 800daec:	f7f2 fd1a 	bl	8000524 <__aeabi_i2d>
 800daf0:	4642      	mov	r2, r8
 800daf2:	464b      	mov	r3, r9
 800daf4:	f7f2 fd80 	bl	80005f8 <__aeabi_dmul>
 800daf8:	4602      	mov	r2, r0
 800dafa:	460b      	mov	r3, r1
 800dafc:	4630      	mov	r0, r6
 800dafe:	4639      	mov	r1, r7
 800db00:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800db04:	f7f2 fbc0 	bl	8000288 <__aeabi_dsub>
 800db08:	f805 6b01 	strb.w	r6, [r5], #1
 800db0c:	9e01      	ldr	r6, [sp, #4]
 800db0e:	9f03      	ldr	r7, [sp, #12]
 800db10:	1bae      	subs	r6, r5, r6
 800db12:	42b7      	cmp	r7, r6
 800db14:	4602      	mov	r2, r0
 800db16:	460b      	mov	r3, r1
 800db18:	d135      	bne.n	800db86 <_dtoa_r+0x6e6>
 800db1a:	f7f2 fbb7 	bl	800028c <__adddf3>
 800db1e:	4642      	mov	r2, r8
 800db20:	464b      	mov	r3, r9
 800db22:	4606      	mov	r6, r0
 800db24:	460f      	mov	r7, r1
 800db26:	f7f2 fff7 	bl	8000b18 <__aeabi_dcmpgt>
 800db2a:	b9d0      	cbnz	r0, 800db62 <_dtoa_r+0x6c2>
 800db2c:	4642      	mov	r2, r8
 800db2e:	464b      	mov	r3, r9
 800db30:	4630      	mov	r0, r6
 800db32:	4639      	mov	r1, r7
 800db34:	f7f2 ffc8 	bl	8000ac8 <__aeabi_dcmpeq>
 800db38:	b110      	cbz	r0, 800db40 <_dtoa_r+0x6a0>
 800db3a:	f01a 0f01 	tst.w	sl, #1
 800db3e:	d110      	bne.n	800db62 <_dtoa_r+0x6c2>
 800db40:	4620      	mov	r0, r4
 800db42:	ee18 1a10 	vmov	r1, s16
 800db46:	f000 faf3 	bl	800e130 <_Bfree>
 800db4a:	2300      	movs	r3, #0
 800db4c:	9800      	ldr	r0, [sp, #0]
 800db4e:	702b      	strb	r3, [r5, #0]
 800db50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800db52:	3001      	adds	r0, #1
 800db54:	6018      	str	r0, [r3, #0]
 800db56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800db58:	2b00      	cmp	r3, #0
 800db5a:	f43f acf1 	beq.w	800d540 <_dtoa_r+0xa0>
 800db5e:	601d      	str	r5, [r3, #0]
 800db60:	e4ee      	b.n	800d540 <_dtoa_r+0xa0>
 800db62:	9f00      	ldr	r7, [sp, #0]
 800db64:	462b      	mov	r3, r5
 800db66:	461d      	mov	r5, r3
 800db68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800db6c:	2a39      	cmp	r2, #57	; 0x39
 800db6e:	d106      	bne.n	800db7e <_dtoa_r+0x6de>
 800db70:	9a01      	ldr	r2, [sp, #4]
 800db72:	429a      	cmp	r2, r3
 800db74:	d1f7      	bne.n	800db66 <_dtoa_r+0x6c6>
 800db76:	9901      	ldr	r1, [sp, #4]
 800db78:	2230      	movs	r2, #48	; 0x30
 800db7a:	3701      	adds	r7, #1
 800db7c:	700a      	strb	r2, [r1, #0]
 800db7e:	781a      	ldrb	r2, [r3, #0]
 800db80:	3201      	adds	r2, #1
 800db82:	701a      	strb	r2, [r3, #0]
 800db84:	e790      	b.n	800daa8 <_dtoa_r+0x608>
 800db86:	4ba6      	ldr	r3, [pc, #664]	; (800de20 <_dtoa_r+0x980>)
 800db88:	2200      	movs	r2, #0
 800db8a:	f7f2 fd35 	bl	80005f8 <__aeabi_dmul>
 800db8e:	2200      	movs	r2, #0
 800db90:	2300      	movs	r3, #0
 800db92:	4606      	mov	r6, r0
 800db94:	460f      	mov	r7, r1
 800db96:	f7f2 ff97 	bl	8000ac8 <__aeabi_dcmpeq>
 800db9a:	2800      	cmp	r0, #0
 800db9c:	d09d      	beq.n	800dada <_dtoa_r+0x63a>
 800db9e:	e7cf      	b.n	800db40 <_dtoa_r+0x6a0>
 800dba0:	9a08      	ldr	r2, [sp, #32]
 800dba2:	2a00      	cmp	r2, #0
 800dba4:	f000 80d7 	beq.w	800dd56 <_dtoa_r+0x8b6>
 800dba8:	9a06      	ldr	r2, [sp, #24]
 800dbaa:	2a01      	cmp	r2, #1
 800dbac:	f300 80ba 	bgt.w	800dd24 <_dtoa_r+0x884>
 800dbb0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dbb2:	2a00      	cmp	r2, #0
 800dbb4:	f000 80b2 	beq.w	800dd1c <_dtoa_r+0x87c>
 800dbb8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800dbbc:	9e07      	ldr	r6, [sp, #28]
 800dbbe:	9d04      	ldr	r5, [sp, #16]
 800dbc0:	9a04      	ldr	r2, [sp, #16]
 800dbc2:	441a      	add	r2, r3
 800dbc4:	9204      	str	r2, [sp, #16]
 800dbc6:	9a05      	ldr	r2, [sp, #20]
 800dbc8:	2101      	movs	r1, #1
 800dbca:	441a      	add	r2, r3
 800dbcc:	4620      	mov	r0, r4
 800dbce:	9205      	str	r2, [sp, #20]
 800dbd0:	f000 fb66 	bl	800e2a0 <__i2b>
 800dbd4:	4607      	mov	r7, r0
 800dbd6:	2d00      	cmp	r5, #0
 800dbd8:	dd0c      	ble.n	800dbf4 <_dtoa_r+0x754>
 800dbda:	9b05      	ldr	r3, [sp, #20]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	dd09      	ble.n	800dbf4 <_dtoa_r+0x754>
 800dbe0:	42ab      	cmp	r3, r5
 800dbe2:	9a04      	ldr	r2, [sp, #16]
 800dbe4:	bfa8      	it	ge
 800dbe6:	462b      	movge	r3, r5
 800dbe8:	1ad2      	subs	r2, r2, r3
 800dbea:	9204      	str	r2, [sp, #16]
 800dbec:	9a05      	ldr	r2, [sp, #20]
 800dbee:	1aed      	subs	r5, r5, r3
 800dbf0:	1ad3      	subs	r3, r2, r3
 800dbf2:	9305      	str	r3, [sp, #20]
 800dbf4:	9b07      	ldr	r3, [sp, #28]
 800dbf6:	b31b      	cbz	r3, 800dc40 <_dtoa_r+0x7a0>
 800dbf8:	9b08      	ldr	r3, [sp, #32]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	f000 80af 	beq.w	800dd5e <_dtoa_r+0x8be>
 800dc00:	2e00      	cmp	r6, #0
 800dc02:	dd13      	ble.n	800dc2c <_dtoa_r+0x78c>
 800dc04:	4639      	mov	r1, r7
 800dc06:	4632      	mov	r2, r6
 800dc08:	4620      	mov	r0, r4
 800dc0a:	f000 fc09 	bl	800e420 <__pow5mult>
 800dc0e:	ee18 2a10 	vmov	r2, s16
 800dc12:	4601      	mov	r1, r0
 800dc14:	4607      	mov	r7, r0
 800dc16:	4620      	mov	r0, r4
 800dc18:	f000 fb58 	bl	800e2cc <__multiply>
 800dc1c:	ee18 1a10 	vmov	r1, s16
 800dc20:	4680      	mov	r8, r0
 800dc22:	4620      	mov	r0, r4
 800dc24:	f000 fa84 	bl	800e130 <_Bfree>
 800dc28:	ee08 8a10 	vmov	s16, r8
 800dc2c:	9b07      	ldr	r3, [sp, #28]
 800dc2e:	1b9a      	subs	r2, r3, r6
 800dc30:	d006      	beq.n	800dc40 <_dtoa_r+0x7a0>
 800dc32:	ee18 1a10 	vmov	r1, s16
 800dc36:	4620      	mov	r0, r4
 800dc38:	f000 fbf2 	bl	800e420 <__pow5mult>
 800dc3c:	ee08 0a10 	vmov	s16, r0
 800dc40:	2101      	movs	r1, #1
 800dc42:	4620      	mov	r0, r4
 800dc44:	f000 fb2c 	bl	800e2a0 <__i2b>
 800dc48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	4606      	mov	r6, r0
 800dc4e:	f340 8088 	ble.w	800dd62 <_dtoa_r+0x8c2>
 800dc52:	461a      	mov	r2, r3
 800dc54:	4601      	mov	r1, r0
 800dc56:	4620      	mov	r0, r4
 800dc58:	f000 fbe2 	bl	800e420 <__pow5mult>
 800dc5c:	9b06      	ldr	r3, [sp, #24]
 800dc5e:	2b01      	cmp	r3, #1
 800dc60:	4606      	mov	r6, r0
 800dc62:	f340 8081 	ble.w	800dd68 <_dtoa_r+0x8c8>
 800dc66:	f04f 0800 	mov.w	r8, #0
 800dc6a:	6933      	ldr	r3, [r6, #16]
 800dc6c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800dc70:	6918      	ldr	r0, [r3, #16]
 800dc72:	f000 fac5 	bl	800e200 <__hi0bits>
 800dc76:	f1c0 0020 	rsb	r0, r0, #32
 800dc7a:	9b05      	ldr	r3, [sp, #20]
 800dc7c:	4418      	add	r0, r3
 800dc7e:	f010 001f 	ands.w	r0, r0, #31
 800dc82:	f000 8092 	beq.w	800ddaa <_dtoa_r+0x90a>
 800dc86:	f1c0 0320 	rsb	r3, r0, #32
 800dc8a:	2b04      	cmp	r3, #4
 800dc8c:	f340 808a 	ble.w	800dda4 <_dtoa_r+0x904>
 800dc90:	f1c0 001c 	rsb	r0, r0, #28
 800dc94:	9b04      	ldr	r3, [sp, #16]
 800dc96:	4403      	add	r3, r0
 800dc98:	9304      	str	r3, [sp, #16]
 800dc9a:	9b05      	ldr	r3, [sp, #20]
 800dc9c:	4403      	add	r3, r0
 800dc9e:	4405      	add	r5, r0
 800dca0:	9305      	str	r3, [sp, #20]
 800dca2:	9b04      	ldr	r3, [sp, #16]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	dd07      	ble.n	800dcb8 <_dtoa_r+0x818>
 800dca8:	ee18 1a10 	vmov	r1, s16
 800dcac:	461a      	mov	r2, r3
 800dcae:	4620      	mov	r0, r4
 800dcb0:	f000 fc10 	bl	800e4d4 <__lshift>
 800dcb4:	ee08 0a10 	vmov	s16, r0
 800dcb8:	9b05      	ldr	r3, [sp, #20]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	dd05      	ble.n	800dcca <_dtoa_r+0x82a>
 800dcbe:	4631      	mov	r1, r6
 800dcc0:	461a      	mov	r2, r3
 800dcc2:	4620      	mov	r0, r4
 800dcc4:	f000 fc06 	bl	800e4d4 <__lshift>
 800dcc8:	4606      	mov	r6, r0
 800dcca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d06e      	beq.n	800ddae <_dtoa_r+0x90e>
 800dcd0:	ee18 0a10 	vmov	r0, s16
 800dcd4:	4631      	mov	r1, r6
 800dcd6:	f000 fc6d 	bl	800e5b4 <__mcmp>
 800dcda:	2800      	cmp	r0, #0
 800dcdc:	da67      	bge.n	800ddae <_dtoa_r+0x90e>
 800dcde:	9b00      	ldr	r3, [sp, #0]
 800dce0:	3b01      	subs	r3, #1
 800dce2:	ee18 1a10 	vmov	r1, s16
 800dce6:	9300      	str	r3, [sp, #0]
 800dce8:	220a      	movs	r2, #10
 800dcea:	2300      	movs	r3, #0
 800dcec:	4620      	mov	r0, r4
 800dcee:	f000 fa41 	bl	800e174 <__multadd>
 800dcf2:	9b08      	ldr	r3, [sp, #32]
 800dcf4:	ee08 0a10 	vmov	s16, r0
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	f000 81b1 	beq.w	800e060 <_dtoa_r+0xbc0>
 800dcfe:	2300      	movs	r3, #0
 800dd00:	4639      	mov	r1, r7
 800dd02:	220a      	movs	r2, #10
 800dd04:	4620      	mov	r0, r4
 800dd06:	f000 fa35 	bl	800e174 <__multadd>
 800dd0a:	9b02      	ldr	r3, [sp, #8]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	4607      	mov	r7, r0
 800dd10:	f300 808e 	bgt.w	800de30 <_dtoa_r+0x990>
 800dd14:	9b06      	ldr	r3, [sp, #24]
 800dd16:	2b02      	cmp	r3, #2
 800dd18:	dc51      	bgt.n	800ddbe <_dtoa_r+0x91e>
 800dd1a:	e089      	b.n	800de30 <_dtoa_r+0x990>
 800dd1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dd1e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800dd22:	e74b      	b.n	800dbbc <_dtoa_r+0x71c>
 800dd24:	9b03      	ldr	r3, [sp, #12]
 800dd26:	1e5e      	subs	r6, r3, #1
 800dd28:	9b07      	ldr	r3, [sp, #28]
 800dd2a:	42b3      	cmp	r3, r6
 800dd2c:	bfbf      	itttt	lt
 800dd2e:	9b07      	ldrlt	r3, [sp, #28]
 800dd30:	9607      	strlt	r6, [sp, #28]
 800dd32:	1af2      	sublt	r2, r6, r3
 800dd34:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800dd36:	bfb6      	itet	lt
 800dd38:	189b      	addlt	r3, r3, r2
 800dd3a:	1b9e      	subge	r6, r3, r6
 800dd3c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800dd3e:	9b03      	ldr	r3, [sp, #12]
 800dd40:	bfb8      	it	lt
 800dd42:	2600      	movlt	r6, #0
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	bfb7      	itett	lt
 800dd48:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800dd4c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800dd50:	1a9d      	sublt	r5, r3, r2
 800dd52:	2300      	movlt	r3, #0
 800dd54:	e734      	b.n	800dbc0 <_dtoa_r+0x720>
 800dd56:	9e07      	ldr	r6, [sp, #28]
 800dd58:	9d04      	ldr	r5, [sp, #16]
 800dd5a:	9f08      	ldr	r7, [sp, #32]
 800dd5c:	e73b      	b.n	800dbd6 <_dtoa_r+0x736>
 800dd5e:	9a07      	ldr	r2, [sp, #28]
 800dd60:	e767      	b.n	800dc32 <_dtoa_r+0x792>
 800dd62:	9b06      	ldr	r3, [sp, #24]
 800dd64:	2b01      	cmp	r3, #1
 800dd66:	dc18      	bgt.n	800dd9a <_dtoa_r+0x8fa>
 800dd68:	f1ba 0f00 	cmp.w	sl, #0
 800dd6c:	d115      	bne.n	800dd9a <_dtoa_r+0x8fa>
 800dd6e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dd72:	b993      	cbnz	r3, 800dd9a <_dtoa_r+0x8fa>
 800dd74:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dd78:	0d1b      	lsrs	r3, r3, #20
 800dd7a:	051b      	lsls	r3, r3, #20
 800dd7c:	b183      	cbz	r3, 800dda0 <_dtoa_r+0x900>
 800dd7e:	9b04      	ldr	r3, [sp, #16]
 800dd80:	3301      	adds	r3, #1
 800dd82:	9304      	str	r3, [sp, #16]
 800dd84:	9b05      	ldr	r3, [sp, #20]
 800dd86:	3301      	adds	r3, #1
 800dd88:	9305      	str	r3, [sp, #20]
 800dd8a:	f04f 0801 	mov.w	r8, #1
 800dd8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	f47f af6a 	bne.w	800dc6a <_dtoa_r+0x7ca>
 800dd96:	2001      	movs	r0, #1
 800dd98:	e76f      	b.n	800dc7a <_dtoa_r+0x7da>
 800dd9a:	f04f 0800 	mov.w	r8, #0
 800dd9e:	e7f6      	b.n	800dd8e <_dtoa_r+0x8ee>
 800dda0:	4698      	mov	r8, r3
 800dda2:	e7f4      	b.n	800dd8e <_dtoa_r+0x8ee>
 800dda4:	f43f af7d 	beq.w	800dca2 <_dtoa_r+0x802>
 800dda8:	4618      	mov	r0, r3
 800ddaa:	301c      	adds	r0, #28
 800ddac:	e772      	b.n	800dc94 <_dtoa_r+0x7f4>
 800ddae:	9b03      	ldr	r3, [sp, #12]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	dc37      	bgt.n	800de24 <_dtoa_r+0x984>
 800ddb4:	9b06      	ldr	r3, [sp, #24]
 800ddb6:	2b02      	cmp	r3, #2
 800ddb8:	dd34      	ble.n	800de24 <_dtoa_r+0x984>
 800ddba:	9b03      	ldr	r3, [sp, #12]
 800ddbc:	9302      	str	r3, [sp, #8]
 800ddbe:	9b02      	ldr	r3, [sp, #8]
 800ddc0:	b96b      	cbnz	r3, 800ddde <_dtoa_r+0x93e>
 800ddc2:	4631      	mov	r1, r6
 800ddc4:	2205      	movs	r2, #5
 800ddc6:	4620      	mov	r0, r4
 800ddc8:	f000 f9d4 	bl	800e174 <__multadd>
 800ddcc:	4601      	mov	r1, r0
 800ddce:	4606      	mov	r6, r0
 800ddd0:	ee18 0a10 	vmov	r0, s16
 800ddd4:	f000 fbee 	bl	800e5b4 <__mcmp>
 800ddd8:	2800      	cmp	r0, #0
 800ddda:	f73f adbb 	bgt.w	800d954 <_dtoa_r+0x4b4>
 800ddde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dde0:	9d01      	ldr	r5, [sp, #4]
 800dde2:	43db      	mvns	r3, r3
 800dde4:	9300      	str	r3, [sp, #0]
 800dde6:	f04f 0800 	mov.w	r8, #0
 800ddea:	4631      	mov	r1, r6
 800ddec:	4620      	mov	r0, r4
 800ddee:	f000 f99f 	bl	800e130 <_Bfree>
 800ddf2:	2f00      	cmp	r7, #0
 800ddf4:	f43f aea4 	beq.w	800db40 <_dtoa_r+0x6a0>
 800ddf8:	f1b8 0f00 	cmp.w	r8, #0
 800ddfc:	d005      	beq.n	800de0a <_dtoa_r+0x96a>
 800ddfe:	45b8      	cmp	r8, r7
 800de00:	d003      	beq.n	800de0a <_dtoa_r+0x96a>
 800de02:	4641      	mov	r1, r8
 800de04:	4620      	mov	r0, r4
 800de06:	f000 f993 	bl	800e130 <_Bfree>
 800de0a:	4639      	mov	r1, r7
 800de0c:	4620      	mov	r0, r4
 800de0e:	f000 f98f 	bl	800e130 <_Bfree>
 800de12:	e695      	b.n	800db40 <_dtoa_r+0x6a0>
 800de14:	2600      	movs	r6, #0
 800de16:	4637      	mov	r7, r6
 800de18:	e7e1      	b.n	800ddde <_dtoa_r+0x93e>
 800de1a:	9700      	str	r7, [sp, #0]
 800de1c:	4637      	mov	r7, r6
 800de1e:	e599      	b.n	800d954 <_dtoa_r+0x4b4>
 800de20:	40240000 	.word	0x40240000
 800de24:	9b08      	ldr	r3, [sp, #32]
 800de26:	2b00      	cmp	r3, #0
 800de28:	f000 80ca 	beq.w	800dfc0 <_dtoa_r+0xb20>
 800de2c:	9b03      	ldr	r3, [sp, #12]
 800de2e:	9302      	str	r3, [sp, #8]
 800de30:	2d00      	cmp	r5, #0
 800de32:	dd05      	ble.n	800de40 <_dtoa_r+0x9a0>
 800de34:	4639      	mov	r1, r7
 800de36:	462a      	mov	r2, r5
 800de38:	4620      	mov	r0, r4
 800de3a:	f000 fb4b 	bl	800e4d4 <__lshift>
 800de3e:	4607      	mov	r7, r0
 800de40:	f1b8 0f00 	cmp.w	r8, #0
 800de44:	d05b      	beq.n	800defe <_dtoa_r+0xa5e>
 800de46:	6879      	ldr	r1, [r7, #4]
 800de48:	4620      	mov	r0, r4
 800de4a:	f000 f931 	bl	800e0b0 <_Balloc>
 800de4e:	4605      	mov	r5, r0
 800de50:	b928      	cbnz	r0, 800de5e <_dtoa_r+0x9be>
 800de52:	4b87      	ldr	r3, [pc, #540]	; (800e070 <_dtoa_r+0xbd0>)
 800de54:	4602      	mov	r2, r0
 800de56:	f240 21ea 	movw	r1, #746	; 0x2ea
 800de5a:	f7ff bb3b 	b.w	800d4d4 <_dtoa_r+0x34>
 800de5e:	693a      	ldr	r2, [r7, #16]
 800de60:	3202      	adds	r2, #2
 800de62:	0092      	lsls	r2, r2, #2
 800de64:	f107 010c 	add.w	r1, r7, #12
 800de68:	300c      	adds	r0, #12
 800de6a:	f000 f913 	bl	800e094 <memcpy>
 800de6e:	2201      	movs	r2, #1
 800de70:	4629      	mov	r1, r5
 800de72:	4620      	mov	r0, r4
 800de74:	f000 fb2e 	bl	800e4d4 <__lshift>
 800de78:	9b01      	ldr	r3, [sp, #4]
 800de7a:	f103 0901 	add.w	r9, r3, #1
 800de7e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800de82:	4413      	add	r3, r2
 800de84:	9305      	str	r3, [sp, #20]
 800de86:	f00a 0301 	and.w	r3, sl, #1
 800de8a:	46b8      	mov	r8, r7
 800de8c:	9304      	str	r3, [sp, #16]
 800de8e:	4607      	mov	r7, r0
 800de90:	4631      	mov	r1, r6
 800de92:	ee18 0a10 	vmov	r0, s16
 800de96:	f7ff fa77 	bl	800d388 <quorem>
 800de9a:	4641      	mov	r1, r8
 800de9c:	9002      	str	r0, [sp, #8]
 800de9e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800dea2:	ee18 0a10 	vmov	r0, s16
 800dea6:	f000 fb85 	bl	800e5b4 <__mcmp>
 800deaa:	463a      	mov	r2, r7
 800deac:	9003      	str	r0, [sp, #12]
 800deae:	4631      	mov	r1, r6
 800deb0:	4620      	mov	r0, r4
 800deb2:	f000 fb9b 	bl	800e5ec <__mdiff>
 800deb6:	68c2      	ldr	r2, [r0, #12]
 800deb8:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800debc:	4605      	mov	r5, r0
 800debe:	bb02      	cbnz	r2, 800df02 <_dtoa_r+0xa62>
 800dec0:	4601      	mov	r1, r0
 800dec2:	ee18 0a10 	vmov	r0, s16
 800dec6:	f000 fb75 	bl	800e5b4 <__mcmp>
 800deca:	4602      	mov	r2, r0
 800decc:	4629      	mov	r1, r5
 800dece:	4620      	mov	r0, r4
 800ded0:	9207      	str	r2, [sp, #28]
 800ded2:	f000 f92d 	bl	800e130 <_Bfree>
 800ded6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800deda:	ea43 0102 	orr.w	r1, r3, r2
 800dede:	9b04      	ldr	r3, [sp, #16]
 800dee0:	430b      	orrs	r3, r1
 800dee2:	464d      	mov	r5, r9
 800dee4:	d10f      	bne.n	800df06 <_dtoa_r+0xa66>
 800dee6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800deea:	d02a      	beq.n	800df42 <_dtoa_r+0xaa2>
 800deec:	9b03      	ldr	r3, [sp, #12]
 800deee:	2b00      	cmp	r3, #0
 800def0:	dd02      	ble.n	800def8 <_dtoa_r+0xa58>
 800def2:	9b02      	ldr	r3, [sp, #8]
 800def4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800def8:	f88b a000 	strb.w	sl, [fp]
 800defc:	e775      	b.n	800ddea <_dtoa_r+0x94a>
 800defe:	4638      	mov	r0, r7
 800df00:	e7ba      	b.n	800de78 <_dtoa_r+0x9d8>
 800df02:	2201      	movs	r2, #1
 800df04:	e7e2      	b.n	800decc <_dtoa_r+0xa2c>
 800df06:	9b03      	ldr	r3, [sp, #12]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	db04      	blt.n	800df16 <_dtoa_r+0xa76>
 800df0c:	9906      	ldr	r1, [sp, #24]
 800df0e:	430b      	orrs	r3, r1
 800df10:	9904      	ldr	r1, [sp, #16]
 800df12:	430b      	orrs	r3, r1
 800df14:	d122      	bne.n	800df5c <_dtoa_r+0xabc>
 800df16:	2a00      	cmp	r2, #0
 800df18:	ddee      	ble.n	800def8 <_dtoa_r+0xa58>
 800df1a:	ee18 1a10 	vmov	r1, s16
 800df1e:	2201      	movs	r2, #1
 800df20:	4620      	mov	r0, r4
 800df22:	f000 fad7 	bl	800e4d4 <__lshift>
 800df26:	4631      	mov	r1, r6
 800df28:	ee08 0a10 	vmov	s16, r0
 800df2c:	f000 fb42 	bl	800e5b4 <__mcmp>
 800df30:	2800      	cmp	r0, #0
 800df32:	dc03      	bgt.n	800df3c <_dtoa_r+0xa9c>
 800df34:	d1e0      	bne.n	800def8 <_dtoa_r+0xa58>
 800df36:	f01a 0f01 	tst.w	sl, #1
 800df3a:	d0dd      	beq.n	800def8 <_dtoa_r+0xa58>
 800df3c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800df40:	d1d7      	bne.n	800def2 <_dtoa_r+0xa52>
 800df42:	2339      	movs	r3, #57	; 0x39
 800df44:	f88b 3000 	strb.w	r3, [fp]
 800df48:	462b      	mov	r3, r5
 800df4a:	461d      	mov	r5, r3
 800df4c:	3b01      	subs	r3, #1
 800df4e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800df52:	2a39      	cmp	r2, #57	; 0x39
 800df54:	d071      	beq.n	800e03a <_dtoa_r+0xb9a>
 800df56:	3201      	adds	r2, #1
 800df58:	701a      	strb	r2, [r3, #0]
 800df5a:	e746      	b.n	800ddea <_dtoa_r+0x94a>
 800df5c:	2a00      	cmp	r2, #0
 800df5e:	dd07      	ble.n	800df70 <_dtoa_r+0xad0>
 800df60:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800df64:	d0ed      	beq.n	800df42 <_dtoa_r+0xaa2>
 800df66:	f10a 0301 	add.w	r3, sl, #1
 800df6a:	f88b 3000 	strb.w	r3, [fp]
 800df6e:	e73c      	b.n	800ddea <_dtoa_r+0x94a>
 800df70:	9b05      	ldr	r3, [sp, #20]
 800df72:	f809 ac01 	strb.w	sl, [r9, #-1]
 800df76:	4599      	cmp	r9, r3
 800df78:	d047      	beq.n	800e00a <_dtoa_r+0xb6a>
 800df7a:	ee18 1a10 	vmov	r1, s16
 800df7e:	2300      	movs	r3, #0
 800df80:	220a      	movs	r2, #10
 800df82:	4620      	mov	r0, r4
 800df84:	f000 f8f6 	bl	800e174 <__multadd>
 800df88:	45b8      	cmp	r8, r7
 800df8a:	ee08 0a10 	vmov	s16, r0
 800df8e:	f04f 0300 	mov.w	r3, #0
 800df92:	f04f 020a 	mov.w	r2, #10
 800df96:	4641      	mov	r1, r8
 800df98:	4620      	mov	r0, r4
 800df9a:	d106      	bne.n	800dfaa <_dtoa_r+0xb0a>
 800df9c:	f000 f8ea 	bl	800e174 <__multadd>
 800dfa0:	4680      	mov	r8, r0
 800dfa2:	4607      	mov	r7, r0
 800dfa4:	f109 0901 	add.w	r9, r9, #1
 800dfa8:	e772      	b.n	800de90 <_dtoa_r+0x9f0>
 800dfaa:	f000 f8e3 	bl	800e174 <__multadd>
 800dfae:	4639      	mov	r1, r7
 800dfb0:	4680      	mov	r8, r0
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	220a      	movs	r2, #10
 800dfb6:	4620      	mov	r0, r4
 800dfb8:	f000 f8dc 	bl	800e174 <__multadd>
 800dfbc:	4607      	mov	r7, r0
 800dfbe:	e7f1      	b.n	800dfa4 <_dtoa_r+0xb04>
 800dfc0:	9b03      	ldr	r3, [sp, #12]
 800dfc2:	9302      	str	r3, [sp, #8]
 800dfc4:	9d01      	ldr	r5, [sp, #4]
 800dfc6:	ee18 0a10 	vmov	r0, s16
 800dfca:	4631      	mov	r1, r6
 800dfcc:	f7ff f9dc 	bl	800d388 <quorem>
 800dfd0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800dfd4:	9b01      	ldr	r3, [sp, #4]
 800dfd6:	f805 ab01 	strb.w	sl, [r5], #1
 800dfda:	1aea      	subs	r2, r5, r3
 800dfdc:	9b02      	ldr	r3, [sp, #8]
 800dfde:	4293      	cmp	r3, r2
 800dfe0:	dd09      	ble.n	800dff6 <_dtoa_r+0xb56>
 800dfe2:	ee18 1a10 	vmov	r1, s16
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	220a      	movs	r2, #10
 800dfea:	4620      	mov	r0, r4
 800dfec:	f000 f8c2 	bl	800e174 <__multadd>
 800dff0:	ee08 0a10 	vmov	s16, r0
 800dff4:	e7e7      	b.n	800dfc6 <_dtoa_r+0xb26>
 800dff6:	9b02      	ldr	r3, [sp, #8]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	bfc8      	it	gt
 800dffc:	461d      	movgt	r5, r3
 800dffe:	9b01      	ldr	r3, [sp, #4]
 800e000:	bfd8      	it	le
 800e002:	2501      	movle	r5, #1
 800e004:	441d      	add	r5, r3
 800e006:	f04f 0800 	mov.w	r8, #0
 800e00a:	ee18 1a10 	vmov	r1, s16
 800e00e:	2201      	movs	r2, #1
 800e010:	4620      	mov	r0, r4
 800e012:	f000 fa5f 	bl	800e4d4 <__lshift>
 800e016:	4631      	mov	r1, r6
 800e018:	ee08 0a10 	vmov	s16, r0
 800e01c:	f000 faca 	bl	800e5b4 <__mcmp>
 800e020:	2800      	cmp	r0, #0
 800e022:	dc91      	bgt.n	800df48 <_dtoa_r+0xaa8>
 800e024:	d102      	bne.n	800e02c <_dtoa_r+0xb8c>
 800e026:	f01a 0f01 	tst.w	sl, #1
 800e02a:	d18d      	bne.n	800df48 <_dtoa_r+0xaa8>
 800e02c:	462b      	mov	r3, r5
 800e02e:	461d      	mov	r5, r3
 800e030:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e034:	2a30      	cmp	r2, #48	; 0x30
 800e036:	d0fa      	beq.n	800e02e <_dtoa_r+0xb8e>
 800e038:	e6d7      	b.n	800ddea <_dtoa_r+0x94a>
 800e03a:	9a01      	ldr	r2, [sp, #4]
 800e03c:	429a      	cmp	r2, r3
 800e03e:	d184      	bne.n	800df4a <_dtoa_r+0xaaa>
 800e040:	9b00      	ldr	r3, [sp, #0]
 800e042:	3301      	adds	r3, #1
 800e044:	9300      	str	r3, [sp, #0]
 800e046:	2331      	movs	r3, #49	; 0x31
 800e048:	7013      	strb	r3, [r2, #0]
 800e04a:	e6ce      	b.n	800ddea <_dtoa_r+0x94a>
 800e04c:	4b09      	ldr	r3, [pc, #36]	; (800e074 <_dtoa_r+0xbd4>)
 800e04e:	f7ff ba95 	b.w	800d57c <_dtoa_r+0xdc>
 800e052:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e054:	2b00      	cmp	r3, #0
 800e056:	f47f aa6e 	bne.w	800d536 <_dtoa_r+0x96>
 800e05a:	4b07      	ldr	r3, [pc, #28]	; (800e078 <_dtoa_r+0xbd8>)
 800e05c:	f7ff ba8e 	b.w	800d57c <_dtoa_r+0xdc>
 800e060:	9b02      	ldr	r3, [sp, #8]
 800e062:	2b00      	cmp	r3, #0
 800e064:	dcae      	bgt.n	800dfc4 <_dtoa_r+0xb24>
 800e066:	9b06      	ldr	r3, [sp, #24]
 800e068:	2b02      	cmp	r3, #2
 800e06a:	f73f aea8 	bgt.w	800ddbe <_dtoa_r+0x91e>
 800e06e:	e7a9      	b.n	800dfc4 <_dtoa_r+0xb24>
 800e070:	08011013 	.word	0x08011013
 800e074:	08010f70 	.word	0x08010f70
 800e078:	08010f94 	.word	0x08010f94

0800e07c <_localeconv_r>:
 800e07c:	4800      	ldr	r0, [pc, #0]	; (800e080 <_localeconv_r+0x4>)
 800e07e:	4770      	bx	lr
 800e080:	20000308 	.word	0x20000308

0800e084 <malloc>:
 800e084:	4b02      	ldr	r3, [pc, #8]	; (800e090 <malloc+0xc>)
 800e086:	4601      	mov	r1, r0
 800e088:	6818      	ldr	r0, [r3, #0]
 800e08a:	f000 bc17 	b.w	800e8bc <_malloc_r>
 800e08e:	bf00      	nop
 800e090:	200001b4 	.word	0x200001b4

0800e094 <memcpy>:
 800e094:	440a      	add	r2, r1
 800e096:	4291      	cmp	r1, r2
 800e098:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800e09c:	d100      	bne.n	800e0a0 <memcpy+0xc>
 800e09e:	4770      	bx	lr
 800e0a0:	b510      	push	{r4, lr}
 800e0a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e0a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e0aa:	4291      	cmp	r1, r2
 800e0ac:	d1f9      	bne.n	800e0a2 <memcpy+0xe>
 800e0ae:	bd10      	pop	{r4, pc}

0800e0b0 <_Balloc>:
 800e0b0:	b570      	push	{r4, r5, r6, lr}
 800e0b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e0b4:	4604      	mov	r4, r0
 800e0b6:	460d      	mov	r5, r1
 800e0b8:	b976      	cbnz	r6, 800e0d8 <_Balloc+0x28>
 800e0ba:	2010      	movs	r0, #16
 800e0bc:	f7ff ffe2 	bl	800e084 <malloc>
 800e0c0:	4602      	mov	r2, r0
 800e0c2:	6260      	str	r0, [r4, #36]	; 0x24
 800e0c4:	b920      	cbnz	r0, 800e0d0 <_Balloc+0x20>
 800e0c6:	4b18      	ldr	r3, [pc, #96]	; (800e128 <_Balloc+0x78>)
 800e0c8:	4818      	ldr	r0, [pc, #96]	; (800e12c <_Balloc+0x7c>)
 800e0ca:	2166      	movs	r1, #102	; 0x66
 800e0cc:	f000 fdd6 	bl	800ec7c <__assert_func>
 800e0d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e0d4:	6006      	str	r6, [r0, #0]
 800e0d6:	60c6      	str	r6, [r0, #12]
 800e0d8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e0da:	68f3      	ldr	r3, [r6, #12]
 800e0dc:	b183      	cbz	r3, 800e100 <_Balloc+0x50>
 800e0de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e0e0:	68db      	ldr	r3, [r3, #12]
 800e0e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e0e6:	b9b8      	cbnz	r0, 800e118 <_Balloc+0x68>
 800e0e8:	2101      	movs	r1, #1
 800e0ea:	fa01 f605 	lsl.w	r6, r1, r5
 800e0ee:	1d72      	adds	r2, r6, #5
 800e0f0:	0092      	lsls	r2, r2, #2
 800e0f2:	4620      	mov	r0, r4
 800e0f4:	f000 fb60 	bl	800e7b8 <_calloc_r>
 800e0f8:	b160      	cbz	r0, 800e114 <_Balloc+0x64>
 800e0fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e0fe:	e00e      	b.n	800e11e <_Balloc+0x6e>
 800e100:	2221      	movs	r2, #33	; 0x21
 800e102:	2104      	movs	r1, #4
 800e104:	4620      	mov	r0, r4
 800e106:	f000 fb57 	bl	800e7b8 <_calloc_r>
 800e10a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e10c:	60f0      	str	r0, [r6, #12]
 800e10e:	68db      	ldr	r3, [r3, #12]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d1e4      	bne.n	800e0de <_Balloc+0x2e>
 800e114:	2000      	movs	r0, #0
 800e116:	bd70      	pop	{r4, r5, r6, pc}
 800e118:	6802      	ldr	r2, [r0, #0]
 800e11a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e11e:	2300      	movs	r3, #0
 800e120:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e124:	e7f7      	b.n	800e116 <_Balloc+0x66>
 800e126:	bf00      	nop
 800e128:	08010fa1 	.word	0x08010fa1
 800e12c:	08011024 	.word	0x08011024

0800e130 <_Bfree>:
 800e130:	b570      	push	{r4, r5, r6, lr}
 800e132:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e134:	4605      	mov	r5, r0
 800e136:	460c      	mov	r4, r1
 800e138:	b976      	cbnz	r6, 800e158 <_Bfree+0x28>
 800e13a:	2010      	movs	r0, #16
 800e13c:	f7ff ffa2 	bl	800e084 <malloc>
 800e140:	4602      	mov	r2, r0
 800e142:	6268      	str	r0, [r5, #36]	; 0x24
 800e144:	b920      	cbnz	r0, 800e150 <_Bfree+0x20>
 800e146:	4b09      	ldr	r3, [pc, #36]	; (800e16c <_Bfree+0x3c>)
 800e148:	4809      	ldr	r0, [pc, #36]	; (800e170 <_Bfree+0x40>)
 800e14a:	218a      	movs	r1, #138	; 0x8a
 800e14c:	f000 fd96 	bl	800ec7c <__assert_func>
 800e150:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e154:	6006      	str	r6, [r0, #0]
 800e156:	60c6      	str	r6, [r0, #12]
 800e158:	b13c      	cbz	r4, 800e16a <_Bfree+0x3a>
 800e15a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e15c:	6862      	ldr	r2, [r4, #4]
 800e15e:	68db      	ldr	r3, [r3, #12]
 800e160:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e164:	6021      	str	r1, [r4, #0]
 800e166:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e16a:	bd70      	pop	{r4, r5, r6, pc}
 800e16c:	08010fa1 	.word	0x08010fa1
 800e170:	08011024 	.word	0x08011024

0800e174 <__multadd>:
 800e174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e178:	690d      	ldr	r5, [r1, #16]
 800e17a:	4607      	mov	r7, r0
 800e17c:	460c      	mov	r4, r1
 800e17e:	461e      	mov	r6, r3
 800e180:	f101 0c14 	add.w	ip, r1, #20
 800e184:	2000      	movs	r0, #0
 800e186:	f8dc 3000 	ldr.w	r3, [ip]
 800e18a:	b299      	uxth	r1, r3
 800e18c:	fb02 6101 	mla	r1, r2, r1, r6
 800e190:	0c1e      	lsrs	r6, r3, #16
 800e192:	0c0b      	lsrs	r3, r1, #16
 800e194:	fb02 3306 	mla	r3, r2, r6, r3
 800e198:	b289      	uxth	r1, r1
 800e19a:	3001      	adds	r0, #1
 800e19c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e1a0:	4285      	cmp	r5, r0
 800e1a2:	f84c 1b04 	str.w	r1, [ip], #4
 800e1a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e1aa:	dcec      	bgt.n	800e186 <__multadd+0x12>
 800e1ac:	b30e      	cbz	r6, 800e1f2 <__multadd+0x7e>
 800e1ae:	68a3      	ldr	r3, [r4, #8]
 800e1b0:	42ab      	cmp	r3, r5
 800e1b2:	dc19      	bgt.n	800e1e8 <__multadd+0x74>
 800e1b4:	6861      	ldr	r1, [r4, #4]
 800e1b6:	4638      	mov	r0, r7
 800e1b8:	3101      	adds	r1, #1
 800e1ba:	f7ff ff79 	bl	800e0b0 <_Balloc>
 800e1be:	4680      	mov	r8, r0
 800e1c0:	b928      	cbnz	r0, 800e1ce <__multadd+0x5a>
 800e1c2:	4602      	mov	r2, r0
 800e1c4:	4b0c      	ldr	r3, [pc, #48]	; (800e1f8 <__multadd+0x84>)
 800e1c6:	480d      	ldr	r0, [pc, #52]	; (800e1fc <__multadd+0x88>)
 800e1c8:	21b5      	movs	r1, #181	; 0xb5
 800e1ca:	f000 fd57 	bl	800ec7c <__assert_func>
 800e1ce:	6922      	ldr	r2, [r4, #16]
 800e1d0:	3202      	adds	r2, #2
 800e1d2:	f104 010c 	add.w	r1, r4, #12
 800e1d6:	0092      	lsls	r2, r2, #2
 800e1d8:	300c      	adds	r0, #12
 800e1da:	f7ff ff5b 	bl	800e094 <memcpy>
 800e1de:	4621      	mov	r1, r4
 800e1e0:	4638      	mov	r0, r7
 800e1e2:	f7ff ffa5 	bl	800e130 <_Bfree>
 800e1e6:	4644      	mov	r4, r8
 800e1e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e1ec:	3501      	adds	r5, #1
 800e1ee:	615e      	str	r6, [r3, #20]
 800e1f0:	6125      	str	r5, [r4, #16]
 800e1f2:	4620      	mov	r0, r4
 800e1f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1f8:	08011013 	.word	0x08011013
 800e1fc:	08011024 	.word	0x08011024

0800e200 <__hi0bits>:
 800e200:	0c03      	lsrs	r3, r0, #16
 800e202:	041b      	lsls	r3, r3, #16
 800e204:	b9d3      	cbnz	r3, 800e23c <__hi0bits+0x3c>
 800e206:	0400      	lsls	r0, r0, #16
 800e208:	2310      	movs	r3, #16
 800e20a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e20e:	bf04      	itt	eq
 800e210:	0200      	lsleq	r0, r0, #8
 800e212:	3308      	addeq	r3, #8
 800e214:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e218:	bf04      	itt	eq
 800e21a:	0100      	lsleq	r0, r0, #4
 800e21c:	3304      	addeq	r3, #4
 800e21e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e222:	bf04      	itt	eq
 800e224:	0080      	lsleq	r0, r0, #2
 800e226:	3302      	addeq	r3, #2
 800e228:	2800      	cmp	r0, #0
 800e22a:	db05      	blt.n	800e238 <__hi0bits+0x38>
 800e22c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e230:	f103 0301 	add.w	r3, r3, #1
 800e234:	bf08      	it	eq
 800e236:	2320      	moveq	r3, #32
 800e238:	4618      	mov	r0, r3
 800e23a:	4770      	bx	lr
 800e23c:	2300      	movs	r3, #0
 800e23e:	e7e4      	b.n	800e20a <__hi0bits+0xa>

0800e240 <__lo0bits>:
 800e240:	6803      	ldr	r3, [r0, #0]
 800e242:	f013 0207 	ands.w	r2, r3, #7
 800e246:	4601      	mov	r1, r0
 800e248:	d00b      	beq.n	800e262 <__lo0bits+0x22>
 800e24a:	07da      	lsls	r2, r3, #31
 800e24c:	d423      	bmi.n	800e296 <__lo0bits+0x56>
 800e24e:	0798      	lsls	r0, r3, #30
 800e250:	bf49      	itett	mi
 800e252:	085b      	lsrmi	r3, r3, #1
 800e254:	089b      	lsrpl	r3, r3, #2
 800e256:	2001      	movmi	r0, #1
 800e258:	600b      	strmi	r3, [r1, #0]
 800e25a:	bf5c      	itt	pl
 800e25c:	600b      	strpl	r3, [r1, #0]
 800e25e:	2002      	movpl	r0, #2
 800e260:	4770      	bx	lr
 800e262:	b298      	uxth	r0, r3
 800e264:	b9a8      	cbnz	r0, 800e292 <__lo0bits+0x52>
 800e266:	0c1b      	lsrs	r3, r3, #16
 800e268:	2010      	movs	r0, #16
 800e26a:	b2da      	uxtb	r2, r3
 800e26c:	b90a      	cbnz	r2, 800e272 <__lo0bits+0x32>
 800e26e:	3008      	adds	r0, #8
 800e270:	0a1b      	lsrs	r3, r3, #8
 800e272:	071a      	lsls	r2, r3, #28
 800e274:	bf04      	itt	eq
 800e276:	091b      	lsreq	r3, r3, #4
 800e278:	3004      	addeq	r0, #4
 800e27a:	079a      	lsls	r2, r3, #30
 800e27c:	bf04      	itt	eq
 800e27e:	089b      	lsreq	r3, r3, #2
 800e280:	3002      	addeq	r0, #2
 800e282:	07da      	lsls	r2, r3, #31
 800e284:	d403      	bmi.n	800e28e <__lo0bits+0x4e>
 800e286:	085b      	lsrs	r3, r3, #1
 800e288:	f100 0001 	add.w	r0, r0, #1
 800e28c:	d005      	beq.n	800e29a <__lo0bits+0x5a>
 800e28e:	600b      	str	r3, [r1, #0]
 800e290:	4770      	bx	lr
 800e292:	4610      	mov	r0, r2
 800e294:	e7e9      	b.n	800e26a <__lo0bits+0x2a>
 800e296:	2000      	movs	r0, #0
 800e298:	4770      	bx	lr
 800e29a:	2020      	movs	r0, #32
 800e29c:	4770      	bx	lr
	...

0800e2a0 <__i2b>:
 800e2a0:	b510      	push	{r4, lr}
 800e2a2:	460c      	mov	r4, r1
 800e2a4:	2101      	movs	r1, #1
 800e2a6:	f7ff ff03 	bl	800e0b0 <_Balloc>
 800e2aa:	4602      	mov	r2, r0
 800e2ac:	b928      	cbnz	r0, 800e2ba <__i2b+0x1a>
 800e2ae:	4b05      	ldr	r3, [pc, #20]	; (800e2c4 <__i2b+0x24>)
 800e2b0:	4805      	ldr	r0, [pc, #20]	; (800e2c8 <__i2b+0x28>)
 800e2b2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e2b6:	f000 fce1 	bl	800ec7c <__assert_func>
 800e2ba:	2301      	movs	r3, #1
 800e2bc:	6144      	str	r4, [r0, #20]
 800e2be:	6103      	str	r3, [r0, #16]
 800e2c0:	bd10      	pop	{r4, pc}
 800e2c2:	bf00      	nop
 800e2c4:	08011013 	.word	0x08011013
 800e2c8:	08011024 	.word	0x08011024

0800e2cc <__multiply>:
 800e2cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2d0:	4691      	mov	r9, r2
 800e2d2:	690a      	ldr	r2, [r1, #16]
 800e2d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e2d8:	429a      	cmp	r2, r3
 800e2da:	bfb8      	it	lt
 800e2dc:	460b      	movlt	r3, r1
 800e2de:	460c      	mov	r4, r1
 800e2e0:	bfbc      	itt	lt
 800e2e2:	464c      	movlt	r4, r9
 800e2e4:	4699      	movlt	r9, r3
 800e2e6:	6927      	ldr	r7, [r4, #16]
 800e2e8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e2ec:	68a3      	ldr	r3, [r4, #8]
 800e2ee:	6861      	ldr	r1, [r4, #4]
 800e2f0:	eb07 060a 	add.w	r6, r7, sl
 800e2f4:	42b3      	cmp	r3, r6
 800e2f6:	b085      	sub	sp, #20
 800e2f8:	bfb8      	it	lt
 800e2fa:	3101      	addlt	r1, #1
 800e2fc:	f7ff fed8 	bl	800e0b0 <_Balloc>
 800e300:	b930      	cbnz	r0, 800e310 <__multiply+0x44>
 800e302:	4602      	mov	r2, r0
 800e304:	4b44      	ldr	r3, [pc, #272]	; (800e418 <__multiply+0x14c>)
 800e306:	4845      	ldr	r0, [pc, #276]	; (800e41c <__multiply+0x150>)
 800e308:	f240 115d 	movw	r1, #349	; 0x15d
 800e30c:	f000 fcb6 	bl	800ec7c <__assert_func>
 800e310:	f100 0514 	add.w	r5, r0, #20
 800e314:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e318:	462b      	mov	r3, r5
 800e31a:	2200      	movs	r2, #0
 800e31c:	4543      	cmp	r3, r8
 800e31e:	d321      	bcc.n	800e364 <__multiply+0x98>
 800e320:	f104 0314 	add.w	r3, r4, #20
 800e324:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e328:	f109 0314 	add.w	r3, r9, #20
 800e32c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e330:	9202      	str	r2, [sp, #8]
 800e332:	1b3a      	subs	r2, r7, r4
 800e334:	3a15      	subs	r2, #21
 800e336:	f022 0203 	bic.w	r2, r2, #3
 800e33a:	3204      	adds	r2, #4
 800e33c:	f104 0115 	add.w	r1, r4, #21
 800e340:	428f      	cmp	r7, r1
 800e342:	bf38      	it	cc
 800e344:	2204      	movcc	r2, #4
 800e346:	9201      	str	r2, [sp, #4]
 800e348:	9a02      	ldr	r2, [sp, #8]
 800e34a:	9303      	str	r3, [sp, #12]
 800e34c:	429a      	cmp	r2, r3
 800e34e:	d80c      	bhi.n	800e36a <__multiply+0x9e>
 800e350:	2e00      	cmp	r6, #0
 800e352:	dd03      	ble.n	800e35c <__multiply+0x90>
 800e354:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d05a      	beq.n	800e412 <__multiply+0x146>
 800e35c:	6106      	str	r6, [r0, #16]
 800e35e:	b005      	add	sp, #20
 800e360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e364:	f843 2b04 	str.w	r2, [r3], #4
 800e368:	e7d8      	b.n	800e31c <__multiply+0x50>
 800e36a:	f8b3 a000 	ldrh.w	sl, [r3]
 800e36e:	f1ba 0f00 	cmp.w	sl, #0
 800e372:	d024      	beq.n	800e3be <__multiply+0xf2>
 800e374:	f104 0e14 	add.w	lr, r4, #20
 800e378:	46a9      	mov	r9, r5
 800e37a:	f04f 0c00 	mov.w	ip, #0
 800e37e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e382:	f8d9 1000 	ldr.w	r1, [r9]
 800e386:	fa1f fb82 	uxth.w	fp, r2
 800e38a:	b289      	uxth	r1, r1
 800e38c:	fb0a 110b 	mla	r1, sl, fp, r1
 800e390:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e394:	f8d9 2000 	ldr.w	r2, [r9]
 800e398:	4461      	add	r1, ip
 800e39a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e39e:	fb0a c20b 	mla	r2, sl, fp, ip
 800e3a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e3a6:	b289      	uxth	r1, r1
 800e3a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e3ac:	4577      	cmp	r7, lr
 800e3ae:	f849 1b04 	str.w	r1, [r9], #4
 800e3b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e3b6:	d8e2      	bhi.n	800e37e <__multiply+0xb2>
 800e3b8:	9a01      	ldr	r2, [sp, #4]
 800e3ba:	f845 c002 	str.w	ip, [r5, r2]
 800e3be:	9a03      	ldr	r2, [sp, #12]
 800e3c0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e3c4:	3304      	adds	r3, #4
 800e3c6:	f1b9 0f00 	cmp.w	r9, #0
 800e3ca:	d020      	beq.n	800e40e <__multiply+0x142>
 800e3cc:	6829      	ldr	r1, [r5, #0]
 800e3ce:	f104 0c14 	add.w	ip, r4, #20
 800e3d2:	46ae      	mov	lr, r5
 800e3d4:	f04f 0a00 	mov.w	sl, #0
 800e3d8:	f8bc b000 	ldrh.w	fp, [ip]
 800e3dc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e3e0:	fb09 220b 	mla	r2, r9, fp, r2
 800e3e4:	4492      	add	sl, r2
 800e3e6:	b289      	uxth	r1, r1
 800e3e8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e3ec:	f84e 1b04 	str.w	r1, [lr], #4
 800e3f0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e3f4:	f8be 1000 	ldrh.w	r1, [lr]
 800e3f8:	0c12      	lsrs	r2, r2, #16
 800e3fa:	fb09 1102 	mla	r1, r9, r2, r1
 800e3fe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e402:	4567      	cmp	r7, ip
 800e404:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e408:	d8e6      	bhi.n	800e3d8 <__multiply+0x10c>
 800e40a:	9a01      	ldr	r2, [sp, #4]
 800e40c:	50a9      	str	r1, [r5, r2]
 800e40e:	3504      	adds	r5, #4
 800e410:	e79a      	b.n	800e348 <__multiply+0x7c>
 800e412:	3e01      	subs	r6, #1
 800e414:	e79c      	b.n	800e350 <__multiply+0x84>
 800e416:	bf00      	nop
 800e418:	08011013 	.word	0x08011013
 800e41c:	08011024 	.word	0x08011024

0800e420 <__pow5mult>:
 800e420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e424:	4615      	mov	r5, r2
 800e426:	f012 0203 	ands.w	r2, r2, #3
 800e42a:	4606      	mov	r6, r0
 800e42c:	460f      	mov	r7, r1
 800e42e:	d007      	beq.n	800e440 <__pow5mult+0x20>
 800e430:	4c25      	ldr	r4, [pc, #148]	; (800e4c8 <__pow5mult+0xa8>)
 800e432:	3a01      	subs	r2, #1
 800e434:	2300      	movs	r3, #0
 800e436:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e43a:	f7ff fe9b 	bl	800e174 <__multadd>
 800e43e:	4607      	mov	r7, r0
 800e440:	10ad      	asrs	r5, r5, #2
 800e442:	d03d      	beq.n	800e4c0 <__pow5mult+0xa0>
 800e444:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e446:	b97c      	cbnz	r4, 800e468 <__pow5mult+0x48>
 800e448:	2010      	movs	r0, #16
 800e44a:	f7ff fe1b 	bl	800e084 <malloc>
 800e44e:	4602      	mov	r2, r0
 800e450:	6270      	str	r0, [r6, #36]	; 0x24
 800e452:	b928      	cbnz	r0, 800e460 <__pow5mult+0x40>
 800e454:	4b1d      	ldr	r3, [pc, #116]	; (800e4cc <__pow5mult+0xac>)
 800e456:	481e      	ldr	r0, [pc, #120]	; (800e4d0 <__pow5mult+0xb0>)
 800e458:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e45c:	f000 fc0e 	bl	800ec7c <__assert_func>
 800e460:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e464:	6004      	str	r4, [r0, #0]
 800e466:	60c4      	str	r4, [r0, #12]
 800e468:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e46c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e470:	b94c      	cbnz	r4, 800e486 <__pow5mult+0x66>
 800e472:	f240 2171 	movw	r1, #625	; 0x271
 800e476:	4630      	mov	r0, r6
 800e478:	f7ff ff12 	bl	800e2a0 <__i2b>
 800e47c:	2300      	movs	r3, #0
 800e47e:	f8c8 0008 	str.w	r0, [r8, #8]
 800e482:	4604      	mov	r4, r0
 800e484:	6003      	str	r3, [r0, #0]
 800e486:	f04f 0900 	mov.w	r9, #0
 800e48a:	07eb      	lsls	r3, r5, #31
 800e48c:	d50a      	bpl.n	800e4a4 <__pow5mult+0x84>
 800e48e:	4639      	mov	r1, r7
 800e490:	4622      	mov	r2, r4
 800e492:	4630      	mov	r0, r6
 800e494:	f7ff ff1a 	bl	800e2cc <__multiply>
 800e498:	4639      	mov	r1, r7
 800e49a:	4680      	mov	r8, r0
 800e49c:	4630      	mov	r0, r6
 800e49e:	f7ff fe47 	bl	800e130 <_Bfree>
 800e4a2:	4647      	mov	r7, r8
 800e4a4:	106d      	asrs	r5, r5, #1
 800e4a6:	d00b      	beq.n	800e4c0 <__pow5mult+0xa0>
 800e4a8:	6820      	ldr	r0, [r4, #0]
 800e4aa:	b938      	cbnz	r0, 800e4bc <__pow5mult+0x9c>
 800e4ac:	4622      	mov	r2, r4
 800e4ae:	4621      	mov	r1, r4
 800e4b0:	4630      	mov	r0, r6
 800e4b2:	f7ff ff0b 	bl	800e2cc <__multiply>
 800e4b6:	6020      	str	r0, [r4, #0]
 800e4b8:	f8c0 9000 	str.w	r9, [r0]
 800e4bc:	4604      	mov	r4, r0
 800e4be:	e7e4      	b.n	800e48a <__pow5mult+0x6a>
 800e4c0:	4638      	mov	r0, r7
 800e4c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4c6:	bf00      	nop
 800e4c8:	08011170 	.word	0x08011170
 800e4cc:	08010fa1 	.word	0x08010fa1
 800e4d0:	08011024 	.word	0x08011024

0800e4d4 <__lshift>:
 800e4d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4d8:	460c      	mov	r4, r1
 800e4da:	6849      	ldr	r1, [r1, #4]
 800e4dc:	6923      	ldr	r3, [r4, #16]
 800e4de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e4e2:	68a3      	ldr	r3, [r4, #8]
 800e4e4:	4607      	mov	r7, r0
 800e4e6:	4691      	mov	r9, r2
 800e4e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e4ec:	f108 0601 	add.w	r6, r8, #1
 800e4f0:	42b3      	cmp	r3, r6
 800e4f2:	db0b      	blt.n	800e50c <__lshift+0x38>
 800e4f4:	4638      	mov	r0, r7
 800e4f6:	f7ff fddb 	bl	800e0b0 <_Balloc>
 800e4fa:	4605      	mov	r5, r0
 800e4fc:	b948      	cbnz	r0, 800e512 <__lshift+0x3e>
 800e4fe:	4602      	mov	r2, r0
 800e500:	4b2a      	ldr	r3, [pc, #168]	; (800e5ac <__lshift+0xd8>)
 800e502:	482b      	ldr	r0, [pc, #172]	; (800e5b0 <__lshift+0xdc>)
 800e504:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e508:	f000 fbb8 	bl	800ec7c <__assert_func>
 800e50c:	3101      	adds	r1, #1
 800e50e:	005b      	lsls	r3, r3, #1
 800e510:	e7ee      	b.n	800e4f0 <__lshift+0x1c>
 800e512:	2300      	movs	r3, #0
 800e514:	f100 0114 	add.w	r1, r0, #20
 800e518:	f100 0210 	add.w	r2, r0, #16
 800e51c:	4618      	mov	r0, r3
 800e51e:	4553      	cmp	r3, sl
 800e520:	db37      	blt.n	800e592 <__lshift+0xbe>
 800e522:	6920      	ldr	r0, [r4, #16]
 800e524:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e528:	f104 0314 	add.w	r3, r4, #20
 800e52c:	f019 091f 	ands.w	r9, r9, #31
 800e530:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e534:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e538:	d02f      	beq.n	800e59a <__lshift+0xc6>
 800e53a:	f1c9 0e20 	rsb	lr, r9, #32
 800e53e:	468a      	mov	sl, r1
 800e540:	f04f 0c00 	mov.w	ip, #0
 800e544:	681a      	ldr	r2, [r3, #0]
 800e546:	fa02 f209 	lsl.w	r2, r2, r9
 800e54a:	ea42 020c 	orr.w	r2, r2, ip
 800e54e:	f84a 2b04 	str.w	r2, [sl], #4
 800e552:	f853 2b04 	ldr.w	r2, [r3], #4
 800e556:	4298      	cmp	r0, r3
 800e558:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e55c:	d8f2      	bhi.n	800e544 <__lshift+0x70>
 800e55e:	1b03      	subs	r3, r0, r4
 800e560:	3b15      	subs	r3, #21
 800e562:	f023 0303 	bic.w	r3, r3, #3
 800e566:	3304      	adds	r3, #4
 800e568:	f104 0215 	add.w	r2, r4, #21
 800e56c:	4290      	cmp	r0, r2
 800e56e:	bf38      	it	cc
 800e570:	2304      	movcc	r3, #4
 800e572:	f841 c003 	str.w	ip, [r1, r3]
 800e576:	f1bc 0f00 	cmp.w	ip, #0
 800e57a:	d001      	beq.n	800e580 <__lshift+0xac>
 800e57c:	f108 0602 	add.w	r6, r8, #2
 800e580:	3e01      	subs	r6, #1
 800e582:	4638      	mov	r0, r7
 800e584:	612e      	str	r6, [r5, #16]
 800e586:	4621      	mov	r1, r4
 800e588:	f7ff fdd2 	bl	800e130 <_Bfree>
 800e58c:	4628      	mov	r0, r5
 800e58e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e592:	f842 0f04 	str.w	r0, [r2, #4]!
 800e596:	3301      	adds	r3, #1
 800e598:	e7c1      	b.n	800e51e <__lshift+0x4a>
 800e59a:	3904      	subs	r1, #4
 800e59c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e5a0:	f841 2f04 	str.w	r2, [r1, #4]!
 800e5a4:	4298      	cmp	r0, r3
 800e5a6:	d8f9      	bhi.n	800e59c <__lshift+0xc8>
 800e5a8:	e7ea      	b.n	800e580 <__lshift+0xac>
 800e5aa:	bf00      	nop
 800e5ac:	08011013 	.word	0x08011013
 800e5b0:	08011024 	.word	0x08011024

0800e5b4 <__mcmp>:
 800e5b4:	b530      	push	{r4, r5, lr}
 800e5b6:	6902      	ldr	r2, [r0, #16]
 800e5b8:	690c      	ldr	r4, [r1, #16]
 800e5ba:	1b12      	subs	r2, r2, r4
 800e5bc:	d10e      	bne.n	800e5dc <__mcmp+0x28>
 800e5be:	f100 0314 	add.w	r3, r0, #20
 800e5c2:	3114      	adds	r1, #20
 800e5c4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e5c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e5cc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e5d0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e5d4:	42a5      	cmp	r5, r4
 800e5d6:	d003      	beq.n	800e5e0 <__mcmp+0x2c>
 800e5d8:	d305      	bcc.n	800e5e6 <__mcmp+0x32>
 800e5da:	2201      	movs	r2, #1
 800e5dc:	4610      	mov	r0, r2
 800e5de:	bd30      	pop	{r4, r5, pc}
 800e5e0:	4283      	cmp	r3, r0
 800e5e2:	d3f3      	bcc.n	800e5cc <__mcmp+0x18>
 800e5e4:	e7fa      	b.n	800e5dc <__mcmp+0x28>
 800e5e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e5ea:	e7f7      	b.n	800e5dc <__mcmp+0x28>

0800e5ec <__mdiff>:
 800e5ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5f0:	460c      	mov	r4, r1
 800e5f2:	4606      	mov	r6, r0
 800e5f4:	4611      	mov	r1, r2
 800e5f6:	4620      	mov	r0, r4
 800e5f8:	4690      	mov	r8, r2
 800e5fa:	f7ff ffdb 	bl	800e5b4 <__mcmp>
 800e5fe:	1e05      	subs	r5, r0, #0
 800e600:	d110      	bne.n	800e624 <__mdiff+0x38>
 800e602:	4629      	mov	r1, r5
 800e604:	4630      	mov	r0, r6
 800e606:	f7ff fd53 	bl	800e0b0 <_Balloc>
 800e60a:	b930      	cbnz	r0, 800e61a <__mdiff+0x2e>
 800e60c:	4b3a      	ldr	r3, [pc, #232]	; (800e6f8 <__mdiff+0x10c>)
 800e60e:	4602      	mov	r2, r0
 800e610:	f240 2132 	movw	r1, #562	; 0x232
 800e614:	4839      	ldr	r0, [pc, #228]	; (800e6fc <__mdiff+0x110>)
 800e616:	f000 fb31 	bl	800ec7c <__assert_func>
 800e61a:	2301      	movs	r3, #1
 800e61c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e620:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e624:	bfa4      	itt	ge
 800e626:	4643      	movge	r3, r8
 800e628:	46a0      	movge	r8, r4
 800e62a:	4630      	mov	r0, r6
 800e62c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e630:	bfa6      	itte	ge
 800e632:	461c      	movge	r4, r3
 800e634:	2500      	movge	r5, #0
 800e636:	2501      	movlt	r5, #1
 800e638:	f7ff fd3a 	bl	800e0b0 <_Balloc>
 800e63c:	b920      	cbnz	r0, 800e648 <__mdiff+0x5c>
 800e63e:	4b2e      	ldr	r3, [pc, #184]	; (800e6f8 <__mdiff+0x10c>)
 800e640:	4602      	mov	r2, r0
 800e642:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e646:	e7e5      	b.n	800e614 <__mdiff+0x28>
 800e648:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e64c:	6926      	ldr	r6, [r4, #16]
 800e64e:	60c5      	str	r5, [r0, #12]
 800e650:	f104 0914 	add.w	r9, r4, #20
 800e654:	f108 0514 	add.w	r5, r8, #20
 800e658:	f100 0e14 	add.w	lr, r0, #20
 800e65c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e660:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e664:	f108 0210 	add.w	r2, r8, #16
 800e668:	46f2      	mov	sl, lr
 800e66a:	2100      	movs	r1, #0
 800e66c:	f859 3b04 	ldr.w	r3, [r9], #4
 800e670:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e674:	fa1f f883 	uxth.w	r8, r3
 800e678:	fa11 f18b 	uxtah	r1, r1, fp
 800e67c:	0c1b      	lsrs	r3, r3, #16
 800e67e:	eba1 0808 	sub.w	r8, r1, r8
 800e682:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e686:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e68a:	fa1f f888 	uxth.w	r8, r8
 800e68e:	1419      	asrs	r1, r3, #16
 800e690:	454e      	cmp	r6, r9
 800e692:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e696:	f84a 3b04 	str.w	r3, [sl], #4
 800e69a:	d8e7      	bhi.n	800e66c <__mdiff+0x80>
 800e69c:	1b33      	subs	r3, r6, r4
 800e69e:	3b15      	subs	r3, #21
 800e6a0:	f023 0303 	bic.w	r3, r3, #3
 800e6a4:	3304      	adds	r3, #4
 800e6a6:	3415      	adds	r4, #21
 800e6a8:	42a6      	cmp	r6, r4
 800e6aa:	bf38      	it	cc
 800e6ac:	2304      	movcc	r3, #4
 800e6ae:	441d      	add	r5, r3
 800e6b0:	4473      	add	r3, lr
 800e6b2:	469e      	mov	lr, r3
 800e6b4:	462e      	mov	r6, r5
 800e6b6:	4566      	cmp	r6, ip
 800e6b8:	d30e      	bcc.n	800e6d8 <__mdiff+0xec>
 800e6ba:	f10c 0203 	add.w	r2, ip, #3
 800e6be:	1b52      	subs	r2, r2, r5
 800e6c0:	f022 0203 	bic.w	r2, r2, #3
 800e6c4:	3d03      	subs	r5, #3
 800e6c6:	45ac      	cmp	ip, r5
 800e6c8:	bf38      	it	cc
 800e6ca:	2200      	movcc	r2, #0
 800e6cc:	441a      	add	r2, r3
 800e6ce:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e6d2:	b17b      	cbz	r3, 800e6f4 <__mdiff+0x108>
 800e6d4:	6107      	str	r7, [r0, #16]
 800e6d6:	e7a3      	b.n	800e620 <__mdiff+0x34>
 800e6d8:	f856 8b04 	ldr.w	r8, [r6], #4
 800e6dc:	fa11 f288 	uxtah	r2, r1, r8
 800e6e0:	1414      	asrs	r4, r2, #16
 800e6e2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e6e6:	b292      	uxth	r2, r2
 800e6e8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e6ec:	f84e 2b04 	str.w	r2, [lr], #4
 800e6f0:	1421      	asrs	r1, r4, #16
 800e6f2:	e7e0      	b.n	800e6b6 <__mdiff+0xca>
 800e6f4:	3f01      	subs	r7, #1
 800e6f6:	e7ea      	b.n	800e6ce <__mdiff+0xe2>
 800e6f8:	08011013 	.word	0x08011013
 800e6fc:	08011024 	.word	0x08011024

0800e700 <__d2b>:
 800e700:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e704:	4689      	mov	r9, r1
 800e706:	2101      	movs	r1, #1
 800e708:	ec57 6b10 	vmov	r6, r7, d0
 800e70c:	4690      	mov	r8, r2
 800e70e:	f7ff fccf 	bl	800e0b0 <_Balloc>
 800e712:	4604      	mov	r4, r0
 800e714:	b930      	cbnz	r0, 800e724 <__d2b+0x24>
 800e716:	4602      	mov	r2, r0
 800e718:	4b25      	ldr	r3, [pc, #148]	; (800e7b0 <__d2b+0xb0>)
 800e71a:	4826      	ldr	r0, [pc, #152]	; (800e7b4 <__d2b+0xb4>)
 800e71c:	f240 310a 	movw	r1, #778	; 0x30a
 800e720:	f000 faac 	bl	800ec7c <__assert_func>
 800e724:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e728:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e72c:	bb35      	cbnz	r5, 800e77c <__d2b+0x7c>
 800e72e:	2e00      	cmp	r6, #0
 800e730:	9301      	str	r3, [sp, #4]
 800e732:	d028      	beq.n	800e786 <__d2b+0x86>
 800e734:	4668      	mov	r0, sp
 800e736:	9600      	str	r6, [sp, #0]
 800e738:	f7ff fd82 	bl	800e240 <__lo0bits>
 800e73c:	9900      	ldr	r1, [sp, #0]
 800e73e:	b300      	cbz	r0, 800e782 <__d2b+0x82>
 800e740:	9a01      	ldr	r2, [sp, #4]
 800e742:	f1c0 0320 	rsb	r3, r0, #32
 800e746:	fa02 f303 	lsl.w	r3, r2, r3
 800e74a:	430b      	orrs	r3, r1
 800e74c:	40c2      	lsrs	r2, r0
 800e74e:	6163      	str	r3, [r4, #20]
 800e750:	9201      	str	r2, [sp, #4]
 800e752:	9b01      	ldr	r3, [sp, #4]
 800e754:	61a3      	str	r3, [r4, #24]
 800e756:	2b00      	cmp	r3, #0
 800e758:	bf14      	ite	ne
 800e75a:	2202      	movne	r2, #2
 800e75c:	2201      	moveq	r2, #1
 800e75e:	6122      	str	r2, [r4, #16]
 800e760:	b1d5      	cbz	r5, 800e798 <__d2b+0x98>
 800e762:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e766:	4405      	add	r5, r0
 800e768:	f8c9 5000 	str.w	r5, [r9]
 800e76c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e770:	f8c8 0000 	str.w	r0, [r8]
 800e774:	4620      	mov	r0, r4
 800e776:	b003      	add	sp, #12
 800e778:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e77c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e780:	e7d5      	b.n	800e72e <__d2b+0x2e>
 800e782:	6161      	str	r1, [r4, #20]
 800e784:	e7e5      	b.n	800e752 <__d2b+0x52>
 800e786:	a801      	add	r0, sp, #4
 800e788:	f7ff fd5a 	bl	800e240 <__lo0bits>
 800e78c:	9b01      	ldr	r3, [sp, #4]
 800e78e:	6163      	str	r3, [r4, #20]
 800e790:	2201      	movs	r2, #1
 800e792:	6122      	str	r2, [r4, #16]
 800e794:	3020      	adds	r0, #32
 800e796:	e7e3      	b.n	800e760 <__d2b+0x60>
 800e798:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e79c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e7a0:	f8c9 0000 	str.w	r0, [r9]
 800e7a4:	6918      	ldr	r0, [r3, #16]
 800e7a6:	f7ff fd2b 	bl	800e200 <__hi0bits>
 800e7aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e7ae:	e7df      	b.n	800e770 <__d2b+0x70>
 800e7b0:	08011013 	.word	0x08011013
 800e7b4:	08011024 	.word	0x08011024

0800e7b8 <_calloc_r>:
 800e7b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e7ba:	fba1 2402 	umull	r2, r4, r1, r2
 800e7be:	b94c      	cbnz	r4, 800e7d4 <_calloc_r+0x1c>
 800e7c0:	4611      	mov	r1, r2
 800e7c2:	9201      	str	r2, [sp, #4]
 800e7c4:	f000 f87a 	bl	800e8bc <_malloc_r>
 800e7c8:	9a01      	ldr	r2, [sp, #4]
 800e7ca:	4605      	mov	r5, r0
 800e7cc:	b930      	cbnz	r0, 800e7dc <_calloc_r+0x24>
 800e7ce:	4628      	mov	r0, r5
 800e7d0:	b003      	add	sp, #12
 800e7d2:	bd30      	pop	{r4, r5, pc}
 800e7d4:	220c      	movs	r2, #12
 800e7d6:	6002      	str	r2, [r0, #0]
 800e7d8:	2500      	movs	r5, #0
 800e7da:	e7f8      	b.n	800e7ce <_calloc_r+0x16>
 800e7dc:	4621      	mov	r1, r4
 800e7de:	f7fe f941 	bl	800ca64 <memset>
 800e7e2:	e7f4      	b.n	800e7ce <_calloc_r+0x16>

0800e7e4 <_free_r>:
 800e7e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e7e6:	2900      	cmp	r1, #0
 800e7e8:	d044      	beq.n	800e874 <_free_r+0x90>
 800e7ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e7ee:	9001      	str	r0, [sp, #4]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	f1a1 0404 	sub.w	r4, r1, #4
 800e7f6:	bfb8      	it	lt
 800e7f8:	18e4      	addlt	r4, r4, r3
 800e7fa:	f000 fa81 	bl	800ed00 <__malloc_lock>
 800e7fe:	4a1e      	ldr	r2, [pc, #120]	; (800e878 <_free_r+0x94>)
 800e800:	9801      	ldr	r0, [sp, #4]
 800e802:	6813      	ldr	r3, [r2, #0]
 800e804:	b933      	cbnz	r3, 800e814 <_free_r+0x30>
 800e806:	6063      	str	r3, [r4, #4]
 800e808:	6014      	str	r4, [r2, #0]
 800e80a:	b003      	add	sp, #12
 800e80c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e810:	f000 ba7c 	b.w	800ed0c <__malloc_unlock>
 800e814:	42a3      	cmp	r3, r4
 800e816:	d908      	bls.n	800e82a <_free_r+0x46>
 800e818:	6825      	ldr	r5, [r4, #0]
 800e81a:	1961      	adds	r1, r4, r5
 800e81c:	428b      	cmp	r3, r1
 800e81e:	bf01      	itttt	eq
 800e820:	6819      	ldreq	r1, [r3, #0]
 800e822:	685b      	ldreq	r3, [r3, #4]
 800e824:	1949      	addeq	r1, r1, r5
 800e826:	6021      	streq	r1, [r4, #0]
 800e828:	e7ed      	b.n	800e806 <_free_r+0x22>
 800e82a:	461a      	mov	r2, r3
 800e82c:	685b      	ldr	r3, [r3, #4]
 800e82e:	b10b      	cbz	r3, 800e834 <_free_r+0x50>
 800e830:	42a3      	cmp	r3, r4
 800e832:	d9fa      	bls.n	800e82a <_free_r+0x46>
 800e834:	6811      	ldr	r1, [r2, #0]
 800e836:	1855      	adds	r5, r2, r1
 800e838:	42a5      	cmp	r5, r4
 800e83a:	d10b      	bne.n	800e854 <_free_r+0x70>
 800e83c:	6824      	ldr	r4, [r4, #0]
 800e83e:	4421      	add	r1, r4
 800e840:	1854      	adds	r4, r2, r1
 800e842:	42a3      	cmp	r3, r4
 800e844:	6011      	str	r1, [r2, #0]
 800e846:	d1e0      	bne.n	800e80a <_free_r+0x26>
 800e848:	681c      	ldr	r4, [r3, #0]
 800e84a:	685b      	ldr	r3, [r3, #4]
 800e84c:	6053      	str	r3, [r2, #4]
 800e84e:	4421      	add	r1, r4
 800e850:	6011      	str	r1, [r2, #0]
 800e852:	e7da      	b.n	800e80a <_free_r+0x26>
 800e854:	d902      	bls.n	800e85c <_free_r+0x78>
 800e856:	230c      	movs	r3, #12
 800e858:	6003      	str	r3, [r0, #0]
 800e85a:	e7d6      	b.n	800e80a <_free_r+0x26>
 800e85c:	6825      	ldr	r5, [r4, #0]
 800e85e:	1961      	adds	r1, r4, r5
 800e860:	428b      	cmp	r3, r1
 800e862:	bf04      	itt	eq
 800e864:	6819      	ldreq	r1, [r3, #0]
 800e866:	685b      	ldreq	r3, [r3, #4]
 800e868:	6063      	str	r3, [r4, #4]
 800e86a:	bf04      	itt	eq
 800e86c:	1949      	addeq	r1, r1, r5
 800e86e:	6021      	streq	r1, [r4, #0]
 800e870:	6054      	str	r4, [r2, #4]
 800e872:	e7ca      	b.n	800e80a <_free_r+0x26>
 800e874:	b003      	add	sp, #12
 800e876:	bd30      	pop	{r4, r5, pc}
 800e878:	2000b1ec 	.word	0x2000b1ec

0800e87c <sbrk_aligned>:
 800e87c:	b570      	push	{r4, r5, r6, lr}
 800e87e:	4e0e      	ldr	r6, [pc, #56]	; (800e8b8 <sbrk_aligned+0x3c>)
 800e880:	460c      	mov	r4, r1
 800e882:	6831      	ldr	r1, [r6, #0]
 800e884:	4605      	mov	r5, r0
 800e886:	b911      	cbnz	r1, 800e88e <sbrk_aligned+0x12>
 800e888:	f000 f9e8 	bl	800ec5c <_sbrk_r>
 800e88c:	6030      	str	r0, [r6, #0]
 800e88e:	4621      	mov	r1, r4
 800e890:	4628      	mov	r0, r5
 800e892:	f000 f9e3 	bl	800ec5c <_sbrk_r>
 800e896:	1c43      	adds	r3, r0, #1
 800e898:	d00a      	beq.n	800e8b0 <sbrk_aligned+0x34>
 800e89a:	1cc4      	adds	r4, r0, #3
 800e89c:	f024 0403 	bic.w	r4, r4, #3
 800e8a0:	42a0      	cmp	r0, r4
 800e8a2:	d007      	beq.n	800e8b4 <sbrk_aligned+0x38>
 800e8a4:	1a21      	subs	r1, r4, r0
 800e8a6:	4628      	mov	r0, r5
 800e8a8:	f000 f9d8 	bl	800ec5c <_sbrk_r>
 800e8ac:	3001      	adds	r0, #1
 800e8ae:	d101      	bne.n	800e8b4 <sbrk_aligned+0x38>
 800e8b0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e8b4:	4620      	mov	r0, r4
 800e8b6:	bd70      	pop	{r4, r5, r6, pc}
 800e8b8:	2000b1f0 	.word	0x2000b1f0

0800e8bc <_malloc_r>:
 800e8bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8c0:	1ccd      	adds	r5, r1, #3
 800e8c2:	f025 0503 	bic.w	r5, r5, #3
 800e8c6:	3508      	adds	r5, #8
 800e8c8:	2d0c      	cmp	r5, #12
 800e8ca:	bf38      	it	cc
 800e8cc:	250c      	movcc	r5, #12
 800e8ce:	2d00      	cmp	r5, #0
 800e8d0:	4607      	mov	r7, r0
 800e8d2:	db01      	blt.n	800e8d8 <_malloc_r+0x1c>
 800e8d4:	42a9      	cmp	r1, r5
 800e8d6:	d905      	bls.n	800e8e4 <_malloc_r+0x28>
 800e8d8:	230c      	movs	r3, #12
 800e8da:	603b      	str	r3, [r7, #0]
 800e8dc:	2600      	movs	r6, #0
 800e8de:	4630      	mov	r0, r6
 800e8e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8e4:	4e2e      	ldr	r6, [pc, #184]	; (800e9a0 <_malloc_r+0xe4>)
 800e8e6:	f000 fa0b 	bl	800ed00 <__malloc_lock>
 800e8ea:	6833      	ldr	r3, [r6, #0]
 800e8ec:	461c      	mov	r4, r3
 800e8ee:	bb34      	cbnz	r4, 800e93e <_malloc_r+0x82>
 800e8f0:	4629      	mov	r1, r5
 800e8f2:	4638      	mov	r0, r7
 800e8f4:	f7ff ffc2 	bl	800e87c <sbrk_aligned>
 800e8f8:	1c43      	adds	r3, r0, #1
 800e8fa:	4604      	mov	r4, r0
 800e8fc:	d14d      	bne.n	800e99a <_malloc_r+0xde>
 800e8fe:	6834      	ldr	r4, [r6, #0]
 800e900:	4626      	mov	r6, r4
 800e902:	2e00      	cmp	r6, #0
 800e904:	d140      	bne.n	800e988 <_malloc_r+0xcc>
 800e906:	6823      	ldr	r3, [r4, #0]
 800e908:	4631      	mov	r1, r6
 800e90a:	4638      	mov	r0, r7
 800e90c:	eb04 0803 	add.w	r8, r4, r3
 800e910:	f000 f9a4 	bl	800ec5c <_sbrk_r>
 800e914:	4580      	cmp	r8, r0
 800e916:	d13a      	bne.n	800e98e <_malloc_r+0xd2>
 800e918:	6821      	ldr	r1, [r4, #0]
 800e91a:	3503      	adds	r5, #3
 800e91c:	1a6d      	subs	r5, r5, r1
 800e91e:	f025 0503 	bic.w	r5, r5, #3
 800e922:	3508      	adds	r5, #8
 800e924:	2d0c      	cmp	r5, #12
 800e926:	bf38      	it	cc
 800e928:	250c      	movcc	r5, #12
 800e92a:	4629      	mov	r1, r5
 800e92c:	4638      	mov	r0, r7
 800e92e:	f7ff ffa5 	bl	800e87c <sbrk_aligned>
 800e932:	3001      	adds	r0, #1
 800e934:	d02b      	beq.n	800e98e <_malloc_r+0xd2>
 800e936:	6823      	ldr	r3, [r4, #0]
 800e938:	442b      	add	r3, r5
 800e93a:	6023      	str	r3, [r4, #0]
 800e93c:	e00e      	b.n	800e95c <_malloc_r+0xa0>
 800e93e:	6822      	ldr	r2, [r4, #0]
 800e940:	1b52      	subs	r2, r2, r5
 800e942:	d41e      	bmi.n	800e982 <_malloc_r+0xc6>
 800e944:	2a0b      	cmp	r2, #11
 800e946:	d916      	bls.n	800e976 <_malloc_r+0xba>
 800e948:	1961      	adds	r1, r4, r5
 800e94a:	42a3      	cmp	r3, r4
 800e94c:	6025      	str	r5, [r4, #0]
 800e94e:	bf18      	it	ne
 800e950:	6059      	strne	r1, [r3, #4]
 800e952:	6863      	ldr	r3, [r4, #4]
 800e954:	bf08      	it	eq
 800e956:	6031      	streq	r1, [r6, #0]
 800e958:	5162      	str	r2, [r4, r5]
 800e95a:	604b      	str	r3, [r1, #4]
 800e95c:	4638      	mov	r0, r7
 800e95e:	f104 060b 	add.w	r6, r4, #11
 800e962:	f000 f9d3 	bl	800ed0c <__malloc_unlock>
 800e966:	f026 0607 	bic.w	r6, r6, #7
 800e96a:	1d23      	adds	r3, r4, #4
 800e96c:	1af2      	subs	r2, r6, r3
 800e96e:	d0b6      	beq.n	800e8de <_malloc_r+0x22>
 800e970:	1b9b      	subs	r3, r3, r6
 800e972:	50a3      	str	r3, [r4, r2]
 800e974:	e7b3      	b.n	800e8de <_malloc_r+0x22>
 800e976:	6862      	ldr	r2, [r4, #4]
 800e978:	42a3      	cmp	r3, r4
 800e97a:	bf0c      	ite	eq
 800e97c:	6032      	streq	r2, [r6, #0]
 800e97e:	605a      	strne	r2, [r3, #4]
 800e980:	e7ec      	b.n	800e95c <_malloc_r+0xa0>
 800e982:	4623      	mov	r3, r4
 800e984:	6864      	ldr	r4, [r4, #4]
 800e986:	e7b2      	b.n	800e8ee <_malloc_r+0x32>
 800e988:	4634      	mov	r4, r6
 800e98a:	6876      	ldr	r6, [r6, #4]
 800e98c:	e7b9      	b.n	800e902 <_malloc_r+0x46>
 800e98e:	230c      	movs	r3, #12
 800e990:	603b      	str	r3, [r7, #0]
 800e992:	4638      	mov	r0, r7
 800e994:	f000 f9ba 	bl	800ed0c <__malloc_unlock>
 800e998:	e7a1      	b.n	800e8de <_malloc_r+0x22>
 800e99a:	6025      	str	r5, [r4, #0]
 800e99c:	e7de      	b.n	800e95c <_malloc_r+0xa0>
 800e99e:	bf00      	nop
 800e9a0:	2000b1ec 	.word	0x2000b1ec

0800e9a4 <__ssputs_r>:
 800e9a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e9a8:	688e      	ldr	r6, [r1, #8]
 800e9aa:	429e      	cmp	r6, r3
 800e9ac:	4682      	mov	sl, r0
 800e9ae:	460c      	mov	r4, r1
 800e9b0:	4690      	mov	r8, r2
 800e9b2:	461f      	mov	r7, r3
 800e9b4:	d838      	bhi.n	800ea28 <__ssputs_r+0x84>
 800e9b6:	898a      	ldrh	r2, [r1, #12]
 800e9b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e9bc:	d032      	beq.n	800ea24 <__ssputs_r+0x80>
 800e9be:	6825      	ldr	r5, [r4, #0]
 800e9c0:	6909      	ldr	r1, [r1, #16]
 800e9c2:	eba5 0901 	sub.w	r9, r5, r1
 800e9c6:	6965      	ldr	r5, [r4, #20]
 800e9c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e9cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e9d0:	3301      	adds	r3, #1
 800e9d2:	444b      	add	r3, r9
 800e9d4:	106d      	asrs	r5, r5, #1
 800e9d6:	429d      	cmp	r5, r3
 800e9d8:	bf38      	it	cc
 800e9da:	461d      	movcc	r5, r3
 800e9dc:	0553      	lsls	r3, r2, #21
 800e9de:	d531      	bpl.n	800ea44 <__ssputs_r+0xa0>
 800e9e0:	4629      	mov	r1, r5
 800e9e2:	f7ff ff6b 	bl	800e8bc <_malloc_r>
 800e9e6:	4606      	mov	r6, r0
 800e9e8:	b950      	cbnz	r0, 800ea00 <__ssputs_r+0x5c>
 800e9ea:	230c      	movs	r3, #12
 800e9ec:	f8ca 3000 	str.w	r3, [sl]
 800e9f0:	89a3      	ldrh	r3, [r4, #12]
 800e9f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e9f6:	81a3      	strh	r3, [r4, #12]
 800e9f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e9fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea00:	6921      	ldr	r1, [r4, #16]
 800ea02:	464a      	mov	r2, r9
 800ea04:	f7ff fb46 	bl	800e094 <memcpy>
 800ea08:	89a3      	ldrh	r3, [r4, #12]
 800ea0a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ea0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ea12:	81a3      	strh	r3, [r4, #12]
 800ea14:	6126      	str	r6, [r4, #16]
 800ea16:	6165      	str	r5, [r4, #20]
 800ea18:	444e      	add	r6, r9
 800ea1a:	eba5 0509 	sub.w	r5, r5, r9
 800ea1e:	6026      	str	r6, [r4, #0]
 800ea20:	60a5      	str	r5, [r4, #8]
 800ea22:	463e      	mov	r6, r7
 800ea24:	42be      	cmp	r6, r7
 800ea26:	d900      	bls.n	800ea2a <__ssputs_r+0x86>
 800ea28:	463e      	mov	r6, r7
 800ea2a:	6820      	ldr	r0, [r4, #0]
 800ea2c:	4632      	mov	r2, r6
 800ea2e:	4641      	mov	r1, r8
 800ea30:	f7fd fffe 	bl	800ca30 <memmove>
 800ea34:	68a3      	ldr	r3, [r4, #8]
 800ea36:	1b9b      	subs	r3, r3, r6
 800ea38:	60a3      	str	r3, [r4, #8]
 800ea3a:	6823      	ldr	r3, [r4, #0]
 800ea3c:	4433      	add	r3, r6
 800ea3e:	6023      	str	r3, [r4, #0]
 800ea40:	2000      	movs	r0, #0
 800ea42:	e7db      	b.n	800e9fc <__ssputs_r+0x58>
 800ea44:	462a      	mov	r2, r5
 800ea46:	f000 f967 	bl	800ed18 <_realloc_r>
 800ea4a:	4606      	mov	r6, r0
 800ea4c:	2800      	cmp	r0, #0
 800ea4e:	d1e1      	bne.n	800ea14 <__ssputs_r+0x70>
 800ea50:	6921      	ldr	r1, [r4, #16]
 800ea52:	4650      	mov	r0, sl
 800ea54:	f7ff fec6 	bl	800e7e4 <_free_r>
 800ea58:	e7c7      	b.n	800e9ea <__ssputs_r+0x46>
	...

0800ea5c <_svfiprintf_r>:
 800ea5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea60:	4698      	mov	r8, r3
 800ea62:	898b      	ldrh	r3, [r1, #12]
 800ea64:	061b      	lsls	r3, r3, #24
 800ea66:	b09d      	sub	sp, #116	; 0x74
 800ea68:	4607      	mov	r7, r0
 800ea6a:	460d      	mov	r5, r1
 800ea6c:	4614      	mov	r4, r2
 800ea6e:	d50e      	bpl.n	800ea8e <_svfiprintf_r+0x32>
 800ea70:	690b      	ldr	r3, [r1, #16]
 800ea72:	b963      	cbnz	r3, 800ea8e <_svfiprintf_r+0x32>
 800ea74:	2140      	movs	r1, #64	; 0x40
 800ea76:	f7ff ff21 	bl	800e8bc <_malloc_r>
 800ea7a:	6028      	str	r0, [r5, #0]
 800ea7c:	6128      	str	r0, [r5, #16]
 800ea7e:	b920      	cbnz	r0, 800ea8a <_svfiprintf_r+0x2e>
 800ea80:	230c      	movs	r3, #12
 800ea82:	603b      	str	r3, [r7, #0]
 800ea84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ea88:	e0d1      	b.n	800ec2e <_svfiprintf_r+0x1d2>
 800ea8a:	2340      	movs	r3, #64	; 0x40
 800ea8c:	616b      	str	r3, [r5, #20]
 800ea8e:	2300      	movs	r3, #0
 800ea90:	9309      	str	r3, [sp, #36]	; 0x24
 800ea92:	2320      	movs	r3, #32
 800ea94:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ea98:	f8cd 800c 	str.w	r8, [sp, #12]
 800ea9c:	2330      	movs	r3, #48	; 0x30
 800ea9e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ec48 <_svfiprintf_r+0x1ec>
 800eaa2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eaa6:	f04f 0901 	mov.w	r9, #1
 800eaaa:	4623      	mov	r3, r4
 800eaac:	469a      	mov	sl, r3
 800eaae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eab2:	b10a      	cbz	r2, 800eab8 <_svfiprintf_r+0x5c>
 800eab4:	2a25      	cmp	r2, #37	; 0x25
 800eab6:	d1f9      	bne.n	800eaac <_svfiprintf_r+0x50>
 800eab8:	ebba 0b04 	subs.w	fp, sl, r4
 800eabc:	d00b      	beq.n	800ead6 <_svfiprintf_r+0x7a>
 800eabe:	465b      	mov	r3, fp
 800eac0:	4622      	mov	r2, r4
 800eac2:	4629      	mov	r1, r5
 800eac4:	4638      	mov	r0, r7
 800eac6:	f7ff ff6d 	bl	800e9a4 <__ssputs_r>
 800eaca:	3001      	adds	r0, #1
 800eacc:	f000 80aa 	beq.w	800ec24 <_svfiprintf_r+0x1c8>
 800ead0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ead2:	445a      	add	r2, fp
 800ead4:	9209      	str	r2, [sp, #36]	; 0x24
 800ead6:	f89a 3000 	ldrb.w	r3, [sl]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	f000 80a2 	beq.w	800ec24 <_svfiprintf_r+0x1c8>
 800eae0:	2300      	movs	r3, #0
 800eae2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eae6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eaea:	f10a 0a01 	add.w	sl, sl, #1
 800eaee:	9304      	str	r3, [sp, #16]
 800eaf0:	9307      	str	r3, [sp, #28]
 800eaf2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eaf6:	931a      	str	r3, [sp, #104]	; 0x68
 800eaf8:	4654      	mov	r4, sl
 800eafa:	2205      	movs	r2, #5
 800eafc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb00:	4851      	ldr	r0, [pc, #324]	; (800ec48 <_svfiprintf_r+0x1ec>)
 800eb02:	f7f1 fb6d 	bl	80001e0 <memchr>
 800eb06:	9a04      	ldr	r2, [sp, #16]
 800eb08:	b9d8      	cbnz	r0, 800eb42 <_svfiprintf_r+0xe6>
 800eb0a:	06d0      	lsls	r0, r2, #27
 800eb0c:	bf44      	itt	mi
 800eb0e:	2320      	movmi	r3, #32
 800eb10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eb14:	0711      	lsls	r1, r2, #28
 800eb16:	bf44      	itt	mi
 800eb18:	232b      	movmi	r3, #43	; 0x2b
 800eb1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eb1e:	f89a 3000 	ldrb.w	r3, [sl]
 800eb22:	2b2a      	cmp	r3, #42	; 0x2a
 800eb24:	d015      	beq.n	800eb52 <_svfiprintf_r+0xf6>
 800eb26:	9a07      	ldr	r2, [sp, #28]
 800eb28:	4654      	mov	r4, sl
 800eb2a:	2000      	movs	r0, #0
 800eb2c:	f04f 0c0a 	mov.w	ip, #10
 800eb30:	4621      	mov	r1, r4
 800eb32:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eb36:	3b30      	subs	r3, #48	; 0x30
 800eb38:	2b09      	cmp	r3, #9
 800eb3a:	d94e      	bls.n	800ebda <_svfiprintf_r+0x17e>
 800eb3c:	b1b0      	cbz	r0, 800eb6c <_svfiprintf_r+0x110>
 800eb3e:	9207      	str	r2, [sp, #28]
 800eb40:	e014      	b.n	800eb6c <_svfiprintf_r+0x110>
 800eb42:	eba0 0308 	sub.w	r3, r0, r8
 800eb46:	fa09 f303 	lsl.w	r3, r9, r3
 800eb4a:	4313      	orrs	r3, r2
 800eb4c:	9304      	str	r3, [sp, #16]
 800eb4e:	46a2      	mov	sl, r4
 800eb50:	e7d2      	b.n	800eaf8 <_svfiprintf_r+0x9c>
 800eb52:	9b03      	ldr	r3, [sp, #12]
 800eb54:	1d19      	adds	r1, r3, #4
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	9103      	str	r1, [sp, #12]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	bfbb      	ittet	lt
 800eb5e:	425b      	neglt	r3, r3
 800eb60:	f042 0202 	orrlt.w	r2, r2, #2
 800eb64:	9307      	strge	r3, [sp, #28]
 800eb66:	9307      	strlt	r3, [sp, #28]
 800eb68:	bfb8      	it	lt
 800eb6a:	9204      	strlt	r2, [sp, #16]
 800eb6c:	7823      	ldrb	r3, [r4, #0]
 800eb6e:	2b2e      	cmp	r3, #46	; 0x2e
 800eb70:	d10c      	bne.n	800eb8c <_svfiprintf_r+0x130>
 800eb72:	7863      	ldrb	r3, [r4, #1]
 800eb74:	2b2a      	cmp	r3, #42	; 0x2a
 800eb76:	d135      	bne.n	800ebe4 <_svfiprintf_r+0x188>
 800eb78:	9b03      	ldr	r3, [sp, #12]
 800eb7a:	1d1a      	adds	r2, r3, #4
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	9203      	str	r2, [sp, #12]
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	bfb8      	it	lt
 800eb84:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800eb88:	3402      	adds	r4, #2
 800eb8a:	9305      	str	r3, [sp, #20]
 800eb8c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ec58 <_svfiprintf_r+0x1fc>
 800eb90:	7821      	ldrb	r1, [r4, #0]
 800eb92:	2203      	movs	r2, #3
 800eb94:	4650      	mov	r0, sl
 800eb96:	f7f1 fb23 	bl	80001e0 <memchr>
 800eb9a:	b140      	cbz	r0, 800ebae <_svfiprintf_r+0x152>
 800eb9c:	2340      	movs	r3, #64	; 0x40
 800eb9e:	eba0 000a 	sub.w	r0, r0, sl
 800eba2:	fa03 f000 	lsl.w	r0, r3, r0
 800eba6:	9b04      	ldr	r3, [sp, #16]
 800eba8:	4303      	orrs	r3, r0
 800ebaa:	3401      	adds	r4, #1
 800ebac:	9304      	str	r3, [sp, #16]
 800ebae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ebb2:	4826      	ldr	r0, [pc, #152]	; (800ec4c <_svfiprintf_r+0x1f0>)
 800ebb4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ebb8:	2206      	movs	r2, #6
 800ebba:	f7f1 fb11 	bl	80001e0 <memchr>
 800ebbe:	2800      	cmp	r0, #0
 800ebc0:	d038      	beq.n	800ec34 <_svfiprintf_r+0x1d8>
 800ebc2:	4b23      	ldr	r3, [pc, #140]	; (800ec50 <_svfiprintf_r+0x1f4>)
 800ebc4:	bb1b      	cbnz	r3, 800ec0e <_svfiprintf_r+0x1b2>
 800ebc6:	9b03      	ldr	r3, [sp, #12]
 800ebc8:	3307      	adds	r3, #7
 800ebca:	f023 0307 	bic.w	r3, r3, #7
 800ebce:	3308      	adds	r3, #8
 800ebd0:	9303      	str	r3, [sp, #12]
 800ebd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ebd4:	4433      	add	r3, r6
 800ebd6:	9309      	str	r3, [sp, #36]	; 0x24
 800ebd8:	e767      	b.n	800eaaa <_svfiprintf_r+0x4e>
 800ebda:	fb0c 3202 	mla	r2, ip, r2, r3
 800ebde:	460c      	mov	r4, r1
 800ebe0:	2001      	movs	r0, #1
 800ebe2:	e7a5      	b.n	800eb30 <_svfiprintf_r+0xd4>
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	3401      	adds	r4, #1
 800ebe8:	9305      	str	r3, [sp, #20]
 800ebea:	4619      	mov	r1, r3
 800ebec:	f04f 0c0a 	mov.w	ip, #10
 800ebf0:	4620      	mov	r0, r4
 800ebf2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ebf6:	3a30      	subs	r2, #48	; 0x30
 800ebf8:	2a09      	cmp	r2, #9
 800ebfa:	d903      	bls.n	800ec04 <_svfiprintf_r+0x1a8>
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d0c5      	beq.n	800eb8c <_svfiprintf_r+0x130>
 800ec00:	9105      	str	r1, [sp, #20]
 800ec02:	e7c3      	b.n	800eb8c <_svfiprintf_r+0x130>
 800ec04:	fb0c 2101 	mla	r1, ip, r1, r2
 800ec08:	4604      	mov	r4, r0
 800ec0a:	2301      	movs	r3, #1
 800ec0c:	e7f0      	b.n	800ebf0 <_svfiprintf_r+0x194>
 800ec0e:	ab03      	add	r3, sp, #12
 800ec10:	9300      	str	r3, [sp, #0]
 800ec12:	462a      	mov	r2, r5
 800ec14:	4b0f      	ldr	r3, [pc, #60]	; (800ec54 <_svfiprintf_r+0x1f8>)
 800ec16:	a904      	add	r1, sp, #16
 800ec18:	4638      	mov	r0, r7
 800ec1a:	f7fd ffcb 	bl	800cbb4 <_printf_float>
 800ec1e:	1c42      	adds	r2, r0, #1
 800ec20:	4606      	mov	r6, r0
 800ec22:	d1d6      	bne.n	800ebd2 <_svfiprintf_r+0x176>
 800ec24:	89ab      	ldrh	r3, [r5, #12]
 800ec26:	065b      	lsls	r3, r3, #25
 800ec28:	f53f af2c 	bmi.w	800ea84 <_svfiprintf_r+0x28>
 800ec2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ec2e:	b01d      	add	sp, #116	; 0x74
 800ec30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec34:	ab03      	add	r3, sp, #12
 800ec36:	9300      	str	r3, [sp, #0]
 800ec38:	462a      	mov	r2, r5
 800ec3a:	4b06      	ldr	r3, [pc, #24]	; (800ec54 <_svfiprintf_r+0x1f8>)
 800ec3c:	a904      	add	r1, sp, #16
 800ec3e:	4638      	mov	r0, r7
 800ec40:	f7fe fa5c 	bl	800d0fc <_printf_i>
 800ec44:	e7eb      	b.n	800ec1e <_svfiprintf_r+0x1c2>
 800ec46:	bf00      	nop
 800ec48:	0801117c 	.word	0x0801117c
 800ec4c:	08011186 	.word	0x08011186
 800ec50:	0800cbb5 	.word	0x0800cbb5
 800ec54:	0800e9a5 	.word	0x0800e9a5
 800ec58:	08011182 	.word	0x08011182

0800ec5c <_sbrk_r>:
 800ec5c:	b538      	push	{r3, r4, r5, lr}
 800ec5e:	4d06      	ldr	r5, [pc, #24]	; (800ec78 <_sbrk_r+0x1c>)
 800ec60:	2300      	movs	r3, #0
 800ec62:	4604      	mov	r4, r0
 800ec64:	4608      	mov	r0, r1
 800ec66:	602b      	str	r3, [r5, #0]
 800ec68:	f7f3 ff3e 	bl	8002ae8 <_sbrk>
 800ec6c:	1c43      	adds	r3, r0, #1
 800ec6e:	d102      	bne.n	800ec76 <_sbrk_r+0x1a>
 800ec70:	682b      	ldr	r3, [r5, #0]
 800ec72:	b103      	cbz	r3, 800ec76 <_sbrk_r+0x1a>
 800ec74:	6023      	str	r3, [r4, #0]
 800ec76:	bd38      	pop	{r3, r4, r5, pc}
 800ec78:	2000b1f4 	.word	0x2000b1f4

0800ec7c <__assert_func>:
 800ec7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ec7e:	4614      	mov	r4, r2
 800ec80:	461a      	mov	r2, r3
 800ec82:	4b09      	ldr	r3, [pc, #36]	; (800eca8 <__assert_func+0x2c>)
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	4605      	mov	r5, r0
 800ec88:	68d8      	ldr	r0, [r3, #12]
 800ec8a:	b14c      	cbz	r4, 800eca0 <__assert_func+0x24>
 800ec8c:	4b07      	ldr	r3, [pc, #28]	; (800ecac <__assert_func+0x30>)
 800ec8e:	9100      	str	r1, [sp, #0]
 800ec90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ec94:	4906      	ldr	r1, [pc, #24]	; (800ecb0 <__assert_func+0x34>)
 800ec96:	462b      	mov	r3, r5
 800ec98:	f000 f80e 	bl	800ecb8 <fiprintf>
 800ec9c:	f000 fa92 	bl	800f1c4 <abort>
 800eca0:	4b04      	ldr	r3, [pc, #16]	; (800ecb4 <__assert_func+0x38>)
 800eca2:	461c      	mov	r4, r3
 800eca4:	e7f3      	b.n	800ec8e <__assert_func+0x12>
 800eca6:	bf00      	nop
 800eca8:	200001b4 	.word	0x200001b4
 800ecac:	0801118d 	.word	0x0801118d
 800ecb0:	0801119a 	.word	0x0801119a
 800ecb4:	080111c8 	.word	0x080111c8

0800ecb8 <fiprintf>:
 800ecb8:	b40e      	push	{r1, r2, r3}
 800ecba:	b503      	push	{r0, r1, lr}
 800ecbc:	4601      	mov	r1, r0
 800ecbe:	ab03      	add	r3, sp, #12
 800ecc0:	4805      	ldr	r0, [pc, #20]	; (800ecd8 <fiprintf+0x20>)
 800ecc2:	f853 2b04 	ldr.w	r2, [r3], #4
 800ecc6:	6800      	ldr	r0, [r0, #0]
 800ecc8:	9301      	str	r3, [sp, #4]
 800ecca:	f000 f87d 	bl	800edc8 <_vfiprintf_r>
 800ecce:	b002      	add	sp, #8
 800ecd0:	f85d eb04 	ldr.w	lr, [sp], #4
 800ecd4:	b003      	add	sp, #12
 800ecd6:	4770      	bx	lr
 800ecd8:	200001b4 	.word	0x200001b4

0800ecdc <__ascii_mbtowc>:
 800ecdc:	b082      	sub	sp, #8
 800ecde:	b901      	cbnz	r1, 800ece2 <__ascii_mbtowc+0x6>
 800ece0:	a901      	add	r1, sp, #4
 800ece2:	b142      	cbz	r2, 800ecf6 <__ascii_mbtowc+0x1a>
 800ece4:	b14b      	cbz	r3, 800ecfa <__ascii_mbtowc+0x1e>
 800ece6:	7813      	ldrb	r3, [r2, #0]
 800ece8:	600b      	str	r3, [r1, #0]
 800ecea:	7812      	ldrb	r2, [r2, #0]
 800ecec:	1e10      	subs	r0, r2, #0
 800ecee:	bf18      	it	ne
 800ecf0:	2001      	movne	r0, #1
 800ecf2:	b002      	add	sp, #8
 800ecf4:	4770      	bx	lr
 800ecf6:	4610      	mov	r0, r2
 800ecf8:	e7fb      	b.n	800ecf2 <__ascii_mbtowc+0x16>
 800ecfa:	f06f 0001 	mvn.w	r0, #1
 800ecfe:	e7f8      	b.n	800ecf2 <__ascii_mbtowc+0x16>

0800ed00 <__malloc_lock>:
 800ed00:	4801      	ldr	r0, [pc, #4]	; (800ed08 <__malloc_lock+0x8>)
 800ed02:	f000 bc1f 	b.w	800f544 <__retarget_lock_acquire_recursive>
 800ed06:	bf00      	nop
 800ed08:	2000b1f8 	.word	0x2000b1f8

0800ed0c <__malloc_unlock>:
 800ed0c:	4801      	ldr	r0, [pc, #4]	; (800ed14 <__malloc_unlock+0x8>)
 800ed0e:	f000 bc1a 	b.w	800f546 <__retarget_lock_release_recursive>
 800ed12:	bf00      	nop
 800ed14:	2000b1f8 	.word	0x2000b1f8

0800ed18 <_realloc_r>:
 800ed18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed1c:	4680      	mov	r8, r0
 800ed1e:	4614      	mov	r4, r2
 800ed20:	460e      	mov	r6, r1
 800ed22:	b921      	cbnz	r1, 800ed2e <_realloc_r+0x16>
 800ed24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ed28:	4611      	mov	r1, r2
 800ed2a:	f7ff bdc7 	b.w	800e8bc <_malloc_r>
 800ed2e:	b92a      	cbnz	r2, 800ed3c <_realloc_r+0x24>
 800ed30:	f7ff fd58 	bl	800e7e4 <_free_r>
 800ed34:	4625      	mov	r5, r4
 800ed36:	4628      	mov	r0, r5
 800ed38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed3c:	f000 fc6a 	bl	800f614 <_malloc_usable_size_r>
 800ed40:	4284      	cmp	r4, r0
 800ed42:	4607      	mov	r7, r0
 800ed44:	d802      	bhi.n	800ed4c <_realloc_r+0x34>
 800ed46:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ed4a:	d812      	bhi.n	800ed72 <_realloc_r+0x5a>
 800ed4c:	4621      	mov	r1, r4
 800ed4e:	4640      	mov	r0, r8
 800ed50:	f7ff fdb4 	bl	800e8bc <_malloc_r>
 800ed54:	4605      	mov	r5, r0
 800ed56:	2800      	cmp	r0, #0
 800ed58:	d0ed      	beq.n	800ed36 <_realloc_r+0x1e>
 800ed5a:	42bc      	cmp	r4, r7
 800ed5c:	4622      	mov	r2, r4
 800ed5e:	4631      	mov	r1, r6
 800ed60:	bf28      	it	cs
 800ed62:	463a      	movcs	r2, r7
 800ed64:	f7ff f996 	bl	800e094 <memcpy>
 800ed68:	4631      	mov	r1, r6
 800ed6a:	4640      	mov	r0, r8
 800ed6c:	f7ff fd3a 	bl	800e7e4 <_free_r>
 800ed70:	e7e1      	b.n	800ed36 <_realloc_r+0x1e>
 800ed72:	4635      	mov	r5, r6
 800ed74:	e7df      	b.n	800ed36 <_realloc_r+0x1e>

0800ed76 <__sfputc_r>:
 800ed76:	6893      	ldr	r3, [r2, #8]
 800ed78:	3b01      	subs	r3, #1
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	b410      	push	{r4}
 800ed7e:	6093      	str	r3, [r2, #8]
 800ed80:	da08      	bge.n	800ed94 <__sfputc_r+0x1e>
 800ed82:	6994      	ldr	r4, [r2, #24]
 800ed84:	42a3      	cmp	r3, r4
 800ed86:	db01      	blt.n	800ed8c <__sfputc_r+0x16>
 800ed88:	290a      	cmp	r1, #10
 800ed8a:	d103      	bne.n	800ed94 <__sfputc_r+0x1e>
 800ed8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed90:	f000 b94a 	b.w	800f028 <__swbuf_r>
 800ed94:	6813      	ldr	r3, [r2, #0]
 800ed96:	1c58      	adds	r0, r3, #1
 800ed98:	6010      	str	r0, [r2, #0]
 800ed9a:	7019      	strb	r1, [r3, #0]
 800ed9c:	4608      	mov	r0, r1
 800ed9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eda2:	4770      	bx	lr

0800eda4 <__sfputs_r>:
 800eda4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eda6:	4606      	mov	r6, r0
 800eda8:	460f      	mov	r7, r1
 800edaa:	4614      	mov	r4, r2
 800edac:	18d5      	adds	r5, r2, r3
 800edae:	42ac      	cmp	r4, r5
 800edb0:	d101      	bne.n	800edb6 <__sfputs_r+0x12>
 800edb2:	2000      	movs	r0, #0
 800edb4:	e007      	b.n	800edc6 <__sfputs_r+0x22>
 800edb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800edba:	463a      	mov	r2, r7
 800edbc:	4630      	mov	r0, r6
 800edbe:	f7ff ffda 	bl	800ed76 <__sfputc_r>
 800edc2:	1c43      	adds	r3, r0, #1
 800edc4:	d1f3      	bne.n	800edae <__sfputs_r+0xa>
 800edc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800edc8 <_vfiprintf_r>:
 800edc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edcc:	460d      	mov	r5, r1
 800edce:	b09d      	sub	sp, #116	; 0x74
 800edd0:	4614      	mov	r4, r2
 800edd2:	4698      	mov	r8, r3
 800edd4:	4606      	mov	r6, r0
 800edd6:	b118      	cbz	r0, 800ede0 <_vfiprintf_r+0x18>
 800edd8:	6983      	ldr	r3, [r0, #24]
 800edda:	b90b      	cbnz	r3, 800ede0 <_vfiprintf_r+0x18>
 800eddc:	f000 fb14 	bl	800f408 <__sinit>
 800ede0:	4b89      	ldr	r3, [pc, #548]	; (800f008 <_vfiprintf_r+0x240>)
 800ede2:	429d      	cmp	r5, r3
 800ede4:	d11b      	bne.n	800ee1e <_vfiprintf_r+0x56>
 800ede6:	6875      	ldr	r5, [r6, #4]
 800ede8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800edea:	07d9      	lsls	r1, r3, #31
 800edec:	d405      	bmi.n	800edfa <_vfiprintf_r+0x32>
 800edee:	89ab      	ldrh	r3, [r5, #12]
 800edf0:	059a      	lsls	r2, r3, #22
 800edf2:	d402      	bmi.n	800edfa <_vfiprintf_r+0x32>
 800edf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800edf6:	f000 fba5 	bl	800f544 <__retarget_lock_acquire_recursive>
 800edfa:	89ab      	ldrh	r3, [r5, #12]
 800edfc:	071b      	lsls	r3, r3, #28
 800edfe:	d501      	bpl.n	800ee04 <_vfiprintf_r+0x3c>
 800ee00:	692b      	ldr	r3, [r5, #16]
 800ee02:	b9eb      	cbnz	r3, 800ee40 <_vfiprintf_r+0x78>
 800ee04:	4629      	mov	r1, r5
 800ee06:	4630      	mov	r0, r6
 800ee08:	f000 f96e 	bl	800f0e8 <__swsetup_r>
 800ee0c:	b1c0      	cbz	r0, 800ee40 <_vfiprintf_r+0x78>
 800ee0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ee10:	07dc      	lsls	r4, r3, #31
 800ee12:	d50e      	bpl.n	800ee32 <_vfiprintf_r+0x6a>
 800ee14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ee18:	b01d      	add	sp, #116	; 0x74
 800ee1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee1e:	4b7b      	ldr	r3, [pc, #492]	; (800f00c <_vfiprintf_r+0x244>)
 800ee20:	429d      	cmp	r5, r3
 800ee22:	d101      	bne.n	800ee28 <_vfiprintf_r+0x60>
 800ee24:	68b5      	ldr	r5, [r6, #8]
 800ee26:	e7df      	b.n	800ede8 <_vfiprintf_r+0x20>
 800ee28:	4b79      	ldr	r3, [pc, #484]	; (800f010 <_vfiprintf_r+0x248>)
 800ee2a:	429d      	cmp	r5, r3
 800ee2c:	bf08      	it	eq
 800ee2e:	68f5      	ldreq	r5, [r6, #12]
 800ee30:	e7da      	b.n	800ede8 <_vfiprintf_r+0x20>
 800ee32:	89ab      	ldrh	r3, [r5, #12]
 800ee34:	0598      	lsls	r0, r3, #22
 800ee36:	d4ed      	bmi.n	800ee14 <_vfiprintf_r+0x4c>
 800ee38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ee3a:	f000 fb84 	bl	800f546 <__retarget_lock_release_recursive>
 800ee3e:	e7e9      	b.n	800ee14 <_vfiprintf_r+0x4c>
 800ee40:	2300      	movs	r3, #0
 800ee42:	9309      	str	r3, [sp, #36]	; 0x24
 800ee44:	2320      	movs	r3, #32
 800ee46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ee4a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ee4e:	2330      	movs	r3, #48	; 0x30
 800ee50:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f014 <_vfiprintf_r+0x24c>
 800ee54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ee58:	f04f 0901 	mov.w	r9, #1
 800ee5c:	4623      	mov	r3, r4
 800ee5e:	469a      	mov	sl, r3
 800ee60:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ee64:	b10a      	cbz	r2, 800ee6a <_vfiprintf_r+0xa2>
 800ee66:	2a25      	cmp	r2, #37	; 0x25
 800ee68:	d1f9      	bne.n	800ee5e <_vfiprintf_r+0x96>
 800ee6a:	ebba 0b04 	subs.w	fp, sl, r4
 800ee6e:	d00b      	beq.n	800ee88 <_vfiprintf_r+0xc0>
 800ee70:	465b      	mov	r3, fp
 800ee72:	4622      	mov	r2, r4
 800ee74:	4629      	mov	r1, r5
 800ee76:	4630      	mov	r0, r6
 800ee78:	f7ff ff94 	bl	800eda4 <__sfputs_r>
 800ee7c:	3001      	adds	r0, #1
 800ee7e:	f000 80aa 	beq.w	800efd6 <_vfiprintf_r+0x20e>
 800ee82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ee84:	445a      	add	r2, fp
 800ee86:	9209      	str	r2, [sp, #36]	; 0x24
 800ee88:	f89a 3000 	ldrb.w	r3, [sl]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	f000 80a2 	beq.w	800efd6 <_vfiprintf_r+0x20e>
 800ee92:	2300      	movs	r3, #0
 800ee94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ee98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ee9c:	f10a 0a01 	add.w	sl, sl, #1
 800eea0:	9304      	str	r3, [sp, #16]
 800eea2:	9307      	str	r3, [sp, #28]
 800eea4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eea8:	931a      	str	r3, [sp, #104]	; 0x68
 800eeaa:	4654      	mov	r4, sl
 800eeac:	2205      	movs	r2, #5
 800eeae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eeb2:	4858      	ldr	r0, [pc, #352]	; (800f014 <_vfiprintf_r+0x24c>)
 800eeb4:	f7f1 f994 	bl	80001e0 <memchr>
 800eeb8:	9a04      	ldr	r2, [sp, #16]
 800eeba:	b9d8      	cbnz	r0, 800eef4 <_vfiprintf_r+0x12c>
 800eebc:	06d1      	lsls	r1, r2, #27
 800eebe:	bf44      	itt	mi
 800eec0:	2320      	movmi	r3, #32
 800eec2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eec6:	0713      	lsls	r3, r2, #28
 800eec8:	bf44      	itt	mi
 800eeca:	232b      	movmi	r3, #43	; 0x2b
 800eecc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eed0:	f89a 3000 	ldrb.w	r3, [sl]
 800eed4:	2b2a      	cmp	r3, #42	; 0x2a
 800eed6:	d015      	beq.n	800ef04 <_vfiprintf_r+0x13c>
 800eed8:	9a07      	ldr	r2, [sp, #28]
 800eeda:	4654      	mov	r4, sl
 800eedc:	2000      	movs	r0, #0
 800eede:	f04f 0c0a 	mov.w	ip, #10
 800eee2:	4621      	mov	r1, r4
 800eee4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eee8:	3b30      	subs	r3, #48	; 0x30
 800eeea:	2b09      	cmp	r3, #9
 800eeec:	d94e      	bls.n	800ef8c <_vfiprintf_r+0x1c4>
 800eeee:	b1b0      	cbz	r0, 800ef1e <_vfiprintf_r+0x156>
 800eef0:	9207      	str	r2, [sp, #28]
 800eef2:	e014      	b.n	800ef1e <_vfiprintf_r+0x156>
 800eef4:	eba0 0308 	sub.w	r3, r0, r8
 800eef8:	fa09 f303 	lsl.w	r3, r9, r3
 800eefc:	4313      	orrs	r3, r2
 800eefe:	9304      	str	r3, [sp, #16]
 800ef00:	46a2      	mov	sl, r4
 800ef02:	e7d2      	b.n	800eeaa <_vfiprintf_r+0xe2>
 800ef04:	9b03      	ldr	r3, [sp, #12]
 800ef06:	1d19      	adds	r1, r3, #4
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	9103      	str	r1, [sp, #12]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	bfbb      	ittet	lt
 800ef10:	425b      	neglt	r3, r3
 800ef12:	f042 0202 	orrlt.w	r2, r2, #2
 800ef16:	9307      	strge	r3, [sp, #28]
 800ef18:	9307      	strlt	r3, [sp, #28]
 800ef1a:	bfb8      	it	lt
 800ef1c:	9204      	strlt	r2, [sp, #16]
 800ef1e:	7823      	ldrb	r3, [r4, #0]
 800ef20:	2b2e      	cmp	r3, #46	; 0x2e
 800ef22:	d10c      	bne.n	800ef3e <_vfiprintf_r+0x176>
 800ef24:	7863      	ldrb	r3, [r4, #1]
 800ef26:	2b2a      	cmp	r3, #42	; 0x2a
 800ef28:	d135      	bne.n	800ef96 <_vfiprintf_r+0x1ce>
 800ef2a:	9b03      	ldr	r3, [sp, #12]
 800ef2c:	1d1a      	adds	r2, r3, #4
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	9203      	str	r2, [sp, #12]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	bfb8      	it	lt
 800ef36:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ef3a:	3402      	adds	r4, #2
 800ef3c:	9305      	str	r3, [sp, #20]
 800ef3e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f024 <_vfiprintf_r+0x25c>
 800ef42:	7821      	ldrb	r1, [r4, #0]
 800ef44:	2203      	movs	r2, #3
 800ef46:	4650      	mov	r0, sl
 800ef48:	f7f1 f94a 	bl	80001e0 <memchr>
 800ef4c:	b140      	cbz	r0, 800ef60 <_vfiprintf_r+0x198>
 800ef4e:	2340      	movs	r3, #64	; 0x40
 800ef50:	eba0 000a 	sub.w	r0, r0, sl
 800ef54:	fa03 f000 	lsl.w	r0, r3, r0
 800ef58:	9b04      	ldr	r3, [sp, #16]
 800ef5a:	4303      	orrs	r3, r0
 800ef5c:	3401      	adds	r4, #1
 800ef5e:	9304      	str	r3, [sp, #16]
 800ef60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef64:	482c      	ldr	r0, [pc, #176]	; (800f018 <_vfiprintf_r+0x250>)
 800ef66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ef6a:	2206      	movs	r2, #6
 800ef6c:	f7f1 f938 	bl	80001e0 <memchr>
 800ef70:	2800      	cmp	r0, #0
 800ef72:	d03f      	beq.n	800eff4 <_vfiprintf_r+0x22c>
 800ef74:	4b29      	ldr	r3, [pc, #164]	; (800f01c <_vfiprintf_r+0x254>)
 800ef76:	bb1b      	cbnz	r3, 800efc0 <_vfiprintf_r+0x1f8>
 800ef78:	9b03      	ldr	r3, [sp, #12]
 800ef7a:	3307      	adds	r3, #7
 800ef7c:	f023 0307 	bic.w	r3, r3, #7
 800ef80:	3308      	adds	r3, #8
 800ef82:	9303      	str	r3, [sp, #12]
 800ef84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef86:	443b      	add	r3, r7
 800ef88:	9309      	str	r3, [sp, #36]	; 0x24
 800ef8a:	e767      	b.n	800ee5c <_vfiprintf_r+0x94>
 800ef8c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ef90:	460c      	mov	r4, r1
 800ef92:	2001      	movs	r0, #1
 800ef94:	e7a5      	b.n	800eee2 <_vfiprintf_r+0x11a>
 800ef96:	2300      	movs	r3, #0
 800ef98:	3401      	adds	r4, #1
 800ef9a:	9305      	str	r3, [sp, #20]
 800ef9c:	4619      	mov	r1, r3
 800ef9e:	f04f 0c0a 	mov.w	ip, #10
 800efa2:	4620      	mov	r0, r4
 800efa4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800efa8:	3a30      	subs	r2, #48	; 0x30
 800efaa:	2a09      	cmp	r2, #9
 800efac:	d903      	bls.n	800efb6 <_vfiprintf_r+0x1ee>
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d0c5      	beq.n	800ef3e <_vfiprintf_r+0x176>
 800efb2:	9105      	str	r1, [sp, #20]
 800efb4:	e7c3      	b.n	800ef3e <_vfiprintf_r+0x176>
 800efb6:	fb0c 2101 	mla	r1, ip, r1, r2
 800efba:	4604      	mov	r4, r0
 800efbc:	2301      	movs	r3, #1
 800efbe:	e7f0      	b.n	800efa2 <_vfiprintf_r+0x1da>
 800efc0:	ab03      	add	r3, sp, #12
 800efc2:	9300      	str	r3, [sp, #0]
 800efc4:	462a      	mov	r2, r5
 800efc6:	4b16      	ldr	r3, [pc, #88]	; (800f020 <_vfiprintf_r+0x258>)
 800efc8:	a904      	add	r1, sp, #16
 800efca:	4630      	mov	r0, r6
 800efcc:	f7fd fdf2 	bl	800cbb4 <_printf_float>
 800efd0:	4607      	mov	r7, r0
 800efd2:	1c78      	adds	r0, r7, #1
 800efd4:	d1d6      	bne.n	800ef84 <_vfiprintf_r+0x1bc>
 800efd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800efd8:	07d9      	lsls	r1, r3, #31
 800efda:	d405      	bmi.n	800efe8 <_vfiprintf_r+0x220>
 800efdc:	89ab      	ldrh	r3, [r5, #12]
 800efde:	059a      	lsls	r2, r3, #22
 800efe0:	d402      	bmi.n	800efe8 <_vfiprintf_r+0x220>
 800efe2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800efe4:	f000 faaf 	bl	800f546 <__retarget_lock_release_recursive>
 800efe8:	89ab      	ldrh	r3, [r5, #12]
 800efea:	065b      	lsls	r3, r3, #25
 800efec:	f53f af12 	bmi.w	800ee14 <_vfiprintf_r+0x4c>
 800eff0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eff2:	e711      	b.n	800ee18 <_vfiprintf_r+0x50>
 800eff4:	ab03      	add	r3, sp, #12
 800eff6:	9300      	str	r3, [sp, #0]
 800eff8:	462a      	mov	r2, r5
 800effa:	4b09      	ldr	r3, [pc, #36]	; (800f020 <_vfiprintf_r+0x258>)
 800effc:	a904      	add	r1, sp, #16
 800effe:	4630      	mov	r0, r6
 800f000:	f7fe f87c 	bl	800d0fc <_printf_i>
 800f004:	e7e4      	b.n	800efd0 <_vfiprintf_r+0x208>
 800f006:	bf00      	nop
 800f008:	080112f4 	.word	0x080112f4
 800f00c:	08011314 	.word	0x08011314
 800f010:	080112d4 	.word	0x080112d4
 800f014:	0801117c 	.word	0x0801117c
 800f018:	08011186 	.word	0x08011186
 800f01c:	0800cbb5 	.word	0x0800cbb5
 800f020:	0800eda5 	.word	0x0800eda5
 800f024:	08011182 	.word	0x08011182

0800f028 <__swbuf_r>:
 800f028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f02a:	460e      	mov	r6, r1
 800f02c:	4614      	mov	r4, r2
 800f02e:	4605      	mov	r5, r0
 800f030:	b118      	cbz	r0, 800f03a <__swbuf_r+0x12>
 800f032:	6983      	ldr	r3, [r0, #24]
 800f034:	b90b      	cbnz	r3, 800f03a <__swbuf_r+0x12>
 800f036:	f000 f9e7 	bl	800f408 <__sinit>
 800f03a:	4b21      	ldr	r3, [pc, #132]	; (800f0c0 <__swbuf_r+0x98>)
 800f03c:	429c      	cmp	r4, r3
 800f03e:	d12b      	bne.n	800f098 <__swbuf_r+0x70>
 800f040:	686c      	ldr	r4, [r5, #4]
 800f042:	69a3      	ldr	r3, [r4, #24]
 800f044:	60a3      	str	r3, [r4, #8]
 800f046:	89a3      	ldrh	r3, [r4, #12]
 800f048:	071a      	lsls	r2, r3, #28
 800f04a:	d52f      	bpl.n	800f0ac <__swbuf_r+0x84>
 800f04c:	6923      	ldr	r3, [r4, #16]
 800f04e:	b36b      	cbz	r3, 800f0ac <__swbuf_r+0x84>
 800f050:	6923      	ldr	r3, [r4, #16]
 800f052:	6820      	ldr	r0, [r4, #0]
 800f054:	1ac0      	subs	r0, r0, r3
 800f056:	6963      	ldr	r3, [r4, #20]
 800f058:	b2f6      	uxtb	r6, r6
 800f05a:	4283      	cmp	r3, r0
 800f05c:	4637      	mov	r7, r6
 800f05e:	dc04      	bgt.n	800f06a <__swbuf_r+0x42>
 800f060:	4621      	mov	r1, r4
 800f062:	4628      	mov	r0, r5
 800f064:	f000 f93c 	bl	800f2e0 <_fflush_r>
 800f068:	bb30      	cbnz	r0, 800f0b8 <__swbuf_r+0x90>
 800f06a:	68a3      	ldr	r3, [r4, #8]
 800f06c:	3b01      	subs	r3, #1
 800f06e:	60a3      	str	r3, [r4, #8]
 800f070:	6823      	ldr	r3, [r4, #0]
 800f072:	1c5a      	adds	r2, r3, #1
 800f074:	6022      	str	r2, [r4, #0]
 800f076:	701e      	strb	r6, [r3, #0]
 800f078:	6963      	ldr	r3, [r4, #20]
 800f07a:	3001      	adds	r0, #1
 800f07c:	4283      	cmp	r3, r0
 800f07e:	d004      	beq.n	800f08a <__swbuf_r+0x62>
 800f080:	89a3      	ldrh	r3, [r4, #12]
 800f082:	07db      	lsls	r3, r3, #31
 800f084:	d506      	bpl.n	800f094 <__swbuf_r+0x6c>
 800f086:	2e0a      	cmp	r6, #10
 800f088:	d104      	bne.n	800f094 <__swbuf_r+0x6c>
 800f08a:	4621      	mov	r1, r4
 800f08c:	4628      	mov	r0, r5
 800f08e:	f000 f927 	bl	800f2e0 <_fflush_r>
 800f092:	b988      	cbnz	r0, 800f0b8 <__swbuf_r+0x90>
 800f094:	4638      	mov	r0, r7
 800f096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f098:	4b0a      	ldr	r3, [pc, #40]	; (800f0c4 <__swbuf_r+0x9c>)
 800f09a:	429c      	cmp	r4, r3
 800f09c:	d101      	bne.n	800f0a2 <__swbuf_r+0x7a>
 800f09e:	68ac      	ldr	r4, [r5, #8]
 800f0a0:	e7cf      	b.n	800f042 <__swbuf_r+0x1a>
 800f0a2:	4b09      	ldr	r3, [pc, #36]	; (800f0c8 <__swbuf_r+0xa0>)
 800f0a4:	429c      	cmp	r4, r3
 800f0a6:	bf08      	it	eq
 800f0a8:	68ec      	ldreq	r4, [r5, #12]
 800f0aa:	e7ca      	b.n	800f042 <__swbuf_r+0x1a>
 800f0ac:	4621      	mov	r1, r4
 800f0ae:	4628      	mov	r0, r5
 800f0b0:	f000 f81a 	bl	800f0e8 <__swsetup_r>
 800f0b4:	2800      	cmp	r0, #0
 800f0b6:	d0cb      	beq.n	800f050 <__swbuf_r+0x28>
 800f0b8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800f0bc:	e7ea      	b.n	800f094 <__swbuf_r+0x6c>
 800f0be:	bf00      	nop
 800f0c0:	080112f4 	.word	0x080112f4
 800f0c4:	08011314 	.word	0x08011314
 800f0c8:	080112d4 	.word	0x080112d4

0800f0cc <__ascii_wctomb>:
 800f0cc:	b149      	cbz	r1, 800f0e2 <__ascii_wctomb+0x16>
 800f0ce:	2aff      	cmp	r2, #255	; 0xff
 800f0d0:	bf85      	ittet	hi
 800f0d2:	238a      	movhi	r3, #138	; 0x8a
 800f0d4:	6003      	strhi	r3, [r0, #0]
 800f0d6:	700a      	strbls	r2, [r1, #0]
 800f0d8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800f0dc:	bf98      	it	ls
 800f0de:	2001      	movls	r0, #1
 800f0e0:	4770      	bx	lr
 800f0e2:	4608      	mov	r0, r1
 800f0e4:	4770      	bx	lr
	...

0800f0e8 <__swsetup_r>:
 800f0e8:	4b32      	ldr	r3, [pc, #200]	; (800f1b4 <__swsetup_r+0xcc>)
 800f0ea:	b570      	push	{r4, r5, r6, lr}
 800f0ec:	681d      	ldr	r5, [r3, #0]
 800f0ee:	4606      	mov	r6, r0
 800f0f0:	460c      	mov	r4, r1
 800f0f2:	b125      	cbz	r5, 800f0fe <__swsetup_r+0x16>
 800f0f4:	69ab      	ldr	r3, [r5, #24]
 800f0f6:	b913      	cbnz	r3, 800f0fe <__swsetup_r+0x16>
 800f0f8:	4628      	mov	r0, r5
 800f0fa:	f000 f985 	bl	800f408 <__sinit>
 800f0fe:	4b2e      	ldr	r3, [pc, #184]	; (800f1b8 <__swsetup_r+0xd0>)
 800f100:	429c      	cmp	r4, r3
 800f102:	d10f      	bne.n	800f124 <__swsetup_r+0x3c>
 800f104:	686c      	ldr	r4, [r5, #4]
 800f106:	89a3      	ldrh	r3, [r4, #12]
 800f108:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f10c:	0719      	lsls	r1, r3, #28
 800f10e:	d42c      	bmi.n	800f16a <__swsetup_r+0x82>
 800f110:	06dd      	lsls	r5, r3, #27
 800f112:	d411      	bmi.n	800f138 <__swsetup_r+0x50>
 800f114:	2309      	movs	r3, #9
 800f116:	6033      	str	r3, [r6, #0]
 800f118:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f11c:	81a3      	strh	r3, [r4, #12]
 800f11e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f122:	e03e      	b.n	800f1a2 <__swsetup_r+0xba>
 800f124:	4b25      	ldr	r3, [pc, #148]	; (800f1bc <__swsetup_r+0xd4>)
 800f126:	429c      	cmp	r4, r3
 800f128:	d101      	bne.n	800f12e <__swsetup_r+0x46>
 800f12a:	68ac      	ldr	r4, [r5, #8]
 800f12c:	e7eb      	b.n	800f106 <__swsetup_r+0x1e>
 800f12e:	4b24      	ldr	r3, [pc, #144]	; (800f1c0 <__swsetup_r+0xd8>)
 800f130:	429c      	cmp	r4, r3
 800f132:	bf08      	it	eq
 800f134:	68ec      	ldreq	r4, [r5, #12]
 800f136:	e7e6      	b.n	800f106 <__swsetup_r+0x1e>
 800f138:	0758      	lsls	r0, r3, #29
 800f13a:	d512      	bpl.n	800f162 <__swsetup_r+0x7a>
 800f13c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f13e:	b141      	cbz	r1, 800f152 <__swsetup_r+0x6a>
 800f140:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f144:	4299      	cmp	r1, r3
 800f146:	d002      	beq.n	800f14e <__swsetup_r+0x66>
 800f148:	4630      	mov	r0, r6
 800f14a:	f7ff fb4b 	bl	800e7e4 <_free_r>
 800f14e:	2300      	movs	r3, #0
 800f150:	6363      	str	r3, [r4, #52]	; 0x34
 800f152:	89a3      	ldrh	r3, [r4, #12]
 800f154:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f158:	81a3      	strh	r3, [r4, #12]
 800f15a:	2300      	movs	r3, #0
 800f15c:	6063      	str	r3, [r4, #4]
 800f15e:	6923      	ldr	r3, [r4, #16]
 800f160:	6023      	str	r3, [r4, #0]
 800f162:	89a3      	ldrh	r3, [r4, #12]
 800f164:	f043 0308 	orr.w	r3, r3, #8
 800f168:	81a3      	strh	r3, [r4, #12]
 800f16a:	6923      	ldr	r3, [r4, #16]
 800f16c:	b94b      	cbnz	r3, 800f182 <__swsetup_r+0x9a>
 800f16e:	89a3      	ldrh	r3, [r4, #12]
 800f170:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f174:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f178:	d003      	beq.n	800f182 <__swsetup_r+0x9a>
 800f17a:	4621      	mov	r1, r4
 800f17c:	4630      	mov	r0, r6
 800f17e:	f000 fa09 	bl	800f594 <__smakebuf_r>
 800f182:	89a0      	ldrh	r0, [r4, #12]
 800f184:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f188:	f010 0301 	ands.w	r3, r0, #1
 800f18c:	d00a      	beq.n	800f1a4 <__swsetup_r+0xbc>
 800f18e:	2300      	movs	r3, #0
 800f190:	60a3      	str	r3, [r4, #8]
 800f192:	6963      	ldr	r3, [r4, #20]
 800f194:	425b      	negs	r3, r3
 800f196:	61a3      	str	r3, [r4, #24]
 800f198:	6923      	ldr	r3, [r4, #16]
 800f19a:	b943      	cbnz	r3, 800f1ae <__swsetup_r+0xc6>
 800f19c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f1a0:	d1ba      	bne.n	800f118 <__swsetup_r+0x30>
 800f1a2:	bd70      	pop	{r4, r5, r6, pc}
 800f1a4:	0781      	lsls	r1, r0, #30
 800f1a6:	bf58      	it	pl
 800f1a8:	6963      	ldrpl	r3, [r4, #20]
 800f1aa:	60a3      	str	r3, [r4, #8]
 800f1ac:	e7f4      	b.n	800f198 <__swsetup_r+0xb0>
 800f1ae:	2000      	movs	r0, #0
 800f1b0:	e7f7      	b.n	800f1a2 <__swsetup_r+0xba>
 800f1b2:	bf00      	nop
 800f1b4:	200001b4 	.word	0x200001b4
 800f1b8:	080112f4 	.word	0x080112f4
 800f1bc:	08011314 	.word	0x08011314
 800f1c0:	080112d4 	.word	0x080112d4

0800f1c4 <abort>:
 800f1c4:	b508      	push	{r3, lr}
 800f1c6:	2006      	movs	r0, #6
 800f1c8:	f000 fa54 	bl	800f674 <raise>
 800f1cc:	2001      	movs	r0, #1
 800f1ce:	f7f3 fc13 	bl	80029f8 <_exit>
	...

0800f1d4 <__sflush_r>:
 800f1d4:	898a      	ldrh	r2, [r1, #12]
 800f1d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1da:	4605      	mov	r5, r0
 800f1dc:	0710      	lsls	r0, r2, #28
 800f1de:	460c      	mov	r4, r1
 800f1e0:	d458      	bmi.n	800f294 <__sflush_r+0xc0>
 800f1e2:	684b      	ldr	r3, [r1, #4]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	dc05      	bgt.n	800f1f4 <__sflush_r+0x20>
 800f1e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	dc02      	bgt.n	800f1f4 <__sflush_r+0x20>
 800f1ee:	2000      	movs	r0, #0
 800f1f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f1f6:	2e00      	cmp	r6, #0
 800f1f8:	d0f9      	beq.n	800f1ee <__sflush_r+0x1a>
 800f1fa:	2300      	movs	r3, #0
 800f1fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f200:	682f      	ldr	r7, [r5, #0]
 800f202:	602b      	str	r3, [r5, #0]
 800f204:	d032      	beq.n	800f26c <__sflush_r+0x98>
 800f206:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f208:	89a3      	ldrh	r3, [r4, #12]
 800f20a:	075a      	lsls	r2, r3, #29
 800f20c:	d505      	bpl.n	800f21a <__sflush_r+0x46>
 800f20e:	6863      	ldr	r3, [r4, #4]
 800f210:	1ac0      	subs	r0, r0, r3
 800f212:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f214:	b10b      	cbz	r3, 800f21a <__sflush_r+0x46>
 800f216:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f218:	1ac0      	subs	r0, r0, r3
 800f21a:	2300      	movs	r3, #0
 800f21c:	4602      	mov	r2, r0
 800f21e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f220:	6a21      	ldr	r1, [r4, #32]
 800f222:	4628      	mov	r0, r5
 800f224:	47b0      	blx	r6
 800f226:	1c43      	adds	r3, r0, #1
 800f228:	89a3      	ldrh	r3, [r4, #12]
 800f22a:	d106      	bne.n	800f23a <__sflush_r+0x66>
 800f22c:	6829      	ldr	r1, [r5, #0]
 800f22e:	291d      	cmp	r1, #29
 800f230:	d82c      	bhi.n	800f28c <__sflush_r+0xb8>
 800f232:	4a2a      	ldr	r2, [pc, #168]	; (800f2dc <__sflush_r+0x108>)
 800f234:	40ca      	lsrs	r2, r1
 800f236:	07d6      	lsls	r6, r2, #31
 800f238:	d528      	bpl.n	800f28c <__sflush_r+0xb8>
 800f23a:	2200      	movs	r2, #0
 800f23c:	6062      	str	r2, [r4, #4]
 800f23e:	04d9      	lsls	r1, r3, #19
 800f240:	6922      	ldr	r2, [r4, #16]
 800f242:	6022      	str	r2, [r4, #0]
 800f244:	d504      	bpl.n	800f250 <__sflush_r+0x7c>
 800f246:	1c42      	adds	r2, r0, #1
 800f248:	d101      	bne.n	800f24e <__sflush_r+0x7a>
 800f24a:	682b      	ldr	r3, [r5, #0]
 800f24c:	b903      	cbnz	r3, 800f250 <__sflush_r+0x7c>
 800f24e:	6560      	str	r0, [r4, #84]	; 0x54
 800f250:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f252:	602f      	str	r7, [r5, #0]
 800f254:	2900      	cmp	r1, #0
 800f256:	d0ca      	beq.n	800f1ee <__sflush_r+0x1a>
 800f258:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f25c:	4299      	cmp	r1, r3
 800f25e:	d002      	beq.n	800f266 <__sflush_r+0x92>
 800f260:	4628      	mov	r0, r5
 800f262:	f7ff fabf 	bl	800e7e4 <_free_r>
 800f266:	2000      	movs	r0, #0
 800f268:	6360      	str	r0, [r4, #52]	; 0x34
 800f26a:	e7c1      	b.n	800f1f0 <__sflush_r+0x1c>
 800f26c:	6a21      	ldr	r1, [r4, #32]
 800f26e:	2301      	movs	r3, #1
 800f270:	4628      	mov	r0, r5
 800f272:	47b0      	blx	r6
 800f274:	1c41      	adds	r1, r0, #1
 800f276:	d1c7      	bne.n	800f208 <__sflush_r+0x34>
 800f278:	682b      	ldr	r3, [r5, #0]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d0c4      	beq.n	800f208 <__sflush_r+0x34>
 800f27e:	2b1d      	cmp	r3, #29
 800f280:	d001      	beq.n	800f286 <__sflush_r+0xb2>
 800f282:	2b16      	cmp	r3, #22
 800f284:	d101      	bne.n	800f28a <__sflush_r+0xb6>
 800f286:	602f      	str	r7, [r5, #0]
 800f288:	e7b1      	b.n	800f1ee <__sflush_r+0x1a>
 800f28a:	89a3      	ldrh	r3, [r4, #12]
 800f28c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f290:	81a3      	strh	r3, [r4, #12]
 800f292:	e7ad      	b.n	800f1f0 <__sflush_r+0x1c>
 800f294:	690f      	ldr	r7, [r1, #16]
 800f296:	2f00      	cmp	r7, #0
 800f298:	d0a9      	beq.n	800f1ee <__sflush_r+0x1a>
 800f29a:	0793      	lsls	r3, r2, #30
 800f29c:	680e      	ldr	r6, [r1, #0]
 800f29e:	bf08      	it	eq
 800f2a0:	694b      	ldreq	r3, [r1, #20]
 800f2a2:	600f      	str	r7, [r1, #0]
 800f2a4:	bf18      	it	ne
 800f2a6:	2300      	movne	r3, #0
 800f2a8:	eba6 0807 	sub.w	r8, r6, r7
 800f2ac:	608b      	str	r3, [r1, #8]
 800f2ae:	f1b8 0f00 	cmp.w	r8, #0
 800f2b2:	dd9c      	ble.n	800f1ee <__sflush_r+0x1a>
 800f2b4:	6a21      	ldr	r1, [r4, #32]
 800f2b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f2b8:	4643      	mov	r3, r8
 800f2ba:	463a      	mov	r2, r7
 800f2bc:	4628      	mov	r0, r5
 800f2be:	47b0      	blx	r6
 800f2c0:	2800      	cmp	r0, #0
 800f2c2:	dc06      	bgt.n	800f2d2 <__sflush_r+0xfe>
 800f2c4:	89a3      	ldrh	r3, [r4, #12]
 800f2c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f2ca:	81a3      	strh	r3, [r4, #12]
 800f2cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f2d0:	e78e      	b.n	800f1f0 <__sflush_r+0x1c>
 800f2d2:	4407      	add	r7, r0
 800f2d4:	eba8 0800 	sub.w	r8, r8, r0
 800f2d8:	e7e9      	b.n	800f2ae <__sflush_r+0xda>
 800f2da:	bf00      	nop
 800f2dc:	20400001 	.word	0x20400001

0800f2e0 <_fflush_r>:
 800f2e0:	b538      	push	{r3, r4, r5, lr}
 800f2e2:	690b      	ldr	r3, [r1, #16]
 800f2e4:	4605      	mov	r5, r0
 800f2e6:	460c      	mov	r4, r1
 800f2e8:	b913      	cbnz	r3, 800f2f0 <_fflush_r+0x10>
 800f2ea:	2500      	movs	r5, #0
 800f2ec:	4628      	mov	r0, r5
 800f2ee:	bd38      	pop	{r3, r4, r5, pc}
 800f2f0:	b118      	cbz	r0, 800f2fa <_fflush_r+0x1a>
 800f2f2:	6983      	ldr	r3, [r0, #24]
 800f2f4:	b90b      	cbnz	r3, 800f2fa <_fflush_r+0x1a>
 800f2f6:	f000 f887 	bl	800f408 <__sinit>
 800f2fa:	4b14      	ldr	r3, [pc, #80]	; (800f34c <_fflush_r+0x6c>)
 800f2fc:	429c      	cmp	r4, r3
 800f2fe:	d11b      	bne.n	800f338 <_fflush_r+0x58>
 800f300:	686c      	ldr	r4, [r5, #4]
 800f302:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f306:	2b00      	cmp	r3, #0
 800f308:	d0ef      	beq.n	800f2ea <_fflush_r+0xa>
 800f30a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f30c:	07d0      	lsls	r0, r2, #31
 800f30e:	d404      	bmi.n	800f31a <_fflush_r+0x3a>
 800f310:	0599      	lsls	r1, r3, #22
 800f312:	d402      	bmi.n	800f31a <_fflush_r+0x3a>
 800f314:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f316:	f000 f915 	bl	800f544 <__retarget_lock_acquire_recursive>
 800f31a:	4628      	mov	r0, r5
 800f31c:	4621      	mov	r1, r4
 800f31e:	f7ff ff59 	bl	800f1d4 <__sflush_r>
 800f322:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f324:	07da      	lsls	r2, r3, #31
 800f326:	4605      	mov	r5, r0
 800f328:	d4e0      	bmi.n	800f2ec <_fflush_r+0xc>
 800f32a:	89a3      	ldrh	r3, [r4, #12]
 800f32c:	059b      	lsls	r3, r3, #22
 800f32e:	d4dd      	bmi.n	800f2ec <_fflush_r+0xc>
 800f330:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f332:	f000 f908 	bl	800f546 <__retarget_lock_release_recursive>
 800f336:	e7d9      	b.n	800f2ec <_fflush_r+0xc>
 800f338:	4b05      	ldr	r3, [pc, #20]	; (800f350 <_fflush_r+0x70>)
 800f33a:	429c      	cmp	r4, r3
 800f33c:	d101      	bne.n	800f342 <_fflush_r+0x62>
 800f33e:	68ac      	ldr	r4, [r5, #8]
 800f340:	e7df      	b.n	800f302 <_fflush_r+0x22>
 800f342:	4b04      	ldr	r3, [pc, #16]	; (800f354 <_fflush_r+0x74>)
 800f344:	429c      	cmp	r4, r3
 800f346:	bf08      	it	eq
 800f348:	68ec      	ldreq	r4, [r5, #12]
 800f34a:	e7da      	b.n	800f302 <_fflush_r+0x22>
 800f34c:	080112f4 	.word	0x080112f4
 800f350:	08011314 	.word	0x08011314
 800f354:	080112d4 	.word	0x080112d4

0800f358 <std>:
 800f358:	2300      	movs	r3, #0
 800f35a:	b510      	push	{r4, lr}
 800f35c:	4604      	mov	r4, r0
 800f35e:	e9c0 3300 	strd	r3, r3, [r0]
 800f362:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f366:	6083      	str	r3, [r0, #8]
 800f368:	8181      	strh	r1, [r0, #12]
 800f36a:	6643      	str	r3, [r0, #100]	; 0x64
 800f36c:	81c2      	strh	r2, [r0, #14]
 800f36e:	6183      	str	r3, [r0, #24]
 800f370:	4619      	mov	r1, r3
 800f372:	2208      	movs	r2, #8
 800f374:	305c      	adds	r0, #92	; 0x5c
 800f376:	f7fd fb75 	bl	800ca64 <memset>
 800f37a:	4b05      	ldr	r3, [pc, #20]	; (800f390 <std+0x38>)
 800f37c:	6263      	str	r3, [r4, #36]	; 0x24
 800f37e:	4b05      	ldr	r3, [pc, #20]	; (800f394 <std+0x3c>)
 800f380:	62a3      	str	r3, [r4, #40]	; 0x28
 800f382:	4b05      	ldr	r3, [pc, #20]	; (800f398 <std+0x40>)
 800f384:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f386:	4b05      	ldr	r3, [pc, #20]	; (800f39c <std+0x44>)
 800f388:	6224      	str	r4, [r4, #32]
 800f38a:	6323      	str	r3, [r4, #48]	; 0x30
 800f38c:	bd10      	pop	{r4, pc}
 800f38e:	bf00      	nop
 800f390:	0800f6ad 	.word	0x0800f6ad
 800f394:	0800f6cf 	.word	0x0800f6cf
 800f398:	0800f707 	.word	0x0800f707
 800f39c:	0800f72b 	.word	0x0800f72b

0800f3a0 <_cleanup_r>:
 800f3a0:	4901      	ldr	r1, [pc, #4]	; (800f3a8 <_cleanup_r+0x8>)
 800f3a2:	f000 b8af 	b.w	800f504 <_fwalk_reent>
 800f3a6:	bf00      	nop
 800f3a8:	0800f2e1 	.word	0x0800f2e1

0800f3ac <__sfmoreglue>:
 800f3ac:	b570      	push	{r4, r5, r6, lr}
 800f3ae:	2268      	movs	r2, #104	; 0x68
 800f3b0:	1e4d      	subs	r5, r1, #1
 800f3b2:	4355      	muls	r5, r2
 800f3b4:	460e      	mov	r6, r1
 800f3b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f3ba:	f7ff fa7f 	bl	800e8bc <_malloc_r>
 800f3be:	4604      	mov	r4, r0
 800f3c0:	b140      	cbz	r0, 800f3d4 <__sfmoreglue+0x28>
 800f3c2:	2100      	movs	r1, #0
 800f3c4:	e9c0 1600 	strd	r1, r6, [r0]
 800f3c8:	300c      	adds	r0, #12
 800f3ca:	60a0      	str	r0, [r4, #8]
 800f3cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f3d0:	f7fd fb48 	bl	800ca64 <memset>
 800f3d4:	4620      	mov	r0, r4
 800f3d6:	bd70      	pop	{r4, r5, r6, pc}

0800f3d8 <__sfp_lock_acquire>:
 800f3d8:	4801      	ldr	r0, [pc, #4]	; (800f3e0 <__sfp_lock_acquire+0x8>)
 800f3da:	f000 b8b3 	b.w	800f544 <__retarget_lock_acquire_recursive>
 800f3de:	bf00      	nop
 800f3e0:	2000b1f9 	.word	0x2000b1f9

0800f3e4 <__sfp_lock_release>:
 800f3e4:	4801      	ldr	r0, [pc, #4]	; (800f3ec <__sfp_lock_release+0x8>)
 800f3e6:	f000 b8ae 	b.w	800f546 <__retarget_lock_release_recursive>
 800f3ea:	bf00      	nop
 800f3ec:	2000b1f9 	.word	0x2000b1f9

0800f3f0 <__sinit_lock_acquire>:
 800f3f0:	4801      	ldr	r0, [pc, #4]	; (800f3f8 <__sinit_lock_acquire+0x8>)
 800f3f2:	f000 b8a7 	b.w	800f544 <__retarget_lock_acquire_recursive>
 800f3f6:	bf00      	nop
 800f3f8:	2000b1fa 	.word	0x2000b1fa

0800f3fc <__sinit_lock_release>:
 800f3fc:	4801      	ldr	r0, [pc, #4]	; (800f404 <__sinit_lock_release+0x8>)
 800f3fe:	f000 b8a2 	b.w	800f546 <__retarget_lock_release_recursive>
 800f402:	bf00      	nop
 800f404:	2000b1fa 	.word	0x2000b1fa

0800f408 <__sinit>:
 800f408:	b510      	push	{r4, lr}
 800f40a:	4604      	mov	r4, r0
 800f40c:	f7ff fff0 	bl	800f3f0 <__sinit_lock_acquire>
 800f410:	69a3      	ldr	r3, [r4, #24]
 800f412:	b11b      	cbz	r3, 800f41c <__sinit+0x14>
 800f414:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f418:	f7ff bff0 	b.w	800f3fc <__sinit_lock_release>
 800f41c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f420:	6523      	str	r3, [r4, #80]	; 0x50
 800f422:	4b13      	ldr	r3, [pc, #76]	; (800f470 <__sinit+0x68>)
 800f424:	4a13      	ldr	r2, [pc, #76]	; (800f474 <__sinit+0x6c>)
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	62a2      	str	r2, [r4, #40]	; 0x28
 800f42a:	42a3      	cmp	r3, r4
 800f42c:	bf04      	itt	eq
 800f42e:	2301      	moveq	r3, #1
 800f430:	61a3      	streq	r3, [r4, #24]
 800f432:	4620      	mov	r0, r4
 800f434:	f000 f820 	bl	800f478 <__sfp>
 800f438:	6060      	str	r0, [r4, #4]
 800f43a:	4620      	mov	r0, r4
 800f43c:	f000 f81c 	bl	800f478 <__sfp>
 800f440:	60a0      	str	r0, [r4, #8]
 800f442:	4620      	mov	r0, r4
 800f444:	f000 f818 	bl	800f478 <__sfp>
 800f448:	2200      	movs	r2, #0
 800f44a:	60e0      	str	r0, [r4, #12]
 800f44c:	2104      	movs	r1, #4
 800f44e:	6860      	ldr	r0, [r4, #4]
 800f450:	f7ff ff82 	bl	800f358 <std>
 800f454:	68a0      	ldr	r0, [r4, #8]
 800f456:	2201      	movs	r2, #1
 800f458:	2109      	movs	r1, #9
 800f45a:	f7ff ff7d 	bl	800f358 <std>
 800f45e:	68e0      	ldr	r0, [r4, #12]
 800f460:	2202      	movs	r2, #2
 800f462:	2112      	movs	r1, #18
 800f464:	f7ff ff78 	bl	800f358 <std>
 800f468:	2301      	movs	r3, #1
 800f46a:	61a3      	str	r3, [r4, #24]
 800f46c:	e7d2      	b.n	800f414 <__sinit+0xc>
 800f46e:	bf00      	nop
 800f470:	08010f5c 	.word	0x08010f5c
 800f474:	0800f3a1 	.word	0x0800f3a1

0800f478 <__sfp>:
 800f478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f47a:	4607      	mov	r7, r0
 800f47c:	f7ff ffac 	bl	800f3d8 <__sfp_lock_acquire>
 800f480:	4b1e      	ldr	r3, [pc, #120]	; (800f4fc <__sfp+0x84>)
 800f482:	681e      	ldr	r6, [r3, #0]
 800f484:	69b3      	ldr	r3, [r6, #24]
 800f486:	b913      	cbnz	r3, 800f48e <__sfp+0x16>
 800f488:	4630      	mov	r0, r6
 800f48a:	f7ff ffbd 	bl	800f408 <__sinit>
 800f48e:	3648      	adds	r6, #72	; 0x48
 800f490:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f494:	3b01      	subs	r3, #1
 800f496:	d503      	bpl.n	800f4a0 <__sfp+0x28>
 800f498:	6833      	ldr	r3, [r6, #0]
 800f49a:	b30b      	cbz	r3, 800f4e0 <__sfp+0x68>
 800f49c:	6836      	ldr	r6, [r6, #0]
 800f49e:	e7f7      	b.n	800f490 <__sfp+0x18>
 800f4a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f4a4:	b9d5      	cbnz	r5, 800f4dc <__sfp+0x64>
 800f4a6:	4b16      	ldr	r3, [pc, #88]	; (800f500 <__sfp+0x88>)
 800f4a8:	60e3      	str	r3, [r4, #12]
 800f4aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f4ae:	6665      	str	r5, [r4, #100]	; 0x64
 800f4b0:	f000 f847 	bl	800f542 <__retarget_lock_init_recursive>
 800f4b4:	f7ff ff96 	bl	800f3e4 <__sfp_lock_release>
 800f4b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f4bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f4c0:	6025      	str	r5, [r4, #0]
 800f4c2:	61a5      	str	r5, [r4, #24]
 800f4c4:	2208      	movs	r2, #8
 800f4c6:	4629      	mov	r1, r5
 800f4c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f4cc:	f7fd faca 	bl	800ca64 <memset>
 800f4d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f4d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f4d8:	4620      	mov	r0, r4
 800f4da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f4dc:	3468      	adds	r4, #104	; 0x68
 800f4de:	e7d9      	b.n	800f494 <__sfp+0x1c>
 800f4e0:	2104      	movs	r1, #4
 800f4e2:	4638      	mov	r0, r7
 800f4e4:	f7ff ff62 	bl	800f3ac <__sfmoreglue>
 800f4e8:	4604      	mov	r4, r0
 800f4ea:	6030      	str	r0, [r6, #0]
 800f4ec:	2800      	cmp	r0, #0
 800f4ee:	d1d5      	bne.n	800f49c <__sfp+0x24>
 800f4f0:	f7ff ff78 	bl	800f3e4 <__sfp_lock_release>
 800f4f4:	230c      	movs	r3, #12
 800f4f6:	603b      	str	r3, [r7, #0]
 800f4f8:	e7ee      	b.n	800f4d8 <__sfp+0x60>
 800f4fa:	bf00      	nop
 800f4fc:	08010f5c 	.word	0x08010f5c
 800f500:	ffff0001 	.word	0xffff0001

0800f504 <_fwalk_reent>:
 800f504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f508:	4606      	mov	r6, r0
 800f50a:	4688      	mov	r8, r1
 800f50c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f510:	2700      	movs	r7, #0
 800f512:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f516:	f1b9 0901 	subs.w	r9, r9, #1
 800f51a:	d505      	bpl.n	800f528 <_fwalk_reent+0x24>
 800f51c:	6824      	ldr	r4, [r4, #0]
 800f51e:	2c00      	cmp	r4, #0
 800f520:	d1f7      	bne.n	800f512 <_fwalk_reent+0xe>
 800f522:	4638      	mov	r0, r7
 800f524:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f528:	89ab      	ldrh	r3, [r5, #12]
 800f52a:	2b01      	cmp	r3, #1
 800f52c:	d907      	bls.n	800f53e <_fwalk_reent+0x3a>
 800f52e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f532:	3301      	adds	r3, #1
 800f534:	d003      	beq.n	800f53e <_fwalk_reent+0x3a>
 800f536:	4629      	mov	r1, r5
 800f538:	4630      	mov	r0, r6
 800f53a:	47c0      	blx	r8
 800f53c:	4307      	orrs	r7, r0
 800f53e:	3568      	adds	r5, #104	; 0x68
 800f540:	e7e9      	b.n	800f516 <_fwalk_reent+0x12>

0800f542 <__retarget_lock_init_recursive>:
 800f542:	4770      	bx	lr

0800f544 <__retarget_lock_acquire_recursive>:
 800f544:	4770      	bx	lr

0800f546 <__retarget_lock_release_recursive>:
 800f546:	4770      	bx	lr

0800f548 <__swhatbuf_r>:
 800f548:	b570      	push	{r4, r5, r6, lr}
 800f54a:	460e      	mov	r6, r1
 800f54c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f550:	2900      	cmp	r1, #0
 800f552:	b096      	sub	sp, #88	; 0x58
 800f554:	4614      	mov	r4, r2
 800f556:	461d      	mov	r5, r3
 800f558:	da08      	bge.n	800f56c <__swhatbuf_r+0x24>
 800f55a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f55e:	2200      	movs	r2, #0
 800f560:	602a      	str	r2, [r5, #0]
 800f562:	061a      	lsls	r2, r3, #24
 800f564:	d410      	bmi.n	800f588 <__swhatbuf_r+0x40>
 800f566:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f56a:	e00e      	b.n	800f58a <__swhatbuf_r+0x42>
 800f56c:	466a      	mov	r2, sp
 800f56e:	f000 f903 	bl	800f778 <_fstat_r>
 800f572:	2800      	cmp	r0, #0
 800f574:	dbf1      	blt.n	800f55a <__swhatbuf_r+0x12>
 800f576:	9a01      	ldr	r2, [sp, #4]
 800f578:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f57c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f580:	425a      	negs	r2, r3
 800f582:	415a      	adcs	r2, r3
 800f584:	602a      	str	r2, [r5, #0]
 800f586:	e7ee      	b.n	800f566 <__swhatbuf_r+0x1e>
 800f588:	2340      	movs	r3, #64	; 0x40
 800f58a:	2000      	movs	r0, #0
 800f58c:	6023      	str	r3, [r4, #0]
 800f58e:	b016      	add	sp, #88	; 0x58
 800f590:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f594 <__smakebuf_r>:
 800f594:	898b      	ldrh	r3, [r1, #12]
 800f596:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f598:	079d      	lsls	r5, r3, #30
 800f59a:	4606      	mov	r6, r0
 800f59c:	460c      	mov	r4, r1
 800f59e:	d507      	bpl.n	800f5b0 <__smakebuf_r+0x1c>
 800f5a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f5a4:	6023      	str	r3, [r4, #0]
 800f5a6:	6123      	str	r3, [r4, #16]
 800f5a8:	2301      	movs	r3, #1
 800f5aa:	6163      	str	r3, [r4, #20]
 800f5ac:	b002      	add	sp, #8
 800f5ae:	bd70      	pop	{r4, r5, r6, pc}
 800f5b0:	ab01      	add	r3, sp, #4
 800f5b2:	466a      	mov	r2, sp
 800f5b4:	f7ff ffc8 	bl	800f548 <__swhatbuf_r>
 800f5b8:	9900      	ldr	r1, [sp, #0]
 800f5ba:	4605      	mov	r5, r0
 800f5bc:	4630      	mov	r0, r6
 800f5be:	f7ff f97d 	bl	800e8bc <_malloc_r>
 800f5c2:	b948      	cbnz	r0, 800f5d8 <__smakebuf_r+0x44>
 800f5c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f5c8:	059a      	lsls	r2, r3, #22
 800f5ca:	d4ef      	bmi.n	800f5ac <__smakebuf_r+0x18>
 800f5cc:	f023 0303 	bic.w	r3, r3, #3
 800f5d0:	f043 0302 	orr.w	r3, r3, #2
 800f5d4:	81a3      	strh	r3, [r4, #12]
 800f5d6:	e7e3      	b.n	800f5a0 <__smakebuf_r+0xc>
 800f5d8:	4b0d      	ldr	r3, [pc, #52]	; (800f610 <__smakebuf_r+0x7c>)
 800f5da:	62b3      	str	r3, [r6, #40]	; 0x28
 800f5dc:	89a3      	ldrh	r3, [r4, #12]
 800f5de:	6020      	str	r0, [r4, #0]
 800f5e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f5e4:	81a3      	strh	r3, [r4, #12]
 800f5e6:	9b00      	ldr	r3, [sp, #0]
 800f5e8:	6163      	str	r3, [r4, #20]
 800f5ea:	9b01      	ldr	r3, [sp, #4]
 800f5ec:	6120      	str	r0, [r4, #16]
 800f5ee:	b15b      	cbz	r3, 800f608 <__smakebuf_r+0x74>
 800f5f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f5f4:	4630      	mov	r0, r6
 800f5f6:	f000 f8d1 	bl	800f79c <_isatty_r>
 800f5fa:	b128      	cbz	r0, 800f608 <__smakebuf_r+0x74>
 800f5fc:	89a3      	ldrh	r3, [r4, #12]
 800f5fe:	f023 0303 	bic.w	r3, r3, #3
 800f602:	f043 0301 	orr.w	r3, r3, #1
 800f606:	81a3      	strh	r3, [r4, #12]
 800f608:	89a0      	ldrh	r0, [r4, #12]
 800f60a:	4305      	orrs	r5, r0
 800f60c:	81a5      	strh	r5, [r4, #12]
 800f60e:	e7cd      	b.n	800f5ac <__smakebuf_r+0x18>
 800f610:	0800f3a1 	.word	0x0800f3a1

0800f614 <_malloc_usable_size_r>:
 800f614:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f618:	1f18      	subs	r0, r3, #4
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	bfbc      	itt	lt
 800f61e:	580b      	ldrlt	r3, [r1, r0]
 800f620:	18c0      	addlt	r0, r0, r3
 800f622:	4770      	bx	lr

0800f624 <_raise_r>:
 800f624:	291f      	cmp	r1, #31
 800f626:	b538      	push	{r3, r4, r5, lr}
 800f628:	4604      	mov	r4, r0
 800f62a:	460d      	mov	r5, r1
 800f62c:	d904      	bls.n	800f638 <_raise_r+0x14>
 800f62e:	2316      	movs	r3, #22
 800f630:	6003      	str	r3, [r0, #0]
 800f632:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f636:	bd38      	pop	{r3, r4, r5, pc}
 800f638:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f63a:	b112      	cbz	r2, 800f642 <_raise_r+0x1e>
 800f63c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f640:	b94b      	cbnz	r3, 800f656 <_raise_r+0x32>
 800f642:	4620      	mov	r0, r4
 800f644:	f000 f830 	bl	800f6a8 <_getpid_r>
 800f648:	462a      	mov	r2, r5
 800f64a:	4601      	mov	r1, r0
 800f64c:	4620      	mov	r0, r4
 800f64e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f652:	f000 b817 	b.w	800f684 <_kill_r>
 800f656:	2b01      	cmp	r3, #1
 800f658:	d00a      	beq.n	800f670 <_raise_r+0x4c>
 800f65a:	1c59      	adds	r1, r3, #1
 800f65c:	d103      	bne.n	800f666 <_raise_r+0x42>
 800f65e:	2316      	movs	r3, #22
 800f660:	6003      	str	r3, [r0, #0]
 800f662:	2001      	movs	r0, #1
 800f664:	e7e7      	b.n	800f636 <_raise_r+0x12>
 800f666:	2400      	movs	r4, #0
 800f668:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f66c:	4628      	mov	r0, r5
 800f66e:	4798      	blx	r3
 800f670:	2000      	movs	r0, #0
 800f672:	e7e0      	b.n	800f636 <_raise_r+0x12>

0800f674 <raise>:
 800f674:	4b02      	ldr	r3, [pc, #8]	; (800f680 <raise+0xc>)
 800f676:	4601      	mov	r1, r0
 800f678:	6818      	ldr	r0, [r3, #0]
 800f67a:	f7ff bfd3 	b.w	800f624 <_raise_r>
 800f67e:	bf00      	nop
 800f680:	200001b4 	.word	0x200001b4

0800f684 <_kill_r>:
 800f684:	b538      	push	{r3, r4, r5, lr}
 800f686:	4d07      	ldr	r5, [pc, #28]	; (800f6a4 <_kill_r+0x20>)
 800f688:	2300      	movs	r3, #0
 800f68a:	4604      	mov	r4, r0
 800f68c:	4608      	mov	r0, r1
 800f68e:	4611      	mov	r1, r2
 800f690:	602b      	str	r3, [r5, #0]
 800f692:	f7f3 f9a1 	bl	80029d8 <_kill>
 800f696:	1c43      	adds	r3, r0, #1
 800f698:	d102      	bne.n	800f6a0 <_kill_r+0x1c>
 800f69a:	682b      	ldr	r3, [r5, #0]
 800f69c:	b103      	cbz	r3, 800f6a0 <_kill_r+0x1c>
 800f69e:	6023      	str	r3, [r4, #0]
 800f6a0:	bd38      	pop	{r3, r4, r5, pc}
 800f6a2:	bf00      	nop
 800f6a4:	2000b1f4 	.word	0x2000b1f4

0800f6a8 <_getpid_r>:
 800f6a8:	f7f3 b98e 	b.w	80029c8 <_getpid>

0800f6ac <__sread>:
 800f6ac:	b510      	push	{r4, lr}
 800f6ae:	460c      	mov	r4, r1
 800f6b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6b4:	f000 f894 	bl	800f7e0 <_read_r>
 800f6b8:	2800      	cmp	r0, #0
 800f6ba:	bfab      	itete	ge
 800f6bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f6be:	89a3      	ldrhlt	r3, [r4, #12]
 800f6c0:	181b      	addge	r3, r3, r0
 800f6c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f6c6:	bfac      	ite	ge
 800f6c8:	6563      	strge	r3, [r4, #84]	; 0x54
 800f6ca:	81a3      	strhlt	r3, [r4, #12]
 800f6cc:	bd10      	pop	{r4, pc}

0800f6ce <__swrite>:
 800f6ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6d2:	461f      	mov	r7, r3
 800f6d4:	898b      	ldrh	r3, [r1, #12]
 800f6d6:	05db      	lsls	r3, r3, #23
 800f6d8:	4605      	mov	r5, r0
 800f6da:	460c      	mov	r4, r1
 800f6dc:	4616      	mov	r6, r2
 800f6de:	d505      	bpl.n	800f6ec <__swrite+0x1e>
 800f6e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6e4:	2302      	movs	r3, #2
 800f6e6:	2200      	movs	r2, #0
 800f6e8:	f000 f868 	bl	800f7bc <_lseek_r>
 800f6ec:	89a3      	ldrh	r3, [r4, #12]
 800f6ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f6f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f6f6:	81a3      	strh	r3, [r4, #12]
 800f6f8:	4632      	mov	r2, r6
 800f6fa:	463b      	mov	r3, r7
 800f6fc:	4628      	mov	r0, r5
 800f6fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f702:	f000 b817 	b.w	800f734 <_write_r>

0800f706 <__sseek>:
 800f706:	b510      	push	{r4, lr}
 800f708:	460c      	mov	r4, r1
 800f70a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f70e:	f000 f855 	bl	800f7bc <_lseek_r>
 800f712:	1c43      	adds	r3, r0, #1
 800f714:	89a3      	ldrh	r3, [r4, #12]
 800f716:	bf15      	itete	ne
 800f718:	6560      	strne	r0, [r4, #84]	; 0x54
 800f71a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f71e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f722:	81a3      	strheq	r3, [r4, #12]
 800f724:	bf18      	it	ne
 800f726:	81a3      	strhne	r3, [r4, #12]
 800f728:	bd10      	pop	{r4, pc}

0800f72a <__sclose>:
 800f72a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f72e:	f000 b813 	b.w	800f758 <_close_r>
	...

0800f734 <_write_r>:
 800f734:	b538      	push	{r3, r4, r5, lr}
 800f736:	4d07      	ldr	r5, [pc, #28]	; (800f754 <_write_r+0x20>)
 800f738:	4604      	mov	r4, r0
 800f73a:	4608      	mov	r0, r1
 800f73c:	4611      	mov	r1, r2
 800f73e:	2200      	movs	r2, #0
 800f740:	602a      	str	r2, [r5, #0]
 800f742:	461a      	mov	r2, r3
 800f744:	f7f3 f97f 	bl	8002a46 <_write>
 800f748:	1c43      	adds	r3, r0, #1
 800f74a:	d102      	bne.n	800f752 <_write_r+0x1e>
 800f74c:	682b      	ldr	r3, [r5, #0]
 800f74e:	b103      	cbz	r3, 800f752 <_write_r+0x1e>
 800f750:	6023      	str	r3, [r4, #0]
 800f752:	bd38      	pop	{r3, r4, r5, pc}
 800f754:	2000b1f4 	.word	0x2000b1f4

0800f758 <_close_r>:
 800f758:	b538      	push	{r3, r4, r5, lr}
 800f75a:	4d06      	ldr	r5, [pc, #24]	; (800f774 <_close_r+0x1c>)
 800f75c:	2300      	movs	r3, #0
 800f75e:	4604      	mov	r4, r0
 800f760:	4608      	mov	r0, r1
 800f762:	602b      	str	r3, [r5, #0]
 800f764:	f7f3 f98b 	bl	8002a7e <_close>
 800f768:	1c43      	adds	r3, r0, #1
 800f76a:	d102      	bne.n	800f772 <_close_r+0x1a>
 800f76c:	682b      	ldr	r3, [r5, #0]
 800f76e:	b103      	cbz	r3, 800f772 <_close_r+0x1a>
 800f770:	6023      	str	r3, [r4, #0]
 800f772:	bd38      	pop	{r3, r4, r5, pc}
 800f774:	2000b1f4 	.word	0x2000b1f4

0800f778 <_fstat_r>:
 800f778:	b538      	push	{r3, r4, r5, lr}
 800f77a:	4d07      	ldr	r5, [pc, #28]	; (800f798 <_fstat_r+0x20>)
 800f77c:	2300      	movs	r3, #0
 800f77e:	4604      	mov	r4, r0
 800f780:	4608      	mov	r0, r1
 800f782:	4611      	mov	r1, r2
 800f784:	602b      	str	r3, [r5, #0]
 800f786:	f7f3 f986 	bl	8002a96 <_fstat>
 800f78a:	1c43      	adds	r3, r0, #1
 800f78c:	d102      	bne.n	800f794 <_fstat_r+0x1c>
 800f78e:	682b      	ldr	r3, [r5, #0]
 800f790:	b103      	cbz	r3, 800f794 <_fstat_r+0x1c>
 800f792:	6023      	str	r3, [r4, #0]
 800f794:	bd38      	pop	{r3, r4, r5, pc}
 800f796:	bf00      	nop
 800f798:	2000b1f4 	.word	0x2000b1f4

0800f79c <_isatty_r>:
 800f79c:	b538      	push	{r3, r4, r5, lr}
 800f79e:	4d06      	ldr	r5, [pc, #24]	; (800f7b8 <_isatty_r+0x1c>)
 800f7a0:	2300      	movs	r3, #0
 800f7a2:	4604      	mov	r4, r0
 800f7a4:	4608      	mov	r0, r1
 800f7a6:	602b      	str	r3, [r5, #0]
 800f7a8:	f7f3 f985 	bl	8002ab6 <_isatty>
 800f7ac:	1c43      	adds	r3, r0, #1
 800f7ae:	d102      	bne.n	800f7b6 <_isatty_r+0x1a>
 800f7b0:	682b      	ldr	r3, [r5, #0]
 800f7b2:	b103      	cbz	r3, 800f7b6 <_isatty_r+0x1a>
 800f7b4:	6023      	str	r3, [r4, #0]
 800f7b6:	bd38      	pop	{r3, r4, r5, pc}
 800f7b8:	2000b1f4 	.word	0x2000b1f4

0800f7bc <_lseek_r>:
 800f7bc:	b538      	push	{r3, r4, r5, lr}
 800f7be:	4d07      	ldr	r5, [pc, #28]	; (800f7dc <_lseek_r+0x20>)
 800f7c0:	4604      	mov	r4, r0
 800f7c2:	4608      	mov	r0, r1
 800f7c4:	4611      	mov	r1, r2
 800f7c6:	2200      	movs	r2, #0
 800f7c8:	602a      	str	r2, [r5, #0]
 800f7ca:	461a      	mov	r2, r3
 800f7cc:	f7f3 f97e 	bl	8002acc <_lseek>
 800f7d0:	1c43      	adds	r3, r0, #1
 800f7d2:	d102      	bne.n	800f7da <_lseek_r+0x1e>
 800f7d4:	682b      	ldr	r3, [r5, #0]
 800f7d6:	b103      	cbz	r3, 800f7da <_lseek_r+0x1e>
 800f7d8:	6023      	str	r3, [r4, #0]
 800f7da:	bd38      	pop	{r3, r4, r5, pc}
 800f7dc:	2000b1f4 	.word	0x2000b1f4

0800f7e0 <_read_r>:
 800f7e0:	b538      	push	{r3, r4, r5, lr}
 800f7e2:	4d07      	ldr	r5, [pc, #28]	; (800f800 <_read_r+0x20>)
 800f7e4:	4604      	mov	r4, r0
 800f7e6:	4608      	mov	r0, r1
 800f7e8:	4611      	mov	r1, r2
 800f7ea:	2200      	movs	r2, #0
 800f7ec:	602a      	str	r2, [r5, #0]
 800f7ee:	461a      	mov	r2, r3
 800f7f0:	f7f3 f90c 	bl	8002a0c <_read>
 800f7f4:	1c43      	adds	r3, r0, #1
 800f7f6:	d102      	bne.n	800f7fe <_read_r+0x1e>
 800f7f8:	682b      	ldr	r3, [r5, #0]
 800f7fa:	b103      	cbz	r3, 800f7fe <_read_r+0x1e>
 800f7fc:	6023      	str	r3, [r4, #0]
 800f7fe:	bd38      	pop	{r3, r4, r5, pc}
 800f800:	2000b1f4 	.word	0x2000b1f4

0800f804 <atan2>:
 800f804:	f000 b870 	b.w	800f8e8 <__ieee754_atan2>

0800f808 <pow>:
 800f808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f80a:	ed2d 8b02 	vpush	{d8}
 800f80e:	eeb0 8a40 	vmov.f32	s16, s0
 800f812:	eef0 8a60 	vmov.f32	s17, s1
 800f816:	ec55 4b11 	vmov	r4, r5, d1
 800f81a:	f000 f931 	bl	800fa80 <__ieee754_pow>
 800f81e:	4622      	mov	r2, r4
 800f820:	462b      	mov	r3, r5
 800f822:	4620      	mov	r0, r4
 800f824:	4629      	mov	r1, r5
 800f826:	ec57 6b10 	vmov	r6, r7, d0
 800f82a:	f7f1 f97f 	bl	8000b2c <__aeabi_dcmpun>
 800f82e:	2800      	cmp	r0, #0
 800f830:	d13b      	bne.n	800f8aa <pow+0xa2>
 800f832:	ec51 0b18 	vmov	r0, r1, d8
 800f836:	2200      	movs	r2, #0
 800f838:	2300      	movs	r3, #0
 800f83a:	f7f1 f945 	bl	8000ac8 <__aeabi_dcmpeq>
 800f83e:	b1b8      	cbz	r0, 800f870 <pow+0x68>
 800f840:	2200      	movs	r2, #0
 800f842:	2300      	movs	r3, #0
 800f844:	4620      	mov	r0, r4
 800f846:	4629      	mov	r1, r5
 800f848:	f7f1 f93e 	bl	8000ac8 <__aeabi_dcmpeq>
 800f84c:	2800      	cmp	r0, #0
 800f84e:	d146      	bne.n	800f8de <pow+0xd6>
 800f850:	ec45 4b10 	vmov	d0, r4, r5
 800f854:	f001 f8cd 	bl	80109f2 <finite>
 800f858:	b338      	cbz	r0, 800f8aa <pow+0xa2>
 800f85a:	2200      	movs	r2, #0
 800f85c:	2300      	movs	r3, #0
 800f85e:	4620      	mov	r0, r4
 800f860:	4629      	mov	r1, r5
 800f862:	f7f1 f93b 	bl	8000adc <__aeabi_dcmplt>
 800f866:	b300      	cbz	r0, 800f8aa <pow+0xa2>
 800f868:	f7fd f8b8 	bl	800c9dc <__errno>
 800f86c:	2322      	movs	r3, #34	; 0x22
 800f86e:	e01b      	b.n	800f8a8 <pow+0xa0>
 800f870:	ec47 6b10 	vmov	d0, r6, r7
 800f874:	f001 f8bd 	bl	80109f2 <finite>
 800f878:	b9e0      	cbnz	r0, 800f8b4 <pow+0xac>
 800f87a:	eeb0 0a48 	vmov.f32	s0, s16
 800f87e:	eef0 0a68 	vmov.f32	s1, s17
 800f882:	f001 f8b6 	bl	80109f2 <finite>
 800f886:	b1a8      	cbz	r0, 800f8b4 <pow+0xac>
 800f888:	ec45 4b10 	vmov	d0, r4, r5
 800f88c:	f001 f8b1 	bl	80109f2 <finite>
 800f890:	b180      	cbz	r0, 800f8b4 <pow+0xac>
 800f892:	4632      	mov	r2, r6
 800f894:	463b      	mov	r3, r7
 800f896:	4630      	mov	r0, r6
 800f898:	4639      	mov	r1, r7
 800f89a:	f7f1 f947 	bl	8000b2c <__aeabi_dcmpun>
 800f89e:	2800      	cmp	r0, #0
 800f8a0:	d0e2      	beq.n	800f868 <pow+0x60>
 800f8a2:	f7fd f89b 	bl	800c9dc <__errno>
 800f8a6:	2321      	movs	r3, #33	; 0x21
 800f8a8:	6003      	str	r3, [r0, #0]
 800f8aa:	ecbd 8b02 	vpop	{d8}
 800f8ae:	ec47 6b10 	vmov	d0, r6, r7
 800f8b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f8b4:	2200      	movs	r2, #0
 800f8b6:	2300      	movs	r3, #0
 800f8b8:	4630      	mov	r0, r6
 800f8ba:	4639      	mov	r1, r7
 800f8bc:	f7f1 f904 	bl	8000ac8 <__aeabi_dcmpeq>
 800f8c0:	2800      	cmp	r0, #0
 800f8c2:	d0f2      	beq.n	800f8aa <pow+0xa2>
 800f8c4:	eeb0 0a48 	vmov.f32	s0, s16
 800f8c8:	eef0 0a68 	vmov.f32	s1, s17
 800f8cc:	f001 f891 	bl	80109f2 <finite>
 800f8d0:	2800      	cmp	r0, #0
 800f8d2:	d0ea      	beq.n	800f8aa <pow+0xa2>
 800f8d4:	ec45 4b10 	vmov	d0, r4, r5
 800f8d8:	f001 f88b 	bl	80109f2 <finite>
 800f8dc:	e7c3      	b.n	800f866 <pow+0x5e>
 800f8de:	4f01      	ldr	r7, [pc, #4]	; (800f8e4 <pow+0xdc>)
 800f8e0:	2600      	movs	r6, #0
 800f8e2:	e7e2      	b.n	800f8aa <pow+0xa2>
 800f8e4:	3ff00000 	.word	0x3ff00000

0800f8e8 <__ieee754_atan2>:
 800f8e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f8ec:	ec57 6b11 	vmov	r6, r7, d1
 800f8f0:	4273      	negs	r3, r6
 800f8f2:	f8df e184 	ldr.w	lr, [pc, #388]	; 800fa78 <__ieee754_atan2+0x190>
 800f8f6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800f8fa:	4333      	orrs	r3, r6
 800f8fc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800f900:	4573      	cmp	r3, lr
 800f902:	ec51 0b10 	vmov	r0, r1, d0
 800f906:	ee11 8a10 	vmov	r8, s2
 800f90a:	d80a      	bhi.n	800f922 <__ieee754_atan2+0x3a>
 800f90c:	4244      	negs	r4, r0
 800f90e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f912:	4304      	orrs	r4, r0
 800f914:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800f918:	4574      	cmp	r4, lr
 800f91a:	ee10 9a10 	vmov	r9, s0
 800f91e:	468c      	mov	ip, r1
 800f920:	d907      	bls.n	800f932 <__ieee754_atan2+0x4a>
 800f922:	4632      	mov	r2, r6
 800f924:	463b      	mov	r3, r7
 800f926:	f7f0 fcb1 	bl	800028c <__adddf3>
 800f92a:	ec41 0b10 	vmov	d0, r0, r1
 800f92e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f932:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800f936:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800f93a:	4334      	orrs	r4, r6
 800f93c:	d103      	bne.n	800f946 <__ieee754_atan2+0x5e>
 800f93e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f942:	f000 bead 	b.w	80106a0 <atan>
 800f946:	17bc      	asrs	r4, r7, #30
 800f948:	f004 0402 	and.w	r4, r4, #2
 800f94c:	ea53 0909 	orrs.w	r9, r3, r9
 800f950:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800f954:	d107      	bne.n	800f966 <__ieee754_atan2+0x7e>
 800f956:	2c02      	cmp	r4, #2
 800f958:	d060      	beq.n	800fa1c <__ieee754_atan2+0x134>
 800f95a:	2c03      	cmp	r4, #3
 800f95c:	d1e5      	bne.n	800f92a <__ieee754_atan2+0x42>
 800f95e:	a142      	add	r1, pc, #264	; (adr r1, 800fa68 <__ieee754_atan2+0x180>)
 800f960:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f964:	e7e1      	b.n	800f92a <__ieee754_atan2+0x42>
 800f966:	ea52 0808 	orrs.w	r8, r2, r8
 800f96a:	d106      	bne.n	800f97a <__ieee754_atan2+0x92>
 800f96c:	f1bc 0f00 	cmp.w	ip, #0
 800f970:	da5f      	bge.n	800fa32 <__ieee754_atan2+0x14a>
 800f972:	a13f      	add	r1, pc, #252	; (adr r1, 800fa70 <__ieee754_atan2+0x188>)
 800f974:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f978:	e7d7      	b.n	800f92a <__ieee754_atan2+0x42>
 800f97a:	4572      	cmp	r2, lr
 800f97c:	d10f      	bne.n	800f99e <__ieee754_atan2+0xb6>
 800f97e:	4293      	cmp	r3, r2
 800f980:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800f984:	d107      	bne.n	800f996 <__ieee754_atan2+0xae>
 800f986:	2c02      	cmp	r4, #2
 800f988:	d84c      	bhi.n	800fa24 <__ieee754_atan2+0x13c>
 800f98a:	4b35      	ldr	r3, [pc, #212]	; (800fa60 <__ieee754_atan2+0x178>)
 800f98c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800f990:	e9d4 0100 	ldrd	r0, r1, [r4]
 800f994:	e7c9      	b.n	800f92a <__ieee754_atan2+0x42>
 800f996:	2c02      	cmp	r4, #2
 800f998:	d848      	bhi.n	800fa2c <__ieee754_atan2+0x144>
 800f99a:	4b32      	ldr	r3, [pc, #200]	; (800fa64 <__ieee754_atan2+0x17c>)
 800f99c:	e7f6      	b.n	800f98c <__ieee754_atan2+0xa4>
 800f99e:	4573      	cmp	r3, lr
 800f9a0:	d0e4      	beq.n	800f96c <__ieee754_atan2+0x84>
 800f9a2:	1a9b      	subs	r3, r3, r2
 800f9a4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800f9a8:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f9ac:	da1e      	bge.n	800f9ec <__ieee754_atan2+0x104>
 800f9ae:	2f00      	cmp	r7, #0
 800f9b0:	da01      	bge.n	800f9b6 <__ieee754_atan2+0xce>
 800f9b2:	323c      	adds	r2, #60	; 0x3c
 800f9b4:	db1e      	blt.n	800f9f4 <__ieee754_atan2+0x10c>
 800f9b6:	4632      	mov	r2, r6
 800f9b8:	463b      	mov	r3, r7
 800f9ba:	f7f0 ff47 	bl	800084c <__aeabi_ddiv>
 800f9be:	ec41 0b10 	vmov	d0, r0, r1
 800f9c2:	f001 f80d 	bl	80109e0 <fabs>
 800f9c6:	f000 fe6b 	bl	80106a0 <atan>
 800f9ca:	ec51 0b10 	vmov	r0, r1, d0
 800f9ce:	2c01      	cmp	r4, #1
 800f9d0:	d013      	beq.n	800f9fa <__ieee754_atan2+0x112>
 800f9d2:	2c02      	cmp	r4, #2
 800f9d4:	d015      	beq.n	800fa02 <__ieee754_atan2+0x11a>
 800f9d6:	2c00      	cmp	r4, #0
 800f9d8:	d0a7      	beq.n	800f92a <__ieee754_atan2+0x42>
 800f9da:	a319      	add	r3, pc, #100	; (adr r3, 800fa40 <__ieee754_atan2+0x158>)
 800f9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9e0:	f7f0 fc52 	bl	8000288 <__aeabi_dsub>
 800f9e4:	a318      	add	r3, pc, #96	; (adr r3, 800fa48 <__ieee754_atan2+0x160>)
 800f9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9ea:	e014      	b.n	800fa16 <__ieee754_atan2+0x12e>
 800f9ec:	a118      	add	r1, pc, #96	; (adr r1, 800fa50 <__ieee754_atan2+0x168>)
 800f9ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f9f2:	e7ec      	b.n	800f9ce <__ieee754_atan2+0xe6>
 800f9f4:	2000      	movs	r0, #0
 800f9f6:	2100      	movs	r1, #0
 800f9f8:	e7e9      	b.n	800f9ce <__ieee754_atan2+0xe6>
 800f9fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f9fe:	4619      	mov	r1, r3
 800fa00:	e793      	b.n	800f92a <__ieee754_atan2+0x42>
 800fa02:	a30f      	add	r3, pc, #60	; (adr r3, 800fa40 <__ieee754_atan2+0x158>)
 800fa04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa08:	f7f0 fc3e 	bl	8000288 <__aeabi_dsub>
 800fa0c:	4602      	mov	r2, r0
 800fa0e:	460b      	mov	r3, r1
 800fa10:	a10d      	add	r1, pc, #52	; (adr r1, 800fa48 <__ieee754_atan2+0x160>)
 800fa12:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fa16:	f7f0 fc37 	bl	8000288 <__aeabi_dsub>
 800fa1a:	e786      	b.n	800f92a <__ieee754_atan2+0x42>
 800fa1c:	a10a      	add	r1, pc, #40	; (adr r1, 800fa48 <__ieee754_atan2+0x160>)
 800fa1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fa22:	e782      	b.n	800f92a <__ieee754_atan2+0x42>
 800fa24:	a10c      	add	r1, pc, #48	; (adr r1, 800fa58 <__ieee754_atan2+0x170>)
 800fa26:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fa2a:	e77e      	b.n	800f92a <__ieee754_atan2+0x42>
 800fa2c:	2000      	movs	r0, #0
 800fa2e:	2100      	movs	r1, #0
 800fa30:	e77b      	b.n	800f92a <__ieee754_atan2+0x42>
 800fa32:	a107      	add	r1, pc, #28	; (adr r1, 800fa50 <__ieee754_atan2+0x168>)
 800fa34:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fa38:	e777      	b.n	800f92a <__ieee754_atan2+0x42>
 800fa3a:	bf00      	nop
 800fa3c:	f3af 8000 	nop.w
 800fa40:	33145c07 	.word	0x33145c07
 800fa44:	3ca1a626 	.word	0x3ca1a626
 800fa48:	54442d18 	.word	0x54442d18
 800fa4c:	400921fb 	.word	0x400921fb
 800fa50:	54442d18 	.word	0x54442d18
 800fa54:	3ff921fb 	.word	0x3ff921fb
 800fa58:	54442d18 	.word	0x54442d18
 800fa5c:	3fe921fb 	.word	0x3fe921fb
 800fa60:	08011338 	.word	0x08011338
 800fa64:	08011350 	.word	0x08011350
 800fa68:	54442d18 	.word	0x54442d18
 800fa6c:	c00921fb 	.word	0xc00921fb
 800fa70:	54442d18 	.word	0x54442d18
 800fa74:	bff921fb 	.word	0xbff921fb
 800fa78:	7ff00000 	.word	0x7ff00000
 800fa7c:	00000000 	.word	0x00000000

0800fa80 <__ieee754_pow>:
 800fa80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa84:	ed2d 8b06 	vpush	{d8-d10}
 800fa88:	b089      	sub	sp, #36	; 0x24
 800fa8a:	ed8d 1b00 	vstr	d1, [sp]
 800fa8e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800fa92:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800fa96:	ea58 0102 	orrs.w	r1, r8, r2
 800fa9a:	ec57 6b10 	vmov	r6, r7, d0
 800fa9e:	d115      	bne.n	800facc <__ieee754_pow+0x4c>
 800faa0:	19b3      	adds	r3, r6, r6
 800faa2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800faa6:	4152      	adcs	r2, r2
 800faa8:	4299      	cmp	r1, r3
 800faaa:	4b89      	ldr	r3, [pc, #548]	; (800fcd0 <__ieee754_pow+0x250>)
 800faac:	4193      	sbcs	r3, r2
 800faae:	f080 84d2 	bcs.w	8010456 <__ieee754_pow+0x9d6>
 800fab2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fab6:	4630      	mov	r0, r6
 800fab8:	4639      	mov	r1, r7
 800faba:	f7f0 fbe7 	bl	800028c <__adddf3>
 800fabe:	ec41 0b10 	vmov	d0, r0, r1
 800fac2:	b009      	add	sp, #36	; 0x24
 800fac4:	ecbd 8b06 	vpop	{d8-d10}
 800fac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800facc:	4b81      	ldr	r3, [pc, #516]	; (800fcd4 <__ieee754_pow+0x254>)
 800face:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800fad2:	429c      	cmp	r4, r3
 800fad4:	ee10 aa10 	vmov	sl, s0
 800fad8:	463d      	mov	r5, r7
 800fada:	dc06      	bgt.n	800faea <__ieee754_pow+0x6a>
 800fadc:	d101      	bne.n	800fae2 <__ieee754_pow+0x62>
 800fade:	2e00      	cmp	r6, #0
 800fae0:	d1e7      	bne.n	800fab2 <__ieee754_pow+0x32>
 800fae2:	4598      	cmp	r8, r3
 800fae4:	dc01      	bgt.n	800faea <__ieee754_pow+0x6a>
 800fae6:	d10f      	bne.n	800fb08 <__ieee754_pow+0x88>
 800fae8:	b172      	cbz	r2, 800fb08 <__ieee754_pow+0x88>
 800faea:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800faee:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800faf2:	ea55 050a 	orrs.w	r5, r5, sl
 800faf6:	d1dc      	bne.n	800fab2 <__ieee754_pow+0x32>
 800faf8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800fafc:	18db      	adds	r3, r3, r3
 800fafe:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800fb02:	4152      	adcs	r2, r2
 800fb04:	429d      	cmp	r5, r3
 800fb06:	e7d0      	b.n	800faaa <__ieee754_pow+0x2a>
 800fb08:	2d00      	cmp	r5, #0
 800fb0a:	da3b      	bge.n	800fb84 <__ieee754_pow+0x104>
 800fb0c:	4b72      	ldr	r3, [pc, #456]	; (800fcd8 <__ieee754_pow+0x258>)
 800fb0e:	4598      	cmp	r8, r3
 800fb10:	dc51      	bgt.n	800fbb6 <__ieee754_pow+0x136>
 800fb12:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800fb16:	4598      	cmp	r8, r3
 800fb18:	f340 84ac 	ble.w	8010474 <__ieee754_pow+0x9f4>
 800fb1c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800fb20:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800fb24:	2b14      	cmp	r3, #20
 800fb26:	dd0f      	ble.n	800fb48 <__ieee754_pow+0xc8>
 800fb28:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800fb2c:	fa22 f103 	lsr.w	r1, r2, r3
 800fb30:	fa01 f303 	lsl.w	r3, r1, r3
 800fb34:	4293      	cmp	r3, r2
 800fb36:	f040 849d 	bne.w	8010474 <__ieee754_pow+0x9f4>
 800fb3a:	f001 0101 	and.w	r1, r1, #1
 800fb3e:	f1c1 0302 	rsb	r3, r1, #2
 800fb42:	9304      	str	r3, [sp, #16]
 800fb44:	b182      	cbz	r2, 800fb68 <__ieee754_pow+0xe8>
 800fb46:	e05f      	b.n	800fc08 <__ieee754_pow+0x188>
 800fb48:	2a00      	cmp	r2, #0
 800fb4a:	d15b      	bne.n	800fc04 <__ieee754_pow+0x184>
 800fb4c:	f1c3 0314 	rsb	r3, r3, #20
 800fb50:	fa48 f103 	asr.w	r1, r8, r3
 800fb54:	fa01 f303 	lsl.w	r3, r1, r3
 800fb58:	4543      	cmp	r3, r8
 800fb5a:	f040 8488 	bne.w	801046e <__ieee754_pow+0x9ee>
 800fb5e:	f001 0101 	and.w	r1, r1, #1
 800fb62:	f1c1 0302 	rsb	r3, r1, #2
 800fb66:	9304      	str	r3, [sp, #16]
 800fb68:	4b5c      	ldr	r3, [pc, #368]	; (800fcdc <__ieee754_pow+0x25c>)
 800fb6a:	4598      	cmp	r8, r3
 800fb6c:	d132      	bne.n	800fbd4 <__ieee754_pow+0x154>
 800fb6e:	f1b9 0f00 	cmp.w	r9, #0
 800fb72:	f280 8478 	bge.w	8010466 <__ieee754_pow+0x9e6>
 800fb76:	4959      	ldr	r1, [pc, #356]	; (800fcdc <__ieee754_pow+0x25c>)
 800fb78:	4632      	mov	r2, r6
 800fb7a:	463b      	mov	r3, r7
 800fb7c:	2000      	movs	r0, #0
 800fb7e:	f7f0 fe65 	bl	800084c <__aeabi_ddiv>
 800fb82:	e79c      	b.n	800fabe <__ieee754_pow+0x3e>
 800fb84:	2300      	movs	r3, #0
 800fb86:	9304      	str	r3, [sp, #16]
 800fb88:	2a00      	cmp	r2, #0
 800fb8a:	d13d      	bne.n	800fc08 <__ieee754_pow+0x188>
 800fb8c:	4b51      	ldr	r3, [pc, #324]	; (800fcd4 <__ieee754_pow+0x254>)
 800fb8e:	4598      	cmp	r8, r3
 800fb90:	d1ea      	bne.n	800fb68 <__ieee754_pow+0xe8>
 800fb92:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800fb96:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800fb9a:	ea53 030a 	orrs.w	r3, r3, sl
 800fb9e:	f000 845a 	beq.w	8010456 <__ieee754_pow+0x9d6>
 800fba2:	4b4f      	ldr	r3, [pc, #316]	; (800fce0 <__ieee754_pow+0x260>)
 800fba4:	429c      	cmp	r4, r3
 800fba6:	dd08      	ble.n	800fbba <__ieee754_pow+0x13a>
 800fba8:	f1b9 0f00 	cmp.w	r9, #0
 800fbac:	f2c0 8457 	blt.w	801045e <__ieee754_pow+0x9de>
 800fbb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fbb4:	e783      	b.n	800fabe <__ieee754_pow+0x3e>
 800fbb6:	2302      	movs	r3, #2
 800fbb8:	e7e5      	b.n	800fb86 <__ieee754_pow+0x106>
 800fbba:	f1b9 0f00 	cmp.w	r9, #0
 800fbbe:	f04f 0000 	mov.w	r0, #0
 800fbc2:	f04f 0100 	mov.w	r1, #0
 800fbc6:	f6bf af7a 	bge.w	800fabe <__ieee754_pow+0x3e>
 800fbca:	e9dd 0300 	ldrd	r0, r3, [sp]
 800fbce:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800fbd2:	e774      	b.n	800fabe <__ieee754_pow+0x3e>
 800fbd4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800fbd8:	d106      	bne.n	800fbe8 <__ieee754_pow+0x168>
 800fbda:	4632      	mov	r2, r6
 800fbdc:	463b      	mov	r3, r7
 800fbde:	4630      	mov	r0, r6
 800fbe0:	4639      	mov	r1, r7
 800fbe2:	f7f0 fd09 	bl	80005f8 <__aeabi_dmul>
 800fbe6:	e76a      	b.n	800fabe <__ieee754_pow+0x3e>
 800fbe8:	4b3e      	ldr	r3, [pc, #248]	; (800fce4 <__ieee754_pow+0x264>)
 800fbea:	4599      	cmp	r9, r3
 800fbec:	d10c      	bne.n	800fc08 <__ieee754_pow+0x188>
 800fbee:	2d00      	cmp	r5, #0
 800fbf0:	db0a      	blt.n	800fc08 <__ieee754_pow+0x188>
 800fbf2:	ec47 6b10 	vmov	d0, r6, r7
 800fbf6:	b009      	add	sp, #36	; 0x24
 800fbf8:	ecbd 8b06 	vpop	{d8-d10}
 800fbfc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc00:	f000 bc6c 	b.w	80104dc <__ieee754_sqrt>
 800fc04:	2300      	movs	r3, #0
 800fc06:	9304      	str	r3, [sp, #16]
 800fc08:	ec47 6b10 	vmov	d0, r6, r7
 800fc0c:	f000 fee8 	bl	80109e0 <fabs>
 800fc10:	ec51 0b10 	vmov	r0, r1, d0
 800fc14:	f1ba 0f00 	cmp.w	sl, #0
 800fc18:	d129      	bne.n	800fc6e <__ieee754_pow+0x1ee>
 800fc1a:	b124      	cbz	r4, 800fc26 <__ieee754_pow+0x1a6>
 800fc1c:	4b2f      	ldr	r3, [pc, #188]	; (800fcdc <__ieee754_pow+0x25c>)
 800fc1e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800fc22:	429a      	cmp	r2, r3
 800fc24:	d123      	bne.n	800fc6e <__ieee754_pow+0x1ee>
 800fc26:	f1b9 0f00 	cmp.w	r9, #0
 800fc2a:	da05      	bge.n	800fc38 <__ieee754_pow+0x1b8>
 800fc2c:	4602      	mov	r2, r0
 800fc2e:	460b      	mov	r3, r1
 800fc30:	2000      	movs	r0, #0
 800fc32:	492a      	ldr	r1, [pc, #168]	; (800fcdc <__ieee754_pow+0x25c>)
 800fc34:	f7f0 fe0a 	bl	800084c <__aeabi_ddiv>
 800fc38:	2d00      	cmp	r5, #0
 800fc3a:	f6bf af40 	bge.w	800fabe <__ieee754_pow+0x3e>
 800fc3e:	9b04      	ldr	r3, [sp, #16]
 800fc40:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800fc44:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800fc48:	4323      	orrs	r3, r4
 800fc4a:	d108      	bne.n	800fc5e <__ieee754_pow+0x1de>
 800fc4c:	4602      	mov	r2, r0
 800fc4e:	460b      	mov	r3, r1
 800fc50:	4610      	mov	r0, r2
 800fc52:	4619      	mov	r1, r3
 800fc54:	f7f0 fb18 	bl	8000288 <__aeabi_dsub>
 800fc58:	4602      	mov	r2, r0
 800fc5a:	460b      	mov	r3, r1
 800fc5c:	e78f      	b.n	800fb7e <__ieee754_pow+0xfe>
 800fc5e:	9b04      	ldr	r3, [sp, #16]
 800fc60:	2b01      	cmp	r3, #1
 800fc62:	f47f af2c 	bne.w	800fabe <__ieee754_pow+0x3e>
 800fc66:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fc6a:	4619      	mov	r1, r3
 800fc6c:	e727      	b.n	800fabe <__ieee754_pow+0x3e>
 800fc6e:	0feb      	lsrs	r3, r5, #31
 800fc70:	3b01      	subs	r3, #1
 800fc72:	9306      	str	r3, [sp, #24]
 800fc74:	9a06      	ldr	r2, [sp, #24]
 800fc76:	9b04      	ldr	r3, [sp, #16]
 800fc78:	4313      	orrs	r3, r2
 800fc7a:	d102      	bne.n	800fc82 <__ieee754_pow+0x202>
 800fc7c:	4632      	mov	r2, r6
 800fc7e:	463b      	mov	r3, r7
 800fc80:	e7e6      	b.n	800fc50 <__ieee754_pow+0x1d0>
 800fc82:	4b19      	ldr	r3, [pc, #100]	; (800fce8 <__ieee754_pow+0x268>)
 800fc84:	4598      	cmp	r8, r3
 800fc86:	f340 80fb 	ble.w	800fe80 <__ieee754_pow+0x400>
 800fc8a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800fc8e:	4598      	cmp	r8, r3
 800fc90:	4b13      	ldr	r3, [pc, #76]	; (800fce0 <__ieee754_pow+0x260>)
 800fc92:	dd0c      	ble.n	800fcae <__ieee754_pow+0x22e>
 800fc94:	429c      	cmp	r4, r3
 800fc96:	dc0f      	bgt.n	800fcb8 <__ieee754_pow+0x238>
 800fc98:	f1b9 0f00 	cmp.w	r9, #0
 800fc9c:	da0f      	bge.n	800fcbe <__ieee754_pow+0x23e>
 800fc9e:	2000      	movs	r0, #0
 800fca0:	b009      	add	sp, #36	; 0x24
 800fca2:	ecbd 8b06 	vpop	{d8-d10}
 800fca6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcaa:	f000 bcf0 	b.w	801068e <__math_oflow>
 800fcae:	429c      	cmp	r4, r3
 800fcb0:	dbf2      	blt.n	800fc98 <__ieee754_pow+0x218>
 800fcb2:	4b0a      	ldr	r3, [pc, #40]	; (800fcdc <__ieee754_pow+0x25c>)
 800fcb4:	429c      	cmp	r4, r3
 800fcb6:	dd19      	ble.n	800fcec <__ieee754_pow+0x26c>
 800fcb8:	f1b9 0f00 	cmp.w	r9, #0
 800fcbc:	dcef      	bgt.n	800fc9e <__ieee754_pow+0x21e>
 800fcbe:	2000      	movs	r0, #0
 800fcc0:	b009      	add	sp, #36	; 0x24
 800fcc2:	ecbd 8b06 	vpop	{d8-d10}
 800fcc6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcca:	f000 bcd7 	b.w	801067c <__math_uflow>
 800fcce:	bf00      	nop
 800fcd0:	fff00000 	.word	0xfff00000
 800fcd4:	7ff00000 	.word	0x7ff00000
 800fcd8:	433fffff 	.word	0x433fffff
 800fcdc:	3ff00000 	.word	0x3ff00000
 800fce0:	3fefffff 	.word	0x3fefffff
 800fce4:	3fe00000 	.word	0x3fe00000
 800fce8:	41e00000 	.word	0x41e00000
 800fcec:	4b60      	ldr	r3, [pc, #384]	; (800fe70 <__ieee754_pow+0x3f0>)
 800fcee:	2200      	movs	r2, #0
 800fcf0:	f7f0 faca 	bl	8000288 <__aeabi_dsub>
 800fcf4:	a354      	add	r3, pc, #336	; (adr r3, 800fe48 <__ieee754_pow+0x3c8>)
 800fcf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcfa:	4604      	mov	r4, r0
 800fcfc:	460d      	mov	r5, r1
 800fcfe:	f7f0 fc7b 	bl	80005f8 <__aeabi_dmul>
 800fd02:	a353      	add	r3, pc, #332	; (adr r3, 800fe50 <__ieee754_pow+0x3d0>)
 800fd04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd08:	4606      	mov	r6, r0
 800fd0a:	460f      	mov	r7, r1
 800fd0c:	4620      	mov	r0, r4
 800fd0e:	4629      	mov	r1, r5
 800fd10:	f7f0 fc72 	bl	80005f8 <__aeabi_dmul>
 800fd14:	4b57      	ldr	r3, [pc, #348]	; (800fe74 <__ieee754_pow+0x3f4>)
 800fd16:	4682      	mov	sl, r0
 800fd18:	468b      	mov	fp, r1
 800fd1a:	2200      	movs	r2, #0
 800fd1c:	4620      	mov	r0, r4
 800fd1e:	4629      	mov	r1, r5
 800fd20:	f7f0 fc6a 	bl	80005f8 <__aeabi_dmul>
 800fd24:	4602      	mov	r2, r0
 800fd26:	460b      	mov	r3, r1
 800fd28:	a14b      	add	r1, pc, #300	; (adr r1, 800fe58 <__ieee754_pow+0x3d8>)
 800fd2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fd2e:	f7f0 faab 	bl	8000288 <__aeabi_dsub>
 800fd32:	4622      	mov	r2, r4
 800fd34:	462b      	mov	r3, r5
 800fd36:	f7f0 fc5f 	bl	80005f8 <__aeabi_dmul>
 800fd3a:	4602      	mov	r2, r0
 800fd3c:	460b      	mov	r3, r1
 800fd3e:	2000      	movs	r0, #0
 800fd40:	494d      	ldr	r1, [pc, #308]	; (800fe78 <__ieee754_pow+0x3f8>)
 800fd42:	f7f0 faa1 	bl	8000288 <__aeabi_dsub>
 800fd46:	4622      	mov	r2, r4
 800fd48:	4680      	mov	r8, r0
 800fd4a:	4689      	mov	r9, r1
 800fd4c:	462b      	mov	r3, r5
 800fd4e:	4620      	mov	r0, r4
 800fd50:	4629      	mov	r1, r5
 800fd52:	f7f0 fc51 	bl	80005f8 <__aeabi_dmul>
 800fd56:	4602      	mov	r2, r0
 800fd58:	460b      	mov	r3, r1
 800fd5a:	4640      	mov	r0, r8
 800fd5c:	4649      	mov	r1, r9
 800fd5e:	f7f0 fc4b 	bl	80005f8 <__aeabi_dmul>
 800fd62:	a33f      	add	r3, pc, #252	; (adr r3, 800fe60 <__ieee754_pow+0x3e0>)
 800fd64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd68:	f7f0 fc46 	bl	80005f8 <__aeabi_dmul>
 800fd6c:	4602      	mov	r2, r0
 800fd6e:	460b      	mov	r3, r1
 800fd70:	4650      	mov	r0, sl
 800fd72:	4659      	mov	r1, fp
 800fd74:	f7f0 fa88 	bl	8000288 <__aeabi_dsub>
 800fd78:	4602      	mov	r2, r0
 800fd7a:	460b      	mov	r3, r1
 800fd7c:	4680      	mov	r8, r0
 800fd7e:	4689      	mov	r9, r1
 800fd80:	4630      	mov	r0, r6
 800fd82:	4639      	mov	r1, r7
 800fd84:	f7f0 fa82 	bl	800028c <__adddf3>
 800fd88:	2000      	movs	r0, #0
 800fd8a:	4632      	mov	r2, r6
 800fd8c:	463b      	mov	r3, r7
 800fd8e:	4604      	mov	r4, r0
 800fd90:	460d      	mov	r5, r1
 800fd92:	f7f0 fa79 	bl	8000288 <__aeabi_dsub>
 800fd96:	4602      	mov	r2, r0
 800fd98:	460b      	mov	r3, r1
 800fd9a:	4640      	mov	r0, r8
 800fd9c:	4649      	mov	r1, r9
 800fd9e:	f7f0 fa73 	bl	8000288 <__aeabi_dsub>
 800fda2:	9b04      	ldr	r3, [sp, #16]
 800fda4:	9a06      	ldr	r2, [sp, #24]
 800fda6:	3b01      	subs	r3, #1
 800fda8:	4313      	orrs	r3, r2
 800fdaa:	4682      	mov	sl, r0
 800fdac:	468b      	mov	fp, r1
 800fdae:	f040 81e7 	bne.w	8010180 <__ieee754_pow+0x700>
 800fdb2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800fe68 <__ieee754_pow+0x3e8>
 800fdb6:	eeb0 8a47 	vmov.f32	s16, s14
 800fdba:	eef0 8a67 	vmov.f32	s17, s15
 800fdbe:	e9dd 6700 	ldrd	r6, r7, [sp]
 800fdc2:	2600      	movs	r6, #0
 800fdc4:	4632      	mov	r2, r6
 800fdc6:	463b      	mov	r3, r7
 800fdc8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fdcc:	f7f0 fa5c 	bl	8000288 <__aeabi_dsub>
 800fdd0:	4622      	mov	r2, r4
 800fdd2:	462b      	mov	r3, r5
 800fdd4:	f7f0 fc10 	bl	80005f8 <__aeabi_dmul>
 800fdd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fddc:	4680      	mov	r8, r0
 800fdde:	4689      	mov	r9, r1
 800fde0:	4650      	mov	r0, sl
 800fde2:	4659      	mov	r1, fp
 800fde4:	f7f0 fc08 	bl	80005f8 <__aeabi_dmul>
 800fde8:	4602      	mov	r2, r0
 800fdea:	460b      	mov	r3, r1
 800fdec:	4640      	mov	r0, r8
 800fdee:	4649      	mov	r1, r9
 800fdf0:	f7f0 fa4c 	bl	800028c <__adddf3>
 800fdf4:	4632      	mov	r2, r6
 800fdf6:	463b      	mov	r3, r7
 800fdf8:	4680      	mov	r8, r0
 800fdfa:	4689      	mov	r9, r1
 800fdfc:	4620      	mov	r0, r4
 800fdfe:	4629      	mov	r1, r5
 800fe00:	f7f0 fbfa 	bl	80005f8 <__aeabi_dmul>
 800fe04:	460b      	mov	r3, r1
 800fe06:	4604      	mov	r4, r0
 800fe08:	460d      	mov	r5, r1
 800fe0a:	4602      	mov	r2, r0
 800fe0c:	4649      	mov	r1, r9
 800fe0e:	4640      	mov	r0, r8
 800fe10:	f7f0 fa3c 	bl	800028c <__adddf3>
 800fe14:	4b19      	ldr	r3, [pc, #100]	; (800fe7c <__ieee754_pow+0x3fc>)
 800fe16:	4299      	cmp	r1, r3
 800fe18:	ec45 4b19 	vmov	d9, r4, r5
 800fe1c:	4606      	mov	r6, r0
 800fe1e:	460f      	mov	r7, r1
 800fe20:	468b      	mov	fp, r1
 800fe22:	f340 82f1 	ble.w	8010408 <__ieee754_pow+0x988>
 800fe26:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800fe2a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800fe2e:	4303      	orrs	r3, r0
 800fe30:	f000 81e4 	beq.w	80101fc <__ieee754_pow+0x77c>
 800fe34:	ec51 0b18 	vmov	r0, r1, d8
 800fe38:	2200      	movs	r2, #0
 800fe3a:	2300      	movs	r3, #0
 800fe3c:	f7f0 fe4e 	bl	8000adc <__aeabi_dcmplt>
 800fe40:	3800      	subs	r0, #0
 800fe42:	bf18      	it	ne
 800fe44:	2001      	movne	r0, #1
 800fe46:	e72b      	b.n	800fca0 <__ieee754_pow+0x220>
 800fe48:	60000000 	.word	0x60000000
 800fe4c:	3ff71547 	.word	0x3ff71547
 800fe50:	f85ddf44 	.word	0xf85ddf44
 800fe54:	3e54ae0b 	.word	0x3e54ae0b
 800fe58:	55555555 	.word	0x55555555
 800fe5c:	3fd55555 	.word	0x3fd55555
 800fe60:	652b82fe 	.word	0x652b82fe
 800fe64:	3ff71547 	.word	0x3ff71547
 800fe68:	00000000 	.word	0x00000000
 800fe6c:	bff00000 	.word	0xbff00000
 800fe70:	3ff00000 	.word	0x3ff00000
 800fe74:	3fd00000 	.word	0x3fd00000
 800fe78:	3fe00000 	.word	0x3fe00000
 800fe7c:	408fffff 	.word	0x408fffff
 800fe80:	4bd5      	ldr	r3, [pc, #852]	; (80101d8 <__ieee754_pow+0x758>)
 800fe82:	402b      	ands	r3, r5
 800fe84:	2200      	movs	r2, #0
 800fe86:	b92b      	cbnz	r3, 800fe94 <__ieee754_pow+0x414>
 800fe88:	4bd4      	ldr	r3, [pc, #848]	; (80101dc <__ieee754_pow+0x75c>)
 800fe8a:	f7f0 fbb5 	bl	80005f8 <__aeabi_dmul>
 800fe8e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800fe92:	460c      	mov	r4, r1
 800fe94:	1523      	asrs	r3, r4, #20
 800fe96:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800fe9a:	4413      	add	r3, r2
 800fe9c:	9305      	str	r3, [sp, #20]
 800fe9e:	4bd0      	ldr	r3, [pc, #832]	; (80101e0 <__ieee754_pow+0x760>)
 800fea0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800fea4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800fea8:	429c      	cmp	r4, r3
 800feaa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800feae:	dd08      	ble.n	800fec2 <__ieee754_pow+0x442>
 800feb0:	4bcc      	ldr	r3, [pc, #816]	; (80101e4 <__ieee754_pow+0x764>)
 800feb2:	429c      	cmp	r4, r3
 800feb4:	f340 8162 	ble.w	801017c <__ieee754_pow+0x6fc>
 800feb8:	9b05      	ldr	r3, [sp, #20]
 800feba:	3301      	adds	r3, #1
 800febc:	9305      	str	r3, [sp, #20]
 800febe:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800fec2:	2400      	movs	r4, #0
 800fec4:	00e3      	lsls	r3, r4, #3
 800fec6:	9307      	str	r3, [sp, #28]
 800fec8:	4bc7      	ldr	r3, [pc, #796]	; (80101e8 <__ieee754_pow+0x768>)
 800feca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fece:	ed93 7b00 	vldr	d7, [r3]
 800fed2:	4629      	mov	r1, r5
 800fed4:	ec53 2b17 	vmov	r2, r3, d7
 800fed8:	eeb0 9a47 	vmov.f32	s18, s14
 800fedc:	eef0 9a67 	vmov.f32	s19, s15
 800fee0:	4682      	mov	sl, r0
 800fee2:	f7f0 f9d1 	bl	8000288 <__aeabi_dsub>
 800fee6:	4652      	mov	r2, sl
 800fee8:	4606      	mov	r6, r0
 800feea:	460f      	mov	r7, r1
 800feec:	462b      	mov	r3, r5
 800feee:	ec51 0b19 	vmov	r0, r1, d9
 800fef2:	f7f0 f9cb 	bl	800028c <__adddf3>
 800fef6:	4602      	mov	r2, r0
 800fef8:	460b      	mov	r3, r1
 800fefa:	2000      	movs	r0, #0
 800fefc:	49bb      	ldr	r1, [pc, #748]	; (80101ec <__ieee754_pow+0x76c>)
 800fefe:	f7f0 fca5 	bl	800084c <__aeabi_ddiv>
 800ff02:	ec41 0b1a 	vmov	d10, r0, r1
 800ff06:	4602      	mov	r2, r0
 800ff08:	460b      	mov	r3, r1
 800ff0a:	4630      	mov	r0, r6
 800ff0c:	4639      	mov	r1, r7
 800ff0e:	f7f0 fb73 	bl	80005f8 <__aeabi_dmul>
 800ff12:	2300      	movs	r3, #0
 800ff14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ff18:	9302      	str	r3, [sp, #8]
 800ff1a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ff1e:	46ab      	mov	fp, r5
 800ff20:	106d      	asrs	r5, r5, #1
 800ff22:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800ff26:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800ff2a:	ec41 0b18 	vmov	d8, r0, r1
 800ff2e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800ff32:	2200      	movs	r2, #0
 800ff34:	4640      	mov	r0, r8
 800ff36:	4649      	mov	r1, r9
 800ff38:	4614      	mov	r4, r2
 800ff3a:	461d      	mov	r5, r3
 800ff3c:	f7f0 fb5c 	bl	80005f8 <__aeabi_dmul>
 800ff40:	4602      	mov	r2, r0
 800ff42:	460b      	mov	r3, r1
 800ff44:	4630      	mov	r0, r6
 800ff46:	4639      	mov	r1, r7
 800ff48:	f7f0 f99e 	bl	8000288 <__aeabi_dsub>
 800ff4c:	ec53 2b19 	vmov	r2, r3, d9
 800ff50:	4606      	mov	r6, r0
 800ff52:	460f      	mov	r7, r1
 800ff54:	4620      	mov	r0, r4
 800ff56:	4629      	mov	r1, r5
 800ff58:	f7f0 f996 	bl	8000288 <__aeabi_dsub>
 800ff5c:	4602      	mov	r2, r0
 800ff5e:	460b      	mov	r3, r1
 800ff60:	4650      	mov	r0, sl
 800ff62:	4659      	mov	r1, fp
 800ff64:	f7f0 f990 	bl	8000288 <__aeabi_dsub>
 800ff68:	4642      	mov	r2, r8
 800ff6a:	464b      	mov	r3, r9
 800ff6c:	f7f0 fb44 	bl	80005f8 <__aeabi_dmul>
 800ff70:	4602      	mov	r2, r0
 800ff72:	460b      	mov	r3, r1
 800ff74:	4630      	mov	r0, r6
 800ff76:	4639      	mov	r1, r7
 800ff78:	f7f0 f986 	bl	8000288 <__aeabi_dsub>
 800ff7c:	ec53 2b1a 	vmov	r2, r3, d10
 800ff80:	f7f0 fb3a 	bl	80005f8 <__aeabi_dmul>
 800ff84:	ec53 2b18 	vmov	r2, r3, d8
 800ff88:	ec41 0b19 	vmov	d9, r0, r1
 800ff8c:	ec51 0b18 	vmov	r0, r1, d8
 800ff90:	f7f0 fb32 	bl	80005f8 <__aeabi_dmul>
 800ff94:	a37c      	add	r3, pc, #496	; (adr r3, 8010188 <__ieee754_pow+0x708>)
 800ff96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff9a:	4604      	mov	r4, r0
 800ff9c:	460d      	mov	r5, r1
 800ff9e:	f7f0 fb2b 	bl	80005f8 <__aeabi_dmul>
 800ffa2:	a37b      	add	r3, pc, #492	; (adr r3, 8010190 <__ieee754_pow+0x710>)
 800ffa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffa8:	f7f0 f970 	bl	800028c <__adddf3>
 800ffac:	4622      	mov	r2, r4
 800ffae:	462b      	mov	r3, r5
 800ffb0:	f7f0 fb22 	bl	80005f8 <__aeabi_dmul>
 800ffb4:	a378      	add	r3, pc, #480	; (adr r3, 8010198 <__ieee754_pow+0x718>)
 800ffb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffba:	f7f0 f967 	bl	800028c <__adddf3>
 800ffbe:	4622      	mov	r2, r4
 800ffc0:	462b      	mov	r3, r5
 800ffc2:	f7f0 fb19 	bl	80005f8 <__aeabi_dmul>
 800ffc6:	a376      	add	r3, pc, #472	; (adr r3, 80101a0 <__ieee754_pow+0x720>)
 800ffc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffcc:	f7f0 f95e 	bl	800028c <__adddf3>
 800ffd0:	4622      	mov	r2, r4
 800ffd2:	462b      	mov	r3, r5
 800ffd4:	f7f0 fb10 	bl	80005f8 <__aeabi_dmul>
 800ffd8:	a373      	add	r3, pc, #460	; (adr r3, 80101a8 <__ieee754_pow+0x728>)
 800ffda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffde:	f7f0 f955 	bl	800028c <__adddf3>
 800ffe2:	4622      	mov	r2, r4
 800ffe4:	462b      	mov	r3, r5
 800ffe6:	f7f0 fb07 	bl	80005f8 <__aeabi_dmul>
 800ffea:	a371      	add	r3, pc, #452	; (adr r3, 80101b0 <__ieee754_pow+0x730>)
 800ffec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fff0:	f7f0 f94c 	bl	800028c <__adddf3>
 800fff4:	4622      	mov	r2, r4
 800fff6:	4606      	mov	r6, r0
 800fff8:	460f      	mov	r7, r1
 800fffa:	462b      	mov	r3, r5
 800fffc:	4620      	mov	r0, r4
 800fffe:	4629      	mov	r1, r5
 8010000:	f7f0 fafa 	bl	80005f8 <__aeabi_dmul>
 8010004:	4602      	mov	r2, r0
 8010006:	460b      	mov	r3, r1
 8010008:	4630      	mov	r0, r6
 801000a:	4639      	mov	r1, r7
 801000c:	f7f0 faf4 	bl	80005f8 <__aeabi_dmul>
 8010010:	4642      	mov	r2, r8
 8010012:	4604      	mov	r4, r0
 8010014:	460d      	mov	r5, r1
 8010016:	464b      	mov	r3, r9
 8010018:	ec51 0b18 	vmov	r0, r1, d8
 801001c:	f7f0 f936 	bl	800028c <__adddf3>
 8010020:	ec53 2b19 	vmov	r2, r3, d9
 8010024:	f7f0 fae8 	bl	80005f8 <__aeabi_dmul>
 8010028:	4622      	mov	r2, r4
 801002a:	462b      	mov	r3, r5
 801002c:	f7f0 f92e 	bl	800028c <__adddf3>
 8010030:	4642      	mov	r2, r8
 8010032:	4682      	mov	sl, r0
 8010034:	468b      	mov	fp, r1
 8010036:	464b      	mov	r3, r9
 8010038:	4640      	mov	r0, r8
 801003a:	4649      	mov	r1, r9
 801003c:	f7f0 fadc 	bl	80005f8 <__aeabi_dmul>
 8010040:	4b6b      	ldr	r3, [pc, #428]	; (80101f0 <__ieee754_pow+0x770>)
 8010042:	2200      	movs	r2, #0
 8010044:	4606      	mov	r6, r0
 8010046:	460f      	mov	r7, r1
 8010048:	f7f0 f920 	bl	800028c <__adddf3>
 801004c:	4652      	mov	r2, sl
 801004e:	465b      	mov	r3, fp
 8010050:	f7f0 f91c 	bl	800028c <__adddf3>
 8010054:	2000      	movs	r0, #0
 8010056:	4604      	mov	r4, r0
 8010058:	460d      	mov	r5, r1
 801005a:	4602      	mov	r2, r0
 801005c:	460b      	mov	r3, r1
 801005e:	4640      	mov	r0, r8
 8010060:	4649      	mov	r1, r9
 8010062:	f7f0 fac9 	bl	80005f8 <__aeabi_dmul>
 8010066:	4b62      	ldr	r3, [pc, #392]	; (80101f0 <__ieee754_pow+0x770>)
 8010068:	4680      	mov	r8, r0
 801006a:	4689      	mov	r9, r1
 801006c:	2200      	movs	r2, #0
 801006e:	4620      	mov	r0, r4
 8010070:	4629      	mov	r1, r5
 8010072:	f7f0 f909 	bl	8000288 <__aeabi_dsub>
 8010076:	4632      	mov	r2, r6
 8010078:	463b      	mov	r3, r7
 801007a:	f7f0 f905 	bl	8000288 <__aeabi_dsub>
 801007e:	4602      	mov	r2, r0
 8010080:	460b      	mov	r3, r1
 8010082:	4650      	mov	r0, sl
 8010084:	4659      	mov	r1, fp
 8010086:	f7f0 f8ff 	bl	8000288 <__aeabi_dsub>
 801008a:	ec53 2b18 	vmov	r2, r3, d8
 801008e:	f7f0 fab3 	bl	80005f8 <__aeabi_dmul>
 8010092:	4622      	mov	r2, r4
 8010094:	4606      	mov	r6, r0
 8010096:	460f      	mov	r7, r1
 8010098:	462b      	mov	r3, r5
 801009a:	ec51 0b19 	vmov	r0, r1, d9
 801009e:	f7f0 faab 	bl	80005f8 <__aeabi_dmul>
 80100a2:	4602      	mov	r2, r0
 80100a4:	460b      	mov	r3, r1
 80100a6:	4630      	mov	r0, r6
 80100a8:	4639      	mov	r1, r7
 80100aa:	f7f0 f8ef 	bl	800028c <__adddf3>
 80100ae:	4606      	mov	r6, r0
 80100b0:	460f      	mov	r7, r1
 80100b2:	4602      	mov	r2, r0
 80100b4:	460b      	mov	r3, r1
 80100b6:	4640      	mov	r0, r8
 80100b8:	4649      	mov	r1, r9
 80100ba:	f7f0 f8e7 	bl	800028c <__adddf3>
 80100be:	a33e      	add	r3, pc, #248	; (adr r3, 80101b8 <__ieee754_pow+0x738>)
 80100c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100c4:	2000      	movs	r0, #0
 80100c6:	4604      	mov	r4, r0
 80100c8:	460d      	mov	r5, r1
 80100ca:	f7f0 fa95 	bl	80005f8 <__aeabi_dmul>
 80100ce:	4642      	mov	r2, r8
 80100d0:	ec41 0b18 	vmov	d8, r0, r1
 80100d4:	464b      	mov	r3, r9
 80100d6:	4620      	mov	r0, r4
 80100d8:	4629      	mov	r1, r5
 80100da:	f7f0 f8d5 	bl	8000288 <__aeabi_dsub>
 80100de:	4602      	mov	r2, r0
 80100e0:	460b      	mov	r3, r1
 80100e2:	4630      	mov	r0, r6
 80100e4:	4639      	mov	r1, r7
 80100e6:	f7f0 f8cf 	bl	8000288 <__aeabi_dsub>
 80100ea:	a335      	add	r3, pc, #212	; (adr r3, 80101c0 <__ieee754_pow+0x740>)
 80100ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100f0:	f7f0 fa82 	bl	80005f8 <__aeabi_dmul>
 80100f4:	a334      	add	r3, pc, #208	; (adr r3, 80101c8 <__ieee754_pow+0x748>)
 80100f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100fa:	4606      	mov	r6, r0
 80100fc:	460f      	mov	r7, r1
 80100fe:	4620      	mov	r0, r4
 8010100:	4629      	mov	r1, r5
 8010102:	f7f0 fa79 	bl	80005f8 <__aeabi_dmul>
 8010106:	4602      	mov	r2, r0
 8010108:	460b      	mov	r3, r1
 801010a:	4630      	mov	r0, r6
 801010c:	4639      	mov	r1, r7
 801010e:	f7f0 f8bd 	bl	800028c <__adddf3>
 8010112:	9a07      	ldr	r2, [sp, #28]
 8010114:	4b37      	ldr	r3, [pc, #220]	; (80101f4 <__ieee754_pow+0x774>)
 8010116:	4413      	add	r3, r2
 8010118:	e9d3 2300 	ldrd	r2, r3, [r3]
 801011c:	f7f0 f8b6 	bl	800028c <__adddf3>
 8010120:	4682      	mov	sl, r0
 8010122:	9805      	ldr	r0, [sp, #20]
 8010124:	468b      	mov	fp, r1
 8010126:	f7f0 f9fd 	bl	8000524 <__aeabi_i2d>
 801012a:	9a07      	ldr	r2, [sp, #28]
 801012c:	4b32      	ldr	r3, [pc, #200]	; (80101f8 <__ieee754_pow+0x778>)
 801012e:	4413      	add	r3, r2
 8010130:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010134:	4606      	mov	r6, r0
 8010136:	460f      	mov	r7, r1
 8010138:	4652      	mov	r2, sl
 801013a:	465b      	mov	r3, fp
 801013c:	ec51 0b18 	vmov	r0, r1, d8
 8010140:	f7f0 f8a4 	bl	800028c <__adddf3>
 8010144:	4642      	mov	r2, r8
 8010146:	464b      	mov	r3, r9
 8010148:	f7f0 f8a0 	bl	800028c <__adddf3>
 801014c:	4632      	mov	r2, r6
 801014e:	463b      	mov	r3, r7
 8010150:	f7f0 f89c 	bl	800028c <__adddf3>
 8010154:	2000      	movs	r0, #0
 8010156:	4632      	mov	r2, r6
 8010158:	463b      	mov	r3, r7
 801015a:	4604      	mov	r4, r0
 801015c:	460d      	mov	r5, r1
 801015e:	f7f0 f893 	bl	8000288 <__aeabi_dsub>
 8010162:	4642      	mov	r2, r8
 8010164:	464b      	mov	r3, r9
 8010166:	f7f0 f88f 	bl	8000288 <__aeabi_dsub>
 801016a:	ec53 2b18 	vmov	r2, r3, d8
 801016e:	f7f0 f88b 	bl	8000288 <__aeabi_dsub>
 8010172:	4602      	mov	r2, r0
 8010174:	460b      	mov	r3, r1
 8010176:	4650      	mov	r0, sl
 8010178:	4659      	mov	r1, fp
 801017a:	e610      	b.n	800fd9e <__ieee754_pow+0x31e>
 801017c:	2401      	movs	r4, #1
 801017e:	e6a1      	b.n	800fec4 <__ieee754_pow+0x444>
 8010180:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80101d0 <__ieee754_pow+0x750>
 8010184:	e617      	b.n	800fdb6 <__ieee754_pow+0x336>
 8010186:	bf00      	nop
 8010188:	4a454eef 	.word	0x4a454eef
 801018c:	3fca7e28 	.word	0x3fca7e28
 8010190:	93c9db65 	.word	0x93c9db65
 8010194:	3fcd864a 	.word	0x3fcd864a
 8010198:	a91d4101 	.word	0xa91d4101
 801019c:	3fd17460 	.word	0x3fd17460
 80101a0:	518f264d 	.word	0x518f264d
 80101a4:	3fd55555 	.word	0x3fd55555
 80101a8:	db6fabff 	.word	0xdb6fabff
 80101ac:	3fdb6db6 	.word	0x3fdb6db6
 80101b0:	33333303 	.word	0x33333303
 80101b4:	3fe33333 	.word	0x3fe33333
 80101b8:	e0000000 	.word	0xe0000000
 80101bc:	3feec709 	.word	0x3feec709
 80101c0:	dc3a03fd 	.word	0xdc3a03fd
 80101c4:	3feec709 	.word	0x3feec709
 80101c8:	145b01f5 	.word	0x145b01f5
 80101cc:	be3e2fe0 	.word	0xbe3e2fe0
 80101d0:	00000000 	.word	0x00000000
 80101d4:	3ff00000 	.word	0x3ff00000
 80101d8:	7ff00000 	.word	0x7ff00000
 80101dc:	43400000 	.word	0x43400000
 80101e0:	0003988e 	.word	0x0003988e
 80101e4:	000bb679 	.word	0x000bb679
 80101e8:	08011368 	.word	0x08011368
 80101ec:	3ff00000 	.word	0x3ff00000
 80101f0:	40080000 	.word	0x40080000
 80101f4:	08011388 	.word	0x08011388
 80101f8:	08011378 	.word	0x08011378
 80101fc:	a3b5      	add	r3, pc, #724	; (adr r3, 80104d4 <__ieee754_pow+0xa54>)
 80101fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010202:	4640      	mov	r0, r8
 8010204:	4649      	mov	r1, r9
 8010206:	f7f0 f841 	bl	800028c <__adddf3>
 801020a:	4622      	mov	r2, r4
 801020c:	ec41 0b1a 	vmov	d10, r0, r1
 8010210:	462b      	mov	r3, r5
 8010212:	4630      	mov	r0, r6
 8010214:	4639      	mov	r1, r7
 8010216:	f7f0 f837 	bl	8000288 <__aeabi_dsub>
 801021a:	4602      	mov	r2, r0
 801021c:	460b      	mov	r3, r1
 801021e:	ec51 0b1a 	vmov	r0, r1, d10
 8010222:	f7f0 fc79 	bl	8000b18 <__aeabi_dcmpgt>
 8010226:	2800      	cmp	r0, #0
 8010228:	f47f ae04 	bne.w	800fe34 <__ieee754_pow+0x3b4>
 801022c:	4aa4      	ldr	r2, [pc, #656]	; (80104c0 <__ieee754_pow+0xa40>)
 801022e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010232:	4293      	cmp	r3, r2
 8010234:	f340 8108 	ble.w	8010448 <__ieee754_pow+0x9c8>
 8010238:	151b      	asrs	r3, r3, #20
 801023a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801023e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8010242:	fa4a f303 	asr.w	r3, sl, r3
 8010246:	445b      	add	r3, fp
 8010248:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801024c:	4e9d      	ldr	r6, [pc, #628]	; (80104c4 <__ieee754_pow+0xa44>)
 801024e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8010252:	4116      	asrs	r6, r2
 8010254:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8010258:	2000      	movs	r0, #0
 801025a:	ea23 0106 	bic.w	r1, r3, r6
 801025e:	f1c2 0214 	rsb	r2, r2, #20
 8010262:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8010266:	fa4a fa02 	asr.w	sl, sl, r2
 801026a:	f1bb 0f00 	cmp.w	fp, #0
 801026e:	4602      	mov	r2, r0
 8010270:	460b      	mov	r3, r1
 8010272:	4620      	mov	r0, r4
 8010274:	4629      	mov	r1, r5
 8010276:	bfb8      	it	lt
 8010278:	f1ca 0a00 	rsblt	sl, sl, #0
 801027c:	f7f0 f804 	bl	8000288 <__aeabi_dsub>
 8010280:	ec41 0b19 	vmov	d9, r0, r1
 8010284:	4642      	mov	r2, r8
 8010286:	464b      	mov	r3, r9
 8010288:	ec51 0b19 	vmov	r0, r1, d9
 801028c:	f7ef fffe 	bl	800028c <__adddf3>
 8010290:	a37b      	add	r3, pc, #492	; (adr r3, 8010480 <__ieee754_pow+0xa00>)
 8010292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010296:	2000      	movs	r0, #0
 8010298:	4604      	mov	r4, r0
 801029a:	460d      	mov	r5, r1
 801029c:	f7f0 f9ac 	bl	80005f8 <__aeabi_dmul>
 80102a0:	ec53 2b19 	vmov	r2, r3, d9
 80102a4:	4606      	mov	r6, r0
 80102a6:	460f      	mov	r7, r1
 80102a8:	4620      	mov	r0, r4
 80102aa:	4629      	mov	r1, r5
 80102ac:	f7ef ffec 	bl	8000288 <__aeabi_dsub>
 80102b0:	4602      	mov	r2, r0
 80102b2:	460b      	mov	r3, r1
 80102b4:	4640      	mov	r0, r8
 80102b6:	4649      	mov	r1, r9
 80102b8:	f7ef ffe6 	bl	8000288 <__aeabi_dsub>
 80102bc:	a372      	add	r3, pc, #456	; (adr r3, 8010488 <__ieee754_pow+0xa08>)
 80102be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102c2:	f7f0 f999 	bl	80005f8 <__aeabi_dmul>
 80102c6:	a372      	add	r3, pc, #456	; (adr r3, 8010490 <__ieee754_pow+0xa10>)
 80102c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102cc:	4680      	mov	r8, r0
 80102ce:	4689      	mov	r9, r1
 80102d0:	4620      	mov	r0, r4
 80102d2:	4629      	mov	r1, r5
 80102d4:	f7f0 f990 	bl	80005f8 <__aeabi_dmul>
 80102d8:	4602      	mov	r2, r0
 80102da:	460b      	mov	r3, r1
 80102dc:	4640      	mov	r0, r8
 80102de:	4649      	mov	r1, r9
 80102e0:	f7ef ffd4 	bl	800028c <__adddf3>
 80102e4:	4604      	mov	r4, r0
 80102e6:	460d      	mov	r5, r1
 80102e8:	4602      	mov	r2, r0
 80102ea:	460b      	mov	r3, r1
 80102ec:	4630      	mov	r0, r6
 80102ee:	4639      	mov	r1, r7
 80102f0:	f7ef ffcc 	bl	800028c <__adddf3>
 80102f4:	4632      	mov	r2, r6
 80102f6:	463b      	mov	r3, r7
 80102f8:	4680      	mov	r8, r0
 80102fa:	4689      	mov	r9, r1
 80102fc:	f7ef ffc4 	bl	8000288 <__aeabi_dsub>
 8010300:	4602      	mov	r2, r0
 8010302:	460b      	mov	r3, r1
 8010304:	4620      	mov	r0, r4
 8010306:	4629      	mov	r1, r5
 8010308:	f7ef ffbe 	bl	8000288 <__aeabi_dsub>
 801030c:	4642      	mov	r2, r8
 801030e:	4606      	mov	r6, r0
 8010310:	460f      	mov	r7, r1
 8010312:	464b      	mov	r3, r9
 8010314:	4640      	mov	r0, r8
 8010316:	4649      	mov	r1, r9
 8010318:	f7f0 f96e 	bl	80005f8 <__aeabi_dmul>
 801031c:	a35e      	add	r3, pc, #376	; (adr r3, 8010498 <__ieee754_pow+0xa18>)
 801031e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010322:	4604      	mov	r4, r0
 8010324:	460d      	mov	r5, r1
 8010326:	f7f0 f967 	bl	80005f8 <__aeabi_dmul>
 801032a:	a35d      	add	r3, pc, #372	; (adr r3, 80104a0 <__ieee754_pow+0xa20>)
 801032c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010330:	f7ef ffaa 	bl	8000288 <__aeabi_dsub>
 8010334:	4622      	mov	r2, r4
 8010336:	462b      	mov	r3, r5
 8010338:	f7f0 f95e 	bl	80005f8 <__aeabi_dmul>
 801033c:	a35a      	add	r3, pc, #360	; (adr r3, 80104a8 <__ieee754_pow+0xa28>)
 801033e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010342:	f7ef ffa3 	bl	800028c <__adddf3>
 8010346:	4622      	mov	r2, r4
 8010348:	462b      	mov	r3, r5
 801034a:	f7f0 f955 	bl	80005f8 <__aeabi_dmul>
 801034e:	a358      	add	r3, pc, #352	; (adr r3, 80104b0 <__ieee754_pow+0xa30>)
 8010350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010354:	f7ef ff98 	bl	8000288 <__aeabi_dsub>
 8010358:	4622      	mov	r2, r4
 801035a:	462b      	mov	r3, r5
 801035c:	f7f0 f94c 	bl	80005f8 <__aeabi_dmul>
 8010360:	a355      	add	r3, pc, #340	; (adr r3, 80104b8 <__ieee754_pow+0xa38>)
 8010362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010366:	f7ef ff91 	bl	800028c <__adddf3>
 801036a:	4622      	mov	r2, r4
 801036c:	462b      	mov	r3, r5
 801036e:	f7f0 f943 	bl	80005f8 <__aeabi_dmul>
 8010372:	4602      	mov	r2, r0
 8010374:	460b      	mov	r3, r1
 8010376:	4640      	mov	r0, r8
 8010378:	4649      	mov	r1, r9
 801037a:	f7ef ff85 	bl	8000288 <__aeabi_dsub>
 801037e:	4604      	mov	r4, r0
 8010380:	460d      	mov	r5, r1
 8010382:	4602      	mov	r2, r0
 8010384:	460b      	mov	r3, r1
 8010386:	4640      	mov	r0, r8
 8010388:	4649      	mov	r1, r9
 801038a:	f7f0 f935 	bl	80005f8 <__aeabi_dmul>
 801038e:	2200      	movs	r2, #0
 8010390:	ec41 0b19 	vmov	d9, r0, r1
 8010394:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010398:	4620      	mov	r0, r4
 801039a:	4629      	mov	r1, r5
 801039c:	f7ef ff74 	bl	8000288 <__aeabi_dsub>
 80103a0:	4602      	mov	r2, r0
 80103a2:	460b      	mov	r3, r1
 80103a4:	ec51 0b19 	vmov	r0, r1, d9
 80103a8:	f7f0 fa50 	bl	800084c <__aeabi_ddiv>
 80103ac:	4632      	mov	r2, r6
 80103ae:	4604      	mov	r4, r0
 80103b0:	460d      	mov	r5, r1
 80103b2:	463b      	mov	r3, r7
 80103b4:	4640      	mov	r0, r8
 80103b6:	4649      	mov	r1, r9
 80103b8:	f7f0 f91e 	bl	80005f8 <__aeabi_dmul>
 80103bc:	4632      	mov	r2, r6
 80103be:	463b      	mov	r3, r7
 80103c0:	f7ef ff64 	bl	800028c <__adddf3>
 80103c4:	4602      	mov	r2, r0
 80103c6:	460b      	mov	r3, r1
 80103c8:	4620      	mov	r0, r4
 80103ca:	4629      	mov	r1, r5
 80103cc:	f7ef ff5c 	bl	8000288 <__aeabi_dsub>
 80103d0:	4642      	mov	r2, r8
 80103d2:	464b      	mov	r3, r9
 80103d4:	f7ef ff58 	bl	8000288 <__aeabi_dsub>
 80103d8:	460b      	mov	r3, r1
 80103da:	4602      	mov	r2, r0
 80103dc:	493a      	ldr	r1, [pc, #232]	; (80104c8 <__ieee754_pow+0xa48>)
 80103de:	2000      	movs	r0, #0
 80103e0:	f7ef ff52 	bl	8000288 <__aeabi_dsub>
 80103e4:	ec41 0b10 	vmov	d0, r0, r1
 80103e8:	ee10 3a90 	vmov	r3, s1
 80103ec:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80103f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80103f4:	da2b      	bge.n	801044e <__ieee754_pow+0x9ce>
 80103f6:	4650      	mov	r0, sl
 80103f8:	f000 fb06 	bl	8010a08 <scalbn>
 80103fc:	ec51 0b10 	vmov	r0, r1, d0
 8010400:	ec53 2b18 	vmov	r2, r3, d8
 8010404:	f7ff bbed 	b.w	800fbe2 <__ieee754_pow+0x162>
 8010408:	4b30      	ldr	r3, [pc, #192]	; (80104cc <__ieee754_pow+0xa4c>)
 801040a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801040e:	429e      	cmp	r6, r3
 8010410:	f77f af0c 	ble.w	801022c <__ieee754_pow+0x7ac>
 8010414:	4b2e      	ldr	r3, [pc, #184]	; (80104d0 <__ieee754_pow+0xa50>)
 8010416:	440b      	add	r3, r1
 8010418:	4303      	orrs	r3, r0
 801041a:	d009      	beq.n	8010430 <__ieee754_pow+0x9b0>
 801041c:	ec51 0b18 	vmov	r0, r1, d8
 8010420:	2200      	movs	r2, #0
 8010422:	2300      	movs	r3, #0
 8010424:	f7f0 fb5a 	bl	8000adc <__aeabi_dcmplt>
 8010428:	3800      	subs	r0, #0
 801042a:	bf18      	it	ne
 801042c:	2001      	movne	r0, #1
 801042e:	e447      	b.n	800fcc0 <__ieee754_pow+0x240>
 8010430:	4622      	mov	r2, r4
 8010432:	462b      	mov	r3, r5
 8010434:	f7ef ff28 	bl	8000288 <__aeabi_dsub>
 8010438:	4642      	mov	r2, r8
 801043a:	464b      	mov	r3, r9
 801043c:	f7f0 fb62 	bl	8000b04 <__aeabi_dcmpge>
 8010440:	2800      	cmp	r0, #0
 8010442:	f43f aef3 	beq.w	801022c <__ieee754_pow+0x7ac>
 8010446:	e7e9      	b.n	801041c <__ieee754_pow+0x99c>
 8010448:	f04f 0a00 	mov.w	sl, #0
 801044c:	e71a      	b.n	8010284 <__ieee754_pow+0x804>
 801044e:	ec51 0b10 	vmov	r0, r1, d0
 8010452:	4619      	mov	r1, r3
 8010454:	e7d4      	b.n	8010400 <__ieee754_pow+0x980>
 8010456:	491c      	ldr	r1, [pc, #112]	; (80104c8 <__ieee754_pow+0xa48>)
 8010458:	2000      	movs	r0, #0
 801045a:	f7ff bb30 	b.w	800fabe <__ieee754_pow+0x3e>
 801045e:	2000      	movs	r0, #0
 8010460:	2100      	movs	r1, #0
 8010462:	f7ff bb2c 	b.w	800fabe <__ieee754_pow+0x3e>
 8010466:	4630      	mov	r0, r6
 8010468:	4639      	mov	r1, r7
 801046a:	f7ff bb28 	b.w	800fabe <__ieee754_pow+0x3e>
 801046e:	9204      	str	r2, [sp, #16]
 8010470:	f7ff bb7a 	b.w	800fb68 <__ieee754_pow+0xe8>
 8010474:	2300      	movs	r3, #0
 8010476:	f7ff bb64 	b.w	800fb42 <__ieee754_pow+0xc2>
 801047a:	bf00      	nop
 801047c:	f3af 8000 	nop.w
 8010480:	00000000 	.word	0x00000000
 8010484:	3fe62e43 	.word	0x3fe62e43
 8010488:	fefa39ef 	.word	0xfefa39ef
 801048c:	3fe62e42 	.word	0x3fe62e42
 8010490:	0ca86c39 	.word	0x0ca86c39
 8010494:	be205c61 	.word	0xbe205c61
 8010498:	72bea4d0 	.word	0x72bea4d0
 801049c:	3e663769 	.word	0x3e663769
 80104a0:	c5d26bf1 	.word	0xc5d26bf1
 80104a4:	3ebbbd41 	.word	0x3ebbbd41
 80104a8:	af25de2c 	.word	0xaf25de2c
 80104ac:	3f11566a 	.word	0x3f11566a
 80104b0:	16bebd93 	.word	0x16bebd93
 80104b4:	3f66c16c 	.word	0x3f66c16c
 80104b8:	5555553e 	.word	0x5555553e
 80104bc:	3fc55555 	.word	0x3fc55555
 80104c0:	3fe00000 	.word	0x3fe00000
 80104c4:	000fffff 	.word	0x000fffff
 80104c8:	3ff00000 	.word	0x3ff00000
 80104cc:	4090cbff 	.word	0x4090cbff
 80104d0:	3f6f3400 	.word	0x3f6f3400
 80104d4:	652b82fe 	.word	0x652b82fe
 80104d8:	3c971547 	.word	0x3c971547

080104dc <__ieee754_sqrt>:
 80104dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104e0:	ec55 4b10 	vmov	r4, r5, d0
 80104e4:	4e55      	ldr	r6, [pc, #340]	; (801063c <__ieee754_sqrt+0x160>)
 80104e6:	43ae      	bics	r6, r5
 80104e8:	ee10 0a10 	vmov	r0, s0
 80104ec:	ee10 3a10 	vmov	r3, s0
 80104f0:	462a      	mov	r2, r5
 80104f2:	4629      	mov	r1, r5
 80104f4:	d110      	bne.n	8010518 <__ieee754_sqrt+0x3c>
 80104f6:	ee10 2a10 	vmov	r2, s0
 80104fa:	462b      	mov	r3, r5
 80104fc:	f7f0 f87c 	bl	80005f8 <__aeabi_dmul>
 8010500:	4602      	mov	r2, r0
 8010502:	460b      	mov	r3, r1
 8010504:	4620      	mov	r0, r4
 8010506:	4629      	mov	r1, r5
 8010508:	f7ef fec0 	bl	800028c <__adddf3>
 801050c:	4604      	mov	r4, r0
 801050e:	460d      	mov	r5, r1
 8010510:	ec45 4b10 	vmov	d0, r4, r5
 8010514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010518:	2d00      	cmp	r5, #0
 801051a:	dc10      	bgt.n	801053e <__ieee754_sqrt+0x62>
 801051c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010520:	4330      	orrs	r0, r6
 8010522:	d0f5      	beq.n	8010510 <__ieee754_sqrt+0x34>
 8010524:	b15d      	cbz	r5, 801053e <__ieee754_sqrt+0x62>
 8010526:	ee10 2a10 	vmov	r2, s0
 801052a:	462b      	mov	r3, r5
 801052c:	ee10 0a10 	vmov	r0, s0
 8010530:	f7ef feaa 	bl	8000288 <__aeabi_dsub>
 8010534:	4602      	mov	r2, r0
 8010536:	460b      	mov	r3, r1
 8010538:	f7f0 f988 	bl	800084c <__aeabi_ddiv>
 801053c:	e7e6      	b.n	801050c <__ieee754_sqrt+0x30>
 801053e:	1512      	asrs	r2, r2, #20
 8010540:	d074      	beq.n	801062c <__ieee754_sqrt+0x150>
 8010542:	07d4      	lsls	r4, r2, #31
 8010544:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8010548:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 801054c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010550:	bf5e      	ittt	pl
 8010552:	0fda      	lsrpl	r2, r3, #31
 8010554:	005b      	lslpl	r3, r3, #1
 8010556:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 801055a:	2400      	movs	r4, #0
 801055c:	0fda      	lsrs	r2, r3, #31
 801055e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8010562:	107f      	asrs	r7, r7, #1
 8010564:	005b      	lsls	r3, r3, #1
 8010566:	2516      	movs	r5, #22
 8010568:	4620      	mov	r0, r4
 801056a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801056e:	1886      	adds	r6, r0, r2
 8010570:	428e      	cmp	r6, r1
 8010572:	bfde      	ittt	le
 8010574:	1b89      	suble	r1, r1, r6
 8010576:	18b0      	addle	r0, r6, r2
 8010578:	18a4      	addle	r4, r4, r2
 801057a:	0049      	lsls	r1, r1, #1
 801057c:	3d01      	subs	r5, #1
 801057e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8010582:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8010586:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801058a:	d1f0      	bne.n	801056e <__ieee754_sqrt+0x92>
 801058c:	462a      	mov	r2, r5
 801058e:	f04f 0e20 	mov.w	lr, #32
 8010592:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8010596:	4281      	cmp	r1, r0
 8010598:	eb06 0c05 	add.w	ip, r6, r5
 801059c:	dc02      	bgt.n	80105a4 <__ieee754_sqrt+0xc8>
 801059e:	d113      	bne.n	80105c8 <__ieee754_sqrt+0xec>
 80105a0:	459c      	cmp	ip, r3
 80105a2:	d811      	bhi.n	80105c8 <__ieee754_sqrt+0xec>
 80105a4:	f1bc 0f00 	cmp.w	ip, #0
 80105a8:	eb0c 0506 	add.w	r5, ip, r6
 80105ac:	da43      	bge.n	8010636 <__ieee754_sqrt+0x15a>
 80105ae:	2d00      	cmp	r5, #0
 80105b0:	db41      	blt.n	8010636 <__ieee754_sqrt+0x15a>
 80105b2:	f100 0801 	add.w	r8, r0, #1
 80105b6:	1a09      	subs	r1, r1, r0
 80105b8:	459c      	cmp	ip, r3
 80105ba:	bf88      	it	hi
 80105bc:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 80105c0:	eba3 030c 	sub.w	r3, r3, ip
 80105c4:	4432      	add	r2, r6
 80105c6:	4640      	mov	r0, r8
 80105c8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80105cc:	f1be 0e01 	subs.w	lr, lr, #1
 80105d0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80105d4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80105d8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80105dc:	d1db      	bne.n	8010596 <__ieee754_sqrt+0xba>
 80105de:	430b      	orrs	r3, r1
 80105e0:	d006      	beq.n	80105f0 <__ieee754_sqrt+0x114>
 80105e2:	1c50      	adds	r0, r2, #1
 80105e4:	bf13      	iteet	ne
 80105e6:	3201      	addne	r2, #1
 80105e8:	3401      	addeq	r4, #1
 80105ea:	4672      	moveq	r2, lr
 80105ec:	f022 0201 	bicne.w	r2, r2, #1
 80105f0:	1063      	asrs	r3, r4, #1
 80105f2:	0852      	lsrs	r2, r2, #1
 80105f4:	07e1      	lsls	r1, r4, #31
 80105f6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80105fa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80105fe:	bf48      	it	mi
 8010600:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8010604:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8010608:	4614      	mov	r4, r2
 801060a:	e781      	b.n	8010510 <__ieee754_sqrt+0x34>
 801060c:	0ad9      	lsrs	r1, r3, #11
 801060e:	3815      	subs	r0, #21
 8010610:	055b      	lsls	r3, r3, #21
 8010612:	2900      	cmp	r1, #0
 8010614:	d0fa      	beq.n	801060c <__ieee754_sqrt+0x130>
 8010616:	02cd      	lsls	r5, r1, #11
 8010618:	d50a      	bpl.n	8010630 <__ieee754_sqrt+0x154>
 801061a:	f1c2 0420 	rsb	r4, r2, #32
 801061e:	fa23 f404 	lsr.w	r4, r3, r4
 8010622:	1e55      	subs	r5, r2, #1
 8010624:	4093      	lsls	r3, r2
 8010626:	4321      	orrs	r1, r4
 8010628:	1b42      	subs	r2, r0, r5
 801062a:	e78a      	b.n	8010542 <__ieee754_sqrt+0x66>
 801062c:	4610      	mov	r0, r2
 801062e:	e7f0      	b.n	8010612 <__ieee754_sqrt+0x136>
 8010630:	0049      	lsls	r1, r1, #1
 8010632:	3201      	adds	r2, #1
 8010634:	e7ef      	b.n	8010616 <__ieee754_sqrt+0x13a>
 8010636:	4680      	mov	r8, r0
 8010638:	e7bd      	b.n	80105b6 <__ieee754_sqrt+0xda>
 801063a:	bf00      	nop
 801063c:	7ff00000 	.word	0x7ff00000

08010640 <with_errno>:
 8010640:	b570      	push	{r4, r5, r6, lr}
 8010642:	4604      	mov	r4, r0
 8010644:	460d      	mov	r5, r1
 8010646:	4616      	mov	r6, r2
 8010648:	f7fc f9c8 	bl	800c9dc <__errno>
 801064c:	4629      	mov	r1, r5
 801064e:	6006      	str	r6, [r0, #0]
 8010650:	4620      	mov	r0, r4
 8010652:	bd70      	pop	{r4, r5, r6, pc}

08010654 <xflow>:
 8010654:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010656:	4614      	mov	r4, r2
 8010658:	461d      	mov	r5, r3
 801065a:	b108      	cbz	r0, 8010660 <xflow+0xc>
 801065c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010660:	e9cd 2300 	strd	r2, r3, [sp]
 8010664:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010668:	4620      	mov	r0, r4
 801066a:	4629      	mov	r1, r5
 801066c:	f7ef ffc4 	bl	80005f8 <__aeabi_dmul>
 8010670:	2222      	movs	r2, #34	; 0x22
 8010672:	b003      	add	sp, #12
 8010674:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010678:	f7ff bfe2 	b.w	8010640 <with_errno>

0801067c <__math_uflow>:
 801067c:	b508      	push	{r3, lr}
 801067e:	2200      	movs	r2, #0
 8010680:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8010684:	f7ff ffe6 	bl	8010654 <xflow>
 8010688:	ec41 0b10 	vmov	d0, r0, r1
 801068c:	bd08      	pop	{r3, pc}

0801068e <__math_oflow>:
 801068e:	b508      	push	{r3, lr}
 8010690:	2200      	movs	r2, #0
 8010692:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8010696:	f7ff ffdd 	bl	8010654 <xflow>
 801069a:	ec41 0b10 	vmov	d0, r0, r1
 801069e:	bd08      	pop	{r3, pc}

080106a0 <atan>:
 80106a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106a4:	ec55 4b10 	vmov	r4, r5, d0
 80106a8:	4bc3      	ldr	r3, [pc, #780]	; (80109b8 <atan+0x318>)
 80106aa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80106ae:	429e      	cmp	r6, r3
 80106b0:	46ab      	mov	fp, r5
 80106b2:	dd18      	ble.n	80106e6 <atan+0x46>
 80106b4:	4bc1      	ldr	r3, [pc, #772]	; (80109bc <atan+0x31c>)
 80106b6:	429e      	cmp	r6, r3
 80106b8:	dc01      	bgt.n	80106be <atan+0x1e>
 80106ba:	d109      	bne.n	80106d0 <atan+0x30>
 80106bc:	b144      	cbz	r4, 80106d0 <atan+0x30>
 80106be:	4622      	mov	r2, r4
 80106c0:	462b      	mov	r3, r5
 80106c2:	4620      	mov	r0, r4
 80106c4:	4629      	mov	r1, r5
 80106c6:	f7ef fde1 	bl	800028c <__adddf3>
 80106ca:	4604      	mov	r4, r0
 80106cc:	460d      	mov	r5, r1
 80106ce:	e006      	b.n	80106de <atan+0x3e>
 80106d0:	f1bb 0f00 	cmp.w	fp, #0
 80106d4:	f300 8131 	bgt.w	801093a <atan+0x29a>
 80106d8:	a59b      	add	r5, pc, #620	; (adr r5, 8010948 <atan+0x2a8>)
 80106da:	e9d5 4500 	ldrd	r4, r5, [r5]
 80106de:	ec45 4b10 	vmov	d0, r4, r5
 80106e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106e6:	4bb6      	ldr	r3, [pc, #728]	; (80109c0 <atan+0x320>)
 80106e8:	429e      	cmp	r6, r3
 80106ea:	dc14      	bgt.n	8010716 <atan+0x76>
 80106ec:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80106f0:	429e      	cmp	r6, r3
 80106f2:	dc0d      	bgt.n	8010710 <atan+0x70>
 80106f4:	a396      	add	r3, pc, #600	; (adr r3, 8010950 <atan+0x2b0>)
 80106f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106fa:	ee10 0a10 	vmov	r0, s0
 80106fe:	4629      	mov	r1, r5
 8010700:	f7ef fdc4 	bl	800028c <__adddf3>
 8010704:	4baf      	ldr	r3, [pc, #700]	; (80109c4 <atan+0x324>)
 8010706:	2200      	movs	r2, #0
 8010708:	f7f0 fa06 	bl	8000b18 <__aeabi_dcmpgt>
 801070c:	2800      	cmp	r0, #0
 801070e:	d1e6      	bne.n	80106de <atan+0x3e>
 8010710:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8010714:	e02b      	b.n	801076e <atan+0xce>
 8010716:	f000 f963 	bl	80109e0 <fabs>
 801071a:	4bab      	ldr	r3, [pc, #684]	; (80109c8 <atan+0x328>)
 801071c:	429e      	cmp	r6, r3
 801071e:	ec55 4b10 	vmov	r4, r5, d0
 8010722:	f300 80bf 	bgt.w	80108a4 <atan+0x204>
 8010726:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801072a:	429e      	cmp	r6, r3
 801072c:	f300 80a0 	bgt.w	8010870 <atan+0x1d0>
 8010730:	ee10 2a10 	vmov	r2, s0
 8010734:	ee10 0a10 	vmov	r0, s0
 8010738:	462b      	mov	r3, r5
 801073a:	4629      	mov	r1, r5
 801073c:	f7ef fda6 	bl	800028c <__adddf3>
 8010740:	4ba0      	ldr	r3, [pc, #640]	; (80109c4 <atan+0x324>)
 8010742:	2200      	movs	r2, #0
 8010744:	f7ef fda0 	bl	8000288 <__aeabi_dsub>
 8010748:	2200      	movs	r2, #0
 801074a:	4606      	mov	r6, r0
 801074c:	460f      	mov	r7, r1
 801074e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010752:	4620      	mov	r0, r4
 8010754:	4629      	mov	r1, r5
 8010756:	f7ef fd99 	bl	800028c <__adddf3>
 801075a:	4602      	mov	r2, r0
 801075c:	460b      	mov	r3, r1
 801075e:	4630      	mov	r0, r6
 8010760:	4639      	mov	r1, r7
 8010762:	f7f0 f873 	bl	800084c <__aeabi_ddiv>
 8010766:	f04f 0a00 	mov.w	sl, #0
 801076a:	4604      	mov	r4, r0
 801076c:	460d      	mov	r5, r1
 801076e:	4622      	mov	r2, r4
 8010770:	462b      	mov	r3, r5
 8010772:	4620      	mov	r0, r4
 8010774:	4629      	mov	r1, r5
 8010776:	f7ef ff3f 	bl	80005f8 <__aeabi_dmul>
 801077a:	4602      	mov	r2, r0
 801077c:	460b      	mov	r3, r1
 801077e:	4680      	mov	r8, r0
 8010780:	4689      	mov	r9, r1
 8010782:	f7ef ff39 	bl	80005f8 <__aeabi_dmul>
 8010786:	a374      	add	r3, pc, #464	; (adr r3, 8010958 <atan+0x2b8>)
 8010788:	e9d3 2300 	ldrd	r2, r3, [r3]
 801078c:	4606      	mov	r6, r0
 801078e:	460f      	mov	r7, r1
 8010790:	f7ef ff32 	bl	80005f8 <__aeabi_dmul>
 8010794:	a372      	add	r3, pc, #456	; (adr r3, 8010960 <atan+0x2c0>)
 8010796:	e9d3 2300 	ldrd	r2, r3, [r3]
 801079a:	f7ef fd77 	bl	800028c <__adddf3>
 801079e:	4632      	mov	r2, r6
 80107a0:	463b      	mov	r3, r7
 80107a2:	f7ef ff29 	bl	80005f8 <__aeabi_dmul>
 80107a6:	a370      	add	r3, pc, #448	; (adr r3, 8010968 <atan+0x2c8>)
 80107a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107ac:	f7ef fd6e 	bl	800028c <__adddf3>
 80107b0:	4632      	mov	r2, r6
 80107b2:	463b      	mov	r3, r7
 80107b4:	f7ef ff20 	bl	80005f8 <__aeabi_dmul>
 80107b8:	a36d      	add	r3, pc, #436	; (adr r3, 8010970 <atan+0x2d0>)
 80107ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107be:	f7ef fd65 	bl	800028c <__adddf3>
 80107c2:	4632      	mov	r2, r6
 80107c4:	463b      	mov	r3, r7
 80107c6:	f7ef ff17 	bl	80005f8 <__aeabi_dmul>
 80107ca:	a36b      	add	r3, pc, #428	; (adr r3, 8010978 <atan+0x2d8>)
 80107cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107d0:	f7ef fd5c 	bl	800028c <__adddf3>
 80107d4:	4632      	mov	r2, r6
 80107d6:	463b      	mov	r3, r7
 80107d8:	f7ef ff0e 	bl	80005f8 <__aeabi_dmul>
 80107dc:	a368      	add	r3, pc, #416	; (adr r3, 8010980 <atan+0x2e0>)
 80107de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107e2:	f7ef fd53 	bl	800028c <__adddf3>
 80107e6:	4642      	mov	r2, r8
 80107e8:	464b      	mov	r3, r9
 80107ea:	f7ef ff05 	bl	80005f8 <__aeabi_dmul>
 80107ee:	a366      	add	r3, pc, #408	; (adr r3, 8010988 <atan+0x2e8>)
 80107f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107f4:	4680      	mov	r8, r0
 80107f6:	4689      	mov	r9, r1
 80107f8:	4630      	mov	r0, r6
 80107fa:	4639      	mov	r1, r7
 80107fc:	f7ef fefc 	bl	80005f8 <__aeabi_dmul>
 8010800:	a363      	add	r3, pc, #396	; (adr r3, 8010990 <atan+0x2f0>)
 8010802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010806:	f7ef fd3f 	bl	8000288 <__aeabi_dsub>
 801080a:	4632      	mov	r2, r6
 801080c:	463b      	mov	r3, r7
 801080e:	f7ef fef3 	bl	80005f8 <__aeabi_dmul>
 8010812:	a361      	add	r3, pc, #388	; (adr r3, 8010998 <atan+0x2f8>)
 8010814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010818:	f7ef fd36 	bl	8000288 <__aeabi_dsub>
 801081c:	4632      	mov	r2, r6
 801081e:	463b      	mov	r3, r7
 8010820:	f7ef feea 	bl	80005f8 <__aeabi_dmul>
 8010824:	a35e      	add	r3, pc, #376	; (adr r3, 80109a0 <atan+0x300>)
 8010826:	e9d3 2300 	ldrd	r2, r3, [r3]
 801082a:	f7ef fd2d 	bl	8000288 <__aeabi_dsub>
 801082e:	4632      	mov	r2, r6
 8010830:	463b      	mov	r3, r7
 8010832:	f7ef fee1 	bl	80005f8 <__aeabi_dmul>
 8010836:	a35c      	add	r3, pc, #368	; (adr r3, 80109a8 <atan+0x308>)
 8010838:	e9d3 2300 	ldrd	r2, r3, [r3]
 801083c:	f7ef fd24 	bl	8000288 <__aeabi_dsub>
 8010840:	4632      	mov	r2, r6
 8010842:	463b      	mov	r3, r7
 8010844:	f7ef fed8 	bl	80005f8 <__aeabi_dmul>
 8010848:	4602      	mov	r2, r0
 801084a:	460b      	mov	r3, r1
 801084c:	4640      	mov	r0, r8
 801084e:	4649      	mov	r1, r9
 8010850:	f7ef fd1c 	bl	800028c <__adddf3>
 8010854:	4622      	mov	r2, r4
 8010856:	462b      	mov	r3, r5
 8010858:	f7ef fece 	bl	80005f8 <__aeabi_dmul>
 801085c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8010860:	4602      	mov	r2, r0
 8010862:	460b      	mov	r3, r1
 8010864:	d14b      	bne.n	80108fe <atan+0x25e>
 8010866:	4620      	mov	r0, r4
 8010868:	4629      	mov	r1, r5
 801086a:	f7ef fd0d 	bl	8000288 <__aeabi_dsub>
 801086e:	e72c      	b.n	80106ca <atan+0x2a>
 8010870:	ee10 0a10 	vmov	r0, s0
 8010874:	4b53      	ldr	r3, [pc, #332]	; (80109c4 <atan+0x324>)
 8010876:	2200      	movs	r2, #0
 8010878:	4629      	mov	r1, r5
 801087a:	f7ef fd05 	bl	8000288 <__aeabi_dsub>
 801087e:	4b51      	ldr	r3, [pc, #324]	; (80109c4 <atan+0x324>)
 8010880:	4606      	mov	r6, r0
 8010882:	460f      	mov	r7, r1
 8010884:	2200      	movs	r2, #0
 8010886:	4620      	mov	r0, r4
 8010888:	4629      	mov	r1, r5
 801088a:	f7ef fcff 	bl	800028c <__adddf3>
 801088e:	4602      	mov	r2, r0
 8010890:	460b      	mov	r3, r1
 8010892:	4630      	mov	r0, r6
 8010894:	4639      	mov	r1, r7
 8010896:	f7ef ffd9 	bl	800084c <__aeabi_ddiv>
 801089a:	f04f 0a01 	mov.w	sl, #1
 801089e:	4604      	mov	r4, r0
 80108a0:	460d      	mov	r5, r1
 80108a2:	e764      	b.n	801076e <atan+0xce>
 80108a4:	4b49      	ldr	r3, [pc, #292]	; (80109cc <atan+0x32c>)
 80108a6:	429e      	cmp	r6, r3
 80108a8:	da1d      	bge.n	80108e6 <atan+0x246>
 80108aa:	ee10 0a10 	vmov	r0, s0
 80108ae:	4b48      	ldr	r3, [pc, #288]	; (80109d0 <atan+0x330>)
 80108b0:	2200      	movs	r2, #0
 80108b2:	4629      	mov	r1, r5
 80108b4:	f7ef fce8 	bl	8000288 <__aeabi_dsub>
 80108b8:	4b45      	ldr	r3, [pc, #276]	; (80109d0 <atan+0x330>)
 80108ba:	4606      	mov	r6, r0
 80108bc:	460f      	mov	r7, r1
 80108be:	2200      	movs	r2, #0
 80108c0:	4620      	mov	r0, r4
 80108c2:	4629      	mov	r1, r5
 80108c4:	f7ef fe98 	bl	80005f8 <__aeabi_dmul>
 80108c8:	4b3e      	ldr	r3, [pc, #248]	; (80109c4 <atan+0x324>)
 80108ca:	2200      	movs	r2, #0
 80108cc:	f7ef fcde 	bl	800028c <__adddf3>
 80108d0:	4602      	mov	r2, r0
 80108d2:	460b      	mov	r3, r1
 80108d4:	4630      	mov	r0, r6
 80108d6:	4639      	mov	r1, r7
 80108d8:	f7ef ffb8 	bl	800084c <__aeabi_ddiv>
 80108dc:	f04f 0a02 	mov.w	sl, #2
 80108e0:	4604      	mov	r4, r0
 80108e2:	460d      	mov	r5, r1
 80108e4:	e743      	b.n	801076e <atan+0xce>
 80108e6:	462b      	mov	r3, r5
 80108e8:	ee10 2a10 	vmov	r2, s0
 80108ec:	4939      	ldr	r1, [pc, #228]	; (80109d4 <atan+0x334>)
 80108ee:	2000      	movs	r0, #0
 80108f0:	f7ef ffac 	bl	800084c <__aeabi_ddiv>
 80108f4:	f04f 0a03 	mov.w	sl, #3
 80108f8:	4604      	mov	r4, r0
 80108fa:	460d      	mov	r5, r1
 80108fc:	e737      	b.n	801076e <atan+0xce>
 80108fe:	4b36      	ldr	r3, [pc, #216]	; (80109d8 <atan+0x338>)
 8010900:	4e36      	ldr	r6, [pc, #216]	; (80109dc <atan+0x33c>)
 8010902:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8010906:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 801090a:	e9da 2300 	ldrd	r2, r3, [sl]
 801090e:	f7ef fcbb 	bl	8000288 <__aeabi_dsub>
 8010912:	4622      	mov	r2, r4
 8010914:	462b      	mov	r3, r5
 8010916:	f7ef fcb7 	bl	8000288 <__aeabi_dsub>
 801091a:	4602      	mov	r2, r0
 801091c:	460b      	mov	r3, r1
 801091e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8010922:	f7ef fcb1 	bl	8000288 <__aeabi_dsub>
 8010926:	f1bb 0f00 	cmp.w	fp, #0
 801092a:	4604      	mov	r4, r0
 801092c:	460d      	mov	r5, r1
 801092e:	f6bf aed6 	bge.w	80106de <atan+0x3e>
 8010932:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010936:	461d      	mov	r5, r3
 8010938:	e6d1      	b.n	80106de <atan+0x3e>
 801093a:	a51d      	add	r5, pc, #116	; (adr r5, 80109b0 <atan+0x310>)
 801093c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010940:	e6cd      	b.n	80106de <atan+0x3e>
 8010942:	bf00      	nop
 8010944:	f3af 8000 	nop.w
 8010948:	54442d18 	.word	0x54442d18
 801094c:	bff921fb 	.word	0xbff921fb
 8010950:	8800759c 	.word	0x8800759c
 8010954:	7e37e43c 	.word	0x7e37e43c
 8010958:	e322da11 	.word	0xe322da11
 801095c:	3f90ad3a 	.word	0x3f90ad3a
 8010960:	24760deb 	.word	0x24760deb
 8010964:	3fa97b4b 	.word	0x3fa97b4b
 8010968:	a0d03d51 	.word	0xa0d03d51
 801096c:	3fb10d66 	.word	0x3fb10d66
 8010970:	c54c206e 	.word	0xc54c206e
 8010974:	3fb745cd 	.word	0x3fb745cd
 8010978:	920083ff 	.word	0x920083ff
 801097c:	3fc24924 	.word	0x3fc24924
 8010980:	5555550d 	.word	0x5555550d
 8010984:	3fd55555 	.word	0x3fd55555
 8010988:	2c6a6c2f 	.word	0x2c6a6c2f
 801098c:	bfa2b444 	.word	0xbfa2b444
 8010990:	52defd9a 	.word	0x52defd9a
 8010994:	3fadde2d 	.word	0x3fadde2d
 8010998:	af749a6d 	.word	0xaf749a6d
 801099c:	3fb3b0f2 	.word	0x3fb3b0f2
 80109a0:	fe231671 	.word	0xfe231671
 80109a4:	3fbc71c6 	.word	0x3fbc71c6
 80109a8:	9998ebc4 	.word	0x9998ebc4
 80109ac:	3fc99999 	.word	0x3fc99999
 80109b0:	54442d18 	.word	0x54442d18
 80109b4:	3ff921fb 	.word	0x3ff921fb
 80109b8:	440fffff 	.word	0x440fffff
 80109bc:	7ff00000 	.word	0x7ff00000
 80109c0:	3fdbffff 	.word	0x3fdbffff
 80109c4:	3ff00000 	.word	0x3ff00000
 80109c8:	3ff2ffff 	.word	0x3ff2ffff
 80109cc:	40038000 	.word	0x40038000
 80109d0:	3ff80000 	.word	0x3ff80000
 80109d4:	bff00000 	.word	0xbff00000
 80109d8:	080113b8 	.word	0x080113b8
 80109dc:	08011398 	.word	0x08011398

080109e0 <fabs>:
 80109e0:	ec51 0b10 	vmov	r0, r1, d0
 80109e4:	ee10 2a10 	vmov	r2, s0
 80109e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80109ec:	ec43 2b10 	vmov	d0, r2, r3
 80109f0:	4770      	bx	lr

080109f2 <finite>:
 80109f2:	b082      	sub	sp, #8
 80109f4:	ed8d 0b00 	vstr	d0, [sp]
 80109f8:	9801      	ldr	r0, [sp, #4]
 80109fa:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80109fe:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8010a02:	0fc0      	lsrs	r0, r0, #31
 8010a04:	b002      	add	sp, #8
 8010a06:	4770      	bx	lr

08010a08 <scalbn>:
 8010a08:	b570      	push	{r4, r5, r6, lr}
 8010a0a:	ec55 4b10 	vmov	r4, r5, d0
 8010a0e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8010a12:	4606      	mov	r6, r0
 8010a14:	462b      	mov	r3, r5
 8010a16:	b99a      	cbnz	r2, 8010a40 <scalbn+0x38>
 8010a18:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010a1c:	4323      	orrs	r3, r4
 8010a1e:	d036      	beq.n	8010a8e <scalbn+0x86>
 8010a20:	4b39      	ldr	r3, [pc, #228]	; (8010b08 <scalbn+0x100>)
 8010a22:	4629      	mov	r1, r5
 8010a24:	ee10 0a10 	vmov	r0, s0
 8010a28:	2200      	movs	r2, #0
 8010a2a:	f7ef fde5 	bl	80005f8 <__aeabi_dmul>
 8010a2e:	4b37      	ldr	r3, [pc, #220]	; (8010b0c <scalbn+0x104>)
 8010a30:	429e      	cmp	r6, r3
 8010a32:	4604      	mov	r4, r0
 8010a34:	460d      	mov	r5, r1
 8010a36:	da10      	bge.n	8010a5a <scalbn+0x52>
 8010a38:	a32b      	add	r3, pc, #172	; (adr r3, 8010ae8 <scalbn+0xe0>)
 8010a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a3e:	e03a      	b.n	8010ab6 <scalbn+0xae>
 8010a40:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8010a44:	428a      	cmp	r2, r1
 8010a46:	d10c      	bne.n	8010a62 <scalbn+0x5a>
 8010a48:	ee10 2a10 	vmov	r2, s0
 8010a4c:	4620      	mov	r0, r4
 8010a4e:	4629      	mov	r1, r5
 8010a50:	f7ef fc1c 	bl	800028c <__adddf3>
 8010a54:	4604      	mov	r4, r0
 8010a56:	460d      	mov	r5, r1
 8010a58:	e019      	b.n	8010a8e <scalbn+0x86>
 8010a5a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8010a5e:	460b      	mov	r3, r1
 8010a60:	3a36      	subs	r2, #54	; 0x36
 8010a62:	4432      	add	r2, r6
 8010a64:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8010a68:	428a      	cmp	r2, r1
 8010a6a:	dd08      	ble.n	8010a7e <scalbn+0x76>
 8010a6c:	2d00      	cmp	r5, #0
 8010a6e:	a120      	add	r1, pc, #128	; (adr r1, 8010af0 <scalbn+0xe8>)
 8010a70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010a74:	da1c      	bge.n	8010ab0 <scalbn+0xa8>
 8010a76:	a120      	add	r1, pc, #128	; (adr r1, 8010af8 <scalbn+0xf0>)
 8010a78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010a7c:	e018      	b.n	8010ab0 <scalbn+0xa8>
 8010a7e:	2a00      	cmp	r2, #0
 8010a80:	dd08      	ble.n	8010a94 <scalbn+0x8c>
 8010a82:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010a86:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010a8a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010a8e:	ec45 4b10 	vmov	d0, r4, r5
 8010a92:	bd70      	pop	{r4, r5, r6, pc}
 8010a94:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8010a98:	da19      	bge.n	8010ace <scalbn+0xc6>
 8010a9a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8010a9e:	429e      	cmp	r6, r3
 8010aa0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8010aa4:	dd0a      	ble.n	8010abc <scalbn+0xb4>
 8010aa6:	a112      	add	r1, pc, #72	; (adr r1, 8010af0 <scalbn+0xe8>)
 8010aa8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d1e2      	bne.n	8010a76 <scalbn+0x6e>
 8010ab0:	a30f      	add	r3, pc, #60	; (adr r3, 8010af0 <scalbn+0xe8>)
 8010ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ab6:	f7ef fd9f 	bl	80005f8 <__aeabi_dmul>
 8010aba:	e7cb      	b.n	8010a54 <scalbn+0x4c>
 8010abc:	a10a      	add	r1, pc, #40	; (adr r1, 8010ae8 <scalbn+0xe0>)
 8010abe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d0b8      	beq.n	8010a38 <scalbn+0x30>
 8010ac6:	a10e      	add	r1, pc, #56	; (adr r1, 8010b00 <scalbn+0xf8>)
 8010ac8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010acc:	e7b4      	b.n	8010a38 <scalbn+0x30>
 8010ace:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010ad2:	3236      	adds	r2, #54	; 0x36
 8010ad4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010ad8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8010adc:	4620      	mov	r0, r4
 8010ade:	4b0c      	ldr	r3, [pc, #48]	; (8010b10 <scalbn+0x108>)
 8010ae0:	2200      	movs	r2, #0
 8010ae2:	e7e8      	b.n	8010ab6 <scalbn+0xae>
 8010ae4:	f3af 8000 	nop.w
 8010ae8:	c2f8f359 	.word	0xc2f8f359
 8010aec:	01a56e1f 	.word	0x01a56e1f
 8010af0:	8800759c 	.word	0x8800759c
 8010af4:	7e37e43c 	.word	0x7e37e43c
 8010af8:	8800759c 	.word	0x8800759c
 8010afc:	fe37e43c 	.word	0xfe37e43c
 8010b00:	c2f8f359 	.word	0xc2f8f359
 8010b04:	81a56e1f 	.word	0x81a56e1f
 8010b08:	43500000 	.word	0x43500000
 8010b0c:	ffff3cb0 	.word	0xffff3cb0
 8010b10:	3c900000 	.word	0x3c900000

08010b14 <_init>:
 8010b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b16:	bf00      	nop
 8010b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010b1a:	bc08      	pop	{r3}
 8010b1c:	469e      	mov	lr, r3
 8010b1e:	4770      	bx	lr

08010b20 <_fini>:
 8010b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b22:	bf00      	nop
 8010b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010b26:	bc08      	pop	{r3}
 8010b28:	469e      	mov	lr, r3
 8010b2a:	4770      	bx	lr
